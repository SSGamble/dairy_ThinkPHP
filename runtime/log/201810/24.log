---------------------------------------------------------------
[ 2018-10-24T01:36:00+08:00 ] 74.120.168.12 180.149.130.153 GET /daily/
[ info ] qingrang.top/daily/ [运行时间：0.069851s][吞吐率：14.32req/s] [内存消耗：2,118.26kb] [文件加载：58]
[ info ] [ LANG ] /var/www/html/daily/thinkphp/lang/zh-cn.php
[ info ] [ ROUTE ] array (
  'type' => 'module',
  'module' => 
  array (
    0 => '',
    1 => NULL,
    2 => NULL,
  ),
)
[ info ] [ HEADER ] array (
  'accept' => 'text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8',
  'user-agent' => 'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_11_4) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/49.0.2623.110 Safari/537.36',
  'connection' => 'Keep-Alive',
  'accept-encoding' => 'gzip, deflate',
  'accept-language' => 'en-US,*',
  'host' => 'qingrang.top',
)
[ info ] [ PARAM ] array (
)
[ info ] [ RUN ] app\admin\controller\Show->notelst[ /var/www/html/daily/application/admin/controller/Show.php ]
[ info ] [ DB ] INIT mysql
[ info ] [ VIEW ] /var/www/html/daily/application/admin/view/show/notelst.html [ array (
  0 => 'list_new',
  1 => 'groups',
  2 => 'groups0',
  3 => 'groups1',
  4 => 'groups2',
  5 => 'groupname',
  6 => 'content',
) ]
[ info ] [ LOG ] INIT File
[ sql ] [ DB ] CONNECT:[ UseTime:0.000744s ] mysql:host=74.120.168.12;dbname=diary;charset=utf8
[ sql ] [ SQL ] SHOW COLUMNS FROM `note` [ RunTime:0.001689s ]
[ sql ] [ SQL ] SELECT `content` FROM `note` WHERE  (  id=32 ) LIMIT 1 [ RunTime:0.000673s ]
[ sql ] [ SQL ] SELECT COUNT(*) AS tp_count FROM `note` WHERE  `groups` <> 'Personal'  AND `publish` = 1 LIMIT 1 [ RunTime:0.001317s ]
[ sql ] [ SQL ] SELECT * FROM `note` WHERE  `groups` <> 'Personal'  AND `publish` = 1 ORDER BY id desc LIMIT 0,6 [ RunTime:0.000516s ]
[ sql ] [ SQL ] SHOW COLUMNS FROM `groups` [ RunTime:0.001020s ]
[ sql ] [ SQL ] SELECT * FROM `groups` WHERE  `groups` <> 'Personal' [ RunTime:0.000495s ]
[ sql ] [ SQL ] SELECT * FROM `groups` WHERE  `parent_id` = 0  AND `groups` <> 'Personal'  AND `id` <> 2 ORDER BY `groups` [ RunTime:0.000491s ]
[ sql ] [ SQL ] SELECT `groups` FROM `groups` WHERE  `parent_id` = 1  AND `groups` <> 'Personal' [ RunTime:0.000302s ]
[ sql ] [ SQL ] SELECT * FROM `groups` WHERE  `parent_id` = 2 ORDER BY `groups` [ RunTime:0.000362s ]
---------------------------------------------------------------
[ 2018-10-24T09:22:29+08:00 ] 74.120.168.12 117.136.64.157 GET /daily/
[ info ] qingrang.top/daily/ [运行时间：0.089153s][吞吐率：11.22req/s] [内存消耗：2,119.09kb] [文件加载：58]
[ info ] [ LANG ] /var/www/html/daily/thinkphp/lang/zh-cn.php
[ info ] [ ROUTE ] array (
  'type' => 'module',
  'module' => 
  array (
    0 => '',
    1 => NULL,
    2 => NULL,
  ),
)
[ info ] [ HEADER ] array (
  'host' => 'qingrang.top',
  'connection' => 'keep-alive',
  'upgrade-insecure-requests' => '1',
  'user-agent' => 'Mozilla/5.0 (Linux; Android 8.1.0; OE106 Build/OPM1.171019.026) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/62.0.3202.84 Mobile Safari/537.36',
  'accept' => 'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8',
  'accept-encoding' => 'gzip, deflate',
  'accept-language' => 'zh-CN,zh;q=0.9',
  'cookie' => 'Hm_lvt_1769181352e9adc950166aada465644e=1540025311,1540089729,1540256454,1540260910',
)
[ info ] [ PARAM ] array (
)
[ info ] [ RUN ] app\admin\controller\Show->notelst[ /var/www/html/daily/application/admin/controller/Show.php ]
[ info ] [ DB ] INIT mysql
[ info ] [ VIEW ] /var/www/html/daily/application/admin/view/show/notelst.html [ array (
  0 => 'list_new',
  1 => 'groups',
  2 => 'groups0',
  3 => 'groups1',
  4 => 'groups2',
  5 => 'groupname',
  6 => 'content',
) ]
[ info ] [ LOG ] INIT File
[ sql ] [ DB ] CONNECT:[ UseTime:0.001720s ] mysql:host=74.120.168.12;dbname=diary;charset=utf8
[ sql ] [ SQL ] SHOW COLUMNS FROM `note` [ RunTime:0.003443s ]
[ sql ] [ SQL ] SELECT `content` FROM `note` WHERE  (  id=32 ) LIMIT 1 [ RunTime:0.001240s ]
[ sql ] [ SQL ] SELECT COUNT(*) AS tp_count FROM `note` WHERE  `groups` <> 'Personal'  AND `publish` = 1 LIMIT 1 [ RunTime:0.003090s ]
[ sql ] [ SQL ] SELECT * FROM `note` WHERE  `groups` <> 'Personal'  AND `publish` = 1 ORDER BY id desc LIMIT 0,6 [ RunTime:0.000789s ]
[ sql ] [ SQL ] SHOW COLUMNS FROM `groups` [ RunTime:0.001194s ]
[ sql ] [ SQL ] SELECT * FROM `groups` WHERE  `groups` <> 'Personal' [ RunTime:0.000395s ]
[ sql ] [ SQL ] SELECT * FROM `groups` WHERE  `parent_id` = 0  AND `groups` <> 'Personal'  AND `id` <> 2 ORDER BY `groups` [ RunTime:0.000584s ]
[ sql ] [ SQL ] SELECT `groups` FROM `groups` WHERE  `parent_id` = 1  AND `groups` <> 'Personal' [ RunTime:0.000339s ]
[ sql ] [ SQL ] SELECT * FROM `groups` WHERE  `parent_id` = 2 ORDER BY `groups` [ RunTime:0.000373s ]
---------------------------------------------------------------
[ 2018-10-24T09:22:35+08:00 ] 74.120.168.12 117.136.64.157 GET /daily/admin/show/notelst/groups/Linux.html
[ info ] qingrang.top/daily/admin/show/notelst/groups/Linux.html [运行时间：0.087706s][吞吐率：11.40req/s] [内存消耗：2,136.74kb] [文件加载：58]
[ info ] [ LANG ] /var/www/html/daily/thinkphp/lang/zh-cn.php
[ info ] [ ROUTE ] array (
  'type' => 'module',
  'module' => 
  array (
    0 => 'admin',
    1 => 'show',
    2 => 'notelst',
  ),
)
[ info ] [ HEADER ] array (
  'host' => 'qingrang.top',
  'connection' => 'keep-alive',
  'upgrade-insecure-requests' => '1',
  'user-agent' => 'Mozilla/5.0 (Linux; Android 8.1.0; OE106 Build/OPM1.171019.026) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/62.0.3202.84 Mobile Safari/537.36',
  'accept' => 'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8',
  'referer' => 'http://qingrang.top/daily/',
  'accept-encoding' => 'gzip, deflate',
  'accept-language' => 'zh-CN,zh;q=0.9',
  'cookie' => 'Hm_lvt_1769181352e9adc950166aada465644e=1540089729,1540256454,1540260910,1540344464; Hm_lpvt_1769181352e9adc950166aada465644e=1540344464',
)
[ info ] [ PARAM ] array (
  'groups' => 'Linux',
)
[ info ] [ RUN ] app\admin\controller\Show->notelst[ /var/www/html/daily/application/admin/controller/Show.php ]
[ info ] [ DB ] INIT mysql
[ info ] [ VIEW ] /var/www/html/daily/application/admin/view/show/notelst.html [ array (
  0 => 'list_new',
  1 => 'groups',
  2 => 'groups0',
  3 => 'groups1',
  4 => 'groups2',
  5 => 'groupname',
  6 => 'content',
) ]
[ info ] [ LOG ] INIT File
[ sql ] [ DB ] CONNECT:[ UseTime:0.000689s ] mysql:host=74.120.168.12;dbname=diary;charset=utf8
[ sql ] [ SQL ] SHOW COLUMNS FROM `note` [ RunTime:0.001638s ]
[ sql ] [ SQL ] SELECT `content` FROM `note` WHERE  (  id=32 ) LIMIT 1 [ RunTime:0.000675s ]
[ sql ] [ SQL ] SELECT COUNT(*) AS tp_count FROM `note` WHERE  `groups` <> 'Personal'  AND `publish` = 1 LIMIT 1 [ RunTime:0.001860s ]
[ sql ] [ SQL ] SELECT * FROM `note` WHERE  `groups` <> 'Personal'  AND `publish` = 1 ORDER BY id desc LIMIT 0,6 [ RunTime:0.000652s ]
[ sql ] [ SQL ] SELECT COUNT(*) AS tp_count FROM `note` WHERE  ( `groups` <> 'Personal' AND `groups` = 'Linux' )  AND `publish` = 1 LIMIT 1 [ RunTime:0.001187s ]
[ sql ] [ SQL ] SELECT * FROM `note` WHERE  ( `groups` <> 'Personal' AND `groups` = 'Linux' )  AND `publish` = 1 ORDER BY id desc LIMIT 0,6 [ RunTime:0.000945s ]
[ sql ] [ SQL ] SHOW COLUMNS FROM `groups` [ RunTime:0.001194s ]
[ sql ] [ SQL ] SELECT * FROM `groups` WHERE  `groups` <> 'Personal' [ RunTime:0.000384s ]
[ sql ] [ SQL ] SELECT * FROM `groups` WHERE  `parent_id` = 0  AND `groups` <> 'Personal'  AND `id` <> 2 ORDER BY `groups` [ RunTime:0.000561s ]
[ sql ] [ SQL ] SELECT `groups` FROM `groups` WHERE  `parent_id` = 1  AND `groups` <> 'Personal' [ RunTime:0.000324s ]
[ sql ] [ SQL ] SELECT * FROM `groups` WHERE  `parent_id` = 2 ORDER BY `groups` [ RunTime:0.000409s ]
---------------------------------------------------------------
[ 2018-10-24T09:22:38+08:00 ] 74.120.168.12 117.136.64.157 GET /daily/admin/show/notelst/groups/Algorithm.html
[ info ] qingrang.top/daily/admin/show/notelst/groups/Algorithm.html [运行时间：0.072959s][吞吐率：13.71req/s] [内存消耗：2,104.94kb] [文件加载：58]
[ info ] [ LANG ] /var/www/html/daily/thinkphp/lang/zh-cn.php
[ info ] [ ROUTE ] array (
  'type' => 'module',
  'module' => 
  array (
    0 => 'admin',
    1 => 'show',
    2 => 'notelst',
  ),
)
[ info ] [ HEADER ] array (
  'host' => 'qingrang.top',
  'connection' => 'keep-alive',
  'upgrade-insecure-requests' => '1',
  'user-agent' => 'Mozilla/5.0 (Linux; Android 8.1.0; OE106 Build/OPM1.171019.026) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/62.0.3202.84 Mobile Safari/537.36',
  'accept' => 'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8',
  'referer' => 'http://qingrang.top/daily/admin/show/notelst/groups/Linux.html',
  'accept-encoding' => 'gzip, deflate',
  'accept-language' => 'zh-CN,zh;q=0.9',
  'cookie' => 'Hm_lvt_1769181352e9adc950166aada465644e=1540089729,1540256454,1540260910,1540344464; Hm_lpvt_1769181352e9adc950166aada465644e=1540344470',
)
[ info ] [ PARAM ] array (
  'groups' => 'Algorithm',
)
[ info ] [ RUN ] app\admin\controller\Show->notelst[ /var/www/html/daily/application/admin/controller/Show.php ]
[ info ] [ DB ] INIT mysql
[ info ] [ VIEW ] /var/www/html/daily/application/admin/view/show/notelst.html [ array (
  0 => 'list_new',
  1 => 'groups',
  2 => 'groups0',
  3 => 'groups1',
  4 => 'groups2',
  5 => 'groupname',
  6 => 'content',
) ]
[ info ] [ LOG ] INIT File
[ sql ] [ DB ] CONNECT:[ UseTime:0.000628s ] mysql:host=74.120.168.12;dbname=diary;charset=utf8
[ sql ] [ SQL ] SHOW COLUMNS FROM `note` [ RunTime:0.001619s ]
[ sql ] [ SQL ] SELECT `content` FROM `note` WHERE  (  id=32 ) LIMIT 1 [ RunTime:0.000584s ]
[ sql ] [ SQL ] SELECT COUNT(*) AS tp_count FROM `note` WHERE  `groups` <> 'Personal'  AND `publish` = 1 LIMIT 1 [ RunTime:0.001940s ]
[ sql ] [ SQL ] SELECT * FROM `note` WHERE  `groups` <> 'Personal'  AND `publish` = 1 ORDER BY id desc LIMIT 0,6 [ RunTime:0.000491s ]
[ sql ] [ SQL ] SELECT COUNT(*) AS tp_count FROM `note` WHERE  ( `groups` <> 'Personal' AND `groups` = 'Algorithm' )  AND `publish` = 1 LIMIT 1 [ RunTime:0.001082s ]
[ sql ] [ SQL ] SELECT * FROM `note` WHERE  ( `groups` <> 'Personal' AND `groups` = 'Algorithm' )  AND `publish` = 1 ORDER BY id desc LIMIT 0,6 [ RunTime:0.001703s ]
[ sql ] [ SQL ] SHOW COLUMNS FROM `groups` [ RunTime:0.001012s ]
[ sql ] [ SQL ] SELECT * FROM `groups` WHERE  `groups` <> 'Personal' [ RunTime:0.000353s ]
[ sql ] [ SQL ] SELECT * FROM `groups` WHERE  `parent_id` = 0  AND `groups` <> 'Personal'  AND `id` <> 2 ORDER BY `groups` [ RunTime:0.000441s ]
[ sql ] [ SQL ] SELECT `groups` FROM `groups` WHERE  `parent_id` = 1  AND `groups` <> 'Personal' [ RunTime:0.000298s ]
[ sql ] [ SQL ] SELECT * FROM `groups` WHERE  `parent_id` = 2 ORDER BY `groups` [ RunTime:0.000371s ]
---------------------------------------------------------------
[ 2018-10-24T09:22:40+08:00 ] 74.120.168.12 117.136.64.157 GET /daily/admin/show/shownote/id/210.html
[ info ] qingrang.top/daily/admin/show/shownote/id/210.html [运行时间：0.077872s][吞吐率：12.84req/s] [内存消耗：1,947.18kb] [文件加载：54]
[ info ] [ LANG ] /var/www/html/daily/thinkphp/lang/zh-cn.php
[ info ] [ ROUTE ] array (
  'type' => 'module',
  'module' => 
  array (
    0 => 'admin',
    1 => 'show',
    2 => 'shownote',
  ),
)
[ info ] [ HEADER ] array (
  'host' => 'qingrang.top',
  'connection' => 'keep-alive',
  'upgrade-insecure-requests' => '1',
  'user-agent' => 'Mozilla/5.0 (Linux; Android 8.1.0; OE106 Build/OPM1.171019.026) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/62.0.3202.84 Mobile Safari/537.36',
  'accept' => 'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8',
  'referer' => 'http://qingrang.top/daily/admin/show/notelst/groups/Algorithm.html',
  'accept-encoding' => 'gzip, deflate',
  'accept-language' => 'zh-CN,zh;q=0.9',
  'cookie' => 'Hm_lvt_1769181352e9adc950166aada465644e=1540089729,1540256454,1540260910,1540344464; Hm_lpvt_1769181352e9adc950166aada465644e=1540344473',
)
[ info ] [ PARAM ] array (
  'id' => '210',
)
[ info ] [ RUN ] app\admin\controller\Show->showNote[ /var/www/html/daily/application/admin/controller/Show.php ]
[ info ] [ DB ] INIT mysql
[ info ] [ VIEW ] /var/www/html/daily/application/admin/view/show/shownote.html [ array (
  0 => 'note',
  1 => 'groups',
) ]
[ info ] [ LOG ] INIT File
[ sql ] [ DB ] CONNECT:[ UseTime:0.000713s ] mysql:host=74.120.168.12;dbname=diary;charset=utf8
[ sql ] [ SQL ] SHOW COLUMNS FROM `note` [ RunTime:0.002131s ]
[ sql ] [ SQL ] SELECT * FROM `note` WHERE  `id` = 210 LIMIT 1 [ RunTime:0.000784s ]
[ sql ] [ SQL ] SHOW COLUMNS FROM `groups` [ RunTime:0.001176s ]
[ sql ] [ SQL ] SELECT * FROM `groups` [ RunTime:0.000321s ]
---------------------------------------------------------------
[ 2018-10-24T09:23:46+08:00 ] 74.120.168.12 117.136.64.157 GET /daily/
[ info ] qingrang.top/daily/ [运行时间：0.119469s][吞吐率：8.37req/s] [内存消耗：2,119.09kb] [文件加载：58]
[ info ] [ LANG ] /var/www/html/daily/thinkphp/lang/zh-cn.php
[ info ] [ ROUTE ] array (
  'type' => 'module',
  'module' => 
  array (
    0 => '',
    1 => NULL,
    2 => NULL,
  ),
)
[ info ] [ HEADER ] array (
  'host' => 'qingrang.top',
  'connection' => 'keep-alive',
  'upgrade-insecure-requests' => '1',
  'user-agent' => 'Mozilla/5.0 (Linux; Android 8.1.0; OE106 Build/OPM1.171019.026; wv) AppleWebKit/537.36 (KHTML, like Gecko) Version/4.0 Chrome/62.0.3202.84 Mobile Safari/537.36',
  'x-requested-with' => 'XBrowser',
  'accept' => 'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8',
  'accept-encoding' => 'gzip, deflate',
  'accept-language' => 'zh-CN,zh-TW;q=0.9,en-US;q=0.8',
  'cookie' => 'PHPSESSID=srurfvlfi16u5e3smajhka1ir2',
)
[ info ] [ PARAM ] array (
)
[ info ] [ RUN ] app\admin\controller\Show->notelst[ /var/www/html/daily/application/admin/controller/Show.php ]
[ info ] [ DB ] INIT mysql
[ info ] [ VIEW ] /var/www/html/daily/application/admin/view/show/notelst.html [ array (
  0 => 'list_new',
  1 => 'groups',
  2 => 'groups0',
  3 => 'groups1',
  4 => 'groups2',
  5 => 'groupname',
  6 => 'content',
) ]
[ info ] [ LOG ] INIT File
[ sql ] [ DB ] CONNECT:[ UseTime:0.001003s ] mysql:host=74.120.168.12;dbname=diary;charset=utf8
[ sql ] [ SQL ] SHOW COLUMNS FROM `note` [ RunTime:0.001990s ]
[ sql ] [ SQL ] SELECT `content` FROM `note` WHERE  (  id=32 ) LIMIT 1 [ RunTime:0.000678s ]
[ sql ] [ SQL ] SELECT COUNT(*) AS tp_count FROM `note` WHERE  `groups` <> 'Personal'  AND `publish` = 1 LIMIT 1 [ RunTime:0.001868s ]
[ sql ] [ SQL ] SELECT * FROM `note` WHERE  `groups` <> 'Personal'  AND `publish` = 1 ORDER BY id desc LIMIT 0,6 [ RunTime:0.000735s ]
[ sql ] [ SQL ] SHOW COLUMNS FROM `groups` [ RunTime:0.001439s ]
[ sql ] [ SQL ] SELECT * FROM `groups` WHERE  `groups` <> 'Personal' [ RunTime:0.001040s ]
[ sql ] [ SQL ] SELECT * FROM `groups` WHERE  `parent_id` = 0  AND `groups` <> 'Personal'  AND `id` <> 2 ORDER BY `groups` [ RunTime:0.000599s ]
[ sql ] [ SQL ] SELECT `groups` FROM `groups` WHERE  `parent_id` = 1  AND `groups` <> 'Personal' [ RunTime:0.000434s ]
[ sql ] [ SQL ] SELECT * FROM `groups` WHERE  `parent_id` = 2 ORDER BY `groups` [ RunTime:0.000529s ]
---------------------------------------------------------------
[ 2018-10-24T09:23:56+08:00 ] 74.120.168.12 117.136.64.157 GET /daily/admin/show/notelst/groups/Algorithm.html
[ info ] qingrang.top/daily/admin/show/notelst/groups/Algorithm.html [运行时间：0.096002s][吞吐率：10.42req/s] [内存消耗：2,105.23kb] [文件加载：58]
[ info ] [ LANG ] /var/www/html/daily/thinkphp/lang/zh-cn.php
[ info ] [ ROUTE ] array (
  'type' => 'module',
  'module' => 
  array (
    0 => 'admin',
    1 => 'show',
    2 => 'notelst',
  ),
)
[ info ] [ HEADER ] array (
  'host' => 'qingrang.top',
  'connection' => 'keep-alive',
  'upgrade-insecure-requests' => '1',
  'user-agent' => 'Mozilla/5.0 (Linux; Android 8.1.0; OE106 Build/OPM1.171019.026; wv) AppleWebKit/537.36 (KHTML, like Gecko) Version/4.0 Chrome/62.0.3202.84 Mobile Safari/537.36',
  'accept' => 'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8',
  'referer' => 'http://qingrang.top/daily/',
  'accept-encoding' => 'gzip, deflate',
  'accept-language' => 'zh-CN,zh-TW;q=0.9,en-US;q=0.8',
  'cookie' => 'Hm_lvt_1769181352e9adc950166aada465644e=1540344543; Hm_lpvt_1769181352e9adc950166aada465644e=1540344543; PHPSESSID=srurfvlfi16u5e3smajhka1ir2',
  'x-requested-with' => 'com.mmbox.xbrowser',
)
[ info ] [ PARAM ] array (
  'groups' => 'Algorithm',
)
[ info ] [ RUN ] app\admin\controller\Show->notelst[ /var/www/html/daily/application/admin/controller/Show.php ]
[ info ] [ DB ] INIT mysql
[ info ] [ VIEW ] /var/www/html/daily/application/admin/view/show/notelst.html [ array (
  0 => 'list_new',
  1 => 'groups',
  2 => 'groups0',
  3 => 'groups1',
  4 => 'groups2',
  5 => 'groupname',
  6 => 'content',
) ]
[ info ] [ LOG ] INIT File
[ sql ] [ DB ] CONNECT:[ UseTime:0.000825s ] mysql:host=74.120.168.12;dbname=diary;charset=utf8
[ sql ] [ SQL ] SHOW COLUMNS FROM `note` [ RunTime:0.001606s ]
[ sql ] [ SQL ] SELECT `content` FROM `note` WHERE  (  id=32 ) LIMIT 1 [ RunTime:0.000593s ]
[ sql ] [ SQL ] SELECT COUNT(*) AS tp_count FROM `note` WHERE  `groups` <> 'Personal'  AND `publish` = 1 LIMIT 1 [ RunTime:0.001457s ]
[ sql ] [ SQL ] SELECT * FROM `note` WHERE  `groups` <> 'Personal'  AND `publish` = 1 ORDER BY id desc LIMIT 0,6 [ RunTime:0.000650s ]
[ sql ] [ SQL ] SELECT COUNT(*) AS tp_count FROM `note` WHERE  ( `groups` <> 'Personal' AND `groups` = 'Algorithm' )  AND `publish` = 1 LIMIT 1 [ RunTime:0.001350s ]
[ sql ] [ SQL ] SELECT * FROM `note` WHERE  ( `groups` <> 'Personal' AND `groups` = 'Algorithm' )  AND `publish` = 1 ORDER BY id desc LIMIT 0,6 [ RunTime:0.001984s ]
[ sql ] [ SQL ] SHOW COLUMNS FROM `groups` [ RunTime:0.001324s ]
[ sql ] [ SQL ] SELECT * FROM `groups` WHERE  `groups` <> 'Personal' [ RunTime:0.000646s ]
[ sql ] [ SQL ] SELECT * FROM `groups` WHERE  `parent_id` = 0  AND `groups` <> 'Personal'  AND `id` <> 2 ORDER BY `groups` [ RunTime:0.000518s ]
[ sql ] [ SQL ] SELECT `groups` FROM `groups` WHERE  `parent_id` = 1  AND `groups` <> 'Personal' [ RunTime:0.000373s ]
[ sql ] [ SQL ] SELECT * FROM `groups` WHERE  `parent_id` = 2 ORDER BY `groups` [ RunTime:0.000364s ]
---------------------------------------------------------------
[ 2018-10-24T09:24:00+08:00 ] 74.120.168.12 117.136.64.157 GET /daily/admin/show/shownote/id/210.html
[ info ] qingrang.top/daily/admin/show/shownote/id/210.html [运行时间：0.068002s][吞吐率：14.71req/s] [内存消耗：1,947.76kb] [文件加载：54]
[ info ] [ LANG ] /var/www/html/daily/thinkphp/lang/zh-cn.php
[ info ] [ ROUTE ] array (
  'type' => 'module',
  'module' => 
  array (
    0 => 'admin',
    1 => 'show',
    2 => 'shownote',
  ),
)
[ info ] [ HEADER ] array (
  'host' => 'qingrang.top',
  'connection' => 'keep-alive',
  'upgrade-insecure-requests' => '1',
  'user-agent' => 'Mozilla/5.0 (Linux; Android 8.1.0; OE106 Build/OPM1.171019.026; wv) AppleWebKit/537.36 (KHTML, like Gecko) Version/4.0 Chrome/62.0.3202.84 Mobile Safari/537.36',
  'accept' => 'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8',
  'referer' => 'http://qingrang.top/daily/admin/show/notelst/groups/Algorithm.html',
  'accept-encoding' => 'gzip, deflate',
  'accept-language' => 'zh-CN,zh-TW;q=0.9,en-US;q=0.8',
  'cookie' => 'Hm_lvt_1769181352e9adc950166aada465644e=1540344543; Hm_lpvt_1769181352e9adc950166aada465644e=1540344551; PHPSESSID=srurfvlfi16u5e3smajhka1ir2',
  'x-requested-with' => 'com.mmbox.xbrowser',
)
[ info ] [ PARAM ] array (
  'id' => '210',
)
[ info ] [ RUN ] app\admin\controller\Show->showNote[ /var/www/html/daily/application/admin/controller/Show.php ]
[ info ] [ DB ] INIT mysql
[ info ] [ VIEW ] /var/www/html/daily/application/admin/view/show/shownote.html [ array (
  0 => 'note',
  1 => 'groups',
) ]
[ info ] [ LOG ] INIT File
[ sql ] [ DB ] CONNECT:[ UseTime:0.000650s ] mysql:host=74.120.168.12;dbname=diary;charset=utf8
[ sql ] [ SQL ] SHOW COLUMNS FROM `note` [ RunTime:0.001412s ]
[ sql ] [ SQL ] SELECT * FROM `note` WHERE  `id` = 210 LIMIT 1 [ RunTime:0.000561s ]
[ sql ] [ SQL ] SHOW COLUMNS FROM `groups` [ RunTime:0.000886s ]
[ sql ] [ SQL ] SELECT * FROM `groups` [ RunTime:0.000410s ]
---------------------------------------------------------------
[ 2018-10-24T17:53:19+08:00 ] 74.120.168.12 74.120.168.12 GET /daily/admin/login/index.html
[ info ] qingrang.top/daily/admin/login/index.html [运行时间：0.043758s][吞吐率：22.85req/s] [内存消耗：1,339.92kb] [文件加载：47]
[ info ] [ LANG ] /var/www/html/daily/thinkphp/lang/zh-cn.php
[ info ] [ ROUTE ] array (
  'type' => 'module',
  'module' => 
  array (
    0 => 'admin',
    1 => 'login',
    2 => 'index',
  ),
)
[ info ] [ HEADER ] array (
  'host' => 'qingrang.top',
  'upgrade-insecure-requests' => '1',
  'user-agent' => 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/69.0.3497.100 Safari/537.36',
  'accept' => 'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8',
  'accept-encoding' => 'gzip, deflate',
  'accept-language' => 'zh-CN,zh;q=0.9,la;q=0.8,en;q=0.7,lb;q=0.6',
  'cookie' => 'Hm_lvt_1769181352e9adc950166aada465644e=1539846308,1540133692,1540187497',
  'connection' => 'close',
)
[ info ] [ PARAM ] array (
)
[ info ] [ RUN ] app\admin\controller\Login->index[ /var/www/html/daily/application/admin/controller/Login.php ]
[ info ] [ VIEW ] /var/www/html/daily/application/admin/view/login/index.html [ array (
) ]
[ info ] [ LOG ] INIT File
---------------------------------------------------------------
[ 2018-10-24T18:42:54+08:00 ] 74.120.168.12 74.120.168.12 POST /daily/admin/login/index.html
[ info ] qingrang.top/daily/admin/login/index.html [运行时间：0.059668s][吞吐率：16.76req/s] [内存消耗：1,922.30kb] [文件加载：54]
[ info ] [ LANG ] /var/www/html/daily/thinkphp/lang/zh-cn.php
[ info ] [ ROUTE ] array (
  'type' => 'module',
  'module' => 
  array (
    0 => 'admin',
    1 => 'login',
    2 => 'index',
  ),
)
[ info ] [ HEADER ] array (
  'host' => 'qingrang.top',
  'content-length' => '8',
  'cache-control' => 'max-age=0',
  'origin' => 'http://qingrang.top',
  'upgrade-insecure-requests' => '1',
  'content-type' => 'application/x-www-form-urlencoded',
  'user-agent' => 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/69.0.3497.100 Safari/537.36',
  'accept' => 'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8',
  'referer' => 'http://qingrang.top/daily/admin/login/index.html',
  'accept-encoding' => 'gzip, deflate',
  'accept-language' => 'zh-CN,zh;q=0.9,la;q=0.8,en;q=0.7,lb;q=0.6',
  'cookie' => 'Hm_lvt_1769181352e9adc950166aada465644e=1539846308,1540133692,1540187497',
  'connection' => 'close',
)
[ info ] [ PARAM ] array (
  'pwd' => 'shao',
)
[ info ] [ RUN ] app\admin\controller\Login->index[ /var/www/html/daily/application/admin/controller/Login.php ]
[ info ] [ DB ] INIT mysql
[ info ] [ SESSION ] INIT array (
  'id' => '',
  'var_session_id' => '',
  'prefix' => 'think',
  'type' => '',
  'auto_start' => true,
)
[ info ] [ LOG ] INIT File
[ sql ] [ DB ] CONNECT:[ UseTime:0.000971s ] mysql:host=74.120.168.12;dbname=diary;charset=utf8
[ sql ] [ SQL ] SHOW COLUMNS FROM `admin` [ RunTime:0.002496s ]
[ sql ] [ SQL ] SELECT * FROM `admin` WHERE  `id` = 1 LIMIT 1 [ RunTime:0.000551s ]
---------------------------------------------------------------
[ 2018-10-24T18:42:54+08:00 ] 74.120.168.12 74.120.168.12 GET /daily/admin/note
[ info ] qingrang.top/daily/admin/note [运行时间：0.076821s][吞吐率：13.02req/s] [内存消耗：2,238.88kb] [文件加载：56]
[ info ] [ LANG ] /var/www/html/daily/thinkphp/lang/zh-cn.php
[ info ] [ ROUTE ] array (
  'type' => 'module',
  'module' => 
  array (
    0 => 'admin',
    1 => 'note',
    2 => NULL,
  ),
)
[ info ] [ HEADER ] array (
  'host' => 'qingrang.top',
  'cache-control' => 'max-age=0',
  'upgrade-insecure-requests' => '1',
  'user-agent' => 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/69.0.3497.100 Safari/537.36',
  'accept' => 'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8',
  'referer' => 'http://qingrang.top/daily/admin/login/index.html',
  'accept-encoding' => 'gzip, deflate',
  'accept-language' => 'zh-CN,zh;q=0.9,la;q=0.8,en;q=0.7,lb;q=0.6',
  'cookie' => 'Hm_lvt_1769181352e9adc950166aada465644e=1539846308,1540133692,1540187497; PHPSESSID=cfl1sikl9c45c63c655g4q7rd4',
  'connection' => 'close',
)
[ info ] [ PARAM ] array (
)
[ info ] [ SESSION ] INIT array (
  'id' => '',
  'var_session_id' => '',
  'prefix' => 'think',
  'type' => '',
  'auto_start' => true,
)
[ info ] [ RUN ] app\admin\controller\Note->notelst[ /var/www/html/daily/application/admin/controller/Note.php ]
[ info ] [ DB ] INIT mysql
[ info ] [ VIEW ] /var/www/html/daily/application/admin/view/note/notelst.html [ array (
  0 => 'stickList',
  1 => 'hide',
  2 => 'list',
  3 => 'list_new',
  4 => 'groups',
  5 => 'groups0',
  6 => 'groups1',
  7 => 'groups2',
  8 => 'count',
  9 => 'year',
  10 => 'default_num',
) ]
[ info ] [ LOG ] INIT File
[ sql ] [ DB ] CONNECT:[ UseTime:0.000617s ] mysql:host=74.120.168.12;dbname=diary;charset=utf8
[ sql ] [ SQL ] SHOW COLUMNS FROM `note` [ RunTime:0.001415s ]
[ sql ] [ SQL ] SELECT * FROM `note` WHERE  `groups` <> 'Personal'  AND `is_show` = 1 ORDER BY date desc,id desc [ RunTime:0.003027s ]
[ sql ] [ SQL ] SELECT * FROM `note` WHERE  `groups` <> 'Personal' ORDER BY id desc LIMIT 5 [ RunTime:0.000541s ]
[ sql ] [ SQL ] SHOW COLUMNS FROM `config` [ RunTime:0.000989s ]
[ sql ] [ SQL ] SELECT * FROM `config` WHERE  `name` = 'hide' LIMIT 1 [ RunTime:0.000365s ]
[ sql ] [ SQL ] SELECT * FROM `note` WHERE  `id` < 5 [ RunTime:0.000614s ]
[ sql ] [ SQL ] SHOW COLUMNS FROM `groups` [ RunTime:0.000886s ]
[ sql ] [ SQL ] SELECT * FROM `groups` [ RunTime:0.000317s ]
[ sql ] [ SQL ] SELECT * FROM `groups` WHERE  `parent_id` = 0  AND `id` <> 2 ORDER BY `groups` [ RunTime:0.000473s ]
[ sql ] [ SQL ] SELECT `groups` FROM `groups` WHERE  `parent_id` = 1 [ RunTime:0.000335s ]
[ sql ] [ SQL ] SELECT * FROM `groups` WHERE  `parent_id` = 2 ORDER BY `groups` [ RunTime:0.000459s ]
[ sql ] [ SQL ] SELECT COUNT(*) AS tp_count FROM `note` WHERE  `groups` = 'Default' LIMIT 1 [ RunTime:0.001319s ]
[ sql ] [ SQL ] SELECT COUNT(*) AS tp_count FROM `note` LIMIT 1 [ RunTime:0.000272s ]
[ sql ] [ SQL ] SHOW COLUMNS FROM `yearlist` [ RunTime:0.001052s ]
[ sql ] [ SQL ] SELECT DISTINCT  `year` FROM `yearlist` ORDER BY year desc [ RunTime:0.000686s ]
---------------------------------------------------------------
[ 2018-10-24T18:46:39+08:00 ] 74.120.168.12 74.120.168.12 GET /daily/admin/note/editnote/id/212.html
[ info ] qingrang.top/daily/admin/note/editnote/id/212.html [运行时间：0.064708s][吞吐率：15.45req/s] [内存消耗：2,066.09kb] [文件加载：56]
[ info ] [ LANG ] /var/www/html/daily/thinkphp/lang/zh-cn.php
[ info ] [ ROUTE ] array (
  'type' => 'module',
  'module' => 
  array (
    0 => 'admin',
    1 => 'note',
    2 => 'editnote',
  ),
)
[ info ] [ HEADER ] array (
  'host' => 'qingrang.top',
  'upgrade-insecure-requests' => '1',
  'user-agent' => 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/69.0.3497.100 Safari/537.36',
  'accept' => 'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8',
  'referer' => 'http://qingrang.top/daily/admin/note',
  'accept-encoding' => 'gzip, deflate',
  'accept-language' => 'zh-CN,zh;q=0.9,la;q=0.8,en;q=0.7,lb;q=0.6',
  'cookie' => 'Hm_lvt_1769181352e9adc950166aada465644e=1539846308,1540133692,1540187497; PHPSESSID=cfl1sikl9c45c63c655g4q7rd4',
  'connection' => 'close',
)
[ info ] [ PARAM ] array (
  'id' => '212',
)
[ info ] [ SESSION ] INIT array (
  'id' => '',
  'var_session_id' => '',
  'prefix' => 'think',
  'type' => '',
  'auto_start' => true,
)
[ info ] [ RUN ] app\admin\controller\Note->editNote[ /var/www/html/daily/application/admin/controller/Note.php ]
[ info ] [ DB ] INIT mysql
[ info ] [ VIEW ] /var/www/html/daily/application/admin/view/note/editnote.html [ array (
  0 => 'note',
  1 => 'groups',
) ]
[ info ] [ LOG ] INIT File
[ sql ] [ DB ] CONNECT:[ UseTime:0.000689s ] mysql:host=74.120.168.12;dbname=diary;charset=utf8
[ sql ] [ SQL ] SHOW COLUMNS FROM `note` [ RunTime:0.001902s ]
[ sql ] [ SQL ] SELECT * FROM `note` WHERE  `id` = 212 LIMIT 1 [ RunTime:0.000752s ]
[ sql ] [ SQL ] SHOW COLUMNS FROM `groups` [ RunTime:0.000924s ]
[ sql ] [ SQL ] SELECT * FROM `groups` [ RunTime:0.000484s ]
---------------------------------------------------------------
[ 2018-10-24T19:49:59+08:00 ] 74.120.168.12 74.120.168.12 POST /daily/admin/note/updatenote/id/212.html
[ info ] qingrang.top/daily/admin/note/updatenote/id/212.html [运行时间：0.082743s][吞吐率：12.09req/s] [内存消耗：2,293.72kb] [文件加载：58]
[ info ] [ LANG ] /var/www/html/daily/thinkphp/lang/zh-cn.php
[ info ] [ ROUTE ] array (
  'type' => 'module',
  'module' => 
  array (
    0 => 'admin',
    1 => 'note',
    2 => 'updatenote',
  ),
)
[ info ] [ HEADER ] array (
  'host' => 'qingrang.top',
  'content-length' => '81755',
  'cache-control' => 'max-age=0',
  'origin' => 'http://qingrang.top',
  'upgrade-insecure-requests' => '1',
  'content-type' => 'application/x-www-form-urlencoded',
  'user-agent' => 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/69.0.3497.100 Safari/537.36',
  'accept' => 'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8',
  'referer' => 'http://qingrang.top/daily/admin/note/editnote/id/212.html',
  'accept-encoding' => 'gzip, deflate',
  'accept-language' => 'zh-CN,zh;q=0.9,la;q=0.8,en;q=0.7,lb;q=0.6',
  'cookie' => 'Hm_lvt_1769181352e9adc950166aada465644e=1539846308,1540133692,1540187497; PHPSESSID=cfl1sikl9c45c63c655g4q7rd4',
  'connection' => 'close',
)
[ info ] [ PARAM ] array (
  'summary' => 'Linux 编程基础，包含进程，信号，进程间通信，网络编程等基础知识',
  'content' => '# Linux - C 编程
[TOC]
## 进程
### 孤儿进程 和 僵尸进程
Linux 系统中有两种特殊的进程：孤儿进程和僵尸进程。

父进程应负责子进程的回收工作，但父子进程是异步运行的，父进程不知道什么时候接收子进程，父进程甚至会在子进程结束之前结束。若父进程在子进程退出之前退出，子进程就会变成孤儿进程，此时子进程会被进程 init 收养，之后 init 会代替其原本的父进程完成状态收集工作。

当进程调用了 exit() 函数后，该进程并不是马上消失，而是留下一个称为僵尸进程的数据结构。僵尸进程是 Linux 系统中的另一种特殊进程，它几乎放弃进程退出前占用的所有内存，既没有可执行代码也不能被调度，只在进程列表中保留一个位置，记载进程的退出状态等信息供父进程收集。若父进程中没有回收子进程的代码，子进程将会一直处于僵尸态。

### 进程标识符
下列函数返回这些标识符，其返回值类型 pid_t，uid_t，gid_t 等都是宏定义，实质是 `unsigned int`
```
//头文件
#include <sys/types.h>
#include <unistd.h>

//返回:调用进程的 进程ID
pid_t getpid(void)	

//返回:调用进程的 父进程ID
pid_t getppid(void);

//返回:调用进程的 实际用户ID
uid_t getuid(void)

//返回:调用进程的 有效用户ID
uid_t geteuid(void)

//返回:调用进程的 实际组ID
gid_t getgid (void)

//返回:调用进程的 有效组ID
gid_t getegid(void)
```
### 进程同步
Linux 提供了 wait() 函数和 waitpid() 函数来获取进程状态，实现进程同步。这两个函数用于父、子进程之间的同步，即确保子进程一定先于父进程执行并终止。
```
#include <sys/types.h>
#include <sys/wait.h>
pid_t wait(int *status) ;
pid_t waitpid(pid_t pid , int * status, int options) ;
//两个函数返回：若成功则为 进程ID，若出错则为 -1。
```
### 实验：fork() 函数的使用
fork() 函数:
创建成功，父进程返回子进程的 id ，子进程返回 0
创建失败，父进程返回 -1
>使用 fork() 函数创建一个进程，进程创建成功后使父进程和子进程分别执行不同的功能

```
/*---------------------------------------------------
使用 fork() 函数创建一个进程，进程创建成功后使父进程和子进程分别执行不同的功能
-----------------------------------------------------*/
#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
int main()
{
	//调用fork()函数创建子进程
	pid_t pid = fork();
	if (pid == -1)	//创建失败
	{
		perror("fork error");
		exit(1);	//退出进程，指定返回值1
	}
	else if (pid > 0)	//创建成功 - 父进程
	{
		printf("父进程,pid=%d,ppid=%d\\n", getpid(), getppid());
	}
	else if (pid == 0)	//创建成功 - 子进程
	{
		printf("子进程,pid=%d,ppid=%d\\n", getpid(), getppid());
	}
	printf("........finish..........\\n");
	return 0;
}

/*========================================================================
父进程,pid=3720,ppid=3514
........finish..........
子进程,pid=3721,ppid=2012
........finish..........
========================================================================*/

```

- 多次执行文件 test_fork会发现这种情况: child process 后输出的 ppid 不等于 parent process 的 pid,而等于1。这是什么原因?
答：父进程先于子进程终止,子进程变为“孤儿进程”,后由进程 init 接收。

>使用 fork() 函数在循环中创建 5 个子进程，使子进程分别打印各自的编号和 pid

```
/*---------------------------------------------------
使用 fork() 函数在循环中创建 5 个子进程，使子进程分别打印各自的编号和 pid
-----------------------------------------------------*/
#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>

int main()
{
	pid_t pid;
	int i;
	//循环创建进程
	for (i = 0; i<5; i++){				
		if ((pid = fork()) == 0)	//若当前进程为子进程，便跳出循环
			break;
	}
	if (pid == -1){
		perror("fork error");
		exit(1);
	}
	else if (pid>0){	//父进程
		//sleep(5);	//父进程等待所有子进程执行结束后再执行
		printf("parent process:pid=%d\\n", getpid());
	}
	else if (pid == 0){		//子进程
		//sleep(i);	//每个子进程分别沉睡不同的时间
		printf("I am child=%d,pid=%d\\n", i + 1, getpid());
	}
	return 0;
}

/*========================================================================
>不 sleep 的输出：
zhangliren@ubuntu:~/Documents$ ./a.out 
I am child=2,pid=3814
parent process:pid=3812
I am child=1,pid=3813
I am child=4,pid=3816
zhangliren@ubuntu:~/Documents$ I am child=5,pid=3817
I am child=3,pid=3815
|(终端提示符)
----------------------------------------------------------
>sleep() 后的输出：
I am child=1,pid=3843
I am child=2,pid=3844
I am child=3,pid=3845
I am child=4,pid=3846
I am child=5,pid=3847
parent process:pid=3842
========================================================================*/
```

- 观察输出结果,会发现输出结果有以下问题
（1）子进程的编号不是递增的
（2）终端提示符后面仍有子进程信息打印,而命令提示符在最后一行的开头闪烁
这是为什么?

答：（1）父进程先于子进程终止。在 Linux 系统中,子进程应由父进程回收,但是当子进程被创建后,它与父进程及其他进程共同竟争系统资源,所以父子进程执行的顺序是不确定的,终止的先后顺序也是不确定的。此处创建了 5 个子进程,这 5 个子进程与父进程共同竞争资源。6 个进程使用 CPU 的顺序不确定,因此子进程的编号不是递增关系,父进程在子进程尚未全部终止前便终止。
（2）父进程是一个前台进程。当它终止退出后,会释放命令提示符,输出当前工作路径及端提示符[ thelma@ localhost~],但此时尚有子进程仍在执行,终端仍有信息输出,因此命令提示符会出现在输出结果最后一行的开头。

## 信号和信号处理
### 信号的概念
信号的本质是软件中断。很多比较重要的应用程序都需处理信号。信号是异步事件的典型实例，即产生信号的事件对进程而言是随机出现的。进程不能只是测试一个变量(例如errno)来判别是否发生了一个信号，而是必须告诉内核「在此信号发生时，请执行指定操作」。

可以要求系统在某个信号出现时按照下列三种方式中的一种进行操作：
1. 忽略此信号。大多数信号都可使用这种方式进行处理，但有两种信号却决不能被忽略。它们是：SIGKILL 和 SIGSTOP。这两种信号不能被忽略的原因是：它们向超级用户提供一种使进程终止或停止的可靠方法。
2. 捕捉信号。为了做到这一点要通知内核在某种信号发生时，调用一个用户函数。在用户函数中，可执行用户希望对这种事件进行的处理。
3. 执行系统默认动作。每一种信号都有系统默认动作。注意，对大多数信号的系统默认动作是终止该进程。

### 常见函数
#### kill
给指定进程发送信号

函数声明：`int kill(pid_t,int sig)`
pid：接收信号的进程ID
sig：要发送的信号编号
#### raise
发送指定信号给当前进程自身

函数声明：`int raise(int sig)`

#### pause
暂停进程，接收到任何信号后恢复

函数声明：`int pause()`

#### alarm
计时器，驱使内核在指定秒数后发送 SIGALRM 信号到调用该函数的进程，进程收到该信号后默认终止运行。

函数声明：`unsigned int alarm(unsigned int seconds)`

#### signal
捕获信号后，执行指定函数

函数声明：
`typedef void (* sighandler_t)(int);`
`sighandler_t signal(int signum,sighandler_t handler);`

signum：信号编号
handler：自定义信号处理函数的函数指针

### 实验：李纳斯的第一个程序
```
/*---------------------------------------------------------------------------------------------------------
李纳斯的第一个程序：两个进程，一个向屏幕输出 A，一个向屏幕输出 B，两进程轮换输出，中间间隔 1 秒钟。如此反复，直到用户按下 ctl + c 结束两个进程（ctl + c 就是向当前正在运行的所有进程发送SIGINT信号）。
---------------------------------------------------------------------------------------------------------*/
#include "stdio.h"
#include "sys/types.h"
#include "signal.h"

pid_t pid;

//自定义信号处理函数。
//父进程打印 AAA，子进程打印 BBB
void sigusr1_handler(int n)
{
	if(pid > 0)
		printf("AAAA\\n");
	else
		printf("BBBB\\n");

	alarm(1);//计时器，1s 后发送 SIGALRM 信号到进程
}

void sigalrm_handler(int n)
{
	if(pid > 0){	//父进程
		kill(pid, SIGUSR1); //发送 SIGUSR1 信号给 pid 进程
	}
	else{	//子进程
		kill(getppid(), SIGUSR1);//发送 SIGUSR1 信号给 父进程
	}
}

int main()
{
	//在fork()之前设置的信号处理函数会被子进程继承
	signal(SIGALRM, sigalrm_handler);//捕获 SIGALRM 信号，执行 sigalrm_handler
	signal(SIGUSR1, sigusr1_handler);//用户定义的信号，用于捕获 SIGUSR1 信号执行处理函数 sigusr1_handler

	pid = fork();
	if (pid > 0)	//父进程
		raise(SIGUSR1);	//发送 SIGUSR1 信号给当前进程

	while(1)
		pause();	//进程挂起，等待信号唤醒

	return 0;
}
```
## 进程间通信
### 信号量
#### 信号量的概念
信号量是一个计数器，用于多进程对共享数据对象的存取。为了获得共享资源，进程需要执行下列操作：
1. 测试控制该资源的信号量。
1. 若此信号量的值为正，则进程可以使用该资源。进程将信号量值减 1（P 操作），表示它使用了一个资源单位。若此信号量的值为 0，则进程进入睡眠状态，直至信号量值大于 0。若进程被唤醒后，它返回至第 1 步。当进程不再使用由一个信息量控制的共享资源时，该信号量值增 1（V 操作）。如果有进程正在睡眠等待此信号量，则唤醒它们中的一个。

这两个过程也叫做 p、v 操作。 p、v操作是原子操作。为此，信号量通常是在内核中实现的。

常用的信号量形式是让它控制单个资源，所以其初始值为 1。但是，一般而言，信号量的初值可以是任一正值，该值说明有多少个共享资源单位可供共享应用。

#### 信号量的创建与打开 semget
函数声明：`int semget(key_t key,int nsems,int semflg)`

key：所创建或打开的信号量集合的键
nsems：创建的信号量集合中信号量的个数，此参数只在创建一个新的信号量集合时有效
semflg：调用函数的操作类型，也可用于设置信号量集合的访问权限，两者通过逻辑或表示

返回：
- 成功：返回信号量ID
- 失败：-1，并设置 errno

>调用函数 semget 的作用由参数 key 和 flag 决定，相应约定如下：

- 当 key 为 IPC_PRIVATE 时，创建一个新的信号量集合。此时参数 flag 的取值对函数的操作不起仟何作用。
- 当 key 不为 IPC_PRIVATE，且 flag 设置了 IPC_CREAT 位，而没有设置 IPC_EXCL 位，则执行操作由 key 值决定：如果 key 为内核中某个已存在的信号量集合的键，则执行打开这个键的操作；反之，则执行创建信号量集合的操作。
- 当 key 不为 IPC_PRIVATE，且 flag 中同时设置了 IPC_CREAT 位和 IPC_EXCL 位，则执行创建信号量集合的操作。参数 key 的取值应与内核中已存在的任何信号量集合的键值都不相同，否则函数调用失败。

#### 对信号量的控制 semctl

函数声明：`int semctl(int semid, int semnum, int cmd, [union semun arg]) ;`

semid：为信号量集合的标识符。
semnum：用于指明某个特定信号量。
cmd：表示调用该函数希望执行的命令
cmd 的常用设置：
- SETVAL：表示 semctl() 的功能为初始化信号量的值，信号量值通过可选参数传入，在使用信号量前应先对信号量值进行设置
- IPC_RMID：表示 semctl() 的功能为从系统中删除指定信号量

arg：是一个 semun 共用体，该共用体中各个成员的具体含义和使用情况与参数 cmd 的取值有关。该共用体的定义如下：
```
union semen{
	int val;	//cmd 为 SETVAL 时，用于指定信号量值
	struct semid_ds *buf;	//cmd 为 IPC_STAT 时或 IPC_SET 时生效
	unsigned short *array;	//cmd 为 GETALL 或 SETALL 时生效
	struct seminfo *_buf;	//cmd 为 GETALL 或 SETALL 时生效
};
```

该共用体中的 struct semid_ds 是一个由内核维护的记录信号量属性信息的结构体，该结构体的定义如下：
```
ushort semid_ds{
	struct ipc_perm sem_perm;	//所有者和标致权限
	time_t sem_otime;	//最后操作时间
	time_t sem_ctime;	//最后更改时间
	unsigned short sem_nsems;	//信号集中的信号数量
}
```

返回：由参数 cmd 决定。对于除 GETALL 以外的所有 GET 命令，都返回相应值，通常为非负数。否则返回 -1。
#### 对信号量的操作——semop
改变信号量的值

函数声明：`int semop(int semid, struct sembuf *sops, unsigned nops) ; `

semid：为信号量集合的ID
semoparray：是一个 struct sembuf 类型的数组指针，该数组中的每个元素设置了要对信号量集中的哪个型号做哪种操作，struct sembuf 结构体定义如下：
```
struct sembuf{
	short sem_num;	//信号量在信号集中的编号
	short sem_op;	//信号量操作,-1 P操作，+1 V操作
	short sem_flag;	//标志位
};
```
nops：参数 sops 所指数组中元素的个数

返回：若成功则为 0，若出错则为 -1。

### 共享内存
#### 共享内存的概念
共享内存是进程问通信的一种最基本、最快速的机制。共享内存是两个或多个进程共享同一块内存区域，并通过该内存区域实现数据交换的进程问通信机制。通常是由一个进程开辟一块共享内存区域，然后允许多个进程对此区域进行访问。由于不需使用中间介质，而是数据由内存直接映射到进程空间，因此共享内存是最快速的进程间通信机制。

共享内存的最大不足在于，由于多个进程对同一块内存区域具有访问的权限，各个进程之间的同步问题显得尤为突出。必须控制同一时刻只有一个进程对共享内存区域写入数据，否则将造成数据的混乱。这可通过结合使用信号量来解决。

#### 共享内存的创建和打开 shmget
函数声明：`int shmget(key_t key, int size, int flag) ;`

key：表示所创建或打开的共享内存的键
size：表示共享内存区域的大小
flag：表示函数的操作类型，也可用于设置共享内存的访问权限，两者通过逻辑或表示

返回：若成功则为共享内存ID，若出错则为 -1。

#### 共享内存的附加 shmat
进行地址映射，将共享内存映射到进程虚拟地址空间中。

函数声明：`void *shmat(int shmid, void *addr, int flag) ;
`

shmid：表示要附加的共享内存段的ID
addr：虚拟地址
flag：用于表示函数的操作方式

返回：若成功则为指向共享内存段的指针，若出错则为-1

#### 共享内存的分离 shmdt
解除物理内存与进程虚拟地址空间的映射关系

函数声明：`int shmdt(void *addr) ;`

addr：是以前调用 shmat 时的返回值。

返回：若成功则为0，若出错则为 -1。

#### 共享内存的控制 shmctl
对共享内存段执行多种操作。

函数声明：`int shmctl(int shmid, int cmd, struct shmid_ds *buf) ;
`
shmid：为共享内存的标识符
cmd：表示调用该函数希望执行的操作

---
cmd 的取值和对应操作如下：
- IPC_STAT：对此段取 shmid_ds 结构，并存放在由 buf 指向的结构体中。
- IPC_SET：按 buf 指向的结构体中的值设置与此段相关结构体中的下列三个字段：shm_perm.uid、shm_perm.gid以及shm_perm.mode。此命令只能由下列两种进程执行：一种是其有效用户ID等于shm_perm.cuid或shm_perm.uid的进程；另一种是具有超级用户特权的进程。
- IPC_RMID：从系统中删除该共享内存段。此命令只能由下列两种进程执行：一种是其有效用户ID等于shm_perm.cuid或shm_perm.uid的进程；另一种是具有超级用户特权的进程。
- SHM_LOCK：锁住共享内存段。此命令只能由超级用户执行。
- SHM_UNLOCK：解锁共享内存段。此命令只能由超级用户执行。

---
buf：指向 shmid_ds 结构体的指针

返回：若成功则为0，若出错则为 -1。

### 实验：父进程产生10个子进程，并打印出子进程产生的随机数的和
```
/*---------------------------------------------------------------------------------------------------------
功能：
    父进程产生10个子进程，并打印出子进程产生的随机数的和。要求用信号机制、信号量以及共享内存实现。

思路：
    子进程将自己产生的随机数累加到共享内存。当10个子进程都累加完后，用信号机制通知父进程，
父进程就可以从共享内存中读取数据了。为了避免10个子进程向共享内存中写入数据时发生冲突，
应使用信号量进行并发控制。	
---------------------------------------------------------------------------------------------------------*/

#include "stdio.h"
#include "sys/types.h"
#include "signal.h"
#include "sys/ipc.h"
#include "sys/sem.h"
#include "sys/shm.h"

//semun 共用体
union semun
{
	int val;
	struct semid_ds *buf;	//一个由内核维护的记录信号量属性信息的结构体 
	ushort *array;
};


int semid;//信号量ID
int shmid;//共享内存ID
char *shm_virtualaddr;  //共享内存关联到进程后的虚拟地址

// P操作，获取信号量，-1
void p(int semid)
{
	struct sembuf buf = {0, -1, 0};
	//int semop(int semid, struct sembuf *sops, unsigned nops) ;
	semop(semid, &buf, 1);	//改变信号量的值
}

// V操作，释放信号量，+1
void v(int semid)
{
	struct sembuf buf = {0, 1, 0};
	semop(semid, &buf, 1);
}

void sigusr1_handler(int n)
{
	printf("count = %d, total = %d\\n", *(int *)shm_virtualaddr, *(int *)(shm_virtualaddr+4));  //打印进程编号（不是进程ID）和随机数和
	
	//删除信号量
	if(semctl(semid, IPC_RMID, 0) == -1)  
		printf("remove semaphore fail\\n");
	else
		printf("remove semaphore ok\\n");
	
	shmdt(shm_virtualaddr);  //解除共享内存的关联

	//删除共享内存
	if(shmctl(shmid, IPC_RMID, 0) == -1)  
		printf("remove shared-memory fail\\n");
	else
		printf("remove shared-memory ok\\n");

	exit(0);
}

int main()
{
	signal(SIGUSR1, sigusr1_handler);  //用户定义的信号，用于捕获 SIGUSR1 信号执行处理函数 sigusr1_handler

	//int semget(key_t key,int nsems,int semflg)
	//key：所创建或打开的信号量集合的键，nsems：创建的信号量集合中信号量的个数，semflg：调用函数的操作类型，也可用于设置信号量集合的访问权限
	//成功：返回信号量ID，失败：-1
	semid = semget(IPC_PRIVATE, 1, 0666);	//创建并初始化信号量

	if(semid == -1)	//信号量创建失败
	{
		printf("create semaphore fail\\n");
		return 0;
	}
	else{	 //返回信号量ID
		printf("create semaphore ok\\n");
	}

	//semun 共用体
	union semun x;
	x.val = 1;  //信号量初值应为多少？为1

	//int semctl(int semid, int semnum, int cmd, [union semun arg]) ;
	//semid：信号量集合，semnum：用于指明某个特定信号量，cmd：表示调用该函数希望执行的命令，arg：是一个 semun 共用体，
	semctl(semid, 0, SETVAL, x);	//初始化信号量为 1
	
	//int shmget(key_t key, int size, int flag);
	//key：表示所创建或打开的共享内存的键，size：表示共享内存区域的大小，flag：表示函数的操作类型，也可用于设置共享内存的访问权限
	//若成功则为共享内存ID，若出错则为 -1
	shmid = shmget(IPC_PRIVATE, 8, 0666);  //创建并关联到共享内存，共享内存一共 8 字节，前 4 字节存放 count，后 4 字节存放 total
	if(shmid == -1)	
	{
		printf("create shared-memory fail\\n");
		return 0;
	}
	else{	//返回共享内存ID
		printf("create shared-memory ok\\n");
	}

	//void *shmat(int shmid, void *addr, int flag) ;
	//shmid：表示要附加的共享内存段的ID，addr：虚拟地址，flag：用于表示函数的操作方式
	//成功则为指向共享内存段的指针，若出错则为-1
	shm_virtualaddr = shmat(shmid, 0, 0);//共享内存的附加，地址映射，addr 为 0，此共享内存段附加到由内核选择的第一个可用地址上

	*(int *)shm_virtualaddr = 0;  //初始化进程编号，将指针转成int*，然后取该指针指向地址的值
	*(int *)(shm_virtualaddr + 4) = 0;  //初始化随机数和

	//flag 是否是子进程
	char is_child = 0;
	int i;
	//循环创建 10 个进程
	for(i=0; i<10; i++)
	{
		pid_t pid = fork(); 
		if(pid == 0)	//子进程
		{
			is_child = 1;  //设置子进程中 is_child 为 1
			break;  //退出循环
		}
	}

	//子进程
	if(is_child)
	{
		p(semid);  // P操作，获取信号量（-1）

		srand(time(NULL) + i);	//设置随机种子数
		int num = rand()%10;	//取 0-9 随机数

		(*(int *)shm_virtualaddr)++;  //进程编号自增
		*(int *)(shm_virtualaddr + 4) += num;  //随机数相加

		printf("child%d: %d\\n", i, num);

		v(semid);  //V操作，释放信号量（+1）

		if(*(int *)shm_virtualaddr == 10)  //if(i==10)最后一个子进程，善后操作
			kill(getppid(), SIGUSR1);  //向父进程发送 SIGUSER1 信号 
	}
	else
	{
		while(1)
			pause();//挂起，等待信号唤醒
	}

	return 0;
}
/*========================================================================
create semaphore ok
create shared-memory ok
child0: 8
child1: 8
child5: 9
child4: 0
child6: 2
child3: 9
child7: 6
child8: 4
child9: 1
child2: 9
count = 10, total = 56
remove semaphore ok
remove shared-memory ok
========================================================================*/
```
## socket 编程接口
### 套接口概念
套接口实际就是网络进程的 PID（Process ID）。

网络通信，归根到底就是进程间的通信。套接口的描述符称为套接字，即 socket。有的资料中也叫套接口句柄。
### 阻塞模式和非阻塞模式（同步和异步）
阻塞模式：指调用了套接字的读、写函数后，函数不会立即返回，线程此时被置为等待状态，直到读、写操作完成为止。

非阻塞模式：指调用了套接字的读、写函数后，函数立即返回，不用等到读、写操作完成。

无论在 Windows 中还是 UNIX/LINUX 中，套接字被创建后默认都是阻塞模式的。

### 字节序转换
计算机在内存中的数据存储方式有两种：一种是小端字节序，即内存低地址存储数据低字节，高地址存储数据高字节；另一种是大端字节序，即内存低地址存储数据高字节，而高地址存储数据低字节。

网络字节序使用的是大端字节序，而主机字节序可能是小端字节序，也可能是大端字节序。所有套接字函数中涉及 IP 地址和端口号时都用网络字节序，因此要用到主机字节序和网络字节序之间相互转换功能的函数。

#### 返回网络字节序 htons/htonl
`u_short htons(u_short hostshort);`

`u_long htonl(u_long hostlong);`

#### 返回主机字节序 ntohs/ntohl
`u_short ntohs(u_short netshort);`

`u_long ntohl(u_long netlong);`

一般情况下，使用 htons 和 ntohs 转换 端口号，使用 htonl 和 ntohl 转换 IP 地址。
### 地址转换函数
在 TCP/IP 网络上，使用 ASCII 地址，即使用以“．”隔开的四个十进制的数表示。
在套接口地址中则是使用 32 位的网络字节序的二进制数值。
要实现两者之间的转换，就要用到以下两个函数：

`unsigned long inet_addr(const char FAR* cp);`

成功：返回 32 位二进制的网络字节序地址
出错：返回 INADDR_NONE。

`char FAR* inet_ntoa(struct in_addr in);`

成功：返回字符串的指针
失败：返回 NULL

### 流套接字编程模型
服务器端：创建套接字——将本地地址绑定到套接字——进入监听模式并准备接受连接。
客户端：创建套接字——请求连接。

双方建立连接后就可以开始数据通信了，双方都可以进行数据的发送和接收。

最后，通信完毕，任意一方都可关闭套接字。
### 数据报套接字编程模型
服务器端：创建套接字——将本地地址绑定到套接字——直接进行数据的接收。
客户端：创建套接字——直接进行数据的发送。

通信完毕，任意一方都可关闭套接字。

### sockaddr 和 sockaddr_in 结构体
通常，把网络应用程序中所用到的网络地址和端口号信息放在一个结构体中，这就是**套接口地址结构体**。

每个协议族都定义了它自己的套接口地址结构体，套接口地址结构体都以 `sockaddr_` 开头，并以每个协议族名中的两个字母作为结尾，例如`sockaddr_in`表示 IPv4 协议族的套接口地址结构体。

除此之外，还有一个通用套接口地址结构体，它以`sockaddr` 表示。通用套接口地址结构体 sockaddr 与具体协议族无关，形式为：
```
struct sockaddr
{
	unit8_t	sa_len;
	sa_family_t	sa_family;	//协议族名
	char	sa_data[14];
}
```

IPv4 套接口地址结构体 `sockaddr_in` 的形式如下：
```
struct sockaddr_in
{
	unit8	sin_len;	//数据长度成员，固定长度为16字节，一般不用设置它；
	sa_family_t	sin_family;	//协议族名，IPv4 为 AF_INET；
	in_port_t sin_port;	//TCP 或 UDP 协议的端口号，16 位端口号，网络字节序
	struct in_addr sin_addr;
	char	sin_zero[8];	//备用的域名，未使用
};
struct in_addr
{
	in_addr_t s_addr;	//32 位 IP 地址，网络字节序
};
```
在对套接口进行操作的函数中，如果需要套接口地址参数，都是以通用套接口地址结构体表示的，例如连接函数 connect：

`int connect(int sockfd,const struct sockaddr *serv_addr,int addrlen);`

因此需要将**指向特定协议的套接口地址结构体的指针**转换成**指向通用套接口地址结构体的指针**，即使用`(struct sockaddr *)`进行类型转换。否则编译时会出现警告信息。

### 套接口函数
#### 总结步骤
>一个服务器进程中系统调用的顺序通常如下

socket();
bind();
listen();
accept();
>而客户端进程的调用则比较简单

socket();
connect();
#### 创建套接字 socket

`int socket(int family,int type,int protocol);`

family：指明协议族
type：指明套接口类型
protocol：一般为 0

成功：返回值为非负描述字
失败：返回值为负值

>参数 family 的取值范围

AF_LOCAL：UNIX 协议族
AF_ROUTE：路由套接口
AF_INET：IPv4 协议
AF_INET6：IPV6 协议
AF_KEY：密钥套接口

>参数 type 的取值范围

SOCK_STREAM：TCP 套接口
SOCK_DGRAM：UDP 套接口
SOCK_PACKET：支持数据链路访问
SOCK_RAM：原始套接口

#### 绑定套接口 bind
`int bind(int sockfd,const struct sockaddr *myaddr,socklen_t addrlen);`

sockfd：套接字
myaddr：是一个指向特定协议地址结构体的指针
addrlen：是地址结构体的长度。

成功：返回 0
失败：返回 -1

这个调用不是必须执行的。尤其是在客户端，很少使用这个系统调用。用 socket() 得到套接口后可以直接调用函数 connect() 或者 listen()，这时内核会自动给套接口分配一个地址和端口号，这是常用的方式。

只有在希望进程使用某个特定的网络地址和端口时，才会使用函数 bind()。

#### 连接 connect
`int connect(int sockfd,const struct sockaddr *serv_addr,int addrlen);`

sockfd：套接口描述字
serv_addr：目的端口和IP地址的套接口
addrlen：目的套接口的长度

成功：返回 0
失败：返回 -l

#### 监听 listen
`int listen(int sockfd,int backlog);`

sockfd：套接字
backlog：规定内核为此套接口排队的最大选择个数

成功：返回 0
失败：返回 -1

#### 接受连接 accept (阻塞函数)
`int accept(int sockfd,struct sockaddr *cliaddr,socklen_t *addrlen);`

cliaddr：远程客户的套接口地址
addrlen：套接口地址长度
sockfd：监听套接字，它由函数 socket() 生成
如果不需要客户的套接口地址，可将第二个和第三个参数设置为空指针

成功：返回非负描述字，返回值即为新建立的连接的套接口描述字(客户套接字)
失败：返回 -1

>客户套接和监听套接字的区别：

监听套接字只有一个，而且一直存在；而每一个连接都有自己的客户套接字，专用于服务器与该连接对应的远程客户进行通信。当连接断开时就关闭该客户套接字。

>accept()是一个阻塞函数

即调用它的线程将被操作系统置于阻塞状态，直到有远程客户向该IP地址的该端口发起connect()调用为止。

#### 关闭 close
`int close(int sockfd);`

成功：返回 0
失败：返回 -1

#### 发送 send/sendto (阻塞函数)
面向连接的套接口（TCP）:

`int send(int sockfd,const void *buffer,int length,int flags);`

无连接的套接口（UDP）:

`int sendto(int sockfd,const void *message,int length,int flags,const struct sock_addr *dest_addr,int dest_len);`

#### 接收 recv/recvfrom (阻塞函数)
面向连接的套接口（TCP）:

`int recv(int sockfd,void *buffer,int length,int flags);`

无连接的套接口（UDP）:

`int recvfrom(int sockfd,void *message,int length,int flags,const struct sock_addr *send_addr,int *send_len);`

因为发送和接收函数进行一次传输的字节数可能比要求的数量少，所以需要多次调用这些函数以便发送或接收指定的字节数。所以，套**接口的数据传输通常都由一个循环结构来实现。**

>Mysend 方法

```
int Mysend(SOCKET s, const char *buf, int len, int flags)
{
	if(buf == NULL)
		return 0;
	int iSendCount = 0:
	int iLength = len:
	while (iLength > 0)
	{
		int n = send(s, buf* iSendCount, iLength, flags);
		if(n == SOCKET_ERROR)
			return 0:
		iLength -= n:
		iSendCount += n:
	}
	return iSendCount
}
```

>Myrecv 方法

```
int Myrecv(SOCKET s, char *buf, int len, int flags)
{
	if(buf == NULL)
		return 0;
	int iRecvCount = 0;
	int iLength = len;
	while (iLength > 0)
	{
		int nRev = recv(s, buf + iRecvCount, iLength, flags);
		if(nReU == SOCKET_ERROR)
			return 0:
		iLength -= nRev;
		iRecuCount += nRev;
	}
	return iRecvCount;
}
```
## 多线程
### 线程函数的原型
#### Windows
`DWOED ThreadProc(LPVOID lpParameter);`
### 创建新线程
#### Windows - CreateThread
Win32 API 函数 ：CreateThread()
```
HANDLE CreateThread(
	LPSECURITY_ATTRIBUTES lpsa,
	DWORD cbStack,
	LPTHREAD_START_ROUTINE lpstartAddr, //指向线程函数的指针，那个函数将做为一个新的线程而运行
	LPVOID lpvThreadParam,
	DWORD fdwCreate,
	LPDWORD lpIDThread
);
```
#### Unix - pthread_create
```
#include  <pthread.h>
int  pthread_create（
	pthread_t  *thread,
	pthread_attr_t  *attr,
	void  *（*start_routine）（void  *）,
	void  *arg
）
```
### Unix 中一个线程等待另一个线程结束的方法 - pthread_join
```
#include  <pthread.h>
int pthread_join(
	pthread_t thread,
	void **retval
);
```
### Linux中编译多线程程序的方法
由于 pthread 库不是 Linux 系统默认的库，所以多线程的程序在编译时需要告诉编译器将这个库链接进来，编译命令应这样输入：`gcc xxx.c -lpthread`

### 线程的并发（同步）问题
属于同一个进程的所有线程可以共享全局数据和主线程中尚在生存期内的数据，如果没有并发控制，就会产生异常。

并发控制的方法有多种，只要求掌握使用信号量来进行并发控制。 

Windows 中主要函数有：
```
CreateSemaphore()
WaitForSingleObject()
ReleaseSemaphore()
CloseHandle()
```







',
  'groups' => 'Linux',
  'showsel' => '1',
  'showse2' => '1',
  'id' => '212',
)
[ info ] [ SESSION ] INIT array (
  'id' => '',
  'var_session_id' => '',
  'prefix' => 'think',
  'type' => '',
  'auto_start' => true,
)
[ info ] [ RUN ] app\admin\controller\Note->updateNote[ /var/www/html/daily/application/admin/controller/Note.php ]
[ info ] [ DB ] INIT mysql
[ info ] [ CACHE ] INIT File
[ info ] [ LOG ] INIT File
[ sql ] [ DB ] CONNECT:[ UseTime:0.000804s ] mysql:host=74.120.168.12;dbname=diary;charset=utf8
[ sql ] [ SQL ] SHOW COLUMNS FROM `note` [ RunTime:0.001518s ]
[ sql ] [ SQL ] SELECT * FROM `note` WHERE  `id` = 212 LIMIT 1 [ RunTime:0.000732s ]
[ sql ] [ SQL ] SELECT `groups` FROM `note` WHERE  `id` = 212 LIMIT 1 [ RunTime:0.000327s ]
[ sql ] [ SQL ] SHOW COLUMNS FROM `groups` [ RunTime:0.001292s ]
[ sql ] [ SQL ] SELECT `parent_id` FROM `groups` WHERE  `groups` = 'Linux' LIMIT 1 [ RunTime:0.000519s ]
[ sql ] [ SQL ] SELECT `groups` FROM `groups` WHERE  `id` = 2 LIMIT 1 [ RunTime:0.000479s ]
[ sql ] [ SQL ] UPDATE `note`  SET `id`=212,`p_id`=2,`title`='Linux - C 编程\r',`content`='# Linux - C 编程\r\n[TOC]\r\n## 进程\r\n### 孤儿进程 和 僵尸进程\r\nLinux 系统中有两种特殊的进程：孤儿进程和僵尸进程。\r\n\r\n父进程应负责子进程的回收工作，但父子进程是异步运行的，父进程不知道什么时候接收子进程，父进程甚至会在子进程结束之前结束。若父进程在子进程退出之前退出，子进程就会变成孤儿进程，此时子进程会被进程 init 收养，之后 init 会代替其原本的父进程完成状态收集工作。\r\n\r\n当进程调用了 exit() 函数后，该进程并不是马上消失，而是留下一个称为僵尸进程的数据结构。僵尸进程是 Linux 系统中的另一种特殊进程，它几乎放弃进程退出前占用的所有内存，既没有可执行代码也不能被调度，只在进程列表中保留一个位置，记载进程的退出状态等信息供父进程收集。若父进程中没有回收子进程的代码，子进程将会一直处于僵尸态。\r\n\r\n### 进程标识符\r\n下列函数返回这些标识符，其返回值类型 pid_t，uid_t，gid_t 等都是宏定义，实质是 `unsigned int`\r\n```\r\n//头文件\r\n#include <sys/types.h>\r\n#include <unistd.h>\r\n\r\n//返回:调用进程的 进程ID\r\npid_t getpid(void)	\r\n\r\n//返回:调用进程的 父进程ID\r\npid_t getppid(void);\r\n\r\n//返回:调用进程的 实际用户ID\r\nuid_t getuid(void)\r\n\r\n//返回:调用进程的 有效用户ID\r\nuid_t geteuid(void)\r\n\r\n//返回:调用进程的 实际组ID\r\ngid_t getgid (void)\r\n\r\n//返回:调用进程的 有效组ID\r\ngid_t getegid(void)\r\n```\r\n### 进程同步\r\nLinux 提供了 wait() 函数和 waitpid() 函数来获取进程状态，实现进程同步。这两个函数用于父、子进程之间的同步，即确保子进程一定先于父进程执行并终止。\r\n```\r\n#include <sys/types.h>\r\n#include <sys/wait.h>\r\npid_t wait(int *status) ;\r\npid_t waitpid(pid_t pid , int * status, int options) ;\r\n//两个函数返回：若成功则为 进程ID，若出错则为 -1。\r\n```\r\n### 实验：fork() 函数的使用\r\nfork() 函数:\r\n创建成功，父进程返回子进程的 id ，子进程返回 0\r\n创建失败，父进程返回 -1\r\n>使用 fork() 函数创建一个进程，进程创建成功后使父进程和子进程分别执行不同的功能\r\n\r\n```\r\n/*---------------------------------------------------\r\n使用 fork() 函数创建一个进程，进程创建成功后使父进程和子进程分别执行不同的功能\r\n-----------------------------------------------------*/\r\n#include <stdio.h>\r\n#include <stdlib.h>\r\n#include <unistd.h>\r\nint main()\r\n{\r\n	//调用fork()函数创建子进程\r\n	pid_t pid = fork();\r\n	if (pid == -1)	//创建失败\r\n	{\r\n		perror(\"fork error\");\r\n		exit(1);	//退出进程，指定返回值1\r\n	}\r\n	else if (pid > 0)	//创建成功 - 父进程\r\n	{\r\n		printf(\"父进程,pid=%d,ppid=%d\\n\", getpid(), getppid());\r\n	}\r\n	else if (pid == 0)	//创建成功 - 子进程\r\n	{\r\n		printf(\"子进程,pid=%d,ppid=%d\\n\", getpid(), getppid());\r\n	}\r\n	printf(\"........finish..........\\n\");\r\n	return 0;\r\n}\r\n\r\n/*========================================================================\r\n父进程,pid=3720,ppid=3514\r\n........finish..........\r\n子进程,pid=3721,ppid=2012\r\n........finish..........\r\n========================================================================*/\r\n\r\n```\r\n\r\n- 多次执行文件 test_fork会发现这种情况: child process 后输出的 ppid 不等于 parent process 的 pid,而等于1。这是什么原因?\r\n答：父进程先于子进程终止,子进程变为“孤儿进程”,后由进程 init 接收。\r\n\r\n>使用 fork() 函数在循环中创建 5 个子进程，使子进程分别打印各自的编号和 pid\r\n\r\n```\r\n/*---------------------------------------------------\r\n使用 fork() 函数在循环中创建 5 个子进程，使子进程分别打印各自的编号和 pid\r\n-----------------------------------------------------*/\r\n#include <stdio.h>\r\n#include <stdlib.h>\r\n#include <unistd.h>\r\n\r\nint main()\r\n{\r\n	pid_t pid;\r\n	int i;\r\n	//循环创建进程\r\n	for (i = 0; i<5; i++){				\r\n		if ((pid = fork()) == 0)	//若当前进程为子进程，便跳出循环\r\n			break;\r\n	}\r\n	if (pid == -1){\r\n		perror(\"fork error\");\r\n		exit(1);\r\n	}\r\n	else if (pid>0){	//父进程\r\n		//sleep(5);	//父进程等待所有子进程执行结束后再执行\r\n		printf(\"parent process:pid=%d\\n\", getpid());\r\n	}\r\n	else if (pid == 0){		//子进程\r\n		//sleep(i);	//每个子进程分别沉睡不同的时间\r\n		printf(\"I am child=%d,pid=%d\\n\", i + 1, getpid());\r\n	}\r\n	return 0;\r\n}\r\n\r\n/*========================================================================\r\n>不 sleep 的输出：\r\nzhangliren@ubuntu:~/Documents$ ./a.out \r\nI am child=2,pid=3814\r\nparent process:pid=3812\r\nI am child=1,pid=3813\r\nI am child=4,pid=3816\r\nzhangliren@ubuntu:~/Documents$ I am child=5,pid=3817\r\nI am child=3,pid=3815\r\n|(终端提示符)\r\n----------------------------------------------------------\r\n>sleep() 后的输出：\r\nI am child=1,pid=3843\r\nI am child=2,pid=3844\r\nI am child=3,pid=3845\r\nI am child=4,pid=3846\r\nI am child=5,pid=3847\r\nparent process:pid=3842\r\n========================================================================*/\r\n```\r\n\r\n- 观察输出结果,会发现输出结果有以下问题\r\n（1）子进程的编号不是递增的\r\n（2）终端提示符后面仍有子进程信息打印,而命令提示符在最后一行的开头闪烁\r\n这是为什么?\r\n\r\n答：（1）父进程先于子进程终止。在 Linux 系统中,子进程应由父进程回收,但是当子进程被创建后,它与父进程及其他进程共同竟争系统资源,所以父子进程执行的顺序是不确定的,终止的先后顺序也是不确定的。此处创建了 5 个子进程,这 5 个子进程与父进程共同竞争资源。6 个进程使用 CPU 的顺序不确定,因此子进程的编号不是递增关系,父进程在子进程尚未全部终止前便终止。\r\n（2）父进程是一个前台进程。当它终止退出后,会释放命令提示符,输出当前工作路径及端提示符[ thelma@ localhost~],但此时尚有子进程仍在执行,终端仍有信息输出,因此命令提示符会出现在输出结果最后一行的开头。\r\n\r\n## 信号和信号处理\r\n### 信号的概念\r\n信号的本质是软件中断。很多比较重要的应用程序都需处理信号。信号是异步事件的典型实例，即产生信号的事件对进程而言是随机出现的。进程不能只是测试一个变量(例如errno)来判别是否发生了一个信号，而是必须告诉内核「在此信号发生时，请执行指定操作」。\r\n\r\n可以要求系统在某个信号出现时按照下列三种方式中的一种进行操作：\r\n1. 忽略此信号。大多数信号都可使用这种方式进行处理，但有两种信号却决不能被忽略。它们是：SIGKILL 和 SIGSTOP。这两种信号不能被忽略的原因是：它们向超级用户提供一种使进程终止或停止的可靠方法。\r\n2. 捕捉信号。为了做到这一点要通知内核在某种信号发生时，调用一个用户函数。在用户函数中，可执行用户希望对这种事件进行的处理。\r\n3. 执行系统默认动作。每一种信号都有系统默认动作。注意，对大多数信号的系统默认动作是终止该进程。\r\n\r\n### 常见函数\r\n#### kill\r\n给指定进程发送信号\r\n\r\n函数声明：`int kill(pid_t,int sig)`\r\npid：接收信号的进程ID\r\nsig：要发送的信号编号\r\n#### raise\r\n发送指定信号给当前进程自身\r\n\r\n函数声明：`int raise(int sig)`\r\n\r\n#### pause\r\n暂停进程，接收到任何信号后恢复\r\n\r\n函数声明：`int pause()`\r\n\r\n#### alarm\r\n计时器，驱使内核在指定秒数后发送 SIGALRM 信号到调用该函数的进程，进程收到该信号后默认终止运行。\r\n\r\n函数声明：`unsigned int alarm(unsigned int seconds)`\r\n\r\n#### signal\r\n捕获信号后，执行指定函数\r\n\r\n函数声明：\r\n`typedef void (* sighandler_t)(int);`\r\n`sighandler_t signal(int signum,sighandler_t handler);`\r\n\r\nsignum：信号编号\r\nhandler：自定义信号处理函数的函数指针\r\n\r\n### 实验：李纳斯的第一个程序\r\n```\r\n/*---------------------------------------------------------------------------------------------------------\r\n李纳斯的第一个程序：两个进程，一个向屏幕输出 A，一个向屏幕输出 B，两进程轮换输出，中间间隔 1 秒钟。如此反复，直到用户按下 ctl + c 结束两个进程（ctl + c 就是向当前正在运行的所有进程发送SIGINT信号）。\r\n---------------------------------------------------------------------------------------------------------*/\r\n#include \"stdio.h\"\r\n#include \"sys/types.h\"\r\n#include \"signal.h\"\r\n\r\npid_t pid;\r\n\r\n//自定义信号处理函数。\r\n//父进程打印 AAA，子进程打印 BBB\r\nvoid sigusr1_handler(int n)\r\n{\r\n	if(pid > 0)\r\n		printf(\"AAAA\\n\");\r\n	else\r\n		printf(\"BBBB\\n\");\r\n\r\n	alarm(1);//计时器，1s 后发送 SIGALRM 信号到进程\r\n}\r\n\r\nvoid sigalrm_handler(int n)\r\n{\r\n	if(pid > 0){	//父进程\r\n		kill(pid, SIGUSR1); //发送 SIGUSR1 信号给 pid 进程\r\n	}\r\n	else{	//子进程\r\n		kill(getppid(), SIGUSR1);//发送 SIGUSR1 信号给 父进程\r\n	}\r\n}\r\n\r\nint main()\r\n{\r\n	//在fork()之前设置的信号处理函数会被子进程继承\r\n	signal(SIGALRM, sigalrm_handler);//捕获 SIGALRM 信号，执行 sigalrm_handler\r\n	signal(SIGUSR1, sigusr1_handler);//用户定义的信号，用于捕获 SIGUSR1 信号执行处理函数 sigusr1_handler\r\n\r\n	pid = fork();\r\n	if (pid > 0)	//父进程\r\n		raise(SIGUSR1);	//发送 SIGUSR1 信号给当前进程\r\n\r\n	while(1)\r\n		pause();	//进程挂起，等待信号唤醒\r\n\r\n	return 0;\r\n}\r\n```\r\n## 进程间通信\r\n### 信号量\r\n#### 信号量的概念\r\n信号量是一个计数器，用于多进程对共享数据对象的存取。为了获得共享资源，进程需要执行下列操作：\r\n1. 测试控制该资源的信号量。\r\n1. 若此信号量的值为正，则进程可以使用该资源。进程将信号量值减 1（P 操作），表示它使用了一个资源单位。若此信号量的值为 0，则进程进入睡眠状态，直至信号量值大于 0。若进程被唤醒后，它返回至第 1 步。当进程不再使用由一个信息量控制的共享资源时，该信号量值增 1（V 操作）。如果有进程正在睡眠等待此信号量，则唤醒它们中的一个。\r\n\r\n这两个过程也叫做 p、v 操作。 p、v操作是原子操作。为此，信号量通常是在内核中实现的。\r\n\r\n常用的信号量形式是让它控制单个资源，所以其初始值为 1。但是，一般而言，信号量的初值可以是任一正值，该值说明有多少个共享资源单位可供共享应用。\r\n\r\n#### 信号量的创建与打开 semget\r\n函数声明：`int semget(key_t key,int nsems,int semflg)`\r\n\r\nkey：所创建或打开的信号量集合的键\r\nnsems：创建的信号量集合中信号量的个数，此参数只在创建一个新的信号量集合时有效\r\nsemflg：调用函数的操作类型，也可用于设置信号量集合的访问权限，两者通过逻辑或表示\r\n\r\n返回：\r\n- 成功：返回信号量ID\r\n- 失败：-1，并设置 errno\r\n\r\n>调用函数 semget 的作用由参数 key 和 flag 决定，相应约定如下：\r\n\r\n- 当 key 为 IPC_PRIVATE 时，创建一个新的信号量集合。此时参数 flag 的取值对函数的操作不起仟何作用。\r\n- 当 key 不为 IPC_PRIVATE，且 flag 设置了 IPC_CREAT 位，而没有设置 IPC_EXCL 位，则执行操作由 key 值决定：如果 key 为内核中某个已存在的信号量集合的键，则执行打开这个键的操作；反之，则执行创建信号量集合的操作。\r\n- 当 key 不为 IPC_PRIVATE，且 flag 中同时设置了 IPC_CREAT 位和 IPC_EXCL 位，则执行创建信号量集合的操作。参数 key 的取值应与内核中已存在的任何信号量集合的键值都不相同，否则函数调用失败。\r\n\r\n#### 对信号量的控制 semctl\r\n\r\n函数声明：`int semctl(int semid, int semnum, int cmd, [union semun arg]) ;`\r\n\r\nsemid：为信号量集合的标识符。\r\nsemnum：用于指明某个特定信号量。\r\ncmd：表示调用该函数希望执行的命令\r\ncmd 的常用设置：\r\n- SETVAL：表示 semctl() 的功能为初始化信号量的值，信号量值通过可选参数传入，在使用信号量前应先对信号量值进行设置\r\n- IPC_RMID：表示 semctl() 的功能为从系统中删除指定信号量\r\n\r\narg：是一个 semun 共用体，该共用体中各个成员的具体含义和使用情况与参数 cmd 的取值有关。该共用体的定义如下：\r\n```\r\nunion semen{\r\n	int val;	//cmd 为 SETVAL 时，用于指定信号量值\r\n	struct semid_ds *buf;	//cmd 为 IPC_STAT 时或 IPC_SET 时生效\r\n	unsigned short *array;	//cmd 为 GETALL 或 SETALL 时生效\r\n	struct seminfo *_buf;	//cmd 为 GETALL 或 SETALL 时生效\r\n};\r\n```\r\n\r\n该共用体中的 struct semid_ds 是一个由内核维护的记录信号量属性信息的结构体，该结构体的定义如下：\r\n```\r\nushort semid_ds{\r\n	struct ipc_perm sem_perm;	//所有者和标致权限\r\n	time_t sem_otime;	//最后操作时间\r\n	time_t sem_ctime;	//最后更改时间\r\n	unsigned short sem_nsems;	//信号集中的信号数量\r\n}\r\n```\r\n\r\n返回：由参数 cmd 决定。对于除 GETALL 以外的所有 GET 命令，都返回相应值，通常为非负数。否则返回 -1。\r\n#### 对信号量的操作——semop\r\n改变信号量的值\r\n\r\n函数声明：`int semop(int semid, struct sembuf *sops, unsigned nops) ; `\r\n\r\nsemid：为信号量集合的ID\r\nsemoparray：是一个 struct sembuf 类型的数组指针，该数组中的每个元素设置了要对信号量集中的哪个型号做哪种操作，struct sembuf 结构体定义如下：\r\n```\r\nstruct sembuf{\r\n	short sem_num;	//信号量在信号集中的编号\r\n	short sem_op;	//信号量操作,-1 P操作，+1 V操作\r\n	short sem_flag;	//标志位\r\n};\r\n```\r\nnops：参数 sops 所指数组中元素的个数\r\n\r\n返回：若成功则为 0，若出错则为 -1。\r\n\r\n### 共享内存\r\n#### 共享内存的概念\r\n共享内存是进程问通信的一种最基本、最快速的机制。共享内存是两个或多个进程共享同一块内存区域，并通过该内存区域实现数据交换的进程问通信机制。通常是由一个进程开辟一块共享内存区域，然后允许多个进程对此区域进行访问。由于不需使用中间介质，而是数据由内存直接映射到进程空间，因此共享内存是最快速的进程间通信机制。\r\n\r\n共享内存的最大不足在于，由于多个进程对同一块内存区域具有访问的权限，各个进程之间的同步问题显得尤为突出。必须控制同一时刻只有一个进程对共享内存区域写入数据，否则将造成数据的混乱。这可通过结合使用信号量来解决。\r\n\r\n#### 共享内存的创建和打开 shmget\r\n函数声明：`int shmget(key_t key, int size, int flag) ;`\r\n\r\nkey：表示所创建或打开的共享内存的键\r\nsize：表示共享内存区域的大小\r\nflag：表示函数的操作类型，也可用于设置共享内存的访问权限，两者通过逻辑或表示\r\n\r\n返回：若成功则为共享内存ID，若出错则为 -1。\r\n\r\n#### 共享内存的附加 shmat\r\n进行地址映射，将共享内存映射到进程虚拟地址空间中。\r\n\r\n函数声明：`void *shmat(int shmid, void *addr, int flag) ;\r\n`\r\n\r\nshmid：表示要附加的共享内存段的ID\r\naddr：虚拟地址\r\nflag：用于表示函数的操作方式\r\n\r\n返回：若成功则为指向共享内存段的指针，若出错则为-1\r\n\r\n#### 共享内存的分离 shmdt\r\n解除物理内存与进程虚拟地址空间的映射关系\r\n\r\n函数声明：`int shmdt(void *addr) ;`\r\n\r\naddr：是以前调用 shmat 时的返回值。\r\n\r\n返回：若成功则为0，若出错则为 -1。\r\n\r\n#### 共享内存的控制 shmctl\r\n对共享内存段执行多种操作。\r\n\r\n函数声明：`int shmctl(int shmid, int cmd, struct shmid_ds *buf) ;\r\n`\r\nshmid：为共享内存的标识符\r\ncmd：表示调用该函数希望执行的操作\r\n\r\n---\r\ncmd 的取值和对应操作如下：\r\n- IPC_STAT：对此段取 shmid_ds 结构，并存放在由 buf 指向的结构体中。\r\n- IPC_SET：按 buf 指向的结构体中的值设置与此段相关结构体中的下列三个字段：shm_perm.uid、shm_perm.gid以及shm_perm.mode。此命令只能由下列两种进程执行：一种是其有效用户ID等于shm_perm.cuid或shm_perm.uid的进程；另一种是具有超级用户特权的进程。\r\n- IPC_RMID：从系统中删除该共享内存段。此命令只能由下列两种进程执行：一种是其有效用户ID等于shm_perm.cuid或shm_perm.uid的进程；另一种是具有超级用户特权的进程。\r\n- SHM_LOCK：锁住共享内存段。此命令只能由超级用户执行。\r\n- SHM_UNLOCK：解锁共享内存段。此命令只能由超级用户执行。\r\n\r\n---\r\nbuf：指向 shmid_ds 结构体的指针\r\n\r\n返回：若成功则为0，若出错则为 -1。\r\n\r\n### 实验：父进程产生10个子进程，并打印出子进程产生的随机数的和\r\n```\r\n/*---------------------------------------------------------------------------------------------------------\r\n功能：\r\n    父进程产生10个子进程，并打印出子进程产生的随机数的和。要求用信号机制、信号量以及共享内存实现。\r\n\r\n思路：\r\n    子进程将自己产生的随机数累加到共享内存。当10个子进程都累加完后，用信号机制通知父进程，\r\n父进程就可以从共享内存中读取数据了。为了避免10个子进程向共享内存中写入数据时发生冲突，\r\n应使用信号量进行并发控制。	\r\n---------------------------------------------------------------------------------------------------------*/\r\n\r\n#include \"stdio.h\"\r\n#include \"sys/types.h\"\r\n#include \"signal.h\"\r\n#include \"sys/ipc.h\"\r\n#include \"sys/sem.h\"\r\n#include \"sys/shm.h\"\r\n\r\n//semun 共用体\r\nunion semun\r\n{\r\n	int val;\r\n	struct semid_ds *buf;	//一个由内核维护的记录信号量属性信息的结构体 \r\n	ushort *array;\r\n};\r\n\r\n\r\nint semid;//信号量ID\r\nint shmid;//共享内存ID\r\nchar *shm_virtualaddr;  //共享内存关联到进程后的虚拟地址\r\n\r\n// P操作，获取信号量，-1\r\nvoid p(int semid)\r\n{\r\n	struct sembuf buf = {0, -1, 0};\r\n	//int semop(int semid, struct sembuf *sops, unsigned nops) ;\r\n	semop(semid, &buf, 1);	//改变信号量的值\r\n}\r\n\r\n// V操作，释放信号量，+1\r\nvoid v(int semid)\r\n{\r\n	struct sembuf buf = {0, 1, 0};\r\n	semop(semid, &buf, 1);\r\n}\r\n\r\nvoid sigusr1_handler(int n)\r\n{\r\n	printf(\"count = %d, total = %d\\n\", *(int *)shm_virtualaddr, *(int *)(shm_virtualaddr+4));  //打印进程编号（不是进程ID）和随机数和\r\n	\r\n	//删除信号量\r\n	if(semctl(semid, IPC_RMID, 0) == -1)  \r\n		printf(\"remove semaphore fail\\n\");\r\n	else\r\n		printf(\"remove semaphore ok\\n\");\r\n	\r\n	shmdt(shm_virtualaddr);  //解除共享内存的关联\r\n\r\n	//删除共享内存\r\n	if(shmctl(shmid, IPC_RMID, 0) == -1)  \r\n		printf(\"remove shared-memory fail\\n\");\r\n	else\r\n		printf(\"remove shared-memory ok\\n\");\r\n\r\n	exit(0);\r\n}\r\n\r\nint main()\r\n{\r\n	signal(SIGUSR1, sigusr1_handler);  //用户定义的信号，用于捕获 SIGUSR1 信号执行处理函数 sigusr1_handler\r\n\r\n	//int semget(key_t key,int nsems,int semflg)\r\n	//key：所创建或打开的信号量集合的键，nsems：创建的信号量集合中信号量的个数，semflg：调用函数的操作类型，也可用于设置信号量集合的访问权限\r\n	//成功：返回信号量ID，失败：-1\r\n	semid = semget(IPC_PRIVATE, 1, 0666);	//创建并初始化信号量\r\n\r\n	if(semid == -1)	//信号量创建失败\r\n	{\r\n		printf(\"create semaphore fail\\n\");\r\n		return 0;\r\n	}\r\n	else{	 //返回信号量ID\r\n		printf(\"create semaphore ok\\n\");\r\n	}\r\n\r\n	//semun 共用体\r\n	union semun x;\r\n	x.val = 1;  //信号量初值应为多少？为1\r\n\r\n	//int semctl(int semid, int semnum, int cmd, [union semun arg]) ;\r\n	//semid：信号量集合，semnum：用于指明某个特定信号量，cmd：表示调用该函数希望执行的命令，arg：是一个 semun 共用体，\r\n	semctl(semid, 0, SETVAL, x);	//初始化信号量为 1\r\n	\r\n	//int shmget(key_t key, int size, int flag);\r\n	//key：表示所创建或打开的共享内存的键，size：表示共享内存区域的大小，flag：表示函数的操作类型，也可用于设置共享内存的访问权限\r\n	//若成功则为共享内存ID，若出错则为 -1\r\n	shmid = shmget(IPC_PRIVATE, 8, 0666);  //创建并关联到共享内存，共享内存一共 8 字节，前 4 字节存放 count，后 4 字节存放 total\r\n	if(shmid == -1)	\r\n	{\r\n		printf(\"create shared-memory fail\\n\");\r\n		return 0;\r\n	}\r\n	else{	//返回共享内存ID\r\n		printf(\"create shared-memory ok\\n\");\r\n	}\r\n\r\n	//void *shmat(int shmid, void *addr, int flag) ;\r\n	//shmid：表示要附加的共享内存段的ID，addr：虚拟地址，flag：用于表示函数的操作方式\r\n	//成功则为指向共享内存段的指针，若出错则为-1\r\n	shm_virtualaddr = shmat(shmid, 0, 0);//共享内存的附加，地址映射，addr 为 0，此共享内存段附加到由内核选择的第一个可用地址上\r\n\r\n	*(int *)shm_virtualaddr = 0;  //初始化进程编号，将指针转成int*，然后取该指针指向地址的值\r\n	*(int *)(shm_virtualaddr + 4) = 0;  //初始化随机数和\r\n\r\n	//flag 是否是子进程\r\n	char is_child = 0;\r\n	int i;\r\n	//循环创建 10 个进程\r\n	for(i=0; i<10; i++)\r\n	{\r\n		pid_t pid = fork(); \r\n		if(pid == 0)	//子进程\r\n		{\r\n			is_child = 1;  //设置子进程中 is_child 为 1\r\n			break;  //退出循环\r\n		}\r\n	}\r\n\r\n	//子进程\r\n	if(is_child)\r\n	{\r\n		p(semid);  // P操作，获取信号量（-1）\r\n\r\n		srand(time(NULL) + i);	//设置随机种子数\r\n		int num = rand()%10;	//取 0-9 随机数\r\n\r\n		(*(int *)shm_virtualaddr)++;  //进程编号自增\r\n		*(int *)(shm_virtualaddr + 4) += num;  //随机数相加\r\n\r\n		printf(\"child%d: %d\\n\", i, num);\r\n\r\n		v(semid);  //V操作，释放信号量（+1）\r\n\r\n		if(*(int *)shm_virtualaddr == 10)  //if(i==10)最后一个子进程，善后操作\r\n			kill(getppid(), SIGUSR1);  //向父进程发送 SIGUSER1 信号 \r\n	}\r\n	else\r\n	{\r\n		while(1)\r\n			pause();//挂起，等待信号唤醒\r\n	}\r\n\r\n	return 0;\r\n}\r\n/*========================================================================\r\ncreate semaphore ok\r\ncreate shared-memory ok\r\nchild0: 8\r\nchild1: 8\r\nchild5: 9\r\nchild4: 0\r\nchild6: 2\r\nchild3: 9\r\nchild7: 6\r\nchild8: 4\r\nchild9: 1\r\nchild2: 9\r\ncount = 10, total = 56\r\nremove semaphore ok\r\nremove shared-memory ok\r\n========================================================================*/\r\n```\r\n## socket 编程接口\r\n### 套接口概念\r\n套接口实际就是网络进程的 PID（Process ID）。\r\n\r\n网络通信，归根到底就是进程间的通信。套接口的描述符称为套接字，即 socket。有的资料中也叫套接口句柄。\r\n### 阻塞模式和非阻塞模式（同步和异步）\r\n阻塞模式：指调用了套接字的读、写函数后，函数不会立即返回，线程此时被置为等待状态，直到读、写操作完成为止。\r\n\r\n非阻塞模式：指调用了套接字的读、写函数后，函数立即返回，不用等到读、写操作完成。\r\n\r\n无论在 Windows 中还是 UNIX/LINUX 中，套接字被创建后默认都是阻塞模式的。\r\n\r\n### 字节序转换\r\n计算机在内存中的数据存储方式有两种：一种是小端字节序，即内存低地址存储数据低字节，高地址存储数据高字节；另一种是大端字节序，即内存低地址存储数据高字节，而高地址存储数据低字节。\r\n\r\n网络字节序使用的是大端字节序，而主机字节序可能是小端字节序，也可能是大端字节序。所有套接字函数中涉及 IP 地址和端口号时都用网络字节序，因此要用到主机字节序和网络字节序之间相互转换功能的函数。\r\n\r\n#### 返回网络字节序 htons/htonl\r\n`u_short htons(u_short hostshort);`\r\n\r\n`u_long htonl(u_long hostlong);`\r\n\r\n#### 返回主机字节序 ntohs/ntohl\r\n`u_short ntohs(u_short netshort);`\r\n\r\n`u_long ntohl(u_long netlong);`\r\n\r\n一般情况下，使用 htons 和 ntohs 转换 端口号，使用 htonl 和 ntohl 转换 IP 地址。\r\n### 地址转换函数\r\n在 TCP/IP 网络上，使用 ASCII 地址，即使用以“．”隔开的四个十进制的数表示。\r\n在套接口地址中则是使用 32 位的网络字节序的二进制数值。\r\n要实现两者之间的转换，就要用到以下两个函数：\r\n\r\n`unsigned long inet_addr(const char FAR* cp);`\r\n\r\n成功：返回 32 位二进制的网络字节序地址\r\n出错：返回 INADDR_NONE。\r\n\r\n`char FAR* inet_ntoa(struct in_addr in);`\r\n\r\n成功：返回字符串的指针\r\n失败：返回 NULL\r\n\r\n### 流套接字编程模型\r\n服务器端：创建套接字——将本地地址绑定到套接字——进入监听模式并准备接受连接。\r\n客户端：创建套接字——请求连接。\r\n\r\n双方建立连接后就可以开始数据通信了，双方都可以进行数据的发送和接收。\r\n\r\n最后，通信完毕，任意一方都可关闭套接字。\r\n### 数据报套接字编程模型\r\n服务器端：创建套接字——将本地地址绑定到套接字——直接进行数据的接收。\r\n客户端：创建套接字——直接进行数据的发送。\r\n\r\n通信完毕，任意一方都可关闭套接字。\r\n\r\n### sockaddr 和 sockaddr_in 结构体\r\n通常，把网络应用程序中所用到的网络地址和端口号信息放在一个结构体中，这就是**套接口地址结构体**。\r\n\r\n每个协议族都定义了它自己的套接口地址结构体，套接口地址结构体都以 `sockaddr_` 开头，并以每个协议族名中的两个字母作为结尾，例如`sockaddr_in`表示 IPv4 协议族的套接口地址结构体。\r\n\r\n除此之外，还有一个通用套接口地址结构体，它以`sockaddr` 表示。通用套接口地址结构体 sockaddr 与具体协议族无关，形式为：\r\n```\r\nstruct sockaddr\r\n{\r\n	unit8_t	sa_len;\r\n	sa_family_t	sa_family;	//协议族名\r\n	char	sa_data[14];\r\n}\r\n```\r\n\r\nIPv4 套接口地址结构体 `sockaddr_in` 的形式如下：\r\n```\r\nstruct sockaddr_in\r\n{\r\n	unit8	sin_len;	//数据长度成员，固定长度为16字节，一般不用设置它；\r\n	sa_family_t	sin_family;	//协议族名，IPv4 为 AF_INET；\r\n	in_port_t sin_port;	//TCP 或 UDP 协议的端口号，16 位端口号，网络字节序\r\n	struct in_addr sin_addr;\r\n	char	sin_zero[8];	//备用的域名，未使用\r\n};\r\nstruct in_addr\r\n{\r\n	in_addr_t s_addr;	//32 位 IP 地址，网络字节序\r\n};\r\n```\r\n在对套接口进行操作的函数中，如果需要套接口地址参数，都是以通用套接口地址结构体表示的，例如连接函数 connect：\r\n\r\n`int connect(int sockfd,const struct sockaddr *serv_addr,int addrlen);`\r\n\r\n因此需要将**指向特定协议的套接口地址结构体的指针**转换成**指向通用套接口地址结构体的指针**，即使用`(struct sockaddr *)`进行类型转换。否则编译时会出现警告信息。\r\n\r\n### 套接口函数\r\n#### 总结步骤\r\n>一个服务器进程中系统调用的顺序通常如下\r\n\r\nsocket();\r\nbind();\r\nlisten();\r\naccept();\r\n>而客户端进程的调用则比较简单\r\n\r\nsocket();\r\nconnect();\r\n#### 创建套接字 socket\r\n\r\n`int socket(int family,int type,int protocol);`\r\n\r\nfamily：指明协议族\r\ntype：指明套接口类型\r\nprotocol：一般为 0\r\n\r\n成功：返回值为非负描述字\r\n失败：返回值为负值\r\n\r\n>参数 family 的取值范围\r\n\r\nAF_LOCAL：UNIX 协议族\r\nAF_ROUTE：路由套接口\r\nAF_INET：IPv4 协议\r\nAF_INET6：IPV6 协议\r\nAF_KEY：密钥套接口\r\n\r\n>参数 type 的取值范围\r\n\r\nSOCK_STREAM：TCP 套接口\r\nSOCK_DGRAM：UDP 套接口\r\nSOCK_PACKET：支持数据链路访问\r\nSOCK_RAM：原始套接口\r\n\r\n#### 绑定套接口 bind\r\n`int bind(int sockfd,const struct sockaddr *myaddr,socklen_t addrlen);`\r\n\r\nsockfd：套接字\r\nmyaddr：是一个指向特定协议地址结构体的指针\r\naddrlen：是地址结构体的长度。\r\n\r\n成功：返回 0\r\n失败：返回 -1\r\n\r\n这个调用不是必须执行的。尤其是在客户端，很少使用这个系统调用。用 socket() 得到套接口后可以直接调用函数 connect() 或者 listen()，这时内核会自动给套接口分配一个地址和端口号，这是常用的方式。\r\n\r\n只有在希望进程使用某个特定的网络地址和端口时，才会使用函数 bind()。\r\n\r\n#### 连接 connect\r\n`int connect(int sockfd,const struct sockaddr *serv_addr,int addrlen);`\r\n\r\nsockfd：套接口描述字\r\nserv_addr：目的端口和IP地址的套接口\r\naddrlen：目的套接口的长度\r\n\r\n成功：返回 0\r\n失败：返回 -l\r\n\r\n#### 监听 listen\r\n`int listen(int sockfd,int backlog);`\r\n\r\nsockfd：套接字\r\nbacklog：规定内核为此套接口排队的最大选择个数\r\n\r\n成功：返回 0\r\n失败：返回 -1\r\n\r\n#### 接受连接 accept (阻塞函数)\r\n`int accept(int sockfd,struct sockaddr *cliaddr,socklen_t *addrlen);`\r\n\r\ncliaddr：远程客户的套接口地址\r\naddrlen：套接口地址长度\r\nsockfd：监听套接字，它由函数 socket() 生成\r\n如果不需要客户的套接口地址，可将第二个和第三个参数设置为空指针\r\n\r\n成功：返回非负描述字，返回值即为新建立的连接的套接口描述字(客户套接字)\r\n失败：返回 -1\r\n\r\n>客户套接和监听套接字的区别：\r\n\r\n监听套接字只有一个，而且一直存在；而每一个连接都有自己的客户套接字，专用于服务器与该连接对应的远程客户进行通信。当连接断开时就关闭该客户套接字。\r\n\r\n>accept()是一个阻塞函数\r\n\r\n即调用它的线程将被操作系统置于阻塞状态，直到有远程客户向该IP地址的该端口发起connect()调用为止。\r\n\r\n#### 关闭 close\r\n`int close(int sockfd);`\r\n\r\n成功：返回 0\r\n失败：返回 -1\r\n\r\n#### 发送 send/sendto (阻塞函数)\r\n面向连接的套接口（TCP）:\r\n\r\n`int send(int sockfd,const void *buffer,int length,int flags);`\r\n\r\n无连接的套接口（UDP）:\r\n\r\n`int sendto(int sockfd,const void *message,int length,int flags,const struct sock_addr *dest_addr,int dest_len);`\r\n\r\n#### 接收 recv/recvfrom (阻塞函数)\r\n面向连接的套接口（TCP）:\r\n\r\n`int recv(int sockfd,void *buffer,int length,int flags);`\r\n\r\n无连接的套接口（UDP）:\r\n\r\n`int recvfrom(int sockfd,void *message,int length,int flags,const struct sock_addr *send_addr,int *send_len);`\r\n\r\n因为发送和接收函数进行一次传输的字节数可能比要求的数量少，所以需要多次调用这些函数以便发送或接收指定的字节数。所以，套**接口的数据传输通常都由一个循环结构来实现。**\r\n\r\n>Mysend 方法\r\n\r\n```\r\nint Mysend(SOCKET s, const char *buf, int len, int flags)\r\n{\r\n	if(buf == NULL)\r\n		return 0;\r\n	int iSendCount = 0:\r\n	int iLength = len:\r\n	while (iLength > 0)\r\n	{\r\n		int n = send(s, buf* iSendCount, iLength, flags);\r\n		if(n == SOCKET_ERROR)\r\n			return 0:\r\n		iLength -= n:\r\n		iSendCount += n:\r\n	}\r\n	return iSendCount\r\n}\r\n```\r\n\r\n>Myrecv 方法\r\n\r\n```\r\nint Myrecv(SOCKET s, char *buf, int len, int flags)\r\n{\r\n	if(buf == NULL)\r\n		return 0;\r\n	int iRecvCount = 0;\r\n	int iLength = len;\r\n	while (iLength > 0)\r\n	{\r\n		int nRev = recv(s, buf + iRecvCount, iLength, flags);\r\n		if(nReU == SOCKET_ERROR)\r\n			return 0:\r\n		iLength -= nRev;\r\n		iRecuCount += nRev;\r\n	}\r\n	return iRecvCount;\r\n}\r\n```\r\n## 多线程\r\n### 线程函数的原型\r\n#### Windows\r\n`DWOED ThreadProc(LPVOID lpParameter);`\r\n### 创建新线程\r\n#### Windows - CreateThread\r\nWin32 API 函数 ：CreateThread()\r\n```\r\nHANDLE CreateThread(\r\n	LPSECURITY_ATTRIBUTES lpsa,\r\n	DWORD cbStack,\r\n	LPTHREAD_START_ROUTINE lpstartAddr, //指向线程函数的指针，那个函数将做为一个新的线程而运行\r\n	LPVOID lpvThreadParam,\r\n	DWORD fdwCreate,\r\n	LPDWORD lpIDThread\r\n);\r\n```\r\n#### Unix - pthread_create\r\n```\r\n#include  <pthread.h>\r\nint  pthread_create（\r\n	pthread_t  *thread,\r\n	pthread_attr_t  *attr,\r\n	void  *（*start_routine）（void  *）,\r\n	void  *arg\r\n）\r\n```\r\n### Unix 中一个线程等待另一个线程结束的方法 - pthread_join\r\n```\r\n#include  <pthread.h>\r\nint pthread_join(\r\n	pthread_t thread,\r\n	void **retval\r\n);\r\n```\r\n### Linux中编译多线程程序的方法\r\n由于 pthread 库不是 Linux 系统默认的库，所以多线程的程序在编译时需要告诉编译器将这个库链接进来，编译命令应这样输入：`gcc xxx.c -lpthread`\r\n\r\n### 线程的并发（同步）问题\r\n属于同一个进程的所有线程可以共享全局数据和主线程中尚在生存期内的数据，如果没有并发控制，就会产生异常。\r\n\r\n并发控制的方法有多种，只要求掌握使用信号量来进行并发控制。 \r\n\r\nWindows 中主要函数有：\r\n```\r\nCreateSemaphore()\r\nWaitForSingleObject()\r\nReleaseSemaphore()\r\nCloseHandle()\r\n```\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n',`groups`='Linux',`is_show`=1,`publish`=1,`summary`='Linux 编程基础，包含进程，信号，进程间通信，网络编程等基础知识'  WHERE  `id` = 212 [ RunTime:0.002060s ]
[ sql ] [ SQL ] SELECT COUNT(*) AS tp_count FROM `note` WHERE  `groups` = 'Linux' LIMIT 1 [ RunTime:0.002105s ]
[ sql ] [ SQL ] UPDATE `groups`  SET `g_count`=11  WHERE  `groups` = 'Linux' [ RunTime:0.000396s ]
[ sql ] [ SQL ] SELECT COUNT(*) AS tp_count FROM `note` WHERE  `groups` = 'Linux' LIMIT 1 [ RunTime:0.001416s ]
[ sql ] [ SQL ] UPDATE `groups`  SET `g_count`=11  WHERE  `groups` = 'Linux' [ RunTime:0.000548s ]
---------------------------------------------------------------
[ 2018-10-24T19:50:00+08:00 ] 74.120.168.12 74.120.168.12 GET /daily/admin/note/shownote/id/212.html
[ info ] qingrang.top/daily/admin/note/shownote/id/212.html [运行时间：0.062828s][吞吐率：15.92req/s] [内存消耗：2,032.29kb] [文件加载：55]
[ info ] [ LANG ] /var/www/html/daily/thinkphp/lang/zh-cn.php
[ info ] [ ROUTE ] array (
  'type' => 'module',
  'module' => 
  array (
    0 => 'admin',
    1 => 'note',
    2 => 'shownote',
  ),
)
[ info ] [ HEADER ] array (
  'host' => 'qingrang.top',
  'cache-control' => 'max-age=0',
  'upgrade-insecure-requests' => '1',
  'user-agent' => 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/69.0.3497.100 Safari/537.36',
  'accept' => 'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8',
  'referer' => 'http://qingrang.top/daily/admin/note/editnote/id/212.html',
  'accept-encoding' => 'gzip, deflate',
  'accept-language' => 'zh-CN,zh;q=0.9,la;q=0.8,en;q=0.7,lb;q=0.6',
  'cookie' => 'Hm_lvt_1769181352e9adc950166aada465644e=1539846308,1540133692,1540187497; PHPSESSID=cfl1sikl9c45c63c655g4q7rd4',
  'connection' => 'close',
)
[ info ] [ PARAM ] array (
  'id' => '212',
)
[ info ] [ SESSION ] INIT array (
  'id' => '',
  'var_session_id' => '',
  'prefix' => 'think',
  'type' => '',
  'auto_start' => true,
)
[ info ] [ RUN ] app\admin\controller\Note->showNote[ /var/www/html/daily/application/admin/controller/Note.php ]
[ info ] [ DB ] INIT mysql
[ info ] [ VIEW ] /var/www/html/daily/application/admin/view/note/shownote.html [ array (
  0 => 'note',
  1 => 'groups',
) ]
[ info ] [ LOG ] INIT File
[ sql ] [ DB ] CONNECT:[ UseTime:0.000697s ] mysql:host=74.120.168.12;dbname=diary;charset=utf8
[ sql ] [ SQL ] SHOW COLUMNS FROM `note` [ RunTime:0.001525s ]
[ sql ] [ SQL ] SELECT * FROM `note` WHERE  `id` = 212 LIMIT 1 [ RunTime:0.001155s ]
[ sql ] [ SQL ] SHOW COLUMNS FROM `groups` [ RunTime:0.001484s ]
[ sql ] [ SQL ] SELECT * FROM `groups` [ RunTime:0.000417s ]
---------------------------------------------------------------
[ 2018-10-24T19:52:46+08:00 ] 74.120.168.12 74.120.168.12 GET /daily/admin/note/editnote/id/212.html
[ info ] qingrang.top/daily/admin/note/editnote/id/212.html [运行时间：0.087558s][吞吐率：11.42req/s] [内存消耗：2,083.53kb] [文件加载：56]
[ info ] [ LANG ] /var/www/html/daily/thinkphp/lang/zh-cn.php
[ info ] [ ROUTE ] array (
  'type' => 'module',
  'module' => 
  array (
    0 => 'admin',
    1 => 'note',
    2 => 'editnote',
  ),
)
[ info ] [ HEADER ] array (
  'host' => 'qingrang.top',
  'upgrade-insecure-requests' => '1',
  'user-agent' => 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/69.0.3497.100 Safari/537.36',
  'accept' => 'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8',
  'accept-encoding' => 'gzip, deflate',
  'accept-language' => 'zh-CN,zh;q=0.9,la;q=0.8,en;q=0.7,lb;q=0.6',
  'cookie' => 'Hm_lvt_1769181352e9adc950166aada465644e=1539846308,1540133692,1540187497; PHPSESSID=cfl1sikl9c45c63c655g4q7rd4',
  'connection' => 'close',
)
[ info ] [ PARAM ] array (
  'id' => '212',
)
[ info ] [ SESSION ] INIT array (
  'id' => '',
  'var_session_id' => '',
  'prefix' => 'think',
  'type' => '',
  'auto_start' => true,
)
[ info ] [ RUN ] app\admin\controller\Note->editNote[ /var/www/html/daily/application/admin/controller/Note.php ]
[ info ] [ DB ] INIT mysql
[ info ] [ VIEW ] /var/www/html/daily/application/admin/view/note/editnote.html [ array (
  0 => 'note',
  1 => 'groups',
) ]
[ info ] [ LOG ] INIT File
[ sql ] [ DB ] CONNECT:[ UseTime:0.000776s ] mysql:host=74.120.168.12;dbname=diary;charset=utf8
[ sql ] [ SQL ] SHOW COLUMNS FROM `note` [ RunTime:0.002019s ]
[ sql ] [ SQL ] SELECT * FROM `note` WHERE  `id` = 212 LIMIT 1 [ RunTime:0.000721s ]
[ sql ] [ SQL ] SHOW COLUMNS FROM `groups` [ RunTime:0.001359s ]
[ sql ] [ SQL ] SELECT * FROM `groups` [ RunTime:0.000389s ]
---------------------------------------------------------------
[ 2018-10-24T19:53:57+08:00 ] 74.120.168.12 74.120.168.12 POST /daily/admin/note/updatenote/id/212.html
[ info ] qingrang.top/daily/admin/note/updatenote/id/212.html [运行时间：0.087077s][吞吐率：11.48req/s] [内存消耗：2,293.81kb] [文件加载：58]
[ info ] [ LANG ] /var/www/html/daily/thinkphp/lang/zh-cn.php
[ info ] [ ROUTE ] array (
  'type' => 'module',
  'module' => 
  array (
    0 => 'admin',
    1 => 'note',
    2 => 'updatenote',
  ),
)
[ info ] [ HEADER ] array (
  'host' => 'qingrang.top',
  'content-length' => '81764',
  'cache-control' => 'max-age=0',
  'origin' => 'http://qingrang.top',
  'upgrade-insecure-requests' => '1',
  'content-type' => 'application/x-www-form-urlencoded',
  'user-agent' => 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/69.0.3497.100 Safari/537.36',
  'accept' => 'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8',
  'referer' => 'http://qingrang.top/daily/admin/note/editnote/id/212.html',
  'accept-encoding' => 'gzip, deflate',
  'accept-language' => 'zh-CN,zh;q=0.9,la;q=0.8,en;q=0.7,lb;q=0.6',
  'cookie' => 'Hm_lvt_1769181352e9adc950166aada465644e=1539846308,1540133692,1540187497; PHPSESSID=cfl1sikl9c45c63c655g4q7rd4',
  'connection' => 'close',
)
[ info ] [ PARAM ] array (
  'summary' => 'Linux 编程基础，包含进程，信号，进程间通信，网络编程等基础知识',
  'content' => '# Linux - C 编程
[TOC]
## 进程
### 孤儿进程 和 僵尸进程
Linux 系统中有两种特殊的进程：孤儿进程和僵尸进程。

父进程应负责子进程的回收工作，但父子进程是异步运行的，父进程不知道什么时候接收子进程，父进程甚至会在子进程结束之前结束。若父进程在子进程退出之前退出，子进程就会变成孤儿进程，此时子进程会被进程 init 收养，之后 init 会代替其原本的父进程完成状态收集工作。

当进程调用了 exit() 函数后，该进程并不是马上消失，而是留下一个称为僵尸进程的数据结构。僵尸进程是 Linux 系统中的另一种特殊进程，它几乎放弃进程退出前占用的所有内存，既没有可执行代码也不能被调度，只在进程列表中保留一个位置，记载进程的退出状态等信息供父进程收集。若父进程中没有回收子进程的代码，子进程将会一直处于僵尸态。

### 进程标识符
下列函数返回这些标识符，其返回值类型 pid_t，uid_t，gid_t 等都是宏定义，实质是 `unsigned int`
```
//头文件
#include <sys/types.h>
#include <unistd.h>

//返回:调用进程的 进程ID
pid_t getpid(void)	

//返回:调用进程的 父进程ID
pid_t getppid(void);

//返回:调用进程的 实际用户ID
uid_t getuid(void)

//返回:调用进程的 有效用户ID
uid_t geteuid(void)

//返回:调用进程的 实际组ID
gid_t getgid (void)

//返回:调用进程的 有效组ID
gid_t getegid(void)
```
### 进程同步
Linux 提供了 wait() 函数和 waitpid() 函数来获取进程状态，实现进程同步。这两个函数用于父、子进程之间的同步，即确保子进程一定先于父进程执行并终止。
```
#include <sys/types.h>
#include <sys/wait.h>
pid_t wait(int *status) ;
pid_t waitpid(pid_t pid , int * status, int options) ;
//两个函数返回：若成功则为 进程ID，若出错则为 -1。
```
### 实验：fork() 函数的使用
fork() 函数:
创建成功，父进程返回子进程的 id ，子进程返回 0
创建失败，父进程返回 -1
>使用 fork() 函数创建一个进程，进程创建成功后使父进程和子进程分别执行不同的功能

```
/*---------------------------------------------------
使用 fork() 函数创建一个进程，进程创建成功后使父进程和子进程分别执行不同的功能
-----------------------------------------------------*/
#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
int main()
{
	//调用fork()函数创建子进程
	pid_t pid = fork();
	if (pid == -1)	//创建失败
	{
		perror("fork error");
		exit(1);	//退出进程，指定返回值1
	}
	else if (pid > 0)	//创建成功 - 父进程
	{
		printf("父进程,pid=%d,ppid=%d\\n", getpid(), getppid());
	}
	else if (pid == 0)	//创建成功 - 子进程
	{
		printf("子进程,pid=%d,ppid=%d\\n", getpid(), getppid());
	}
	printf("........finish..........\\n");
	return 0;
}

/*========================================================================
父进程,pid=3720,ppid=3514
........finish..........
子进程,pid=3721,ppid=2012
........finish..........
========================================================================*/

```

- 多次执行文件 test_fork会发现这种情况: child process 后输出的 ppid 不等于 parent process 的 pid,而等于1。这是什么原因?
答：父进程先于子进程终止,子进程变为“孤儿进程”,后由进程 init 接收。

>使用 fork() 函数在循环中创建 5 个子进程，使子进程分别打印各自的编号和 pid

```
/*---------------------------------------------------
使用 fork() 函数在循环中创建 5 个子进程，使子进程分别打印各自的编号和 pid
-----------------------------------------------------*/
#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>

int main()
{
	pid_t pid;
	int i;
	//循环创建进程
	for (i = 0; i<5; i++){				
		if ((pid = fork()) == 0)	//若当前进程为子进程，便跳出循环
			break;
	}
	if (pid == -1){
		perror("fork error");
		exit(1);
	}
	else if (pid>0){	//父进程
		//sleep(5);	//父进程等待所有子进程执行结束后再执行
		printf("parent process:pid=%d\\n", getpid());
	}
	else if (pid == 0){		//子进程
		//sleep(i);	//每个子进程分别沉睡不同的时间
		printf("I am child=%d,pid=%d\\n", i + 1, getpid());
	}
	return 0;
}

/*========================================================================
>不 sleep 的输出：
zhangliren@ubuntu:~/Documents$ ./a.out 
I am child=2,pid=3814
parent process:pid=3812
I am child=1,pid=3813
I am child=4,pid=3816
zhangliren@ubuntu:~/Documents$ I am child=5,pid=3817
I am child=3,pid=3815
|(终端提示符)
----------------------------------------------------------
>sleep() 后的输出：
I am child=1,pid=3843
I am child=2,pid=3844
I am child=3,pid=3845
I am child=4,pid=3846
I am child=5,pid=3847
parent process:pid=3842
========================================================================*/
```

- 观察输出结果,会发现输出结果有以下问题
（1）子进程的编号不是递增的
（2）终端提示符后面仍有子进程信息打印,而命令提示符在最后一行的开头闪烁
这是为什么?

答：（1）父进程先于子进程终止。在 Linux 系统中,子进程应由父进程回收,但是当子进程被创建后,它与父进程及其他进程共同竟争系统资源,所以父子进程执行的顺序是不确定的,终止的先后顺序也是不确定的。此处创建了 5 个子进程,这 5 个子进程与父进程共同竞争资源。6 个进程使用 CPU 的顺序不确定,因此子进程的编号不是递增关系,父进程在子进程尚未全部终止前便终止。
（2）父进程是一个前台进程。当它终止退出后,会释放命令提示符,输出当前工作路径及端提示符[ thelma@ localhost~],但此时尚有子进程仍在执行,终端仍有信息输出,因此命令提示符会出现在输出结果最后一行的开头。

## 信号和信号处理
### 信号的概念
信号的本质是软件中断。很多比较重要的应用程序都需处理信号。信号是异步事件的典型实例，即产生信号的事件对进程而言是随机出现的。进程不能只是测试一个变量(例如errno)来判别是否发生了一个信号，而是必须告诉内核「在此信号发生时，请执行指定操作」。

可以要求系统在某个信号出现时按照下列三种方式中的一种进行操作：
1. 忽略此信号。大多数信号都可使用这种方式进行处理，但有两种信号却决不能被忽略。它们是：SIGKILL 和 SIGSTOP。这两种信号不能被忽略的原因是：它们向超级用户提供一种使进程终止或停止的可靠方法。
2. 捕捉信号。为了做到这一点要通知内核在某种信号发生时，调用一个用户函数。在用户函数中，可执行用户希望对这种事件进行的处理。
3. 执行系统默认动作。每一种信号都有系统默认动作。注意，对大多数信号的系统默认动作是终止该进程。

### 常见函数
#### kill
给指定进程发送信号

函数声明：`int kill(pid_t,int sig)`
pid：接收信号的进程ID
sig：要发送的信号编号
#### raise
发送指定信号给当前进程自身

函数声明：`int raise(int sig)`

#### pause
暂停进程，接收到任何信号后恢复

函数声明：`int pause()`

#### alarm
计时器，驱使内核在指定秒数后发送 SIGALRM 信号到调用该函数的进程，进程收到该信号后默认终止运行。

函数声明：`unsigned int alarm(unsigned int seconds)`

#### signal
捕获信号后，执行指定函数

函数声明：
`typedef void (* sighandler_t)(int);`
`sighandler_t signal(int signum,sighandler_t handler);`

signum：信号编号
handler：自定义信号处理函数的函数指针

### 实验：李纳斯的第一个程序
```
/*---------------------------------------------------------------------------------------------------------
李纳斯的第一个程序：两个进程，一个向屏幕输出 A，一个向屏幕输出 B，两进程轮换输出，中间间隔 1 秒钟。如此反复，直到用户按下 ctl + c 结束两个进程（ctl + c 就是向当前正在运行的所有进程发送SIGINT信号）。
---------------------------------------------------------------------------------------------------------*/
#include "stdio.h"
#include "sys/types.h"
#include "signal.h"

pid_t pid;

//自定义信号处理函数。
//父进程打印 AAA，子进程打印 BBB
void sigusr1_handler(int n)
{
	if(pid > 0)
		printf("AAAA\\n");
	else
		printf("BBBB\\n");

	alarm(1);//计时器，1s 后发送 SIGALRM 信号到进程
}

void sigalrm_handler(int n)
{
	if(pid > 0){	//父进程
		kill(pid, SIGUSR1); //发送 SIGUSR1 信号给 pid 进程
	}
	else{	//子进程
		kill(getppid(), SIGUSR1);//发送 SIGUSR1 信号给 父进程
	}
}

int main()
{
	//在fork()之前设置的信号处理函数会被子进程继承
	signal(SIGALRM, sigalrm_handler);//捕获 SIGALRM 信号，执行 sigalrm_handler
	signal(SIGUSR1, sigusr1_handler);//用户定义的信号，用于捕获 SIGUSR1 信号执行处理函数 sigusr1_handler

	pid = fork();
	if (pid > 0)	//父进程
		raise(SIGUSR1);	//发送 SIGUSR1 信号给当前进程

	while(1)
		pause();	//进程挂起，等待信号唤醒

	return 0;
}
```
## 进程间通信
### 信号量
#### 信号量的概念
信号量是一个计数器，用于多进程对共享数据对象的存取。为了获得共享资源，进程需要执行下列操作：
1. 测试控制该资源的信号量。
1. 若此信号量的值为正，则进程可以使用该资源。进程将信号量值减 1（P 操作），表示它使用了一个资源单位。若此信号量的值为 0，则进程进入睡眠状态，直至信号量值大于 0。若进程被唤醒后，它返回至第 1 步。当进程不再使用由一个信息量控制的共享资源时，该信号量值增 1（V 操作）。如果有进程正在睡眠等待此信号量，则唤醒它们中的一个。

这两个过程也叫做 p、v 操作。 p、v操作是原子操作。为此，信号量通常是在内核中实现的。

常用的信号量形式是让它控制单个资源，所以其初始值为 1。但是，一般而言，信号量的初值可以是任一正值，该值说明有多少个共享资源单位可供共享应用。

#### 信号量的创建与打开 semget
函数声明：`int semget(key_t key,int nsems,int semflg)`

key：所创建或打开的信号量集合的键
nsems：创建的信号量集合中信号量的个数，此参数只在创建一个新的信号量集合时有效
semflg：调用函数的操作类型，也可用于设置信号量集合的访问权限，两者通过逻辑或表示

返回：
- 成功：返回信号量ID
- 失败：-1，并设置 errno

>调用函数 semget 的作用由参数 key 和 flag 决定，相应约定如下：

- 当 key 为 IPC_PRIVATE 时，创建一个新的信号量集合。此时参数 flag 的取值对函数的操作不起仟何作用。
- 当 key 不为 IPC_PRIVATE，且 flag 设置了 IPC_CREAT 位，而没有设置 IPC_EXCL 位，则执行操作由 key 值决定：如果 key 为内核中某个已存在的信号量集合的键，则执行打开这个键的操作；反之，则执行创建信号量集合的操作。
- 当 key 不为 IPC_PRIVATE，且 flag 中同时设置了 IPC_CREAT 位和 IPC_EXCL 位，则执行创建信号量集合的操作。参数 key 的取值应与内核中已存在的任何信号量集合的键值都不相同，否则函数调用失败。

#### 对信号量的控制 semctl

函数声明：`int semctl(int semid, int semnum, int cmd, [union semun arg]) ;`

semid：为信号量集合的标识符。
semnum：用于指明某个特定信号量。
cmd：表示调用该函数希望执行的命令
cmd 的常用设置：
- SETVAL：表示 semctl() 的功能为初始化信号量的值，信号量值通过可选参数传入，在使用信号量前应先对信号量值进行设置
- IPC_RMID：表示 semctl() 的功能为从系统中删除指定信号量

arg：是一个 semun 共用体，该共用体中各个成员的具体含义和使用情况与参数 cmd 的取值有关。该共用体的定义如下：
```
union semen{
	int val;	//cmd 为 SETVAL 时，用于指定信号量值
	struct semid_ds *buf;	//cmd 为 IPC_STAT 时或 IPC_SET 时生效
	unsigned short *array;	//cmd 为 GETALL 或 SETALL 时生效
	struct seminfo *_buf;	//cmd 为 GETALL 或 SETALL 时生效
};
```

该共用体中的 struct semid_ds 是一个由内核维护的记录信号量属性信息的结构体，该结构体的定义如下：
```
ushort semid_ds{
	struct ipc_perm sem_perm;	//所有者和标致权限
	time_t sem_otime;	//最后操作时间
	time_t sem_ctime;	//最后更改时间
	unsigned short sem_nsems;	//信号集中的信号数量
}
```

返回：由参数 cmd 决定。对于除 GETALL 以外的所有 GET 命令，都返回相应值，通常为非负数。否则返回 -1。
#### 对信号量的操作——semop
改变信号量的值

函数声明：`int semop(int semid, struct sembuf *sops, unsigned nops) ; `

semid：为信号量集合的ID
semoparray：是一个 struct sembuf 类型的数组指针，该数组中的每个元素设置了要对信号量集中的哪个型号做哪种操作，struct sembuf 结构体定义如下：
```
struct sembuf{
	short sem_num;	//信号量在信号集中的编号
	short sem_op;	//信号量操作,-1 P操作，+1 V操作
	short sem_flag;	//标志位
};
```
nops：参数 sops 所指数组中元素的个数

返回：若成功则为 0，若出错则为 -1。

### 共享内存
#### 共享内存的概念
共享内存是进程问通信的一种最基本、最快速的机制。共享内存是两个或多个进程共享同一块内存区域，并通过该内存区域实现数据交换的进程问通信机制。通常是由一个进程开辟一块共享内存区域，然后允许多个进程对此区域进行访问。由于不需使用中间介质，而是数据由内存直接映射到进程空间，因此共享内存是最快速的进程间通信机制。

共享内存的最大不足在于，由于多个进程对同一块内存区域具有访问的权限，各个进程之间的同步问题显得尤为突出。必须控制同一时刻只有一个进程对共享内存区域写入数据，否则将造成数据的混乱。这可通过结合使用信号量来解决。

#### 共享内存的创建和打开 shmget
函数声明：`int shmget(key_t key, int size, int flag) ;`

key：表示所创建或打开的共享内存的键
size：表示共享内存区域的大小
flag：表示函数的操作类型，也可用于设置共享内存的访问权限，两者通过逻辑或表示

返回：若成功则为共享内存ID，若出错则为 -1。

#### 共享内存的附加 shmat
进行地址映射，将共享内存映射到进程虚拟地址空间中。

函数声明：`void *shmat(int shmid, void *addr, int flag) ;
`

shmid：表示要附加的共享内存段的ID
addr：虚拟地址
flag：用于表示函数的操作方式

返回：若成功则为指向共享内存段的指针，若出错则为-1

#### 共享内存的分离 shmdt
解除物理内存与进程虚拟地址空间的映射关系

函数声明：`int shmdt(void *addr) ;`

addr：是以前调用 shmat 时的返回值。

返回：若成功则为0，若出错则为 -1。

#### 共享内存的控制 shmctl
对共享内存段执行多种操作。

函数声明：`int shmctl(int shmid, int cmd, struct shmid_ds *buf) ;
`
shmid：为共享内存的标识符
cmd：表示调用该函数希望执行的操作

---
cmd 的取值和对应操作如下：
- IPC_STAT：对此段取 shmid_ds 结构，并存放在由 buf 指向的结构体中。
- IPC_SET：按 buf 指向的结构体中的值设置与此段相关结构体中的下列三个字段：shm_perm.uid、shm_perm.gid以及shm_perm.mode。此命令只能由下列两种进程执行：一种是其有效用户ID等于shm_perm.cuid或shm_perm.uid的进程；另一种是具有超级用户特权的进程。
- IPC_RMID：从系统中删除该共享内存段。此命令只能由下列两种进程执行：一种是其有效用户ID等于shm_perm.cuid或shm_perm.uid的进程；另一种是具有超级用户特权的进程。
- SHM_LOCK：锁住共享内存段。此命令只能由超级用户执行。
- SHM_UNLOCK：解锁共享内存段。此命令只能由超级用户执行。

---
buf：指向 shmid_ds 结构体的指针

返回：若成功则为0，若出错则为 -1。

### 实验：父进程产生10个子进程，并打印出子进程产生的随机数的和
```
/*---------------------------------------------------------------------------------------------------------
功能：
    父进程产生10个子进程，并打印出子进程产生的随机数的和。要求用信号机制、信号量以及共享内存实现。

思路：
    子进程将自己产生的随机数累加到共享内存。当10个子进程都累加完后，用信号机制通知父进程，
父进程就可以从共享内存中读取数据了。为了避免10个子进程向共享内存中写入数据时发生冲突，
应使用信号量进行并发控制。	
---------------------------------------------------------------------------------------------------------*/

#include "stdio.h"
#include "sys/types.h"
#include "signal.h"
#include "sys/ipc.h"
#include "sys/sem.h"
#include "sys/shm.h"

//semun 共用体
union semun
{
	int val;
	struct semid_ds *buf;	//一个由内核维护的记录信号量属性信息的结构体 
	ushort *array;
};


int semid;//信号量ID
int shmid;//共享内存ID
char *shm_virtualaddr;  //共享内存关联到进程后的虚拟地址

// P操作，获取信号量，-1
void p(int semid)
{
	struct sembuf buf = {0, -1, 0};
	//int semop(int semid, struct sembuf *sops, unsigned nops) ;
	semop(semid, &buf, 1);	//改变信号量的值
}

// V操作，释放信号量，+1
void v(int semid)
{
	struct sembuf buf = {0, 1, 0};
	semop(semid, &buf, 1);
}

void sigusr1_handler(int n)
{
	printf("count = %d, total = %d\\n", *(int *)shm_virtualaddr, *(int *)(shm_virtualaddr+4));  //打印进程编号（不是进程ID）和随机数和
	
	//删除信号量
	if(semctl(semid, IPC_RMID, 0) == -1)  
		printf("remove semaphore fail\\n");
	else
		printf("remove semaphore ok\\n");
	
	shmdt(shm_virtualaddr);  //解除共享内存的关联

	//删除共享内存
	if(shmctl(shmid, IPC_RMID, 0) == -1)  
		printf("remove shared-memory fail\\n");
	else
		printf("remove shared-memory ok\\n");

	exit(0);
}

int main()
{
	signal(SIGUSR1, sigusr1_handler);  //用户定义的信号，用于捕获 SIGUSR1 信号执行处理函数 sigusr1_handler

	//int semget(key_t key,int nsems,int semflg)
	//key：所创建或打开的信号量集合的键，nsems：创建的信号量集合中信号量的个数，semflg：调用函数的操作类型，也可用于设置信号量集合的访问权限
	//成功：返回信号量ID，失败：-1
	semid = semget(IPC_PRIVATE, 1, 0666);	//创建并初始化信号量

	if(semid == -1)	//信号量创建失败
	{
		printf("create semaphore fail\\n");
		return 0;
	}
	else{	 //返回信号量ID
		printf("create semaphore ok\\n");
	}

	//semun 共用体
	union semun x;
	x.val = 1;  //信号量初值应为多少？为1

	//int semctl(int semid, int semnum, int cmd, [union semun arg]) ;
	//semid：信号量集合，semnum：用于指明某个特定信号量，cmd：表示调用该函数希望执行的命令，arg：是一个 semun 共用体，
	semctl(semid, 0, SETVAL, x);	//初始化信号量为 1
	
	//int shmget(key_t key, int size, int flag);
	//key：表示所创建或打开的共享内存的键，size：表示共享内存区域的大小，flag：表示函数的操作类型，也可用于设置共享内存的访问权限
	//若成功则为共享内存ID，若出错则为 -1
	shmid = shmget(IPC_PRIVATE, 8, 0666);  //创建并关联到共享内存，共享内存一共 8 字节，前 4 字节存放 count，后 4 字节存放 total
	if(shmid == -1)	
	{
		printf("create shared-memory fail\\n");
		return 0;
	}
	else{	//返回共享内存ID
		printf("create shared-memory ok\\n");
	}

	//void *shmat(int shmid, void *addr, int flag) ;
	//shmid：表示要附加的共享内存段的ID，addr：虚拟地址，flag：用于表示函数的操作方式
	//成功则为指向共享内存段的指针，若出错则为-1
	shm_virtualaddr = shmat(shmid, 0, 0);//共享内存的附加，地址映射，addr 为 0，此共享内存段附加到由内核选择的第一个可用地址上

	*(int *)shm_virtualaddr = 0;  //初始化进程编号，将指针转成int*，然后取该指针指向地址的值
	*(int *)(shm_virtualaddr + 4) = 0;  //初始化随机数和

	//flag 是否是子进程
	char is_child = 0;
	int i;
	//循环创建 10 个进程
	for(i=0; i<10; i++)
	{
		pid_t pid = fork(); 
		if(pid == 0)	//子进程
		{
			is_child = 1;  //设置子进程中 is_child 为 1
			break;  //退出循环
		}
	}

	//子进程
	if(is_child)
	{
		p(semid);  // P操作，获取信号量（-1）

		srand(time(NULL) + i);	//设置随机种子数
		int num = rand()%10;	//取 0-9 随机数

		(*(int *)shm_virtualaddr)++;  //进程编号自增
		*(int *)(shm_virtualaddr + 4) += num;  //随机数相加

		printf("child%d: %d\\n", i, num);

		v(semid);  //V操作，释放信号量（+1）

		if(*(int *)shm_virtualaddr == 10)  //if(i==10)最后一个子进程，善后操作
			kill(getppid(), SIGUSR1);  //向父进程发送 SIGUSER1 信号 
	}
	else
	{
		while(1)
			pause();//挂起，等待信号唤醒
	}

	return 0;
}
/*========================================================================
create semaphore ok
create shared-memory ok
child0: 8
child1: 8
child5: 9
child4: 0
child6: 2
child3: 9
child7: 6
child8: 4
child9: 1
child2: 9
count = 10, total = 56
remove semaphore ok
remove shared-memory ok
========================================================================*/
```
## socket 编程接口
### 套接口概念
套接口实际就是网络进程的 PID（Process ID）。

网络通信，归根到底就是进程间的通信。套接口的描述符称为套接字，即 socket。有的资料中也叫套接口句柄。
### 阻塞模式和非阻塞模式（同步和异步）
阻塞模式：指调用了套接字的读、写函数后，函数不会立即返回，线程此时被置为等待状态，直到读、写操作完成为止。

非阻塞模式：指调用了套接字的读、写函数后，函数立即返回，不用等到读、写操作完成。

无论在 Windows 中还是 UNIX/LINUX 中，套接字被创建后默认都是阻塞模式的。

### 字节序转换
计算机在内存中的数据存储方式有两种：一种是小端字节序，即内存低地址存储数据低字节，高地址存储数据高字节；另一种是大端字节序，即内存低地址存储数据高字节，而高地址存储数据低字节。

网络字节序使用的是大端字节序，而主机字节序可能是小端字节序，也可能是大端字节序。所有套接字函数中涉及 IP 地址和端口号时都用网络字节序，因此要用到主机字节序和网络字节序之间相互转换功能的函数。

#### 返回网络字节序 htons/htonl
`u_short htons(u_short hostshort);`

`u_long htonl(u_long hostlong);`

#### 返回主机字节序 ntohs/ntohl
`u_short ntohs(u_short netshort);`

`u_long ntohl(u_long netlong);`

一般情况下，使用 htons 和 ntohs 转换 端口号，使用 htonl 和 ntohl 转换 IP 地址。
### 地址转换函数
在 TCP/IP 网络上，使用 ASCII 地址，即使用以“．”隔开的四个十进制的数表示。
在套接口地址中则是使用 32 位的网络字节序的二进制数值。
要实现两者之间的转换，就要用到以下两个函数：

`unsigned long inet_addr(const char FAR* cp);`

成功：返回 32 位二进制的网络字节序地址
出错：返回 INADDR_NONE。

`char FAR* inet_ntoa(struct in_addr in);`

成功：返回字符串的指针
失败：返回 NULL

### 流套接字编程模型
服务器端：创建套接字——将本地地址绑定到套接字——进入监听模式并准备接受连接。
客户端：创建套接字——请求连接。

双方建立连接后就可以开始数据通信了，双方都可以进行数据的发送和接收。

最后，通信完毕，任意一方都可关闭套接字。
### 数据报套接字编程模型
服务器端：创建套接字——将本地地址绑定到套接字——直接进行数据的接收。
客户端：创建套接字——直接进行数据的发送。

通信完毕，任意一方都可关闭套接字。

### sockaddr 和 sockaddr_in 结构体
通常，把网络应用程序中所用到的网络地址和端口号信息放在一个结构体中，这就是**套接口地址结构体**。

每个协议族都定义了它自己的套接口地址结构体，套接口地址结构体都以 `sockaddr_` 开头，并以每个协议族名中的两个字母作为结尾，例如`sockaddr_in`表示 IPv4 协议族的套接口地址结构体。

除此之外，还有一个通用套接口地址结构体，它以`sockaddr` 表示。通用套接口地址结构体 sockaddr 与具体协议族无关，形式为：
```
struct sockaddr
{
	unit8_t	sa_len;
	sa_family_t	sa_family;	//协议族名
	char	sa_data[14];
}
```

IPv4 套接口地址结构体 `sockaddr_in` 的形式如下：
```
struct sockaddr_in
{
	unit8	sin_len;	//数据长度成员，固定长度为16字节，一般不用设置它；
	sa_family_t	sin_family;	//协议族名，IPv4 为 AF_INET；
	in_port_t sin_port;	//TCP 或 UDP 协议的端口号，16 位端口号，网络字节序
	struct in_addr sin_addr;
	char	sin_zero[8];	//备用的域名，未使用
};
struct in_addr
{
	in_addr_t s_addr;	//32 位 IP 地址，网络字节序
};
```
在对套接口进行操作的函数中，如果需要套接口地址参数，都是以通用套接口地址结构体表示的，例如连接函数 connect：

`int connect(int sockfd,const struct sockaddr *serv_addr,int addrlen);`

因此需要将**指向特定协议的套接口地址结构体的指针**转换成**指向通用套接口地址结构体的指针**，即使用`(struct sockaddr *)`进行类型转换。否则编译时会出现警告信息。

### 套接口函数
#### 总结步骤
>一个服务器进程中系统调用的顺序通常如下

socket();
bind();
listen();
accept();
>而客户端进程的调用则比较简单

socket();
connect();
#### 创建套接字 socket

`int socket(int family,int type,int protocol);`

family：指明协议族
type：指明套接口类型
protocol：一般为 0

成功：返回值为非负描述字
失败：返回值为负值

>参数 family 的取值范围

AF_LOCAL：UNIX 协议族
AF_ROUTE：路由套接口
AF_INET：IPv4 协议
AF_INET6：IPV6 协议
AF_KEY：密钥套接口

>参数 type 的取值范围

SOCK_STREAM：TCP 套接口
SOCK_DGRAM：UDP 套接口
SOCK_PACKET：支持数据链路访问
SOCK_RAM：原始套接口

#### 绑定套接口 bind
`int bind(int sockfd,const struct sockaddr *myaddr,socklen_t addrlen);`

sockfd：套接字
myaddr：是一个指向特定协议地址结构体的指针
addrlen：是地址结构体的长度。

成功：返回 0
失败：返回 -1

这个调用不是必须执行的。尤其是在客户端，很少使用这个系统调用。用 socket() 得到套接口后可以直接调用函数 connect() 或者 listen()，这时内核会自动给套接口分配一个地址和端口号，这是常用的方式。

只有在希望进程使用某个特定的网络地址和端口时，才会使用函数 bind()。

#### 连接 connect
`int connect(int sockfd,const struct sockaddr *serv_addr,int addrlen);`

sockfd：套接口描述字
serv_addr：目的端口和IP地址的套接口
addrlen：目的套接口的长度

成功：返回 0
失败：返回 -l

#### 监听 listen
`int listen(int sockfd,int backlog);`

sockfd：套接字
backlog：规定内核为此套接口排队的最大选择个数

成功：返回 0
失败：返回 -1

#### 接受连接 accept (阻塞函数)
`int accept(int sockfd,struct sockaddr *cliaddr,socklen_t *addrlen);`

cliaddr：远程客户的套接口地址
addrlen：套接口地址长度
sockfd：监听套接字，它由函数 socket() 生成
如果不需要客户的套接口地址，可将第二个和第三个参数设置为空指针

成功：返回非负描述字，返回值即为新建立的连接的套接口描述字(客户套接字)
失败：返回 -1

>客户套接和监听套接字的区别：

监听套接字只有一个，而且一直存在；而每一个连接都有自己的客户套接字，专用于服务器与该连接对应的远程客户进行通信。当连接断开时就关闭该客户套接字。

>accept()是一个阻塞函数

即调用它的线程将被操作系统置于阻塞状态，直到有远程客户向该IP地址的该端口发起connect()调用为止。

#### 关闭 close
`int close(int sockfd);`

成功：返回 0
失败：返回 -1

#### 发送 send/sendto (阻塞函数)
面向连接的套接口（TCP）:

`int send(int sockfd,const void *buffer,int length,int flags);`

无连接的套接口（UDP）:

`int sendto(int sockfd,const void *message,int length,int flags,const struct sock_addr *dest_addr,int dest_len);`

#### 接收 recv/recvfrom (阻塞函数)
面向连接的套接口（TCP）:

`int recv(int sockfd,void *buffer,int length,int flags);`

无连接的套接口（UDP）:

`int recvfrom(int sockfd,void *message,int length,int flags,const struct sock_addr *send_addr,int *send_len);`

因为发送和接收函数进行一次传输的字节数可能比要求的数量少，所以需要多次调用这些函数以便发送或接收指定的字节数。所以，套**接口的数据传输通常都由一个循环结构来实现。**

>Mysend 方法

```
int Mysend(SOCKET s, const char *buf, int len, int flags)
{
	if(buf == NULL)
		return 0;
	int iSendCount = 0:
	int iLength = len:
	while (iLength > 0)
	{
		int n = send(s, buf* iSendCount, iLength, flags);
		if(n == SOCKET_ERROR)
			return 0:
		iLength -= n:
		iSendCount += n:
	}
	return iSendCount
}
```

>Myrecv 方法

```
int Myrecv(SOCKET s, char *buf, int len, int flags)
{
	if(buf == NULL)
		return 0;
	int iRecvCount = 0;
	int iLength = len;
	while (iLength > 0)
	{
		int nRev = recv(s, buf + iRecvCount, iLength, flags);
		if(nReU == SOCKET_ERROR)
			return 0:
		iLength -= nRev;
		iRecuCount += nRev;
	}
	return iRecvCount;
}
```
## 多线程
### 线程函数的原型
#### Windows
`DWOED ThreadProc(LPVOID lpParameter);`
### 创建新线程
#### Windows - CreateThread
Win32 API 函数 ：CreateThread()
```
HANDLE CreateThread(
	LPSECURITY_ATTRIBUTES lpsa,
	DWORD cbStack,
	LPTHREAD_START_ROUTINE lpstartAddr, //指向线程函数的指针，那个函数将做为一个新的线程而运行
	LPVOID lpvThreadParam,
	DWORD fdwCreate,
	LPDWORD lpIDThread
);
```
#### Unix - pthread_create
```
#include  <pthread.h>
int  pthread_create（
	pthread_t  *thread,
	pthread_attr_t  *attr,
	void  *（*start_routine）（void  *）,
	void  *arg
）
```
### 一个线程等待另一个线程结束的方法
#### Unix - pthread_join
```
#include  <pthread.h>
int pthread_join(
	pthread_t thread,
	void **retval
);
```
### Linux 中编译多线程程序的方法
由于 pthread 库不是 Linux 系统默认的库，所以多线程的程序在编译时需要告诉编译器将这个库链接进来，编译命令应这样输入：`gcc xxx.c -lpthread`

### 线程的并发（同步）问题
属于同一个进程的所有线程可以共享全局数据和主线程中尚在生存期内的数据，如果没有并发控制，就会产生异常。

并发控制的方法有多种，只要求掌握使用信号量来进行并发控制。

Windows 中主要函数有：
```
CreateSemaphore()
WaitForSingleObject()
ReleaseSemaphore()
CloseHandle()
```







',
  'groups' => 'Linux',
  'showsel' => '1',
  'showse2' => '1',
  'id' => '212',
)
[ info ] [ SESSION ] INIT array (
  'id' => '',
  'var_session_id' => '',
  'prefix' => 'think',
  'type' => '',
  'auto_start' => true,
)
[ info ] [ RUN ] app\admin\controller\Note->updateNote[ /var/www/html/daily/application/admin/controller/Note.php ]
[ info ] [ DB ] INIT mysql
[ info ] [ CACHE ] INIT File
[ info ] [ LOG ] INIT File
[ sql ] [ DB ] CONNECT:[ UseTime:0.000841s ] mysql:host=74.120.168.12;dbname=diary;charset=utf8
[ sql ] [ SQL ] SHOW COLUMNS FROM `note` [ RunTime:0.002080s ]
[ sql ] [ SQL ] SELECT * FROM `note` WHERE  `id` = 212 LIMIT 1 [ RunTime:0.000952s ]
[ sql ] [ SQL ] SELECT `groups` FROM `note` WHERE  `id` = 212 LIMIT 1 [ RunTime:0.000546s ]
[ sql ] [ SQL ] SHOW COLUMNS FROM `groups` [ RunTime:0.001521s ]
[ sql ] [ SQL ] SELECT `parent_id` FROM `groups` WHERE  `groups` = 'Linux' LIMIT 1 [ RunTime:0.000516s ]
[ sql ] [ SQL ] SELECT `groups` FROM `groups` WHERE  `id` = 2 LIMIT 1 [ RunTime:0.000431s ]
[ sql ] [ SQL ] UPDATE `note`  SET `id`=212,`p_id`=2,`title`='Linux - C 编程\r',`content`='# Linux - C 编程\r\n[TOC]\r\n## 进程\r\n### 孤儿进程 和 僵尸进程\r\nLinux 系统中有两种特殊的进程：孤儿进程和僵尸进程。\r\n\r\n父进程应负责子进程的回收工作，但父子进程是异步运行的，父进程不知道什么时候接收子进程，父进程甚至会在子进程结束之前结束。若父进程在子进程退出之前退出，子进程就会变成孤儿进程，此时子进程会被进程 init 收养，之后 init 会代替其原本的父进程完成状态收集工作。\r\n\r\n当进程调用了 exit() 函数后，该进程并不是马上消失，而是留下一个称为僵尸进程的数据结构。僵尸进程是 Linux 系统中的另一种特殊进程，它几乎放弃进程退出前占用的所有内存，既没有可执行代码也不能被调度，只在进程列表中保留一个位置，记载进程的退出状态等信息供父进程收集。若父进程中没有回收子进程的代码，子进程将会一直处于僵尸态。\r\n\r\n### 进程标识符\r\n下列函数返回这些标识符，其返回值类型 pid_t，uid_t，gid_t 等都是宏定义，实质是 `unsigned int`\r\n```\r\n//头文件\r\n#include <sys/types.h>\r\n#include <unistd.h>\r\n\r\n//返回:调用进程的 进程ID\r\npid_t getpid(void)	\r\n\r\n//返回:调用进程的 父进程ID\r\npid_t getppid(void);\r\n\r\n//返回:调用进程的 实际用户ID\r\nuid_t getuid(void)\r\n\r\n//返回:调用进程的 有效用户ID\r\nuid_t geteuid(void)\r\n\r\n//返回:调用进程的 实际组ID\r\ngid_t getgid (void)\r\n\r\n//返回:调用进程的 有效组ID\r\ngid_t getegid(void)\r\n```\r\n### 进程同步\r\nLinux 提供了 wait() 函数和 waitpid() 函数来获取进程状态，实现进程同步。这两个函数用于父、子进程之间的同步，即确保子进程一定先于父进程执行并终止。\r\n```\r\n#include <sys/types.h>\r\n#include <sys/wait.h>\r\npid_t wait(int *status) ;\r\npid_t waitpid(pid_t pid , int * status, int options) ;\r\n//两个函数返回：若成功则为 进程ID，若出错则为 -1。\r\n```\r\n### 实验：fork() 函数的使用\r\nfork() 函数:\r\n创建成功，父进程返回子进程的 id ，子进程返回 0\r\n创建失败，父进程返回 -1\r\n>使用 fork() 函数创建一个进程，进程创建成功后使父进程和子进程分别执行不同的功能\r\n\r\n```\r\n/*---------------------------------------------------\r\n使用 fork() 函数创建一个进程，进程创建成功后使父进程和子进程分别执行不同的功能\r\n-----------------------------------------------------*/\r\n#include <stdio.h>\r\n#include <stdlib.h>\r\n#include <unistd.h>\r\nint main()\r\n{\r\n	//调用fork()函数创建子进程\r\n	pid_t pid = fork();\r\n	if (pid == -1)	//创建失败\r\n	{\r\n		perror(\"fork error\");\r\n		exit(1);	//退出进程，指定返回值1\r\n	}\r\n	else if (pid > 0)	//创建成功 - 父进程\r\n	{\r\n		printf(\"父进程,pid=%d,ppid=%d\\n\", getpid(), getppid());\r\n	}\r\n	else if (pid == 0)	//创建成功 - 子进程\r\n	{\r\n		printf(\"子进程,pid=%d,ppid=%d\\n\", getpid(), getppid());\r\n	}\r\n	printf(\"........finish..........\\n\");\r\n	return 0;\r\n}\r\n\r\n/*========================================================================\r\n父进程,pid=3720,ppid=3514\r\n........finish..........\r\n子进程,pid=3721,ppid=2012\r\n........finish..........\r\n========================================================================*/\r\n\r\n```\r\n\r\n- 多次执行文件 test_fork会发现这种情况: child process 后输出的 ppid 不等于 parent process 的 pid,而等于1。这是什么原因?\r\n答：父进程先于子进程终止,子进程变为“孤儿进程”,后由进程 init 接收。\r\n\r\n>使用 fork() 函数在循环中创建 5 个子进程，使子进程分别打印各自的编号和 pid\r\n\r\n```\r\n/*---------------------------------------------------\r\n使用 fork() 函数在循环中创建 5 个子进程，使子进程分别打印各自的编号和 pid\r\n-----------------------------------------------------*/\r\n#include <stdio.h>\r\n#include <stdlib.h>\r\n#include <unistd.h>\r\n\r\nint main()\r\n{\r\n	pid_t pid;\r\n	int i;\r\n	//循环创建进程\r\n	for (i = 0; i<5; i++){				\r\n		if ((pid = fork()) == 0)	//若当前进程为子进程，便跳出循环\r\n			break;\r\n	}\r\n	if (pid == -1){\r\n		perror(\"fork error\");\r\n		exit(1);\r\n	}\r\n	else if (pid>0){	//父进程\r\n		//sleep(5);	//父进程等待所有子进程执行结束后再执行\r\n		printf(\"parent process:pid=%d\\n\", getpid());\r\n	}\r\n	else if (pid == 0){		//子进程\r\n		//sleep(i);	//每个子进程分别沉睡不同的时间\r\n		printf(\"I am child=%d,pid=%d\\n\", i + 1, getpid());\r\n	}\r\n	return 0;\r\n}\r\n\r\n/*========================================================================\r\n>不 sleep 的输出：\r\nzhangliren@ubuntu:~/Documents$ ./a.out \r\nI am child=2,pid=3814\r\nparent process:pid=3812\r\nI am child=1,pid=3813\r\nI am child=4,pid=3816\r\nzhangliren@ubuntu:~/Documents$ I am child=5,pid=3817\r\nI am child=3,pid=3815\r\n|(终端提示符)\r\n----------------------------------------------------------\r\n>sleep() 后的输出：\r\nI am child=1,pid=3843\r\nI am child=2,pid=3844\r\nI am child=3,pid=3845\r\nI am child=4,pid=3846\r\nI am child=5,pid=3847\r\nparent process:pid=3842\r\n========================================================================*/\r\n```\r\n\r\n- 观察输出结果,会发现输出结果有以下问题\r\n（1）子进程的编号不是递增的\r\n（2）终端提示符后面仍有子进程信息打印,而命令提示符在最后一行的开头闪烁\r\n这是为什么?\r\n\r\n答：（1）父进程先于子进程终止。在 Linux 系统中,子进程应由父进程回收,但是当子进程被创建后,它与父进程及其他进程共同竟争系统资源,所以父子进程执行的顺序是不确定的,终止的先后顺序也是不确定的。此处创建了 5 个子进程,这 5 个子进程与父进程共同竞争资源。6 个进程使用 CPU 的顺序不确定,因此子进程的编号不是递增关系,父进程在子进程尚未全部终止前便终止。\r\n（2）父进程是一个前台进程。当它终止退出后,会释放命令提示符,输出当前工作路径及端提示符[ thelma@ localhost~],但此时尚有子进程仍在执行,终端仍有信息输出,因此命令提示符会出现在输出结果最后一行的开头。\r\n\r\n## 信号和信号处理\r\n### 信号的概念\r\n信号的本质是软件中断。很多比较重要的应用程序都需处理信号。信号是异步事件的典型实例，即产生信号的事件对进程而言是随机出现的。进程不能只是测试一个变量(例如errno)来判别是否发生了一个信号，而是必须告诉内核「在此信号发生时，请执行指定操作」。\r\n\r\n可以要求系统在某个信号出现时按照下列三种方式中的一种进行操作：\r\n1. 忽略此信号。大多数信号都可使用这种方式进行处理，但有两种信号却决不能被忽略。它们是：SIGKILL 和 SIGSTOP。这两种信号不能被忽略的原因是：它们向超级用户提供一种使进程终止或停止的可靠方法。\r\n2. 捕捉信号。为了做到这一点要通知内核在某种信号发生时，调用一个用户函数。在用户函数中，可执行用户希望对这种事件进行的处理。\r\n3. 执行系统默认动作。每一种信号都有系统默认动作。注意，对大多数信号的系统默认动作是终止该进程。\r\n\r\n### 常见函数\r\n#### kill\r\n给指定进程发送信号\r\n\r\n函数声明：`int kill(pid_t,int sig)`\r\npid：接收信号的进程ID\r\nsig：要发送的信号编号\r\n#### raise\r\n发送指定信号给当前进程自身\r\n\r\n函数声明：`int raise(int sig)`\r\n\r\n#### pause\r\n暂停进程，接收到任何信号后恢复\r\n\r\n函数声明：`int pause()`\r\n\r\n#### alarm\r\n计时器，驱使内核在指定秒数后发送 SIGALRM 信号到调用该函数的进程，进程收到该信号后默认终止运行。\r\n\r\n函数声明：`unsigned int alarm(unsigned int seconds)`\r\n\r\n#### signal\r\n捕获信号后，执行指定函数\r\n\r\n函数声明：\r\n`typedef void (* sighandler_t)(int);`\r\n`sighandler_t signal(int signum,sighandler_t handler);`\r\n\r\nsignum：信号编号\r\nhandler：自定义信号处理函数的函数指针\r\n\r\n### 实验：李纳斯的第一个程序\r\n```\r\n/*---------------------------------------------------------------------------------------------------------\r\n李纳斯的第一个程序：两个进程，一个向屏幕输出 A，一个向屏幕输出 B，两进程轮换输出，中间间隔 1 秒钟。如此反复，直到用户按下 ctl + c 结束两个进程（ctl + c 就是向当前正在运行的所有进程发送SIGINT信号）。\r\n---------------------------------------------------------------------------------------------------------*/\r\n#include \"stdio.h\"\r\n#include \"sys/types.h\"\r\n#include \"signal.h\"\r\n\r\npid_t pid;\r\n\r\n//自定义信号处理函数。\r\n//父进程打印 AAA，子进程打印 BBB\r\nvoid sigusr1_handler(int n)\r\n{\r\n	if(pid > 0)\r\n		printf(\"AAAA\\n\");\r\n	else\r\n		printf(\"BBBB\\n\");\r\n\r\n	alarm(1);//计时器，1s 后发送 SIGALRM 信号到进程\r\n}\r\n\r\nvoid sigalrm_handler(int n)\r\n{\r\n	if(pid > 0){	//父进程\r\n		kill(pid, SIGUSR1); //发送 SIGUSR1 信号给 pid 进程\r\n	}\r\n	else{	//子进程\r\n		kill(getppid(), SIGUSR1);//发送 SIGUSR1 信号给 父进程\r\n	}\r\n}\r\n\r\nint main()\r\n{\r\n	//在fork()之前设置的信号处理函数会被子进程继承\r\n	signal(SIGALRM, sigalrm_handler);//捕获 SIGALRM 信号，执行 sigalrm_handler\r\n	signal(SIGUSR1, sigusr1_handler);//用户定义的信号，用于捕获 SIGUSR1 信号执行处理函数 sigusr1_handler\r\n\r\n	pid = fork();\r\n	if (pid > 0)	//父进程\r\n		raise(SIGUSR1);	//发送 SIGUSR1 信号给当前进程\r\n\r\n	while(1)\r\n		pause();	//进程挂起，等待信号唤醒\r\n\r\n	return 0;\r\n}\r\n```\r\n## 进程间通信\r\n### 信号量\r\n#### 信号量的概念\r\n信号量是一个计数器，用于多进程对共享数据对象的存取。为了获得共享资源，进程需要执行下列操作：\r\n1. 测试控制该资源的信号量。\r\n1. 若此信号量的值为正，则进程可以使用该资源。进程将信号量值减 1（P 操作），表示它使用了一个资源单位。若此信号量的值为 0，则进程进入睡眠状态，直至信号量值大于 0。若进程被唤醒后，它返回至第 1 步。当进程不再使用由一个信息量控制的共享资源时，该信号量值增 1（V 操作）。如果有进程正在睡眠等待此信号量，则唤醒它们中的一个。\r\n\r\n这两个过程也叫做 p、v 操作。 p、v操作是原子操作。为此，信号量通常是在内核中实现的。\r\n\r\n常用的信号量形式是让它控制单个资源，所以其初始值为 1。但是，一般而言，信号量的初值可以是任一正值，该值说明有多少个共享资源单位可供共享应用。\r\n\r\n#### 信号量的创建与打开 semget\r\n函数声明：`int semget(key_t key,int nsems,int semflg)`\r\n\r\nkey：所创建或打开的信号量集合的键\r\nnsems：创建的信号量集合中信号量的个数，此参数只在创建一个新的信号量集合时有效\r\nsemflg：调用函数的操作类型，也可用于设置信号量集合的访问权限，两者通过逻辑或表示\r\n\r\n返回：\r\n- 成功：返回信号量ID\r\n- 失败：-1，并设置 errno\r\n\r\n>调用函数 semget 的作用由参数 key 和 flag 决定，相应约定如下：\r\n\r\n- 当 key 为 IPC_PRIVATE 时，创建一个新的信号量集合。此时参数 flag 的取值对函数的操作不起仟何作用。\r\n- 当 key 不为 IPC_PRIVATE，且 flag 设置了 IPC_CREAT 位，而没有设置 IPC_EXCL 位，则执行操作由 key 值决定：如果 key 为内核中某个已存在的信号量集合的键，则执行打开这个键的操作；反之，则执行创建信号量集合的操作。\r\n- 当 key 不为 IPC_PRIVATE，且 flag 中同时设置了 IPC_CREAT 位和 IPC_EXCL 位，则执行创建信号量集合的操作。参数 key 的取值应与内核中已存在的任何信号量集合的键值都不相同，否则函数调用失败。\r\n\r\n#### 对信号量的控制 semctl\r\n\r\n函数声明：`int semctl(int semid, int semnum, int cmd, [union semun arg]) ;`\r\n\r\nsemid：为信号量集合的标识符。\r\nsemnum：用于指明某个特定信号量。\r\ncmd：表示调用该函数希望执行的命令\r\ncmd 的常用设置：\r\n- SETVAL：表示 semctl() 的功能为初始化信号量的值，信号量值通过可选参数传入，在使用信号量前应先对信号量值进行设置\r\n- IPC_RMID：表示 semctl() 的功能为从系统中删除指定信号量\r\n\r\narg：是一个 semun 共用体，该共用体中各个成员的具体含义和使用情况与参数 cmd 的取值有关。该共用体的定义如下：\r\n```\r\nunion semen{\r\n	int val;	//cmd 为 SETVAL 时，用于指定信号量值\r\n	struct semid_ds *buf;	//cmd 为 IPC_STAT 时或 IPC_SET 时生效\r\n	unsigned short *array;	//cmd 为 GETALL 或 SETALL 时生效\r\n	struct seminfo *_buf;	//cmd 为 GETALL 或 SETALL 时生效\r\n};\r\n```\r\n\r\n该共用体中的 struct semid_ds 是一个由内核维护的记录信号量属性信息的结构体，该结构体的定义如下：\r\n```\r\nushort semid_ds{\r\n	struct ipc_perm sem_perm;	//所有者和标致权限\r\n	time_t sem_otime;	//最后操作时间\r\n	time_t sem_ctime;	//最后更改时间\r\n	unsigned short sem_nsems;	//信号集中的信号数量\r\n}\r\n```\r\n\r\n返回：由参数 cmd 决定。对于除 GETALL 以外的所有 GET 命令，都返回相应值，通常为非负数。否则返回 -1。\r\n#### 对信号量的操作——semop\r\n改变信号量的值\r\n\r\n函数声明：`int semop(int semid, struct sembuf *sops, unsigned nops) ; `\r\n\r\nsemid：为信号量集合的ID\r\nsemoparray：是一个 struct sembuf 类型的数组指针，该数组中的每个元素设置了要对信号量集中的哪个型号做哪种操作，struct sembuf 结构体定义如下：\r\n```\r\nstruct sembuf{\r\n	short sem_num;	//信号量在信号集中的编号\r\n	short sem_op;	//信号量操作,-1 P操作，+1 V操作\r\n	short sem_flag;	//标志位\r\n};\r\n```\r\nnops：参数 sops 所指数组中元素的个数\r\n\r\n返回：若成功则为 0，若出错则为 -1。\r\n\r\n### 共享内存\r\n#### 共享内存的概念\r\n共享内存是进程问通信的一种最基本、最快速的机制。共享内存是两个或多个进程共享同一块内存区域，并通过该内存区域实现数据交换的进程问通信机制。通常是由一个进程开辟一块共享内存区域，然后允许多个进程对此区域进行访问。由于不需使用中间介质，而是数据由内存直接映射到进程空间，因此共享内存是最快速的进程间通信机制。\r\n\r\n共享内存的最大不足在于，由于多个进程对同一块内存区域具有访问的权限，各个进程之间的同步问题显得尤为突出。必须控制同一时刻只有一个进程对共享内存区域写入数据，否则将造成数据的混乱。这可通过结合使用信号量来解决。\r\n\r\n#### 共享内存的创建和打开 shmget\r\n函数声明：`int shmget(key_t key, int size, int flag) ;`\r\n\r\nkey：表示所创建或打开的共享内存的键\r\nsize：表示共享内存区域的大小\r\nflag：表示函数的操作类型，也可用于设置共享内存的访问权限，两者通过逻辑或表示\r\n\r\n返回：若成功则为共享内存ID，若出错则为 -1。\r\n\r\n#### 共享内存的附加 shmat\r\n进行地址映射，将共享内存映射到进程虚拟地址空间中。\r\n\r\n函数声明：`void *shmat(int shmid, void *addr, int flag) ;\r\n`\r\n\r\nshmid：表示要附加的共享内存段的ID\r\naddr：虚拟地址\r\nflag：用于表示函数的操作方式\r\n\r\n返回：若成功则为指向共享内存段的指针，若出错则为-1\r\n\r\n#### 共享内存的分离 shmdt\r\n解除物理内存与进程虚拟地址空间的映射关系\r\n\r\n函数声明：`int shmdt(void *addr) ;`\r\n\r\naddr：是以前调用 shmat 时的返回值。\r\n\r\n返回：若成功则为0，若出错则为 -1。\r\n\r\n#### 共享内存的控制 shmctl\r\n对共享内存段执行多种操作。\r\n\r\n函数声明：`int shmctl(int shmid, int cmd, struct shmid_ds *buf) ;\r\n`\r\nshmid：为共享内存的标识符\r\ncmd：表示调用该函数希望执行的操作\r\n\r\n---\r\ncmd 的取值和对应操作如下：\r\n- IPC_STAT：对此段取 shmid_ds 结构，并存放在由 buf 指向的结构体中。\r\n- IPC_SET：按 buf 指向的结构体中的值设置与此段相关结构体中的下列三个字段：shm_perm.uid、shm_perm.gid以及shm_perm.mode。此命令只能由下列两种进程执行：一种是其有效用户ID等于shm_perm.cuid或shm_perm.uid的进程；另一种是具有超级用户特权的进程。\r\n- IPC_RMID：从系统中删除该共享内存段。此命令只能由下列两种进程执行：一种是其有效用户ID等于shm_perm.cuid或shm_perm.uid的进程；另一种是具有超级用户特权的进程。\r\n- SHM_LOCK：锁住共享内存段。此命令只能由超级用户执行。\r\n- SHM_UNLOCK：解锁共享内存段。此命令只能由超级用户执行。\r\n\r\n---\r\nbuf：指向 shmid_ds 结构体的指针\r\n\r\n返回：若成功则为0，若出错则为 -1。\r\n\r\n### 实验：父进程产生10个子进程，并打印出子进程产生的随机数的和\r\n```\r\n/*---------------------------------------------------------------------------------------------------------\r\n功能：\r\n    父进程产生10个子进程，并打印出子进程产生的随机数的和。要求用信号机制、信号量以及共享内存实现。\r\n\r\n思路：\r\n    子进程将自己产生的随机数累加到共享内存。当10个子进程都累加完后，用信号机制通知父进程，\r\n父进程就可以从共享内存中读取数据了。为了避免10个子进程向共享内存中写入数据时发生冲突，\r\n应使用信号量进行并发控制。	\r\n---------------------------------------------------------------------------------------------------------*/\r\n\r\n#include \"stdio.h\"\r\n#include \"sys/types.h\"\r\n#include \"signal.h\"\r\n#include \"sys/ipc.h\"\r\n#include \"sys/sem.h\"\r\n#include \"sys/shm.h\"\r\n\r\n//semun 共用体\r\nunion semun\r\n{\r\n	int val;\r\n	struct semid_ds *buf;	//一个由内核维护的记录信号量属性信息的结构体 \r\n	ushort *array;\r\n};\r\n\r\n\r\nint semid;//信号量ID\r\nint shmid;//共享内存ID\r\nchar *shm_virtualaddr;  //共享内存关联到进程后的虚拟地址\r\n\r\n// P操作，获取信号量，-1\r\nvoid p(int semid)\r\n{\r\n	struct sembuf buf = {0, -1, 0};\r\n	//int semop(int semid, struct sembuf *sops, unsigned nops) ;\r\n	semop(semid, &buf, 1);	//改变信号量的值\r\n}\r\n\r\n// V操作，释放信号量，+1\r\nvoid v(int semid)\r\n{\r\n	struct sembuf buf = {0, 1, 0};\r\n	semop(semid, &buf, 1);\r\n}\r\n\r\nvoid sigusr1_handler(int n)\r\n{\r\n	printf(\"count = %d, total = %d\\n\", *(int *)shm_virtualaddr, *(int *)(shm_virtualaddr+4));  //打印进程编号（不是进程ID）和随机数和\r\n	\r\n	//删除信号量\r\n	if(semctl(semid, IPC_RMID, 0) == -1)  \r\n		printf(\"remove semaphore fail\\n\");\r\n	else\r\n		printf(\"remove semaphore ok\\n\");\r\n	\r\n	shmdt(shm_virtualaddr);  //解除共享内存的关联\r\n\r\n	//删除共享内存\r\n	if(shmctl(shmid, IPC_RMID, 0) == -1)  \r\n		printf(\"remove shared-memory fail\\n\");\r\n	else\r\n		printf(\"remove shared-memory ok\\n\");\r\n\r\n	exit(0);\r\n}\r\n\r\nint main()\r\n{\r\n	signal(SIGUSR1, sigusr1_handler);  //用户定义的信号，用于捕获 SIGUSR1 信号执行处理函数 sigusr1_handler\r\n\r\n	//int semget(key_t key,int nsems,int semflg)\r\n	//key：所创建或打开的信号量集合的键，nsems：创建的信号量集合中信号量的个数，semflg：调用函数的操作类型，也可用于设置信号量集合的访问权限\r\n	//成功：返回信号量ID，失败：-1\r\n	semid = semget(IPC_PRIVATE, 1, 0666);	//创建并初始化信号量\r\n\r\n	if(semid == -1)	//信号量创建失败\r\n	{\r\n		printf(\"create semaphore fail\\n\");\r\n		return 0;\r\n	}\r\n	else{	 //返回信号量ID\r\n		printf(\"create semaphore ok\\n\");\r\n	}\r\n\r\n	//semun 共用体\r\n	union semun x;\r\n	x.val = 1;  //信号量初值应为多少？为1\r\n\r\n	//int semctl(int semid, int semnum, int cmd, [union semun arg]) ;\r\n	//semid：信号量集合，semnum：用于指明某个特定信号量，cmd：表示调用该函数希望执行的命令，arg：是一个 semun 共用体，\r\n	semctl(semid, 0, SETVAL, x);	//初始化信号量为 1\r\n	\r\n	//int shmget(key_t key, int size, int flag);\r\n	//key：表示所创建或打开的共享内存的键，size：表示共享内存区域的大小，flag：表示函数的操作类型，也可用于设置共享内存的访问权限\r\n	//若成功则为共享内存ID，若出错则为 -1\r\n	shmid = shmget(IPC_PRIVATE, 8, 0666);  //创建并关联到共享内存，共享内存一共 8 字节，前 4 字节存放 count，后 4 字节存放 total\r\n	if(shmid == -1)	\r\n	{\r\n		printf(\"create shared-memory fail\\n\");\r\n		return 0;\r\n	}\r\n	else{	//返回共享内存ID\r\n		printf(\"create shared-memory ok\\n\");\r\n	}\r\n\r\n	//void *shmat(int shmid, void *addr, int flag) ;\r\n	//shmid：表示要附加的共享内存段的ID，addr：虚拟地址，flag：用于表示函数的操作方式\r\n	//成功则为指向共享内存段的指针，若出错则为-1\r\n	shm_virtualaddr = shmat(shmid, 0, 0);//共享内存的附加，地址映射，addr 为 0，此共享内存段附加到由内核选择的第一个可用地址上\r\n\r\n	*(int *)shm_virtualaddr = 0;  //初始化进程编号，将指针转成int*，然后取该指针指向地址的值\r\n	*(int *)(shm_virtualaddr + 4) = 0;  //初始化随机数和\r\n\r\n	//flag 是否是子进程\r\n	char is_child = 0;\r\n	int i;\r\n	//循环创建 10 个进程\r\n	for(i=0; i<10; i++)\r\n	{\r\n		pid_t pid = fork(); \r\n		if(pid == 0)	//子进程\r\n		{\r\n			is_child = 1;  //设置子进程中 is_child 为 1\r\n			break;  //退出循环\r\n		}\r\n	}\r\n\r\n	//子进程\r\n	if(is_child)\r\n	{\r\n		p(semid);  // P操作，获取信号量（-1）\r\n\r\n		srand(time(NULL) + i);	//设置随机种子数\r\n		int num = rand()%10;	//取 0-9 随机数\r\n\r\n		(*(int *)shm_virtualaddr)++;  //进程编号自增\r\n		*(int *)(shm_virtualaddr + 4) += num;  //随机数相加\r\n\r\n		printf(\"child%d: %d\\n\", i, num);\r\n\r\n		v(semid);  //V操作，释放信号量（+1）\r\n\r\n		if(*(int *)shm_virtualaddr == 10)  //if(i==10)最后一个子进程，善后操作\r\n			kill(getppid(), SIGUSR1);  //向父进程发送 SIGUSER1 信号 \r\n	}\r\n	else\r\n	{\r\n		while(1)\r\n			pause();//挂起，等待信号唤醒\r\n	}\r\n\r\n	return 0;\r\n}\r\n/*========================================================================\r\ncreate semaphore ok\r\ncreate shared-memory ok\r\nchild0: 8\r\nchild1: 8\r\nchild5: 9\r\nchild4: 0\r\nchild6: 2\r\nchild3: 9\r\nchild7: 6\r\nchild8: 4\r\nchild9: 1\r\nchild2: 9\r\ncount = 10, total = 56\r\nremove semaphore ok\r\nremove shared-memory ok\r\n========================================================================*/\r\n```\r\n## socket 编程接口\r\n### 套接口概念\r\n套接口实际就是网络进程的 PID（Process ID）。\r\n\r\n网络通信，归根到底就是进程间的通信。套接口的描述符称为套接字，即 socket。有的资料中也叫套接口句柄。\r\n### 阻塞模式和非阻塞模式（同步和异步）\r\n阻塞模式：指调用了套接字的读、写函数后，函数不会立即返回，线程此时被置为等待状态，直到读、写操作完成为止。\r\n\r\n非阻塞模式：指调用了套接字的读、写函数后，函数立即返回，不用等到读、写操作完成。\r\n\r\n无论在 Windows 中还是 UNIX/LINUX 中，套接字被创建后默认都是阻塞模式的。\r\n\r\n### 字节序转换\r\n计算机在内存中的数据存储方式有两种：一种是小端字节序，即内存低地址存储数据低字节，高地址存储数据高字节；另一种是大端字节序，即内存低地址存储数据高字节，而高地址存储数据低字节。\r\n\r\n网络字节序使用的是大端字节序，而主机字节序可能是小端字节序，也可能是大端字节序。所有套接字函数中涉及 IP 地址和端口号时都用网络字节序，因此要用到主机字节序和网络字节序之间相互转换功能的函数。\r\n\r\n#### 返回网络字节序 htons/htonl\r\n`u_short htons(u_short hostshort);`\r\n\r\n`u_long htonl(u_long hostlong);`\r\n\r\n#### 返回主机字节序 ntohs/ntohl\r\n`u_short ntohs(u_short netshort);`\r\n\r\n`u_long ntohl(u_long netlong);`\r\n\r\n一般情况下，使用 htons 和 ntohs 转换 端口号，使用 htonl 和 ntohl 转换 IP 地址。\r\n### 地址转换函数\r\n在 TCP/IP 网络上，使用 ASCII 地址，即使用以“．”隔开的四个十进制的数表示。\r\n在套接口地址中则是使用 32 位的网络字节序的二进制数值。\r\n要实现两者之间的转换，就要用到以下两个函数：\r\n\r\n`unsigned long inet_addr(const char FAR* cp);`\r\n\r\n成功：返回 32 位二进制的网络字节序地址\r\n出错：返回 INADDR_NONE。\r\n\r\n`char FAR* inet_ntoa(struct in_addr in);`\r\n\r\n成功：返回字符串的指针\r\n失败：返回 NULL\r\n\r\n### 流套接字编程模型\r\n服务器端：创建套接字——将本地地址绑定到套接字——进入监听模式并准备接受连接。\r\n客户端：创建套接字——请求连接。\r\n\r\n双方建立连接后就可以开始数据通信了，双方都可以进行数据的发送和接收。\r\n\r\n最后，通信完毕，任意一方都可关闭套接字。\r\n### 数据报套接字编程模型\r\n服务器端：创建套接字——将本地地址绑定到套接字——直接进行数据的接收。\r\n客户端：创建套接字——直接进行数据的发送。\r\n\r\n通信完毕，任意一方都可关闭套接字。\r\n\r\n### sockaddr 和 sockaddr_in 结构体\r\n通常，把网络应用程序中所用到的网络地址和端口号信息放在一个结构体中，这就是**套接口地址结构体**。\r\n\r\n每个协议族都定义了它自己的套接口地址结构体，套接口地址结构体都以 `sockaddr_` 开头，并以每个协议族名中的两个字母作为结尾，例如`sockaddr_in`表示 IPv4 协议族的套接口地址结构体。\r\n\r\n除此之外，还有一个通用套接口地址结构体，它以`sockaddr` 表示。通用套接口地址结构体 sockaddr 与具体协议族无关，形式为：\r\n```\r\nstruct sockaddr\r\n{\r\n	unit8_t	sa_len;\r\n	sa_family_t	sa_family;	//协议族名\r\n	char	sa_data[14];\r\n}\r\n```\r\n\r\nIPv4 套接口地址结构体 `sockaddr_in` 的形式如下：\r\n```\r\nstruct sockaddr_in\r\n{\r\n	unit8	sin_len;	//数据长度成员，固定长度为16字节，一般不用设置它；\r\n	sa_family_t	sin_family;	//协议族名，IPv4 为 AF_INET；\r\n	in_port_t sin_port;	//TCP 或 UDP 协议的端口号，16 位端口号，网络字节序\r\n	struct in_addr sin_addr;\r\n	char	sin_zero[8];	//备用的域名，未使用\r\n};\r\nstruct in_addr\r\n{\r\n	in_addr_t s_addr;	//32 位 IP 地址，网络字节序\r\n};\r\n```\r\n在对套接口进行操作的函数中，如果需要套接口地址参数，都是以通用套接口地址结构体表示的，例如连接函数 connect：\r\n\r\n`int connect(int sockfd,const struct sockaddr *serv_addr,int addrlen);`\r\n\r\n因此需要将**指向特定协议的套接口地址结构体的指针**转换成**指向通用套接口地址结构体的指针**，即使用`(struct sockaddr *)`进行类型转换。否则编译时会出现警告信息。\r\n\r\n### 套接口函数\r\n#### 总结步骤\r\n>一个服务器进程中系统调用的顺序通常如下\r\n\r\nsocket();\r\nbind();\r\nlisten();\r\naccept();\r\n>而客户端进程的调用则比较简单\r\n\r\nsocket();\r\nconnect();\r\n#### 创建套接字 socket\r\n\r\n`int socket(int family,int type,int protocol);`\r\n\r\nfamily：指明协议族\r\ntype：指明套接口类型\r\nprotocol：一般为 0\r\n\r\n成功：返回值为非负描述字\r\n失败：返回值为负值\r\n\r\n>参数 family 的取值范围\r\n\r\nAF_LOCAL：UNIX 协议族\r\nAF_ROUTE：路由套接口\r\nAF_INET：IPv4 协议\r\nAF_INET6：IPV6 协议\r\nAF_KEY：密钥套接口\r\n\r\n>参数 type 的取值范围\r\n\r\nSOCK_STREAM：TCP 套接口\r\nSOCK_DGRAM：UDP 套接口\r\nSOCK_PACKET：支持数据链路访问\r\nSOCK_RAM：原始套接口\r\n\r\n#### 绑定套接口 bind\r\n`int bind(int sockfd,const struct sockaddr *myaddr,socklen_t addrlen);`\r\n\r\nsockfd：套接字\r\nmyaddr：是一个指向特定协议地址结构体的指针\r\naddrlen：是地址结构体的长度。\r\n\r\n成功：返回 0\r\n失败：返回 -1\r\n\r\n这个调用不是必须执行的。尤其是在客户端，很少使用这个系统调用。用 socket() 得到套接口后可以直接调用函数 connect() 或者 listen()，这时内核会自动给套接口分配一个地址和端口号，这是常用的方式。\r\n\r\n只有在希望进程使用某个特定的网络地址和端口时，才会使用函数 bind()。\r\n\r\n#### 连接 connect\r\n`int connect(int sockfd,const struct sockaddr *serv_addr,int addrlen);`\r\n\r\nsockfd：套接口描述字\r\nserv_addr：目的端口和IP地址的套接口\r\naddrlen：目的套接口的长度\r\n\r\n成功：返回 0\r\n失败：返回 -l\r\n\r\n#### 监听 listen\r\n`int listen(int sockfd,int backlog);`\r\n\r\nsockfd：套接字\r\nbacklog：规定内核为此套接口排队的最大选择个数\r\n\r\n成功：返回 0\r\n失败：返回 -1\r\n\r\n#### 接受连接 accept (阻塞函数)\r\n`int accept(int sockfd,struct sockaddr *cliaddr,socklen_t *addrlen);`\r\n\r\ncliaddr：远程客户的套接口地址\r\naddrlen：套接口地址长度\r\nsockfd：监听套接字，它由函数 socket() 生成\r\n如果不需要客户的套接口地址，可将第二个和第三个参数设置为空指针\r\n\r\n成功：返回非负描述字，返回值即为新建立的连接的套接口描述字(客户套接字)\r\n失败：返回 -1\r\n\r\n>客户套接和监听套接字的区别：\r\n\r\n监听套接字只有一个，而且一直存在；而每一个连接都有自己的客户套接字，专用于服务器与该连接对应的远程客户进行通信。当连接断开时就关闭该客户套接字。\r\n\r\n>accept()是一个阻塞函数\r\n\r\n即调用它的线程将被操作系统置于阻塞状态，直到有远程客户向该IP地址的该端口发起connect()调用为止。\r\n\r\n#### 关闭 close\r\n`int close(int sockfd);`\r\n\r\n成功：返回 0\r\n失败：返回 -1\r\n\r\n#### 发送 send/sendto (阻塞函数)\r\n面向连接的套接口（TCP）:\r\n\r\n`int send(int sockfd,const void *buffer,int length,int flags);`\r\n\r\n无连接的套接口（UDP）:\r\n\r\n`int sendto(int sockfd,const void *message,int length,int flags,const struct sock_addr *dest_addr,int dest_len);`\r\n\r\n#### 接收 recv/recvfrom (阻塞函数)\r\n面向连接的套接口（TCP）:\r\n\r\n`int recv(int sockfd,void *buffer,int length,int flags);`\r\n\r\n无连接的套接口（UDP）:\r\n\r\n`int recvfrom(int sockfd,void *message,int length,int flags,const struct sock_addr *send_addr,int *send_len);`\r\n\r\n因为发送和接收函数进行一次传输的字节数可能比要求的数量少，所以需要多次调用这些函数以便发送或接收指定的字节数。所以，套**接口的数据传输通常都由一个循环结构来实现。**\r\n\r\n>Mysend 方法\r\n\r\n```\r\nint Mysend(SOCKET s, const char *buf, int len, int flags)\r\n{\r\n	if(buf == NULL)\r\n		return 0;\r\n	int iSendCount = 0:\r\n	int iLength = len:\r\n	while (iLength > 0)\r\n	{\r\n		int n = send(s, buf* iSendCount, iLength, flags);\r\n		if(n == SOCKET_ERROR)\r\n			return 0:\r\n		iLength -= n:\r\n		iSendCount += n:\r\n	}\r\n	return iSendCount\r\n}\r\n```\r\n\r\n>Myrecv 方法\r\n\r\n```\r\nint Myrecv(SOCKET s, char *buf, int len, int flags)\r\n{\r\n	if(buf == NULL)\r\n		return 0;\r\n	int iRecvCount = 0;\r\n	int iLength = len;\r\n	while (iLength > 0)\r\n	{\r\n		int nRev = recv(s, buf + iRecvCount, iLength, flags);\r\n		if(nReU == SOCKET_ERROR)\r\n			return 0:\r\n		iLength -= nRev;\r\n		iRecuCount += nRev;\r\n	}\r\n	return iRecvCount;\r\n}\r\n```\r\n## 多线程\r\n### 线程函数的原型\r\n#### Windows\r\n`DWOED ThreadProc(LPVOID lpParameter);`\r\n### 创建新线程\r\n#### Windows - CreateThread\r\nWin32 API 函数 ：CreateThread()\r\n```\r\nHANDLE CreateThread(\r\n	LPSECURITY_ATTRIBUTES lpsa,\r\n	DWORD cbStack,\r\n	LPTHREAD_START_ROUTINE lpstartAddr, //指向线程函数的指针，那个函数将做为一个新的线程而运行\r\n	LPVOID lpvThreadParam,\r\n	DWORD fdwCreate,\r\n	LPDWORD lpIDThread\r\n);\r\n```\r\n#### Unix - pthread_create\r\n```\r\n#include  <pthread.h>\r\nint  pthread_create（\r\n	pthread_t  *thread,\r\n	pthread_attr_t  *attr,\r\n	void  *（*start_routine）（void  *）,\r\n	void  *arg\r\n）\r\n```\r\n### 一个线程等待另一个线程结束的方法\r\n#### Unix - pthread_join\r\n```\r\n#include  <pthread.h>\r\nint pthread_join(\r\n	pthread_t thread,\r\n	void **retval\r\n);\r\n```\r\n### Linux 中编译多线程程序的方法\r\n由于 pthread 库不是 Linux 系统默认的库，所以多线程的程序在编译时需要告诉编译器将这个库链接进来，编译命令应这样输入：`gcc xxx.c -lpthread`\r\n\r\n### 线程的并发（同步）问题\r\n属于同一个进程的所有线程可以共享全局数据和主线程中尚在生存期内的数据，如果没有并发控制，就会产生异常。\r\n\r\n并发控制的方法有多种，只要求掌握使用信号量来进行并发控制。\r\n\r\nWindows 中主要函数有：\r\n```\r\nCreateSemaphore()\r\nWaitForSingleObject()\r\nReleaseSemaphore()\r\nCloseHandle()\r\n```\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n',`groups`='Linux',`is_show`=1,`publish`=1,`summary`='Linux 编程基础，包含进程，信号，进程间通信，网络编程等基础知识'  WHERE  `id` = 212 [ RunTime:0.002172s ]
[ sql ] [ SQL ] SELECT COUNT(*) AS tp_count FROM `note` WHERE  `groups` = 'Linux' LIMIT 1 [ RunTime:0.001100s ]
[ sql ] [ SQL ] UPDATE `groups`  SET `g_count`=11  WHERE  `groups` = 'Linux' [ RunTime:0.000361s ]
[ sql ] [ SQL ] SELECT COUNT(*) AS tp_count FROM `note` WHERE  `groups` = 'Linux' LIMIT 1 [ RunTime:0.001055s ]
[ sql ] [ SQL ] UPDATE `groups`  SET `g_count`=11  WHERE  `groups` = 'Linux' [ RunTime:0.000333s ]
---------------------------------------------------------------
[ 2018-10-24T19:53:57+08:00 ] 74.120.168.12 74.120.168.12 GET /daily/admin/note/shownote/id/212.html
[ info ] qingrang.top/daily/admin/note/shownote/id/212.html [运行时间：0.062574s][吞吐率：15.98req/s] [内存消耗：2,032.29kb] [文件加载：55]
[ info ] [ LANG ] /var/www/html/daily/thinkphp/lang/zh-cn.php
[ info ] [ ROUTE ] array (
  'type' => 'module',
  'module' => 
  array (
    0 => 'admin',
    1 => 'note',
    2 => 'shownote',
  ),
)
[ info ] [ HEADER ] array (
  'host' => 'qingrang.top',
  'cache-control' => 'max-age=0',
  'upgrade-insecure-requests' => '1',
  'user-agent' => 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/69.0.3497.100 Safari/537.36',
  'accept' => 'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8',
  'referer' => 'http://qingrang.top/daily/admin/note/editnote/id/212.html',
  'accept-encoding' => 'gzip, deflate',
  'accept-language' => 'zh-CN,zh;q=0.9,la;q=0.8,en;q=0.7,lb;q=0.6',
  'cookie' => 'Hm_lvt_1769181352e9adc950166aada465644e=1539846308,1540133692,1540187497; PHPSESSID=cfl1sikl9c45c63c655g4q7rd4',
  'connection' => 'close',
)
[ info ] [ PARAM ] array (
  'id' => '212',
)
[ info ] [ SESSION ] INIT array (
  'id' => '',
  'var_session_id' => '',
  'prefix' => 'think',
  'type' => '',
  'auto_start' => true,
)
[ info ] [ RUN ] app\admin\controller\Note->showNote[ /var/www/html/daily/application/admin/controller/Note.php ]
[ info ] [ DB ] INIT mysql
[ info ] [ VIEW ] /var/www/html/daily/application/admin/view/note/shownote.html [ array (
  0 => 'note',
  1 => 'groups',
) ]
[ info ] [ LOG ] INIT File
[ sql ] [ DB ] CONNECT:[ UseTime:0.000571s ] mysql:host=74.120.168.12;dbname=diary;charset=utf8
[ sql ] [ SQL ] SHOW COLUMNS FROM `note` [ RunTime:0.001365s ]
[ sql ] [ SQL ] SELECT * FROM `note` WHERE  `id` = 212 LIMIT 1 [ RunTime:0.000580s ]
[ sql ] [ SQL ] SHOW COLUMNS FROM `groups` [ RunTime:0.000874s ]
[ sql ] [ SQL ] SELECT * FROM `groups` [ RunTime:0.000393s ]
---------------------------------------------------------------
[ 2018-10-24T19:57:16+08:00 ] 74.120.168.12 74.120.168.12 GET /daily/admin/note/newedit.html
[ info ] qingrang.top/daily/admin/note/newedit.html [运行时间：0.057013s][吞吐率：17.54req/s] [内存消耗：2,020.86kb] [文件加载：56]
[ info ] [ LANG ] /var/www/html/daily/thinkphp/lang/zh-cn.php
[ info ] [ ROUTE ] array (
  'type' => 'module',
  'module' => 
  array (
    0 => 'admin',
    1 => 'note',
    2 => 'newedit',
  ),
)
[ info ] [ HEADER ] array (
  'host' => 'qingrang.top',
  'upgrade-insecure-requests' => '1',
  'user-agent' => 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/69.0.3497.100 Safari/537.36',
  'accept' => 'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8',
  'referer' => 'http://qingrang.top/daily/admin/note',
  'accept-encoding' => 'gzip, deflate',
  'accept-language' => 'zh-CN,zh;q=0.9,la;q=0.8,en;q=0.7,lb;q=0.6',
  'cookie' => 'Hm_lvt_1769181352e9adc950166aada465644e=1539846308,1540133692,1540187497; PHPSESSID=cfl1sikl9c45c63c655g4q7rd4',
  'connection' => 'close',
)
[ info ] [ PARAM ] array (
)
[ info ] [ SESSION ] INIT array (
  'id' => '',
  'var_session_id' => '',
  'prefix' => 'think',
  'type' => '',
  'auto_start' => true,
)
[ info ] [ RUN ] app\admin\controller\Note->newEdit[ /var/www/html/daily/application/admin/controller/Note.php ]
[ info ] [ DB ] INIT mysql
[ info ] [ VIEW ] /var/www/html/daily/application/admin/view/note/newedit.html [ array (
  0 => 'groups',
) ]
[ info ] [ LOG ] INIT File
[ sql ] [ DB ] CONNECT:[ UseTime:0.000724s ] mysql:host=74.120.168.12;dbname=diary;charset=utf8
[ sql ] [ SQL ] SHOW COLUMNS FROM `groups` [ RunTime:0.001501s ]
[ sql ] [ SQL ] SELECT * FROM `groups` [ RunTime:0.000296s ]
---------------------------------------------------------------
[ 2018-10-24T19:59:21+08:00 ] 74.120.168.12 74.120.168.12 GET /daily/admin/note
[ info ] qingrang.top/daily/admin/note [运行时间：0.077440s][吞吐率：12.91req/s] [内存消耗：2,248.38kb] [文件加载：56]
[ info ] [ LANG ] /var/www/html/daily/thinkphp/lang/zh-cn.php
[ info ] [ ROUTE ] array (
  'type' => 'module',
  'module' => 
  array (
    0 => 'admin',
    1 => 'note',
    2 => NULL,
  ),
)
[ info ] [ HEADER ] array (
  'host' => 'qingrang.top',
  'purpose' => 'prefetch',
  'upgrade-insecure-requests' => '1',
  'user-agent' => 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/69.0.3497.100 Safari/537.36',
  'accept' => 'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8',
  'accept-encoding' => 'gzip, deflate',
  'accept-language' => 'zh-CN,zh;q=0.9,la;q=0.8,en;q=0.7,lb;q=0.6',
  'cookie' => 'Hm_lvt_1769181352e9adc950166aada465644e=1539846308,1540133692,1540187497; PHPSESSID=cfl1sikl9c45c63c655g4q7rd4',
  'connection' => 'close',
)
[ info ] [ PARAM ] array (
)
[ info ] [ SESSION ] INIT array (
  'id' => '',
  'var_session_id' => '',
  'prefix' => 'think',
  'type' => '',
  'auto_start' => true,
)
[ info ] [ RUN ] app\admin\controller\Note->notelst[ /var/www/html/daily/application/admin/controller/Note.php ]
[ info ] [ DB ] INIT mysql
[ info ] [ VIEW ] /var/www/html/daily/application/admin/view/note/notelst.html [ array (
  0 => 'stickList',
  1 => 'hide',
  2 => 'list',
  3 => 'list_new',
  4 => 'groups',
  5 => 'groups0',
  6 => 'groups1',
  7 => 'groups2',
  8 => 'count',
  9 => 'year',
  10 => 'default_num',
) ]
[ info ] [ LOG ] INIT File
[ sql ] [ DB ] CONNECT:[ UseTime:0.000593s ] mysql:host=74.120.168.12;dbname=diary;charset=utf8
[ sql ] [ SQL ] SHOW COLUMNS FROM `note` [ RunTime:0.001542s ]
[ sql ] [ SQL ] SELECT * FROM `note` WHERE  `groups` <> 'Personal'  AND `is_show` = 1 ORDER BY date desc,id desc [ RunTime:0.001719s ]
[ sql ] [ SQL ] SELECT * FROM `note` WHERE  `groups` <> 'Personal' ORDER BY id desc LIMIT 5 [ RunTime:0.000545s ]
[ sql ] [ SQL ] SHOW COLUMNS FROM `config` [ RunTime:0.000960s ]
[ sql ] [ SQL ] SELECT * FROM `config` WHERE  `name` = 'hide' LIMIT 1 [ RunTime:0.000291s ]
[ sql ] [ SQL ] SELECT * FROM `note` WHERE  `id` < 5 [ RunTime:0.000509s ]
[ sql ] [ SQL ] SHOW COLUMNS FROM `groups` [ RunTime:0.000908s ]
[ sql ] [ SQL ] SELECT * FROM `groups` [ RunTime:0.000364s ]
[ sql ] [ SQL ] SELECT * FROM `groups` WHERE  `parent_id` = 0  AND `id` <> 2 ORDER BY `groups` [ RunTime:0.000398s ]
[ sql ] [ SQL ] SELECT `groups` FROM `groups` WHERE  `parent_id` = 1 [ RunTime:0.000326s ]
[ sql ] [ SQL ] SELECT * FROM `groups` WHERE  `parent_id` = 2 ORDER BY `groups` [ RunTime:0.000346s ]
[ sql ] [ SQL ] SELECT COUNT(*) AS tp_count FROM `note` WHERE  `groups` = 'Default' LIMIT 1 [ RunTime:0.001286s ]
[ sql ] [ SQL ] SELECT COUNT(*) AS tp_count FROM `note` LIMIT 1 [ RunTime:0.000281s ]
[ sql ] [ SQL ] SHOW COLUMNS FROM `yearlist` [ RunTime:0.001138s ]
[ sql ] [ SQL ] SELECT DISTINCT  `year` FROM `yearlist` ORDER BY year desc [ RunTime:0.000682s ]
---------------------------------------------------------------
[ 2018-10-24T19:59:21+08:00 ] 74.120.168.12 74.120.168.12 GET /daily/admin/note
[ info ] qingrang.top/daily/admin/note [运行时间：0.070460s][吞吐率：14.19req/s] [内存消耗：2,248.03kb] [文件加载：56]
[ info ] [ LANG ] /var/www/html/daily/thinkphp/lang/zh-cn.php
[ info ] [ ROUTE ] array (
  'type' => 'module',
  'module' => 
  array (
    0 => 'admin',
    1 => 'note',
    2 => NULL,
  ),
)
[ info ] [ HEADER ] array (
  'host' => 'qingrang.top',
  'upgrade-insecure-requests' => '1',
  'user-agent' => 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/69.0.3497.100 Safari/537.36',
  'accept' => 'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8',
  'accept-encoding' => 'gzip, deflate',
  'accept-language' => 'zh-CN,zh;q=0.9,la;q=0.8,en;q=0.7,lb;q=0.6',
  'cookie' => 'Hm_lvt_1769181352e9adc950166aada465644e=1539846308,1540133692,1540187497; PHPSESSID=cfl1sikl9c45c63c655g4q7rd4',
  'connection' => 'close',
)
[ info ] [ PARAM ] array (
)
[ info ] [ SESSION ] INIT array (
  'id' => '',
  'var_session_id' => '',
  'prefix' => 'think',
  'type' => '',
  'auto_start' => true,
)
[ info ] [ RUN ] app\admin\controller\Note->notelst[ /var/www/html/daily/application/admin/controller/Note.php ]
[ info ] [ DB ] INIT mysql
[ info ] [ VIEW ] /var/www/html/daily/application/admin/view/note/notelst.html [ array (
  0 => 'stickList',
  1 => 'hide',
  2 => 'list',
  3 => 'list_new',
  4 => 'groups',
  5 => 'groups0',
  6 => 'groups1',
  7 => 'groups2',
  8 => 'count',
  9 => 'year',
  10 => 'default_num',
) ]
[ info ] [ LOG ] INIT File
[ sql ] [ DB ] CONNECT:[ UseTime:0.000567s ] mysql:host=74.120.168.12;dbname=diary;charset=utf8
[ sql ] [ SQL ] SHOW COLUMNS FROM `note` [ RunTime:0.001218s ]
[ sql ] [ SQL ] SELECT * FROM `note` WHERE  `groups` <> 'Personal'  AND `is_show` = 1 ORDER BY date desc,id desc [ RunTime:0.001739s ]
[ sql ] [ SQL ] SELECT * FROM `note` WHERE  `groups` <> 'Personal' ORDER BY id desc LIMIT 5 [ RunTime:0.000473s ]
[ sql ] [ SQL ] SHOW COLUMNS FROM `config` [ RunTime:0.001011s ]
[ sql ] [ SQL ] SELECT * FROM `config` WHERE  `name` = 'hide' LIMIT 1 [ RunTime:0.000310s ]
[ sql ] [ SQL ] SELECT * FROM `note` WHERE  `id` < 5 [ RunTime:0.000487s ]
[ sql ] [ SQL ] SHOW COLUMNS FROM `groups` [ RunTime:0.000890s ]
[ sql ] [ SQL ] SELECT * FROM `groups` [ RunTime:0.000313s ]
[ sql ] [ SQL ] SELECT * FROM `groups` WHERE  `parent_id` = 0  AND `id` <> 2 ORDER BY `groups` [ RunTime:0.000472s ]
[ sql ] [ SQL ] SELECT `groups` FROM `groups` WHERE  `parent_id` = 1 [ RunTime:0.000283s ]
[ sql ] [ SQL ] SELECT * FROM `groups` WHERE  `parent_id` = 2 ORDER BY `groups` [ RunTime:0.000399s ]
[ sql ] [ SQL ] SELECT COUNT(*) AS tp_count FROM `note` WHERE  `groups` = 'Default' LIMIT 1 [ RunTime:0.001120s ]
[ sql ] [ SQL ] SELECT COUNT(*) AS tp_count FROM `note` LIMIT 1 [ RunTime:0.000234s ]
[ sql ] [ SQL ] SHOW COLUMNS FROM `yearlist` [ RunTime:0.001076s ]
[ sql ] [ SQL ] SELECT DISTINCT  `year` FROM `yearlist` ORDER BY year desc [ RunTime:0.000595s ]
---------------------------------------------------------------
[ 2018-10-24T19:59:25+08:00 ] 74.120.168.12 74.120.168.12 GET /daily/admin/note/editnote/id/32.html
[ info ] qingrang.top/daily/admin/note/editnote/id/32.html [运行时间：0.058895s][吞吐率：16.98req/s] [内存消耗：2,091.47kb] [文件加载：56]
[ info ] [ LANG ] /var/www/html/daily/thinkphp/lang/zh-cn.php
[ info ] [ ROUTE ] array (
  'type' => 'module',
  'module' => 
  array (
    0 => 'admin',
    1 => 'note',
    2 => 'editnote',
  ),
)
[ info ] [ HEADER ] array (
  'host' => 'qingrang.top',
  'upgrade-insecure-requests' => '1',
  'user-agent' => 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/69.0.3497.100 Safari/537.36',
  'accept' => 'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8',
  'referer' => 'http://qingrang.top/daily/admin/note',
  'accept-encoding' => 'gzip, deflate',
  'accept-language' => 'zh-CN,zh;q=0.9,la;q=0.8,en;q=0.7,lb;q=0.6',
  'cookie' => 'Hm_lvt_1769181352e9adc950166aada465644e=1539846308,1540133692,1540187497; PHPSESSID=cfl1sikl9c45c63c655g4q7rd4',
  'connection' => 'close',
)
[ info ] [ PARAM ] array (
  'id' => '32',
)
[ info ] [ SESSION ] INIT array (
  'id' => '',
  'var_session_id' => '',
  'prefix' => 'think',
  'type' => '',
  'auto_start' => true,
)
[ info ] [ RUN ] app\admin\controller\Note->editNote[ /var/www/html/daily/application/admin/controller/Note.php ]
[ info ] [ DB ] INIT mysql
[ info ] [ VIEW ] /var/www/html/daily/application/admin/view/note/editnote.html [ array (
  0 => 'note',
  1 => 'groups',
) ]
[ info ] [ LOG ] INIT File
[ sql ] [ DB ] CONNECT:[ UseTime:0.000552s ] mysql:host=74.120.168.12;dbname=diary;charset=utf8
[ sql ] [ SQL ] SHOW COLUMNS FROM `note` [ RunTime:0.001449s ]
[ sql ] [ SQL ] SELECT * FROM `note` WHERE  `id` = 32 LIMIT 1 [ RunTime:0.000640s ]
[ sql ] [ SQL ] SHOW COLUMNS FROM `groups` [ RunTime:0.000858s ]
[ sql ] [ SQL ] SELECT * FROM `groups` [ RunTime:0.000396s ]
---------------------------------------------------------------
[ 2018-10-24T20:01:32+08:00 ] 74.120.168.12 74.120.168.12 POST /daily/admin/note/updatenote/id/32.html
[ info ] qingrang.top/daily/admin/note/updatenote/id/32.html [运行时间：0.094891s][吞吐率：10.54req/s] [内存消耗：2,336.03kb] [文件加载：58]
[ info ] [ LANG ] /var/www/html/daily/thinkphp/lang/zh-cn.php
[ info ] [ ROUTE ] array (
  'type' => 'module',
  'module' => 
  array (
    0 => 'admin',
    1 => 'note',
    2 => 'updatenote',
  ),
)
[ info ] [ HEADER ] array (
  'host' => 'qingrang.top',
  'content-length' => '108171',
  'cache-control' => 'max-age=0',
  'origin' => 'http://qingrang.top',
  'upgrade-insecure-requests' => '1',
  'content-type' => 'application/x-www-form-urlencoded',
  'user-agent' => 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/69.0.3497.100 Safari/537.36',
  'accept' => 'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8',
  'referer' => 'http://qingrang.top/daily/admin/note/editnote/id/32.html',
  'accept-encoding' => 'gzip, deflate',
  'accept-language' => 'zh-CN,zh;q=0.9,la;q=0.8,en;q=0.7,lb;q=0.6',
  'cookie' => 'Hm_lvt_1769181352e9adc950166aada465644e=1539846308,1540133692,1540187497; PHPSESSID=cfl1sikl9c45c63c655g4q7rd4',
  'connection' => 'close',
)
[ info ] [ PARAM ] array (
  'summary' => '',
  'content' => '# 写出这些话的人，我估计一辈子都追不上了
1. 如果发出声音是危险的，那就保持沉默；如果自觉无力发光，那就别去照亮别人。但是，不要习惯了黑暗就为黑暗辩护不要为自己的苟且而得意洋洋；不要嘲讽那些比自己更勇敢，更有热量的人们。可以卑微如尘土，不可扭曲如蛆虫。
2. 你多学一样本事，就少说一句求人的话。
3. 我38岁那年，琢磨着要不要去读两年的放射线照相术大专学位。然后我跟我朋友说了这事，我觉得自己太老了，等拿到学位是，我都40岁了。
--朋友说，如果你不读，你还是会40岁，一个没有学位的40岁。
4.	这些年来我一直提醒自己一件事情，千万不要自己感动自己。大部分人看似的努力，不过是愚蠢导致的。什么熬夜看书到天亮，连续几天只睡几小时，多久没有放假了，如果这些东西也值得夸耀，那么富士康流水线上任何一个人都比你努力多了。人难免天生有自怜的情绪，唯有时刻保持清醒，才能看清真正的价值在哪里。
5.	孩子，我要求你读书用功，不是因为我要你跟别人比成绩，而是，我希望你将来会拥有选择的权利，选择有意义，有时间的工作，而不是被迫谋生。当你的工作在你心中有意义，你就有成就感。当你的工作给你时间，不剥夺你的生活，你就有尊严。成就感和尊严，给你快乐。
6.	最终我们都将学会，与他人交往，最重要的不是甜言蜜语，不是容貌金钱，而是你和他对于这个世界的看法，对人生的态度是否一致。
7.	我们一路奋战，不是为了改变世界，而是为了世界不再改变我们。
8.	不要欺骗别人，因为你能骗到的人，都是相信你的人。
9.	熟练的运用"关我屁事"和"关你屁事"可以省下人生80％的时间。
10.	我怎么敢倒下。我身后空无一人。
11.	"痛苦是财富，这话是扯淡。姑娘，痛苦就是痛苦，对痛苦的思考才是财富。"
12.	永远不要相信苦难是值得的，苦难就是苦难，苦难不会带来成功。苦难不值得追求，磨练意志是因为苦难无法躲开。
13.	如果我不曾见过太阳，我本可以忍受黑暗。
14.	社交之所以累，是因为每个人都试图展现出自己其实并不具备的品质。
15.	读书：之前觉得自己是一个人，现在觉得自己可以是一个世界。
16.	希望你今天白费的努力，早晚有一天变成值得。
17.	历史：遗忘，对倒下的人不公平。
18.	南京大屠杀：
安培说：现在日本的年轻人没有义务为过去的日本人像现在的中国人道歉。
那现在的中国人也没有权利为过去的中国人原谅现在的日本人。
19.	明明别人轻轻松松可以做到的事，我却做不了。满满的无力感，无力到没有力气。
20.	人的一切痛苦，本质上都是对自己无能的愤怒。
21.	不要试图同情你自己。
22.	你配得上你自己想要的生活吗？
23.	什么叫成熟？
了解自己，了解自己的欲望，了解自己的局限。理解别人，理解别人的欲望，理解别人的局限。
24.	我们会看到要寻找的东西，错失不去寻找的东西，虽然它在那里。我们的阅历被我们的关注点深深地影响了。
25.	做你害怕做的事，然后你会发现，不过如此。
26.	一直认为，所谓新鲜感，不是和未知的人一起去做同样的事，而是和已知的人一起去体验未知的人生。
27.	如果不能随时有限的反击，所有的宽容都是懦弱。
28.	群众的眼睛不是雪亮的，群众的眼睛是盲目的。
29.	不是所有的人都能功成名就，我们中有些人注定要在日常的点滴中寻找生命的意义。
30.	带人友善是修养，独来独往是性格。
31.	几年前踏上火车那一刻还没有意识到，从此故乡只有冬夏，再无春秋。
32.	十年饮水，难凉热血。
33.	德，律己为德，律人无异于私刑。
34.	信仰，他可以与宗教无关，代表自己的精神追求。
35.	人最重要的能力有两个，适应环境，不忘初心。适应环境可以安身，不忘初心可以立命。
36.	维护不在场的人，所言不多于所知。
37.	只有你愿意为之而死的东西，你才可以藉之而生。
38.	你见过树，却没见过森林。
39.	那些杀不死你的最终都会使你更强壮。
40.	是你把你的秘密告诉了风，那就别怪风把他带给树。
41.	似乎大家都这样。自命不凡，却无足轻重。
42.	保安笑着问我："你那么小个子，开那么大个车？"的时候。我傻笑着回答："你是当保安，我是当司机的。"
43.	猪会飞，是因为他站在了风口上，成功的飞起来以后他可以总结起飞技巧，但重要的，是风。
44.	你现在做的每一件事看来并没有什么意义，但他们也许会在未来助你 一臂之力。
45.	唱出本身就是最要不得的态度。当你做某件事的时候，一旦想要求快，就表示你再也不关心他，而是想去做别的事。
46.	命运啊，说是注定，不如说是你在何时做了选择。
47.	在一群出色的人中间，常常误以为自己也是其中一员，然后忘了努力。
48.	只有经历过地狱磨难的人，才有建造天堂的力量。
49.	一个伟大的人往往受到排挤，压抑，甚至被人斥为哗众取宠而陷于孤独中。
50.	与怪物战斗的人，应当小心自己不要成为怪物。当你远远凝视深渊时，深渊也在凝视你。
51.	一个人知道自己为什么而活，就可以忍受任何一种生活。
52.	假如我们不去打仗，敌人用刺刀杀死了我们，还要指着我们的骨头说：看，这是奴隶。
53.	我有一事，生死与之。
54.	我的体内啊，有个器官比心脏还重要，他虽然看不见，但却是在我的体内从脑袋一直贯穿到胯间。就因为他，我才能站着直，坐着正，就算脚步摇晃也能笔直地向前行，在这里退缩的话，那东西就会折断。
55.	不可能这三个字，你说的太多了。
56.	世界上没遇上帝，如果有的话，我无法容忍我不是。－－尼采
57.	剑在英雄手，登台傲王侯。－－比莫干《九州缥缈录》
58.	武士的一生，只相信自己手中可以握住的东西。－－赢无翳《九州缥缈录》
59.	为天地立心，为生民立命，为往圣继绝学，为万世开太平。－－北宋时期张载
60.	为不能作战的人而战。
61.	你的成功标准： 能做自己喜欢做的事，能只做自己喜欢做的事。
62.	如何不招人厌的展现自己的学识：别人问了，你再答。
63.	无论现实如何操蛋，你都能在心里有一个更诗意的世界，那个世界便是情怀。
64.	情怀就是以心灵的满足而不是功利的得失作为自己的行为标准的一种品质。一件没有什么用的事，还是要去做，也许只是因为我喜欢，也许只是因为它看起来很美。
65.	跟优秀的人相处是怎样一种体验：他从不刻意优秀，却总是无意中卓越。
66.	不要跟眼界不一样的人争辩。
67.	人穷尽一生追求另一个人的事，我一直无法理解，或许是因为我自己太有意思，无需他人陪伴，所以我祝你们在对方身上得到的快乐与我给自己的一样多。
68.	一个人需要控制的事情越少，他心理上就越自由。当你企图控制一件事情的时候，你同时也就被这件事情所控制，这永远是个相互的过程。
69.	我们痛恨限制的同时，也依赖限制。
70.	一个能够安住于不确定和不可控制中的人最自由。
71.	大部分的教育工作者都在教人找到工作，而不是寻找人生。
72.	漫画提供给我们的，也许就是这个早以被我们遗忘的世界。但将它看做一个逃避现实，发泄情绪的渠道，还是从中寻找勇气和激励，在现实生活中做一个真正的英雄，决定权在你。
73.	社会衡量一个人的价值，在于他能向外产出什么，至于他吸收了什么，没人在乎。
74.	我发现没有任何一个煤矿工人靠挖煤多又快当上了煤老板。
75.	有的人努力的时候是真的在努力，有的人努力的时候只是为了感动自己，这决定了一个人究竟能变成什么样。
76.	在这残酷的现实面前，除了吃人与被吃，我还有第三种选择，就是努力活下去，并且让这个社会再好一点。知大恶才知大善。知暗夜才知光明。不要低估人性的丑恶，也不要低估人性的光辉。
77.	群众的眼光到底是不是雪亮的？                                                                                  1）群众的智商，呈现非周期性的上升或者下降。                                                        2）其实群众的眼睛就是灯泡，而开关掌控在领导手中，需要时就是雪亮的，不需要时就是不明真相的。 
3）如果让群众挑错，那群众的眼睛无疑是雪亮的，他们最擅长干这个了，但要是问群众什么是对的，那就瞎了。
78.	我一向不太相信离别时的情真意切，我觉得那只是一种情绪渲染。
79.	为什么孩子喜欢看有关恐龙的书？                                                                                恐龙代表过去，宇宙飞船代表未来，我就是不喜欢现在。－－询问一7岁男孩得知
80.	纠正一个错误的方法有很多，而解决一个错误的终极方法就是不给他任何发生的机会。
81.	为什么父母一吵架，小孩就特别懂事？                                                                         小孩的沉默，隐忍，恐惧，以及讨好，在麻木的大人眼中，便是：懂事。
82.	凡我中华之寸土皆洒满我中华儿女之血泪，永世不忘倭寇侵占与残杀之历史。
83.	我相信再有一个妖精大闹天宫，悟空会是去镇压的那个人。
骑士杀死恶龙后，望着满地的财宝，身上长出了鳞片。
84.	只有写鸡汤的人才能从鸡汤中受益。
85.	没有中枪的觉悟，就没有开枪的资格。
86.	什么是人渣？   
浑身都是铠甲，没有一处软肋。
87.	一种人，天天都笑嘻嘻的，好似和谁都合得来，但是从不主动联系朋友，脾气也出奇的好，好像世上没有什么事情能让他们愤怒和悲伤。心中怀着宏伟的梦想，却不愿与现实中的人分担，只是默默的做，以为能用沙砾和泥土堆出山川。
88.	为什么我们愿意把钱捐给身边的乞丐，而不顾那些生活在水深火热之中的欠发达国家的人民呢？                                                                                                                         人类的所有善意都遵循邻避原则。坏的事可以发生，只要别发生在我家后院就行了。－－善意有效辐射范围
89.	后来许多人问我一个人夜晚踟蹰路上的心情，我想起的却不是孤单和路长，而是波澜壮阔的海和天空中闪耀的星光。－－张小砚
90.	当很重要的人寻求更大的世界，却因此不得不离开你的时候，支持还是阻止好？            
他走是因为他想走，他不走是因为他不想走，不要试图去背负别人的人生。
91.	一个人在对另一个人的内心世界做出评判时，最好怀有一定程度的谦逊和宽容。－－《群山回响》
92.	楼下的一个男人病的要死，那间壁的一家唱着留声机，对面是弄孩子，楼上两个人狂笑，还有打鼾声，还有打牌声，河中的船上有女人哭着她失去的母亲。 人类的悲欢并不相通，我只觉得他们吵闹。－－鲁迅
93.	什么样的状态最恐怖？ 
忙碌的学习，上班，以为忙碌了，就是充实了。一般还很满足，自以为比别人过得有意义。其实说到底，都是急于活得明白，反倒搞不清楚。
94.	未知的危险性是最恐怖的，而未知来自于你感官能力的丧失。比如说漆黑一片的屋子里你丧失的是视觉，比如说一片静谧的丛林里你丧失的是听觉。当你失去这些采集环境信息的渠道后，你会无法用经验体系构建一个稳定可预测的环境状况。人本能的就希望远离这种不稳定，这就是恐惧的作用了。
95.	我们千山万水来到这，为的也不过是说一声再见。
96.	遇见你所爱的人，时间就会停止。
97.	在遇到她之前，我不怕死，不惧远行，也不曾忧虑悠长岁月，现在却从未如此真切地思虑起将来。－－《平如美棠》
98.	从今往后，咱们只有死别，再无生离。－－《我们仨》
99.	别人的痛苦才是你艺术的源泉，而你去受苦只会成为别人艺术的源泉。
100.	我们大部分人根本谈不上独立的审美，而且美也是随着时代和环境在变化。
101.	无论我告诉你什么道理，当你的心智没有达到这个境界或接近的水平时或经历过一些事情的时候，你是不会理解这个道理的。或者你以为你知道这个道理，其实你不知道。
102.	除了自身的病患或亲友离去的痛苦是真实的，其他的痛苦都是你自己的价值观带给你的。
103.	别人指责你的事情或批评的你的理由，往往最能伤害你的，是那些你也这样认为的事情。
104.	其实人跟人之间差别其实不大，所以不要与别人去比较，人生就是一场长跑，你可能不会是第一名，但也不不太会是最后一名，和前面比你会有动力，和后面比你会有幸福。但重要的是享受过程。
105.	永远不要与人去辩论，你也很难把别人辩服，因为立场不同，因为没有对错，只有规则，只有利益。人生就是一场游戏，懂得你在玩的游戏的游戏规则，然后玩好它。
106.	生活其实是一种运营，时间是你最宝贵的资源，还有钱，关系，都是你的一种投入，自己重视什么，事业，友谊，家庭上，就多投入些，种瓜得瓜，好好平衡各个关系是你要做好的。
107.	人不会死在绝境。却往往栽在十字路口。
108.	编剧是你，我怎么知道结局。
109.	一只船孤独的航行在海上，它既不寻求幸福，也不逃避幸福，它只是向前航行，底下是沉静碧蓝的大海，而头顶是金色的太阳。   --莱蒙托夫
110.	历史学——孤证不成立
111.	新闻无需撒谎，它只需要给出“部分的真相”，就可以达到操纵民意的目的
112.	你所关注的东西，永远都是媒体想让你关注的
113.	很多时候舆论一边倒的声音，未必是大多数人所赞同的，只是不赞同的人以为自己是少数，不愿意发声而已
114.	除非你准备射击，否则不要把枪口对准人或物
115.	把自己不能理解的行为定义为「装」实在是非常不好的习惯，要改。
116.	画家不识渔家苦，好作寒江钓雪图。
117.	我们坚持一件事情，并不是因为这样做了会有效果，而是坚信，这样做是对的。——哈维尔
118.	人这一生为什么要努力？
是一种想去体验一个更大的世界的欲望。
119.	子路有闻，未能行之，唯恐有（又）闻。
120.	信任就像一张纸，皱了，即使抚平，也恢复不了原样了。。。 
用水胶带，喷水，绷木板上干后比原先还平。---做不到只是知识不够用。
121.	我第一次感受到时间是一种物质的存在。它就像是一条蠕动的虫子，拖着臃肿皱皮的身躯，从我的血管里缓缓缓缓地爬过，并且留下了一条粘乎乎的痕迹。
122.	原来死亡就是一种消失。不但是肉体，精神和思想的消失，更重要的是在人们的记忆中慢慢成为了空白，就像这个人从没在这个世界上来过一样。
123.	张浩站在他办公室高大的落地窗玻璃前，看着下面的芸芸众生。他说，林岚，你觉得他们生活得辛苦吗？我觉得很辛苦。每个人都很辛苦。这个世界不会符合你所有的想象，甚至连一个你的想象也不符合，可是我们还是得生存下去。
124.	人是为活着本身而活着，而不是为了活着之外的任何事物所活着。
125.	人生的意义是什么？
意义这个词太单薄，太卑微，低落到尘埃里，配不上生命，也承载不起人生。
126.	人生逆旅，一蓑烟雨。
127.	外行看热闹，都不知道别人家的事情，一群吃瓜群众指指点点，哈哈哈哈。。。被媒体玩的像猪一样。
128.	底线之上才有资格说各展所长。
129.	“我寄给你的信，总要送往邮局，不喜欢放在街边的绿色邮筒中，我总疑心那里会慢一点。”	--鲁迅《致许广平》
130.	我不要儿子，我要一个女儿--只要一个，像你的。--钱钟书
131.	孩子不是图画练习册，不要光顾着涂上自己喜欢的颜色。	--《追风筝的人》
132.	生活其实也很简单，喜欢的就争取，得到的就珍惜，失去了就忘记。
133.	有什么事情是游戏从业者不愿意告诉玩家的?
免费玩家也是我们提供给付费玩家的功能之一。
134.	哪有什么岁月静好，不过是有人为你付中负重前行，生活从来都不容易，当你觉得挺容易的时候，一点是有人再替你负重前行。
//好像现在是我人生中最轻松容易的时候了，那么到底有哪些人在为我负重前行呢？
135.	有枪但你没盾，你挡不住别人的子弹。
136.	没有人有义务了解你所尽力的艰辛。
137.	我从来没有想过一个节目会以无解来结尾，一直到明白真实的世界就是如此。 --柴静《双城的创伤》
138.	能够让你后悔的，从来不是你做过的事，而是你想做却没有做过的事。
139.	很多时候，你愿意讲给别人听的，大概是那些很想，却再也没有机会告诉以前的自己的话吧。--《肖申克的救赎》
140.	从童年起，我便独自一人。照顾着历代的星辰。--《孤独》白鹤林
141.	与这世界交手多年，你是否光彩依旧，兴致盎然。
142.	为什么你不让别人看到你善良的一面？因为如果他们看见了，就会期望我一直是善良的。
143. 周围认识的许多情侣，最后都步入了婚姻殿堂，但其中不少人在爱情长跑中都曾不忠。有些故事大家心照不宣，甚至帮他们遮掩。每次婚礼，我看着新人们热泪盈眶地念誓言，从没怀疑过他们在那一刻的真诚，可人性是如此幽深复杂，千帆过尽，我变得什么都能理解，也什么都无法相信。
144. 人生有5%的幸福，5%的痛苦，还有90%的平淡。人们往往被那5%的幸福诱惑着，幻想未来或怀念过去，忍受着5%的痛苦，在90%的平淡中慢慢度过漫长的一生。
145. 记得一个电影里面的女主说过”我不是喜欢钱，但是钱可以带来自由和尊严。我喜欢的是自由和尊严。”
146. 90次的反复下载上传，最后变成了这样，可见你认为最可靠的数据也是会在传播中失去原来的样子，更何况是你从被人嘴里听到的别人。
147. 无论你做的事情多正义，都不能强制我和你一个步调。
148. 既无法忍受现在的状态，又没能力改变这一切，可以像只猪一样懒，却无法像只猪一样心安理得。
149. 我们的祖先是被吃了无数回才走上了食物链的顶端。
150. 尊重粉丝维护偶像，但也请尊重一个人从内心深处鄙视另一个人的自由。
151. 皇帝为什么不多生孩子，最后选择优秀的孩子即位？”长幼”是常量，”优秀”是变量，政治稳定不能有太多的变量。
152. 我们看到的都是别人让我们看到的。
153. 没打出来的牌才是王牌。
154. 市场不一定是去迎合的，而是可以引导和培养的。
155. 后代子孙永远也不会知晓当初战争中零星冲突的悲惨情况；事实上，一无所知反而最好。真正的战争永远会隐没于历史的黑暗面。 ---沃尔特•惠特曼
156. 只有你才知道对你而言什么才是糟糕的生活，什么才是真正的一塌糊涂，这与旁人的教说，旁人的经验并无关系。
1. 这世上真话本就不多，一位女子的脸红胜过一大段对白。-- 老舍
1. 如果说有谁在看到流星的瞬时就能许下愿望，那一定是非常纯熟且迫切的愿望。
1. “我可以尽管向你们这个组合宣泄负面情绪，因为你们是被主流唾弃的，所以无论我说什么都没错，毕竟我是站在道德制高点上的。” --momo的老公
1. 不是返璞归真，转了个圈回到的却不是原处。两个放羊最大的区别，一个是满足物质生活，一个是满足精神生活。曾经的种地放羊是生活的根基，被迫接受的事没有什么美感，结束一天的工作后裹着一身臭汗上炕睡觉第二天周而复始，这种放羊与“舒适的生活”是没有挂钩的。而现在那种有情怀的种地放羊则是一种有钱人的主动选择，把过去的苦事中的精华提取，与其他美好的事相连接，在放羊的生活中也能享受惬意的生活。他们有能力选择和组合生活，这不该被批判。
1. 我看到的多数家庭的教育是颠倒混乱的。生下来到学龄前应当树立家长权威（要有敬畏），他们却去溺爱；小学应当严格培养学习习惯和基础，他们却宽松；青春期个性萌芽，父母应当从权威退到民主，让孩子学会理性和责任时，他们却开始各种着急焦虑和专制严管；到大学应该是退居二线，最多给于建议的时候他们开始对孩子人生规划指手画脚；工作了，父母应当放手让孩子完全独立对自己负责时，他们却最终升级到强迫相亲这种直接干涉。
1. 不愿费心力和别人交流。然而总是被指诘在躲避。内心不坦然，才是孤独者的坟墓。
1. 人生如逆旅，我亦是行人。
1. 你一直耿耿于怀的事事实上相关人物根本早就忘记了 耿耿于怀的果然只有你自己“
1. 当前的环境也许只是一个暂态，也许只是世界的一小面；如果你想要见见更大的世界，那就不要太急着让自己为了适应当前的环境而彻底改变。
1. 当你老了，回顾一生，就会发觉：什么时候出国读书，什么时候决定做第一份职业、何时选定了对象而恋爱、什么时候结婚，其实都是命运的巨变。只是当时站在三岔路口，眼见风云千樯，你作出选择的那一日，在日记上，相当沉闷和平凡，当时还以为是生命中普通的一天。——陶杰 《杀鹌鹑的少女》
1. 那一天我二十一岁，在我一生的黄金时代，我有好多奢望。我想爱，想吃，还想在一瞬间变成天上半明半暗的云，后来我才知道，生活就是个缓慢受锤的过程，人一天天老下去，奢望也一天天消逝，最后变得像挨了锤的牛一样。可是我过二十一岁生日时没有预见到这一点。我觉得自己会永远生猛下去，什么也锤不了我。 — —王小波
1. 想要追求自由随性的生活，就一定要先从自律开始。
1. 别人口中越是容易让人得出倾向性结论的问题描述，往往代表他刻意隐瞒了越多关键的细节。
1. 走不进去的世界就不要硬挤了，为难了别人，也作贱了自己。
1. 古龙《多情剑客无情剑》里，提过一个例子：一对厨子，饭馆打烊后，他们在后厨，自己给自己炒了盘菜，找点小酒，很惬意的饮食一番，舒服那一两个时辰。
--古龙还说：他们还活着，就是因为一天还有那么一两个时辰。
1. 从来如此，便对么？——鲁迅《狂人日记》
1. 那……学校不好，难道知识也不好么?
1. 高三毕业的欢送会上，复读班上的五个男生合唱了这首歌，我知道他们都不是第一年参加高考，我也知道那一年他们仍然成绩平平，我们那一届复读班整体都考的很差，但这首歌我记到现在。好像长这么大，见过的最多的无功而返，苦苦挣扎都是在学习的道路上。可苦涩中的温暖最能长存。路漫漫，且行且珍重！
1. 我一直记得刘瑜写给女儿的一段话：愿你被很多人爱，如果没有，愿你在寂寞里学会宽容。
1. 开始并完成一件事，比做好它更重要，因为只要开始了，你就有机会把它做的更好———-一件看上去繁难的事，只要开始做了，就会变得越来越容易。”
1. 张一鸣有一句说的特别对：所谓成功，就是延迟满足。
1. 成长是件残酷的事情，也许久而久之我们活成了别人想要的模样。但世俗跟成熟是两码事：在熙熙攘攘之外学会“我愿意”，不愿将就的你也可以不那么讲究。
1. “秘密的暴力比公开的暴力更令人恐怖，它会使人失去思考能力、道德意识和抵抗意志，因此退化到最低等原始动物保命本能中去。为了保命求生、避免肉体折磨，人会变得全无廉耻、奴性十足、无所不为。秘密统治对政府权力的正当行使和合道德性同样有着严重的腐蚀作用。” ---《布达佩斯往事》
1. 一个成熟的人，他的标准来自他的内心，而大多数的人，却受环境左右。对自己的标准会不由自主的降低以适应这个环境，减少自身与环境的冲突，在一个低标准下，自觉“满意”的度过每一天。 ——《精进》
1. 梦想不一定要马上实现，如果身边的人反对，那就走慢一点，只要你每天确定自己在往那里走就行。
1. 他没有勇气，也没有兴趣使渴望的行动得以一气呵成，因此自己在半途中就会怀疑行动的意义。---夏目漱石
1. 我来不及认真地年轻，待明白过来时，只能选择认真地老去。 —— 三毛
1. 我会以我的标准与方式看待世界，但我并不会以他来要求他人。--清让
1. 时间，只是一个自称能治百病的庸医。
1. 当你能从你认可的人或者事物身上吸取经验与知识，这是大部分人能做到的，但是如果你能从你不认可的人或者事物身上吸取营养，学到东西，那就真的太难得
了。
1. 你想成为什么样的人，那就尽量去向他们靠近。
1. 真正幽默的人，是把快乐给了别人。
1. 人这一生有很多重要的决定，每个决定其实都决定了我未来的人生，是否被动接受做一个幼师、是否转专业、是否升本等等等，做这些所有的选择与决定前，想想自身的优势，结合趋势与实力，看一下自己做这件事的把握有多少，但凡重大的决定，不要想着在尝试中去找答案，对于小事情这样是可以的，但是一些人生的重大决定是没有尝试的机会的，想尽一切办法想把仗打赢的，是最难的，我最该做的，是在一开始选择前，确定这场仗能打赢，再去打。
1. 面试造飞机，工作扭螺丝。
1. “让忙于务实的人务实，让乐于做梦的人做梦”。
1. 生命是一场华丽的冒险，只是我们永远都跨不过时间的深渊。
1. 曾经的你，以为只要带着那把长剑和赤子之心就可以说服自己不出卖理想的灵魂。在最艰难和不得不流泪的晚上，即使连自己都在笑自己傻，但仍然用长剑刺痛自己，提醒自己，勇往直前，直到将来。
1. 过往不恋，未来不迎，当下不负。
1. 忠言逆耳，良药苦口，可不都是这样吗。但我觉得最重要的是要培养自己的判断力，在兼容并包的基础上一定要有自己的主心骨。善听百家之言，思想上的言论抒发不分对错，要客观结合自己的情况，别人的经验也不全是对的，就算是对的，也不全适合自己，不同的人有不同的性格，脾气，要自己汲取自己认可的观点看法，适合自己才是最好的。
1. 世上最难的事之一，把自己的思想装进别人的脑袋。
1. 这短短的一生，我们最终都会失去。你不妨大胆一些，爱一个人，攀一座山，追一个梦。 ——《大鱼海棠》
1. 有时候遇到瓶颈了，你应该停下来好好想想，是有四年工作经验，还是一个经验用了四年。
1. 这世上唯有病痛和亲人去世是真切的痛楚，其他都是不必要的伤感，是忽略了当下拥有的一切的贪婪。
1. 许多人所谓的成熟， 不过是被习俗磨去了棱角，变得世故而实际了。那不是成熟，而是精神的早衰和个性的消亡。真正的成熟，应当是独特个性的形成，真实自我的发现，精神上的结果和丰收。
1. 别嫌读书苦，你现在的气质里，藏着你走过的路，读书不是为了雄辩和驳斥，也不是为了轻信和盲从，而是为了思考和权衡。
1. 真的不要小看父母，不要觉得自己很厉害。以前笑父母遥控器还要套个手机套，其实和现在我们用手机还要贴膜戴手机套是一样的。以前笑父母为了一毛钱还和人家讨价还价，其实和我们现在用着手机在群里抢红包是一样的。以前父母无聊时磕着瓜子看着小说，其实和我们现在拿着手机刷着朋友圈是一样的。以前父母拉几个好友打麻将谈天说地，其实和我们现在拉几个网友王者农药开黑是一样的。以前父母在厂里上班踩着缝纫机，其实和我们现在写字楼里对着电脑写 PPT word 文档是一样的。所有的都没有变，只是时代在变，生活方式升级，换一种方式活着而已。很多年以后，可能会有10后笑着：瞧，我爸以前是在格子间苦逼写代码的工程师，我现在一家未来公司看着机器人帮我干活，公司只有我一个人呢。
1. 有勇气去改变那些可以改变的事，
有肚量去容忍那些无法改变的事，
有智慧去区分上述的事。
1. 识人不必探尽，探尽则多疑。
知人不必言尽，言尽则无友。
责人不必苛尽，苛尽则众远。
敬人不必卑尽，卑尽则少骨。
让人不必退尽，退尽则路寡。
1. 安全感在很多时候是束缚人的枷锁，过度追求会让人生少了很多可能性。
1. 大部分的恐惧，只有在你把它当回事儿的时候才是。
1. 很多时候，没有兴趣并不真的是没有兴趣，而是怕自己做不好。
1. 最好的兴趣就是永远达不到但可以不断精进的那些。
1. 很多时候，成功者是自证的，失败者也是。
1. 阻止大脑用思维定式进行自动加工，夺回大脑的控制权。
1. 努力不是盲目的，是定向的。
1. 要超越心智，首先要能辨别更好的心智与现有心智的区别。
1. 世俗的成功不是人人都可以达成的，按概率也就只有一小部分。
1. 盲目听信成功学故事并模仿，将离成功越来越远。
1. 不管是恋爱还是职场，要选得好就得先小范围尝试和观察，对所谓的“好坏”有个大体了解后，然后再选择，最后全情投入。
1. 完美的职业规划不存在，避免因为规划得太细而失去更多的可能性。
1. 过去的付出只代表过去，沉没成本不是成本。
1. 常认为自己是受害者的人往往真的会成为受害者。
1. 绝对公平并不存在，追求绝对公平只是追求自利。
1. 活在父母的世界跟活在子女的世界一样，都是人格尚未独立出来的婴儿。
1. 在事情没有快速变化的前提下，等待仅仅是无谓的消耗。
1. 要撕掉自己的短处，不要试图掩盖，用更强的标签去替代它。
1. 陷入指定的成功，你就基本不太可能成功了。
1. 握不住的沙，不如扬了它。
1. 优于别人并不高贵，真正的高贵因该是优于过去的自己。-- 海明威《真实的高贵》
1. 顶级组织至情至性，
 一流组织共同信仰，
二流组织共同利益，
三流组织共同规则。
1. 像老大寻求意见时，自己先思考出几套解决方案也就是“香蕉”，让你的老板去做选择而不是让他出想法。如果因为你的”香蕉”没熟透，放心你的老大会给你更好的解决方法，先养成动脑思考的好习惯。 --香蕉法则
1. 善良不是要求别人做什么，而是要求自己做什么。
1. 自己是既得利益者，说这不公平叫「觉悟高」，值得钦佩，自己不是既得利益者，就别眼里只看到不公平，因为这太正常了，如果不理解，或者心生抱怨，该想想自己的问题。
1. 文字传达观点，文字也能误传观点。
1. “检验一流智力的标准，就是看你能不能在头脑中同时存在两种相反的想法，还维持正常行事的能力。”
1. 有时候，鸡汤可能比所谓的干货更有用，很多道理其实大家都懂，我们做出改变缺乏的只是一个推动力。
1. 不自律，无自由：
曾经以为自由就是想做啥做啥，后来才发现自律者才会自由。当一个人缺乏自由的时候，他做的事情总是在受习惯和即时诱惑的影响，要么就是被他人的思想观念所扰，几乎永远不可能去做内心真正渴望的事。
1. 《海上钢琴师》中，1900 为什么最后没有下船？
我们的陆地就是他的海洋。无人愿意一生漂泊。
1. 永生是否是一种酷刑？
凡是能被适应的惩罚都不能算是酷刑。
1. 当有人做一件事并没有伤害到任何人的事情，你却要指手画脚的时候，你才是那个傻逼。
1. 这世上只有一种成功，就是能用自己喜欢的方式度过自己的一生。
1. 只有深入一座城市的边边角角，了解城市里的一花一草一木，才能真正看懂人生百态，品味酸甜苦辣的人生。
1. 信仰是用来约束自己的。
1. 习惯，是扼杀创造力的最大杀手！
当你所掌握的信息不足以帮自己判断的时候，你可以选择观望，但是用这些无比正确的废话来说服别人，就是最大的笑话，就等同于，你自己没有判断力，也要求别人也跟你一样没有判断力。
1. 没有观点的反驳更可怕，有那么一拨人，为了让自己无比正确，总说一大堆永远正确的话。
1. 穷人思维和富人的思维是，穷人花 10 块，总奢望得到 100 块的价值，而富人花 1w 块，只求得到 1000 块的价值就够了，但是即便如此，富人可以轻易获取 1000 块的资源，而穷人即便费劲九牛二虎之力得到 100 块的价值也差距很大。
1. 我自己也做了公众号，尤其是影响力越做越大，关注的人越来越多，当一个群体越来越大的时候，难免鱼龙混杂，什么样的人都有，也就意味着，你的所有观点，总会随着群体越来越大，不认可你的人越来越多，当然，认可你的人其实是更多的，但是认可你的人不会让你糟心，而不认可你的人，或者说一些杠精才会让你最糟心的。
1. 这个世界有几样东西是不能被取代的，第一：亲身感受。我拿着一碗水，告诉你：这个是海洋，你永远不会有感觉。第二：自我成长和努力。没有人可以取代你做事情，应该自己完成的，只能由自己完成。工具的善用，自我的实力，重要性是排在第一位。刘翔跑再快，我开车，轻松超越他。当然，前提是我会开车，四肢还得健全。
1. 吃不了起早贪黑的苦，你丢不起那个街头摆摊的人，你凭什么觉得不公平？
1. 活在当下。我 22 岁的时候从不会去考虑五六年之后的我会是怎样，我只是活在当下，做好当下的事而已。
1. 致正少年的你，愿你所有快乐无需假装，愿你此生尽兴赤诚善良。
1. 罗素说：只有一种英雄主义，就是在认清生活的真相后依然热爱生活。
1. 这世界就是一拨人昼夜不停的运转，另一拨人起床发现世界变了。
1. 人有一个通病：一直拥有的就觉得是理所当然的，唯有等到失去的时候，才发现原来自己是如何的富有。
1. 故乡养活不了肉体，城市寄托不了灵魂，回不去的故乡，容不进的城市。有工作的地万没有家，有家的地方却没有工作，他乡容不下灵魂，故乡安不了肉身，一个叫家的地方找不到养家糊口的路，找到了养家糊口的地方却安不了家，从此便有了漂泊，有了远方，有了乡愁......',
  'groups' => 'Default',
  'showsel' => '1',
  'showse2' => '1',
  'id' => '32',
)
[ info ] [ SESSION ] INIT array (
  'id' => '',
  'var_session_id' => '',
  'prefix' => 'think',
  'type' => '',
  'auto_start' => true,
)
[ info ] [ RUN ] app\admin\controller\Note->updateNote[ /var/www/html/daily/application/admin/controller/Note.php ]
[ info ] [ DB ] INIT mysql
[ info ] [ CACHE ] INIT File
[ info ] [ LOG ] INIT File
[ sql ] [ DB ] CONNECT:[ UseTime:0.000660s ] mysql:host=74.120.168.12;dbname=diary;charset=utf8
[ sql ] [ SQL ] SHOW COLUMNS FROM `note` [ RunTime:0.001654s ]
[ sql ] [ SQL ] SELECT * FROM `note` WHERE  `id` = 32 LIMIT 1 [ RunTime:0.000664s ]
[ sql ] [ SQL ] SELECT `groups` FROM `note` WHERE  `id` = 32 LIMIT 1 [ RunTime:0.000387s ]
[ sql ] [ SQL ] SHOW COLUMNS FROM `groups` [ RunTime:0.001347s ]
[ sql ] [ SQL ] SELECT `parent_id` FROM `groups` WHERE  `groups` = 'Default' LIMIT 1 [ RunTime:0.000417s ]
[ sql ] [ SQL ] SELECT `groups` FROM `groups` WHERE  `id` = 0 LIMIT 1 [ RunTime:0.000518s ]
[ sql ] [ SQL ] SELECT `id` FROM `groups` WHERE  `groups` = 'Default' LIMIT 1 [ RunTime:0.000404s ]
[ sql ] [ SQL ] UPDATE `note`  SET `id`=32,`p_id`=1,`title`='写出这些话的人，我估计一辈子都追不上了\r',`content`='# 写出这些话的人，我估计一辈子都追不上了\r\n1. 如果发出声音是危险的，那就保持沉默；如果自觉无力发光，那就别去照亮别人。但是，不要习惯了黑暗就为黑暗辩护不要为自己的苟且而得意洋洋；不要嘲讽那些比自己更勇敢，更有热量的人们。可以卑微如尘土，不可扭曲如蛆虫。\r\n2. 你多学一样本事，就少说一句求人的话。\r\n3. 我38岁那年，琢磨着要不要去读两年的放射线照相术大专学位。然后我跟我朋友说了这事，我觉得自己太老了，等拿到学位是，我都40岁了。\r\n--朋友说，如果你不读，你还是会40岁，一个没有学位的40岁。\r\n4.	这些年来我一直提醒自己一件事情，千万不要自己感动自己。大部分人看似的努力，不过是愚蠢导致的。什么熬夜看书到天亮，连续几天只睡几小时，多久没有放假了，如果这些东西也值得夸耀，那么富士康流水线上任何一个人都比你努力多了。人难免天生有自怜的情绪，唯有时刻保持清醒，才能看清真正的价值在哪里。\r\n5.	孩子，我要求你读书用功，不是因为我要你跟别人比成绩，而是，我希望你将来会拥有选择的权利，选择有意义，有时间的工作，而不是被迫谋生。当你的工作在你心中有意义，你就有成就感。当你的工作给你时间，不剥夺你的生活，你就有尊严。成就感和尊严，给你快乐。\r\n6.	最终我们都将学会，与他人交往，最重要的不是甜言蜜语，不是容貌金钱，而是你和他对于这个世界的看法，对人生的态度是否一致。\r\n7.	我们一路奋战，不是为了改变世界，而是为了世界不再改变我们。\r\n8.	不要欺骗别人，因为你能骗到的人，都是相信你的人。\r\n9.	熟练的运用\"关我屁事\"和\"关你屁事\"可以省下人生80％的时间。\r\n10.	我怎么敢倒下。我身后空无一人。\r\n11.	\"痛苦是财富，这话是扯淡。姑娘，痛苦就是痛苦，对痛苦的思考才是财富。\"\r\n12.	永远不要相信苦难是值得的，苦难就是苦难，苦难不会带来成功。苦难不值得追求，磨练意志是因为苦难无法躲开。\r\n13.	如果我不曾见过太阳，我本可以忍受黑暗。\r\n14.	社交之所以累，是因为每个人都试图展现出自己其实并不具备的品质。\r\n15.	读书：之前觉得自己是一个人，现在觉得自己可以是一个世界。\r\n16.	希望你今天白费的努力，早晚有一天变成值得。\r\n17.	历史：遗忘，对倒下的人不公平。\r\n18.	南京大屠杀：\r\n安培说：现在日本的年轻人没有义务为过去的日本人像现在的中国人道歉。\r\n那现在的中国人也没有权利为过去的中国人原谅现在的日本人。\r\n19.	明明别人轻轻松松可以做到的事，我却做不了。满满的无力感，无力到没有力气。\r\n20.	人的一切痛苦，本质上都是对自己无能的愤怒。\r\n21.	不要试图同情你自己。\r\n22.	你配得上你自己想要的生活吗？\r\n23.	什么叫成熟？\r\n了解自己，了解自己的欲望，了解自己的局限。理解别人，理解别人的欲望，理解别人的局限。\r\n24.	我们会看到要寻找的东西，错失不去寻找的东西，虽然它在那里。我们的阅历被我们的关注点深深地影响了。\r\n25.	做你害怕做的事，然后你会发现，不过如此。\r\n26.	一直认为，所谓新鲜感，不是和未知的人一起去做同样的事，而是和已知的人一起去体验未知的人生。\r\n27.	如果不能随时有限的反击，所有的宽容都是懦弱。\r\n28.	群众的眼睛不是雪亮的，群众的眼睛是盲目的。\r\n29.	不是所有的人都能功成名就，我们中有些人注定要在日常的点滴中寻找生命的意义。\r\n30.	带人友善是修养，独来独往是性格。\r\n31.	几年前踏上火车那一刻还没有意识到，从此故乡只有冬夏，再无春秋。\r\n32.	十年饮水，难凉热血。\r\n33.	德，律己为德，律人无异于私刑。\r\n34.	信仰，他可以与宗教无关，代表自己的精神追求。\r\n35.	人最重要的能力有两个，适应环境，不忘初心。适应环境可以安身，不忘初心可以立命。\r\n36.	维护不在场的人，所言不多于所知。\r\n37.	只有你愿意为之而死的东西，你才可以藉之而生。\r\n38.	你见过树，却没见过森林。\r\n39.	那些杀不死你的最终都会使你更强壮。\r\n40.	是你把你的秘密告诉了风，那就别怪风把他带给树。\r\n41.	似乎大家都这样。自命不凡，却无足轻重。\r\n42.	保安笑着问我：\"你那么小个子，开那么大个车？\"的时候。我傻笑着回答：\"你是当保安，我是当司机的。\"\r\n43.	猪会飞，是因为他站在了风口上，成功的飞起来以后他可以总结起飞技巧，但重要的，是风。\r\n44.	你现在做的每一件事看来并没有什么意义，但他们也许会在未来助你 一臂之力。\r\n45.	唱出本身就是最要不得的态度。当你做某件事的时候，一旦想要求快，就表示你再也不关心他，而是想去做别的事。\r\n46.	命运啊，说是注定，不如说是你在何时做了选择。\r\n47.	在一群出色的人中间，常常误以为自己也是其中一员，然后忘了努力。\r\n48.	只有经历过地狱磨难的人，才有建造天堂的力量。\r\n49.	一个伟大的人往往受到排挤，压抑，甚至被人斥为哗众取宠而陷于孤独中。\r\n50.	与怪物战斗的人，应当小心自己不要成为怪物。当你远远凝视深渊时，深渊也在凝视你。\r\n51.	一个人知道自己为什么而活，就可以忍受任何一种生活。\r\n52.	假如我们不去打仗，敌人用刺刀杀死了我们，还要指着我们的骨头说：看，这是奴隶。\r\n53.	我有一事，生死与之。\r\n54.	我的体内啊，有个器官比心脏还重要，他虽然看不见，但却是在我的体内从脑袋一直贯穿到胯间。就因为他，我才能站着直，坐着正，就算脚步摇晃也能笔直地向前行，在这里退缩的话，那东西就会折断。\r\n55.	不可能这三个字，你说的太多了。\r\n56.	世界上没遇上帝，如果有的话，我无法容忍我不是。－－尼采\r\n57.	剑在英雄手，登台傲王侯。－－比莫干《九州缥缈录》\r\n58.	武士的一生，只相信自己手中可以握住的东西。－－赢无翳《九州缥缈录》\r\n59.	为天地立心，为生民立命，为往圣继绝学，为万世开太平。－－北宋时期张载\r\n60.	为不能作战的人而战。\r\n61.	你的成功标准： 能做自己喜欢做的事，能只做自己喜欢做的事。\r\n62.	如何不招人厌的展现自己的学识：别人问了，你再答。\r\n63.	无论现实如何操蛋，你都能在心里有一个更诗意的世界，那个世界便是情怀。\r\n64.	情怀就是以心灵的满足而不是功利的得失作为自己的行为标准的一种品质。一件没有什么用的事，还是要去做，也许只是因为我喜欢，也许只是因为它看起来很美。\r\n65.	跟优秀的人相处是怎样一种体验：他从不刻意优秀，却总是无意中卓越。\r\n66.	不要跟眼界不一样的人争辩。\r\n67.	人穷尽一生追求另一个人的事，我一直无法理解，或许是因为我自己太有意思，无需他人陪伴，所以我祝你们在对方身上得到的快乐与我给自己的一样多。\r\n68.	一个人需要控制的事情越少，他心理上就越自由。当你企图控制一件事情的时候，你同时也就被这件事情所控制，这永远是个相互的过程。\r\n69.	我们痛恨限制的同时，也依赖限制。\r\n70.	一个能够安住于不确定和不可控制中的人最自由。\r\n71.	大部分的教育工作者都在教人找到工作，而不是寻找人生。\r\n72.	漫画提供给我们的，也许就是这个早以被我们遗忘的世界。但将它看做一个逃避现实，发泄情绪的渠道，还是从中寻找勇气和激励，在现实生活中做一个真正的英雄，决定权在你。\r\n73.	社会衡量一个人的价值，在于他能向外产出什么，至于他吸收了什么，没人在乎。\r\n74.	我发现没有任何一个煤矿工人靠挖煤多又快当上了煤老板。\r\n75.	有的人努力的时候是真的在努力，有的人努力的时候只是为了感动自己，这决定了一个人究竟能变成什么样。\r\n76.	在这残酷的现实面前，除了吃人与被吃，我还有第三种选择，就是努力活下去，并且让这个社会再好一点。知大恶才知大善。知暗夜才知光明。不要低估人性的丑恶，也不要低估人性的光辉。\r\n77.	群众的眼光到底是不是雪亮的？                                                                                  1）群众的智商，呈现非周期性的上升或者下降。                                                        2）其实群众的眼睛就是灯泡，而开关掌控在领导手中，需要时就是雪亮的，不需要时就是不明真相的。 \r\n3）如果让群众挑错，那群众的眼睛无疑是雪亮的，他们最擅长干这个了，但要是问群众什么是对的，那就瞎了。\r\n78.	我一向不太相信离别时的情真意切，我觉得那只是一种情绪渲染。\r\n79.	为什么孩子喜欢看有关恐龙的书？                                                                                恐龙代表过去，宇宙飞船代表未来，我就是不喜欢现在。－－询问一7岁男孩得知\r\n80.	纠正一个错误的方法有很多，而解决一个错误的终极方法就是不给他任何发生的机会。\r\n81.	为什么父母一吵架，小孩就特别懂事？                                                                         小孩的沉默，隐忍，恐惧，以及讨好，在麻木的大人眼中，便是：懂事。\r\n82.	凡我中华之寸土皆洒满我中华儿女之血泪，永世不忘倭寇侵占与残杀之历史。\r\n83.	我相信再有一个妖精大闹天宫，悟空会是去镇压的那个人。\r\n骑士杀死恶龙后，望着满地的财宝，身上长出了鳞片。\r\n84.	只有写鸡汤的人才能从鸡汤中受益。\r\n85.	没有中枪的觉悟，就没有开枪的资格。\r\n86.	什么是人渣？   \r\n浑身都是铠甲，没有一处软肋。\r\n87.	一种人，天天都笑嘻嘻的，好似和谁都合得来，但是从不主动联系朋友，脾气也出奇的好，好像世上没有什么事情能让他们愤怒和悲伤。心中怀着宏伟的梦想，却不愿与现实中的人分担，只是默默的做，以为能用沙砾和泥土堆出山川。\r\n88.	为什么我们愿意把钱捐给身边的乞丐，而不顾那些生活在水深火热之中的欠发达国家的人民呢？                                                                                                                         人类的所有善意都遵循邻避原则。坏的事可以发生，只要别发生在我家后院就行了。－－善意有效辐射范围\r\n89.	后来许多人问我一个人夜晚踟蹰路上的心情，我想起的却不是孤单和路长，而是波澜壮阔的海和天空中闪耀的星光。－－张小砚\r\n90.	当很重要的人寻求更大的世界，却因此不得不离开你的时候，支持还是阻止好？            \r\n他走是因为他想走，他不走是因为他不想走，不要试图去背负别人的人生。\r\n91.	一个人在对另一个人的内心世界做出评判时，最好怀有一定程度的谦逊和宽容。－－《群山回响》\r\n92.	楼下的一个男人病的要死，那间壁的一家唱着留声机，对面是弄孩子，楼上两个人狂笑，还有打鼾声，还有打牌声，河中的船上有女人哭着她失去的母亲。 人类的悲欢并不相通，我只觉得他们吵闹。－－鲁迅\r\n93.	什么样的状态最恐怖？ \r\n忙碌的学习，上班，以为忙碌了，就是充实了。一般还很满足，自以为比别人过得有意义。其实说到底，都是急于活得明白，反倒搞不清楚。\r\n94.	未知的危险性是最恐怖的，而未知来自于你感官能力的丧失。比如说漆黑一片的屋子里你丧失的是视觉，比如说一片静谧的丛林里你丧失的是听觉。当你失去这些采集环境信息的渠道后，你会无法用经验体系构建一个稳定可预测的环境状况。人本能的就希望远离这种不稳定，这就是恐惧的作用了。\r\n95.	我们千山万水来到这，为的也不过是说一声再见。\r\n96.	遇见你所爱的人，时间就会停止。\r\n97.	在遇到她之前，我不怕死，不惧远行，也不曾忧虑悠长岁月，现在却从未如此真切地思虑起将来。－－《平如美棠》\r\n98.	从今往后，咱们只有死别，再无生离。－－《我们仨》\r\n99.	别人的痛苦才是你艺术的源泉，而你去受苦只会成为别人艺术的源泉。\r\n100.	我们大部分人根本谈不上独立的审美，而且美也是随着时代和环境在变化。\r\n101.	无论我告诉你什么道理，当你的心智没有达到这个境界或接近的水平时或经历过一些事情的时候，你是不会理解这个道理的。或者你以为你知道这个道理，其实你不知道。\r\n102.	除了自身的病患或亲友离去的痛苦是真实的，其他的痛苦都是你自己的价值观带给你的。\r\n103.	别人指责你的事情或批评的你的理由，往往最能伤害你的，是那些你也这样认为的事情。\r\n104.	其实人跟人之间差别其实不大，所以不要与别人去比较，人生就是一场长跑，你可能不会是第一名，但也不不太会是最后一名，和前面比你会有动力，和后面比你会有幸福。但重要的是享受过程。\r\n105.	永远不要与人去辩论，你也很难把别人辩服，因为立场不同，因为没有对错，只有规则，只有利益。人生就是一场游戏，懂得你在玩的游戏的游戏规则，然后玩好它。\r\n106.	生活其实是一种运营，时间是你最宝贵的资源，还有钱，关系，都是你的一种投入，自己重视什么，事业，友谊，家庭上，就多投入些，种瓜得瓜，好好平衡各个关系是你要做好的。\r\n107.	人不会死在绝境。却往往栽在十字路口。\r\n108.	编剧是你，我怎么知道结局。\r\n109.	一只船孤独的航行在海上，它既不寻求幸福，也不逃避幸福，它只是向前航行，底下是沉静碧蓝的大海，而头顶是金色的太阳。   --莱蒙托夫\r\n110.	历史学——孤证不成立\r\n111.	新闻无需撒谎，它只需要给出“部分的真相”，就可以达到操纵民意的目的\r\n112.	你所关注的东西，永远都是媒体想让你关注的\r\n113.	很多时候舆论一边倒的声音，未必是大多数人所赞同的，只是不赞同的人以为自己是少数，不愿意发声而已\r\n114.	除非你准备射击，否则不要把枪口对准人或物\r\n115.	把自己不能理解的行为定义为「装」实在是非常不好的习惯，要改。\r\n116.	画家不识渔家苦，好作寒江钓雪图。\r\n117.	我们坚持一件事情，并不是因为这样做了会有效果，而是坚信，这样做是对的。——哈维尔\r\n118.	人这一生为什么要努力？\r\n是一种想去体验一个更大的世界的欲望。\r\n119.	子路有闻，未能行之，唯恐有（又）闻。\r\n120.	信任就像一张纸，皱了，即使抚平，也恢复不了原样了。。。 \r\n用水胶带，喷水，绷木板上干后比原先还平。---做不到只是知识不够用。\r\n121.	我第一次感受到时间是一种物质的存在。它就像是一条蠕动的虫子，拖着臃肿皱皮的身躯，从我的血管里缓缓缓缓地爬过，并且留下了一条粘乎乎的痕迹。\r\n122.	原来死亡就是一种消失。不但是肉体，精神和思想的消失，更重要的是在人们的记忆中慢慢成为了空白，就像这个人从没在这个世界上来过一样。\r\n123.	张浩站在他办公室高大的落地窗玻璃前，看着下面的芸芸众生。他说，林岚，你觉得他们生活得辛苦吗？我觉得很辛苦。每个人都很辛苦。这个世界不会符合你所有的想象，甚至连一个你的想象也不符合，可是我们还是得生存下去。\r\n124.	人是为活着本身而活着，而不是为了活着之外的任何事物所活着。\r\n125.	人生的意义是什么？\r\n意义这个词太单薄，太卑微，低落到尘埃里，配不上生命，也承载不起人生。\r\n126.	人生逆旅，一蓑烟雨。\r\n127.	外行看热闹，都不知道别人家的事情，一群吃瓜群众指指点点，哈哈哈哈。。。被媒体玩的像猪一样。\r\n128.	底线之上才有资格说各展所长。\r\n129.	“我寄给你的信，总要送往邮局，不喜欢放在街边的绿色邮筒中，我总疑心那里会慢一点。”	--鲁迅《致许广平》\r\n130.	我不要儿子，我要一个女儿--只要一个，像你的。--钱钟书\r\n131.	孩子不是图画练习册，不要光顾着涂上自己喜欢的颜色。	--《追风筝的人》\r\n132.	生活其实也很简单，喜欢的就争取，得到的就珍惜，失去了就忘记。\r\n133.	有什么事情是游戏从业者不愿意告诉玩家的?\r\n免费玩家也是我们提供给付费玩家的功能之一。\r\n134.	哪有什么岁月静好，不过是有人为你付中负重前行，生活从来都不容易，当你觉得挺容易的时候，一点是有人再替你负重前行。\r\n//好像现在是我人生中最轻松容易的时候了，那么到底有哪些人在为我负重前行呢？\r\n135.	有枪但你没盾，你挡不住别人的子弹。\r\n136.	没有人有义务了解你所尽力的艰辛。\r\n137.	我从来没有想过一个节目会以无解来结尾，一直到明白真实的世界就是如此。 --柴静《双城的创伤》\r\n138.	能够让你后悔的，从来不是你做过的事，而是你想做却没有做过的事。\r\n139.	很多时候，你愿意讲给别人听的，大概是那些很想，却再也没有机会告诉以前的自己的话吧。--《肖申克的救赎》\r\n140.	从童年起，我便独自一人。照顾着历代的星辰。--《孤独》白鹤林\r\n141.	与这世界交手多年，你是否光彩依旧，兴致盎然。\r\n142.	为什么你不让别人看到你善良的一面？因为如果他们看见了，就会期望我一直是善良的。\r\n143. 周围认识的许多情侣，最后都步入了婚姻殿堂，但其中不少人在爱情长跑中都曾不忠。有些故事大家心照不宣，甚至帮他们遮掩。每次婚礼，我看着新人们热泪盈眶地念誓言，从没怀疑过他们在那一刻的真诚，可人性是如此幽深复杂，千帆过尽，我变得什么都能理解，也什么都无法相信。\r\n144. 人生有5%的幸福，5%的痛苦，还有90%的平淡。人们往往被那5%的幸福诱惑着，幻想未来或怀念过去，忍受着5%的痛苦，在90%的平淡中慢慢度过漫长的一生。\r\n145. 记得一个电影里面的女主说过”我不是喜欢钱，但是钱可以带来自由和尊严。我喜欢的是自由和尊严。”\r\n146. 90次的反复下载上传，最后变成了这样，可见你认为最可靠的数据也是会在传播中失去原来的样子，更何况是你从被人嘴里听到的别人。\r\n147. 无论你做的事情多正义，都不能强制我和你一个步调。\r\n148. 既无法忍受现在的状态，又没能力改变这一切，可以像只猪一样懒，却无法像只猪一样心安理得。\r\n149. 我们的祖先是被吃了无数回才走上了食物链的顶端。\r\n150. 尊重粉丝维护偶像，但也请尊重一个人从内心深处鄙视另一个人的自由。\r\n151. 皇帝为什么不多生孩子，最后选择优秀的孩子即位？”长幼”是常量，”优秀”是变量，政治稳定不能有太多的变量。\r\n152. 我们看到的都是别人让我们看到的。\r\n153. 没打出来的牌才是王牌。\r\n154. 市场不一定是去迎合的，而是可以引导和培养的。\r\n155. 后代子孙永远也不会知晓当初战争中零星冲突的悲惨情况；事实上，一无所知反而最好。真正的战争永远会隐没于历史的黑暗面。 ---沃尔特•惠特曼\r\n156. 只有你才知道对你而言什么才是糟糕的生活，什么才是真正的一塌糊涂，这与旁人的教说，旁人的经验并无关系。\r\n1. 这世上真话本就不多，一位女子的脸红胜过一大段对白。-- 老舍\r\n1. 如果说有谁在看到流星的瞬时就能许下愿望，那一定是非常纯熟且迫切的愿望。\r\n1. “我可以尽管向你们这个组合宣泄负面情绪，因为你们是被主流唾弃的，所以无论我说什么都没错，毕竟我是站在道德制高点上的。” --momo的老公\r\n1. 不是返璞归真，转了个圈回到的却不是原处。两个放羊最大的区别，一个是满足物质生活，一个是满足精神生活。曾经的种地放羊是生活的根基，被迫接受的事没有什么美感，结束一天的工作后裹着一身臭汗上炕睡觉第二天周而复始，这种放羊与“舒适的生活”是没有挂钩的。而现在那种有情怀的种地放羊则是一种有钱人的主动选择，把过去的苦事中的精华提取，与其他美好的事相连接，在放羊的生活中也能享受惬意的生活。他们有能力选择和组合生活，这不该被批判。\r\n1. 我看到的多数家庭的教育是颠倒混乱的。生下来到学龄前应当树立家长权威（要有敬畏），他们却去溺爱；小学应当严格培养学习习惯和基础，他们却宽松；青春期个性萌芽，父母应当从权威退到民主，让孩子学会理性和责任时，他们却开始各种着急焦虑和专制严管；到大学应该是退居二线，最多给于建议的时候他们开始对孩子人生规划指手画脚；工作了，父母应当放手让孩子完全独立对自己负责时，他们却最终升级到强迫相亲这种直接干涉。\r\n1. 不愿费心力和别人交流。然而总是被指诘在躲避。内心不坦然，才是孤独者的坟墓。\r\n1. 人生如逆旅，我亦是行人。\r\n1. 你一直耿耿于怀的事事实上相关人物根本早就忘记了 耿耿于怀的果然只有你自己“\r\n1. 当前的环境也许只是一个暂态，也许只是世界的一小面；如果你想要见见更大的世界，那就不要太急着让自己为了适应当前的环境而彻底改变。\r\n1. 当你老了，回顾一生，就会发觉：什么时候出国读书，什么时候决定做第一份职业、何时选定了对象而恋爱、什么时候结婚，其实都是命运的巨变。只是当时站在三岔路口，眼见风云千樯，你作出选择的那一日，在日记上，相当沉闷和平凡，当时还以为是生命中普通的一天。——陶杰 《杀鹌鹑的少女》\r\n1. 那一天我二十一岁，在我一生的黄金时代，我有好多奢望。我想爱，想吃，还想在一瞬间变成天上半明半暗的云，后来我才知道，生活就是个缓慢受锤的过程，人一天天老下去，奢望也一天天消逝，最后变得像挨了锤的牛一样。可是我过二十一岁生日时没有预见到这一点。我觉得自己会永远生猛下去，什么也锤不了我。 — —王小波\r\n1. 想要追求自由随性的生活，就一定要先从自律开始。\r\n1. 别人口中越是容易让人得出倾向性结论的问题描述，往往代表他刻意隐瞒了越多关键的细节。\r\n1. 走不进去的世界就不要硬挤了，为难了别人，也作贱了自己。\r\n1. 古龙《多情剑客无情剑》里，提过一个例子：一对厨子，饭馆打烊后，他们在后厨，自己给自己炒了盘菜，找点小酒，很惬意的饮食一番，舒服那一两个时辰。\r\n--古龙还说：他们还活着，就是因为一天还有那么一两个时辰。\r\n1. 从来如此，便对么？——鲁迅《狂人日记》\r\n1. 那……学校不好，难道知识也不好么?\r\n1. 高三毕业的欢送会上，复读班上的五个男生合唱了这首歌，我知道他们都不是第一年参加高考，我也知道那一年他们仍然成绩平平，我们那一届复读班整体都考的很差，但这首歌我记到现在。好像长这么大，见过的最多的无功而返，苦苦挣扎都是在学习的道路上。可苦涩中的温暖最能长存。路漫漫，且行且珍重！\r\n1. 我一直记得刘瑜写给女儿的一段话：愿你被很多人爱，如果没有，愿你在寂寞里学会宽容。\r\n1. 开始并完成一件事，比做好它更重要，因为只要开始了，你就有机会把它做的更好———-一件看上去繁难的事，只要开始做了，就会变得越来越容易。”\r\n1. 张一鸣有一句说的特别对：所谓成功，就是延迟满足。\r\n1. 成长是件残酷的事情，也许久而久之我们活成了别人想要的模样。但世俗跟成熟是两码事：在熙熙攘攘之外学会“我愿意”，不愿将就的你也可以不那么讲究。\r\n1. “秘密的暴力比公开的暴力更令人恐怖，它会使人失去思考能力、道德意识和抵抗意志，因此退化到最低等原始动物保命本能中去。为了保命求生、避免肉体折磨，人会变得全无廉耻、奴性十足、无所不为。秘密统治对政府权力的正当行使和合道德性同样有着严重的腐蚀作用。” ---《布达佩斯往事》\r\n1. 一个成熟的人，他的标准来自他的内心，而大多数的人，却受环境左右。对自己的标准会不由自主的降低以适应这个环境，减少自身与环境的冲突，在一个低标准下，自觉“满意”的度过每一天。 ——《精进》\r\n1. 梦想不一定要马上实现，如果身边的人反对，那就走慢一点，只要你每天确定自己在往那里走就行。\r\n1. 他没有勇气，也没有兴趣使渴望的行动得以一气呵成，因此自己在半途中就会怀疑行动的意义。---夏目漱石\r\n1. 我来不及认真地年轻，待明白过来时，只能选择认真地老去。 —— 三毛\r\n1. 我会以我的标准与方式看待世界，但我并不会以他来要求他人。--清让\r\n1. 时间，只是一个自称能治百病的庸医。\r\n1. 当你能从你认可的人或者事物身上吸取经验与知识，这是大部分人能做到的，但是如果你能从你不认可的人或者事物身上吸取营养，学到东西，那就真的太难得\r\n了。\r\n1. 你想成为什么样的人，那就尽量去向他们靠近。\r\n1. 真正幽默的人，是把快乐给了别人。\r\n1. 人这一生有很多重要的决定，每个决定其实都决定了我未来的人生，是否被动接受做一个幼师、是否转专业、是否升本等等等，做这些所有的选择与决定前，想想自身的优势，结合趋势与实力，看一下自己做这件事的把握有多少，但凡重大的决定，不要想着在尝试中去找答案，对于小事情这样是可以的，但是一些人生的重大决定是没有尝试的机会的，想尽一切办法想把仗打赢的，是最难的，我最该做的，是在一开始选择前，确定这场仗能打赢，再去打。\r\n1. 面试造飞机，工作扭螺丝。\r\n1. “让忙于务实的人务实，让乐于做梦的人做梦”。\r\n1. 生命是一场华丽的冒险，只是我们永远都跨不过时间的深渊。\r\n1. 曾经的你，以为只要带着那把长剑和赤子之心就可以说服自己不出卖理想的灵魂。在最艰难和不得不流泪的晚上，即使连自己都在笑自己傻，但仍然用长剑刺痛自己，提醒自己，勇往直前，直到将来。\r\n1. 过往不恋，未来不迎，当下不负。\r\n1. 忠言逆耳，良药苦口，可不都是这样吗。但我觉得最重要的是要培养自己的判断力，在兼容并包的基础上一定要有自己的主心骨。善听百家之言，思想上的言论抒发不分对错，要客观结合自己的情况，别人的经验也不全是对的，就算是对的，也不全适合自己，不同的人有不同的性格，脾气，要自己汲取自己认可的观点看法，适合自己才是最好的。\r\n1. 世上最难的事之一，把自己的思想装进别人的脑袋。\r\n1. 这短短的一生，我们最终都会失去。你不妨大胆一些，爱一个人，攀一座山，追一个梦。 ——《大鱼海棠》\r\n1. 有时候遇到瓶颈了，你应该停下来好好想想，是有四年工作经验，还是一个经验用了四年。\r\n1. 这世上唯有病痛和亲人去世是真切的痛楚，其他都是不必要的伤感，是忽略了当下拥有的一切的贪婪。\r\n1. 许多人所谓的成熟， 不过是被习俗磨去了棱角，变得世故而实际了。那不是成熟，而是精神的早衰和个性的消亡。真正的成熟，应当是独特个性的形成，真实自我的发现，精神上的结果和丰收。\r\n1. 别嫌读书苦，你现在的气质里，藏着你走过的路，读书不是为了雄辩和驳斥，也不是为了轻信和盲从，而是为了思考和权衡。\r\n1. 真的不要小看父母，不要觉得自己很厉害。以前笑父母遥控器还要套个手机套，其实和现在我们用手机还要贴膜戴手机套是一样的。以前笑父母为了一毛钱还和人家讨价还价，其实和我们现在用着手机在群里抢红包是一样的。以前父母无聊时磕着瓜子看着小说，其实和我们现在拿着手机刷着朋友圈是一样的。以前父母拉几个好友打麻将谈天说地，其实和我们现在拉几个网友王者农药开黑是一样的。以前父母在厂里上班踩着缝纫机，其实和我们现在写字楼里对着电脑写 PPT word 文档是一样的。所有的都没有变，只是时代在变，生活方式升级，换一种方式活着而已。很多年以后，可能会有10后笑着：瞧，我爸以前是在格子间苦逼写代码的工程师，我现在一家未来公司看着机器人帮我干活，公司只有我一个人呢。\r\n1. 有勇气去改变那些可以改变的事，\r\n有肚量去容忍那些无法改变的事，\r\n有智慧去区分上述的事。\r\n1. 识人不必探尽，探尽则多疑。\r\n知人不必言尽，言尽则无友。\r\n责人不必苛尽，苛尽则众远。\r\n敬人不必卑尽，卑尽则少骨。\r\n让人不必退尽，退尽则路寡。\r\n1. 安全感在很多时候是束缚人的枷锁，过度追求会让人生少了很多可能性。\r\n1. 大部分的恐惧，只有在你把它当回事儿的时候才是。\r\n1. 很多时候，没有兴趣并不真的是没有兴趣，而是怕自己做不好。\r\n1. 最好的兴趣就是永远达不到但可以不断精进的那些。\r\n1. 很多时候，成功者是自证的，失败者也是。\r\n1. 阻止大脑用思维定式进行自动加工，夺回大脑的控制权。\r\n1. 努力不是盲目的，是定向的。\r\n1. 要超越心智，首先要能辨别更好的心智与现有心智的区别。\r\n1. 世俗的成功不是人人都可以达成的，按概率也就只有一小部分。\r\n1. 盲目听信成功学故事并模仿，将离成功越来越远。\r\n1. 不管是恋爱还是职场，要选得好就得先小范围尝试和观察，对所谓的“好坏”有个大体了解后，然后再选择，最后全情投入。\r\n1. 完美的职业规划不存在，避免因为规划得太细而失去更多的可能性。\r\n1. 过去的付出只代表过去，沉没成本不是成本。\r\n1. 常认为自己是受害者的人往往真的会成为受害者。\r\n1. 绝对公平并不存在，追求绝对公平只是追求自利。\r\n1. 活在父母的世界跟活在子女的世界一样，都是人格尚未独立出来的婴儿。\r\n1. 在事情没有快速变化的前提下，等待仅仅是无谓的消耗。\r\n1. 要撕掉自己的短处，不要试图掩盖，用更强的标签去替代它。\r\n1. 陷入指定的成功，你就基本不太可能成功了。\r\n1. 握不住的沙，不如扬了它。\r\n1. 优于别人并不高贵，真正的高贵因该是优于过去的自己。-- 海明威《真实的高贵》\r\n1. 顶级组织至情至性，\r\n 一流组织共同信仰，\r\n二流组织共同利益，\r\n三流组织共同规则。\r\n1. 像老大寻求意见时，自己先思考出几套解决方案也就是“香蕉”，让你的老板去做选择而不是让他出想法。如果因为你的”香蕉”没熟透，放心你的老大会给你更好的解决方法，先养成动脑思考的好习惯。 --香蕉法则\r\n1. 善良不是要求别人做什么，而是要求自己做什么。\r\n1. 自己是既得利益者，说这不公平叫「觉悟高」，值得钦佩，自己不是既得利益者，就别眼里只看到不公平，因为这太正常了，如果不理解，或者心生抱怨，该想想自己的问题。\r\n1. 文字传达观点，文字也能误传观点。\r\n1. “检验一流智力的标准，就是看你能不能在头脑中同时存在两种相反的想法，还维持正常行事的能力。”\r\n1. 有时候，鸡汤可能比所谓的干货更有用，很多道理其实大家都懂，我们做出改变缺乏的只是一个推动力。\r\n1. 不自律，无自由：\r\n曾经以为自由就是想做啥做啥，后来才发现自律者才会自由。当一个人缺乏自由的时候，他做的事情总是在受习惯和即时诱惑的影响，要么就是被他人的思想观念所扰，几乎永远不可能去做内心真正渴望的事。\r\n1. 《海上钢琴师》中，1900 为什么最后没有下船？\r\n我们的陆地就是他的海洋。无人愿意一生漂泊。\r\n1. 永生是否是一种酷刑？\r\n凡是能被适应的惩罚都不能算是酷刑。\r\n1. 当有人做一件事并没有伤害到任何人的事情，你却要指手画脚的时候，你才是那个傻逼。\r\n1. 这世上只有一种成功，就是能用自己喜欢的方式度过自己的一生。\r\n1. 只有深入一座城市的边边角角，了解城市里的一花一草一木，才能真正看懂人生百态，品味酸甜苦辣的人生。\r\n1. 信仰是用来约束自己的。\r\n1. 习惯，是扼杀创造力的最大杀手！\r\n当你所掌握的信息不足以帮自己判断的时候，你可以选择观望，但是用这些无比正确的废话来说服别人，就是最大的笑话，就等同于，你自己没有判断力，也要求别人也跟你一样没有判断力。\r\n1. 没有观点的反驳更可怕，有那么一拨人，为了让自己无比正确，总说一大堆永远正确的话。\r\n1. 穷人思维和富人的思维是，穷人花 10 块，总奢望得到 100 块的价值，而富人花 1w 块，只求得到 1000 块的价值就够了，但是即便如此，富人可以轻易获取 1000 块的资源，而穷人即便费劲九牛二虎之力得到 100 块的价值也差距很大。\r\n1. 我自己也做了公众号，尤其是影响力越做越大，关注的人越来越多，当一个群体越来越大的时候，难免鱼龙混杂，什么样的人都有，也就意味着，你的所有观点，总会随着群体越来越大，不认可你的人越来越多，当然，认可你的人其实是更多的，但是认可你的人不会让你糟心，而不认可你的人，或者说一些杠精才会让你最糟心的。\r\n1. 这个世界有几样东西是不能被取代的，第一：亲身感受。我拿着一碗水，告诉你：这个是海洋，你永远不会有感觉。第二：自我成长和努力。没有人可以取代你做事情，应该自己完成的，只能由自己完成。工具的善用，自我的实力，重要性是排在第一位。刘翔跑再快，我开车，轻松超越他。当然，前提是我会开车，四肢还得健全。\r\n1. 吃不了起早贪黑的苦，你丢不起那个街头摆摊的人，你凭什么觉得不公平？\r\n1. 活在当下。我 22 岁的时候从不会去考虑五六年之后的我会是怎样，我只是活在当下，做好当下的事而已。\r\n1. 致正少年的你，愿你所有快乐无需假装，愿你此生尽兴赤诚善良。\r\n1. 罗素说：只有一种英雄主义，就是在认清生活的真相后依然热爱生活。\r\n1. 这世界就是一拨人昼夜不停的运转，另一拨人起床发现世界变了。\r\n1. 人有一个通病：一直拥有的就觉得是理所当然的，唯有等到失去的时候，才发现原来自己是如何的富有。\r\n1. 故乡养活不了肉体，城市寄托不了灵魂，回不去的故乡，容不进的城市。有工作的地万没有家，有家的地方却没有工作，他乡容不下灵魂，故乡安不了肉身，一个叫家的地方找不到养家糊口的路，找到了养家糊口的地方却安不了家，从此便有了漂泊，有了远方，有了乡愁......',`groups`='Default',`is_show`=1,`publish`=1,`summary`=''  WHERE  `id` = 32 [ RunTime:0.001707s ]
[ sql ] [ SQL ] SELECT COUNT(*) AS tp_count FROM `note` WHERE  `groups` = 'Default' LIMIT 1 [ RunTime:0.001730s ]
[ sql ] [ SQL ] UPDATE `groups`  SET `g_count`=12  WHERE  `groups` = 'Default' [ RunTime:0.000678s ]
[ sql ] [ SQL ] SELECT COUNT(*) AS tp_count FROM `note` WHERE  `groups` = 'Default' LIMIT 1 [ RunTime:0.001582s ]
[ sql ] [ SQL ] UPDATE `groups`  SET `g_count`=12  WHERE  `groups` = 'Default' [ RunTime:0.000483s ]
---------------------------------------------------------------
[ 2018-10-24T20:01:33+08:00 ] 74.120.168.12 74.120.168.12 GET /daily/admin/note/shownote/id/32.html
[ info ] qingrang.top/daily/admin/note/shownote/id/32.html [运行时间：0.060013s][吞吐率：16.66req/s] [内存消耗：2,040.00kb] [文件加载：55]
[ info ] [ LANG ] /var/www/html/daily/thinkphp/lang/zh-cn.php
[ info ] [ ROUTE ] array (
  'type' => 'module',
  'module' => 
  array (
    0 => 'admin',
    1 => 'note',
    2 => 'shownote',
  ),
)
[ info ] [ HEADER ] array (
  'host' => 'qingrang.top',
  'cache-control' => 'max-age=0',
  'upgrade-insecure-requests' => '1',
  'user-agent' => 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/69.0.3497.100 Safari/537.36',
  'accept' => 'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8',
  'referer' => 'http://qingrang.top/daily/admin/note/editnote/id/32.html',
  'accept-encoding' => 'gzip, deflate',
  'accept-language' => 'zh-CN,zh;q=0.9,la;q=0.8,en;q=0.7,lb;q=0.6',
  'cookie' => 'Hm_lvt_1769181352e9adc950166aada465644e=1539846308,1540133692,1540187497; PHPSESSID=cfl1sikl9c45c63c655g4q7rd4',
  'connection' => 'close',
)
[ info ] [ PARAM ] array (
  'id' => '32',
)
[ info ] [ SESSION ] INIT array (
  'id' => '',
  'var_session_id' => '',
  'prefix' => 'think',
  'type' => '',
  'auto_start' => true,
)
[ info ] [ RUN ] app\admin\controller\Note->showNote[ /var/www/html/daily/application/admin/controller/Note.php ]
[ info ] [ DB ] INIT mysql
[ info ] [ VIEW ] /var/www/html/daily/application/admin/view/note/shownote.html [ array (
  0 => 'note',
  1 => 'groups',
) ]
[ info ] [ LOG ] INIT File
[ sql ] [ DB ] CONNECT:[ UseTime:0.000623s ] mysql:host=74.120.168.12;dbname=diary;charset=utf8
[ sql ] [ SQL ] SHOW COLUMNS FROM `note` [ RunTime:0.001300s ]
[ sql ] [ SQL ] SELECT * FROM `note` WHERE  `id` = 32 LIMIT 1 [ RunTime:0.000683s ]
[ sql ] [ SQL ] SHOW COLUMNS FROM `groups` [ RunTime:0.000955s ]
[ sql ] [ SQL ] SELECT * FROM `groups` [ RunTime:0.000282s ]
---------------------------------------------------------------
[ 2018-10-24T20:03:18+08:00 ] 74.120.168.12 74.120.168.12 POST /daily/admin/note/ashownote2.html
[ info ] qingrang.top/daily/admin/note/ashownote2.html [运行时间：0.051786s][吞吐率：19.31req/s] [内存消耗：2,153.04kb] [文件加载：52]
[ info ] [ LANG ] /var/www/html/daily/thinkphp/lang/zh-cn.php
[ info ] [ ROUTE ] array (
  'type' => 'module',
  'module' => 
  array (
    0 => 'admin',
    1 => 'note',
    2 => 'ashownote2',
  ),
)
[ info ] [ HEADER ] array (
  'host' => 'qingrang.top',
  'content-length' => '19',
  'accept' => 'application/json, text/javascript, */*; q=0.01',
  'origin' => 'http://qingrang.top',
  'x-requested-with' => 'XMLHttpRequest',
  'user-agent' => 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/69.0.3497.100 Safari/537.36',
  'content-type' => 'application/x-www-form-urlencoded',
  'referer' => 'http://qingrang.top/daily/admin/note',
  'accept-encoding' => 'gzip, deflate',
  'accept-language' => 'zh-CN,zh;q=0.9,la;q=0.8,en;q=0.7,lb;q=0.6',
  'cookie' => 'Hm_lvt_1769181352e9adc950166aada465644e=1539846308,1540133692,1540187497; PHPSESSID=cfl1sikl9c45c63c655g4q7rd4',
  'connection' => 'close',
)
[ info ] [ PARAM ] array (
  'groupname' => 'Algorithm',
)
[ info ] [ SESSION ] INIT array (
  'id' => '',
  'var_session_id' => '',
  'prefix' => 'think',
  'type' => '',
  'auto_start' => true,
)
[ info ] [ RUN ] app\admin\controller\Note->aShowNote2[ /var/www/html/daily/application/admin/controller/Note.php ]
[ info ] [ DB ] INIT mysql
[ info ] [ LOG ] INIT File
[ sql ] [ DB ] CONNECT:[ UseTime:0.000507s ] mysql:host=74.120.168.12;dbname=diary;charset=utf8
[ sql ] [ SQL ] SHOW COLUMNS FROM `note` [ RunTime:0.001452s ]
[ sql ] [ SQL ] SELECT * FROM `note` WHERE  `groups` = 'Algorithm' ORDER BY date desc [ RunTime:0.001600s ]
---------------------------------------------------------------
[ 2018-10-24T20:03:20+08:00 ] 74.120.168.12 74.120.168.12 GET /daily/admin/note/shownote/id/210
[ info ] qingrang.top/daily/admin/note/shownote/id/210 [运行时间：0.062020s][吞吐率：16.12req/s] [内存消耗：1,989.28kb] [文件加载：55]
[ info ] [ LANG ] /var/www/html/daily/thinkphp/lang/zh-cn.php
[ info ] [ ROUTE ] array (
  'type' => 'module',
  'module' => 
  array (
    0 => 'admin',
    1 => 'note',
    2 => 'shownote',
  ),
)
[ info ] [ HEADER ] array (
  'host' => 'qingrang.top',
  'upgrade-insecure-requests' => '1',
  'user-agent' => 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/69.0.3497.100 Safari/537.36',
  'accept' => 'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8',
  'referer' => 'http://qingrang.top/daily/admin/note',
  'accept-encoding' => 'gzip, deflate',
  'accept-language' => 'zh-CN,zh;q=0.9,la;q=0.8,en;q=0.7,lb;q=0.6',
  'cookie' => 'Hm_lvt_1769181352e9adc950166aada465644e=1539846308,1540133692,1540187497; PHPSESSID=cfl1sikl9c45c63c655g4q7rd4',
  'connection' => 'close',
)
[ info ] [ PARAM ] array (
  'id' => '210',
)
[ info ] [ SESSION ] INIT array (
  'id' => '',
  'var_session_id' => '',
  'prefix' => 'think',
  'type' => '',
  'auto_start' => true,
)
[ info ] [ RUN ] app\admin\controller\Note->showNote[ /var/www/html/daily/application/admin/controller/Note.php ]
[ info ] [ DB ] INIT mysql
[ info ] [ VIEW ] /var/www/html/daily/application/admin/view/note/shownote.html [ array (
  0 => 'note',
  1 => 'groups',
) ]
[ info ] [ LOG ] INIT File
[ sql ] [ DB ] CONNECT:[ UseTime:0.000901s ] mysql:host=74.120.168.12;dbname=diary;charset=utf8
[ sql ] [ SQL ] SHOW COLUMNS FROM `note` [ RunTime:0.001372s ]
[ sql ] [ SQL ] SELECT * FROM `note` WHERE  `id` = 210 LIMIT 1 [ RunTime:0.000485s ]
[ sql ] [ SQL ] SHOW COLUMNS FROM `groups` [ RunTime:0.001043s ]
[ sql ] [ SQL ] SELECT * FROM `groups` [ RunTime:0.000295s ]
---------------------------------------------------------------
[ 2018-10-24T20:03:35+08:00 ] 74.120.168.12 74.120.168.12 GET /daily/admin/note/shownote/id/210
[ info ] qingrang.top/daily/admin/note/shownote/id/210 [运行时间：0.060699s][吞吐率：16.47req/s] [内存消耗：1,989.34kb] [文件加载：55]
[ info ] [ LANG ] /var/www/html/daily/thinkphp/lang/zh-cn.php
[ info ] [ ROUTE ] array (
  'type' => 'module',
  'module' => 
  array (
    0 => 'admin',
    1 => 'note',
    2 => 'shownote',
  ),
)
[ info ] [ HEADER ] array (
  'host' => 'qingrang.top',
  'cache-control' => 'max-age=0',
  'upgrade-insecure-requests' => '1',
  'user-agent' => 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/69.0.3497.100 Safari/537.36',
  'accept' => 'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8',
  'referer' => 'http://qingrang.top/daily/admin/note',
  'accept-encoding' => 'gzip, deflate',
  'accept-language' => 'zh-CN,zh;q=0.9,la;q=0.8,en;q=0.7,lb;q=0.6',
  'cookie' => 'Hm_lvt_1769181352e9adc950166aada465644e=1539846308,1540133692,1540187497; PHPSESSID=cfl1sikl9c45c63c655g4q7rd4',
  'connection' => 'close',
)
[ info ] [ PARAM ] array (
  'id' => '210',
)
[ info ] [ SESSION ] INIT array (
  'id' => '',
  'var_session_id' => '',
  'prefix' => 'think',
  'type' => '',
  'auto_start' => true,
)
[ info ] [ RUN ] app\admin\controller\Note->showNote[ /var/www/html/daily/application/admin/controller/Note.php ]
[ info ] [ DB ] INIT mysql
[ info ] [ VIEW ] /var/www/html/daily/application/admin/view/note/shownote.html [ array (
  0 => 'note',
  1 => 'groups',
) ]
[ info ] [ LOG ] INIT File
[ sql ] [ DB ] CONNECT:[ UseTime:0.000741s ] mysql:host=74.120.168.12;dbname=diary;charset=utf8
[ sql ] [ SQL ] SHOW COLUMNS FROM `note` [ RunTime:0.002070s ]
[ sql ] [ SQL ] SELECT * FROM `note` WHERE  `id` = 210 LIMIT 1 [ RunTime:0.000475s ]
[ sql ] [ SQL ] SHOW COLUMNS FROM `groups` [ RunTime:0.001049s ]
[ sql ] [ SQL ] SELECT * FROM `groups` [ RunTime:0.000345s ]
---------------------------------------------------------------
[ 2018-10-24T20:03:56+08:00 ] 74.120.168.12 74.120.168.12 GET /daily/admin/note/shownote/id/210
[ info ] qingrang.top/daily/admin/note/shownote/id/210 [运行时间：0.052044s][吞吐率：19.21req/s] [内存消耗：1,989.34kb] [文件加载：55]
[ info ] [ LANG ] /var/www/html/daily/thinkphp/lang/zh-cn.php
[ info ] [ ROUTE ] array (
  'type' => 'module',
  'module' => 
  array (
    0 => 'admin',
    1 => 'note',
    2 => 'shownote',
  ),
)
[ info ] [ HEADER ] array (
  'host' => 'qingrang.top',
  'cache-control' => 'max-age=0',
  'upgrade-insecure-requests' => '1',
  'user-agent' => 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/69.0.3497.100 Safari/537.36',
  'accept' => 'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8',
  'referer' => 'http://qingrang.top/daily/admin/note',
  'accept-encoding' => 'gzip, deflate',
  'accept-language' => 'zh-CN,zh;q=0.9,la;q=0.8,en;q=0.7,lb;q=0.6',
  'cookie' => 'Hm_lvt_1769181352e9adc950166aada465644e=1539846308,1540133692,1540187497; PHPSESSID=cfl1sikl9c45c63c655g4q7rd4',
  'connection' => 'close',
)
[ info ] [ PARAM ] array (
  'id' => '210',
)
[ info ] [ SESSION ] INIT array (
  'id' => '',
  'var_session_id' => '',
  'prefix' => 'think',
  'type' => '',
  'auto_start' => true,
)
[ info ] [ RUN ] app\admin\controller\Note->showNote[ /var/www/html/daily/application/admin/controller/Note.php ]
[ info ] [ DB ] INIT mysql
[ info ] [ VIEW ] /var/www/html/daily/application/admin/view/note/shownote.html [ array (
  0 => 'note',
  1 => 'groups',
) ]
[ info ] [ LOG ] INIT File
[ sql ] [ DB ] CONNECT:[ UseTime:0.000475s ] mysql:host=74.120.168.12;dbname=diary;charset=utf8
[ sql ] [ SQL ] SHOW COLUMNS FROM `note` [ RunTime:0.001340s ]
[ sql ] [ SQL ] SELECT * FROM `note` WHERE  `id` = 210 LIMIT 1 [ RunTime:0.000455s ]
[ sql ] [ SQL ] SHOW COLUMNS FROM `groups` [ RunTime:0.000891s ]
[ sql ] [ SQL ] SELECT * FROM `groups` [ RunTime:0.000373s ]
---------------------------------------------------------------
[ 2018-10-24T21:09:19+08:00 ] 74.120.168.12 74.120.168.12 GET /daily/admin/note/shownote/id/210
[ info ] qingrang.top/daily/admin/note/shownote/id/210 [运行时间：0.069846s][吞吐率：14.32req/s] [内存消耗：1,989.34kb] [文件加载：55]
[ info ] [ LANG ] /var/www/html/daily/thinkphp/lang/zh-cn.php
[ info ] [ ROUTE ] array (
  'type' => 'module',
  'module' => 
  array (
    0 => 'admin',
    1 => 'note',
    2 => 'shownote',
  ),
)
[ info ] [ HEADER ] array (
  'host' => 'qingrang.top',
  'cache-control' => 'max-age=0',
  'upgrade-insecure-requests' => '1',
  'user-agent' => 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/69.0.3497.100 Safari/537.36',
  'accept' => 'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8',
  'referer' => 'http://qingrang.top/daily/admin/note',
  'accept-encoding' => 'gzip, deflate',
  'accept-language' => 'zh-CN,zh;q=0.9,la;q=0.8,en;q=0.7,lb;q=0.6',
  'cookie' => 'Hm_lvt_1769181352e9adc950166aada465644e=1539846308,1540133692,1540187497; PHPSESSID=cfl1sikl9c45c63c655g4q7rd4',
  'connection' => 'close',
)
[ info ] [ PARAM ] array (
  'id' => '210',
)
[ info ] [ SESSION ] INIT array (
  'id' => '',
  'var_session_id' => '',
  'prefix' => 'think',
  'type' => '',
  'auto_start' => true,
)
[ info ] [ RUN ] app\admin\controller\Note->showNote[ /var/www/html/daily/application/admin/controller/Note.php ]
[ info ] [ DB ] INIT mysql
[ info ] [ VIEW ] /var/www/html/daily/application/admin/view/note/shownote.html [ array (
  0 => 'note',
  1 => 'groups',
) ]
[ info ] [ LOG ] INIT File
[ sql ] [ DB ] CONNECT:[ UseTime:0.001339s ] mysql:host=74.120.168.12;dbname=diary;charset=utf8
[ sql ] [ SQL ] SHOW COLUMNS FROM `note` [ RunTime:0.002537s ]
[ sql ] [ SQL ] SELECT * FROM `note` WHERE  `id` = 210 LIMIT 1 [ RunTime:0.000836s ]
[ sql ] [ SQL ] SHOW COLUMNS FROM `groups` [ RunTime:0.001016s ]
[ sql ] [ SQL ] SELECT * FROM `groups` [ RunTime:0.000310s ]
---------------------------------------------------------------
[ 2018-10-24T21:13:09+08:00 ] 74.120.168.12 74.120.168.12 GET /daily/admin/note/shownote/id/210
[ info ] qingrang.top/daily/admin/note/shownote/id/210 [运行时间：0.065340s][吞吐率：15.30req/s] [内存消耗：2,114.46kb] [文件加载：57]
[ info ] [ LANG ] /var/www/html/daily/thinkphp/lang/zh-cn.php
[ info ] [ ROUTE ] array (
  'type' => 'module',
  'module' => 
  array (
    0 => 'admin',
    1 => 'note',
    2 => 'shownote',
  ),
)
[ info ] [ HEADER ] array (
  'host' => 'qingrang.top',
  'cache-control' => 'max-age=0',
  'upgrade-insecure-requests' => '1',
  'user-agent' => 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/69.0.3497.100 Safari/537.36',
  'accept' => 'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8',
  'referer' => 'http://qingrang.top/daily/admin/note',
  'accept-encoding' => 'gzip, deflate',
  'accept-language' => 'zh-CN,zh;q=0.9,la;q=0.8,en;q=0.7,lb;q=0.6',
  'cookie' => 'Hm_lvt_1769181352e9adc950166aada465644e=1539846308,1540133692,1540187497; PHPSESSID=cfl1sikl9c45c63c655g4q7rd4',
  'connection' => 'close',
)
[ info ] [ PARAM ] array (
  'id' => '210',
)
[ info ] [ SESSION ] INIT array (
  'id' => '',
  'var_session_id' => '',
  'prefix' => 'think',
  'type' => '',
  'auto_start' => true,
)
[ info ] [ RUN ] app\admin\controller\Note->showNote[ /var/www/html/daily/application/admin/controller/Note.php ]
[ info ] [ DB ] INIT mysql
[ info ] [ VIEW ] /var/www/html/daily/application/admin/view/note/shownote.html [ array (
  0 => 'note',
  1 => 'groups',
) ]
[ info ] [ LOG ] INIT File
[ sql ] [ DB ] CONNECT:[ UseTime:0.000657s ] mysql:host=74.120.168.12;dbname=diary;charset=utf8
[ sql ] [ SQL ] SHOW COLUMNS FROM `note` [ RunTime:0.001451s ]
[ sql ] [ SQL ] SELECT * FROM `note` WHERE  `id` = 210 LIMIT 1 [ RunTime:0.000505s ]
[ sql ] [ SQL ] SHOW COLUMNS FROM `groups` [ RunTime:0.000966s ]
[ sql ] [ SQL ] SELECT * FROM `groups` [ RunTime:0.000346s ]
---------------------------------------------------------------
[ 2018-10-24T21:13:43+08:00 ] 74.120.168.12 223.87.45.128 GET /daily/admin/show/shownote/id/210.html
[ info ] qingrang.top/daily/admin/show/shownote/id/210.html [运行时间：0.061319s][吞吐率：16.31req/s] [内存消耗：2,074.56kb] [文件加载：56]
[ info ] [ LANG ] /var/www/html/daily/thinkphp/lang/zh-cn.php
[ info ] [ ROUTE ] array (
  'type' => 'module',
  'module' => 
  array (
    0 => 'admin',
    1 => 'show',
    2 => 'shownote',
  ),
)
[ info ] [ HEADER ] array (
  'host' => 'qingrang.top',
  'connection' => 'keep-alive',
  'cache-control' => 'max-age=0',
  'upgrade-insecure-requests' => '1',
  'user-agent' => 'Mozilla/5.0 (Linux; Android 8.1.0; OE106 Build/OPM1.171019.026) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/62.0.3202.84 Mobile Safari/537.36',
  'accept' => 'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8',
  'referer' => 'http://qingrang.top/daily/admin/show/notelst/groups/Algorithm.html',
  'accept-encoding' => 'gzip, deflate',
  'accept-language' => 'zh-CN,zh;q=0.9',
  'cookie' => 'Hm_lvt_1769181352e9adc950166aada465644e=1540089729,1540256454,1540260910,1540344464; Hm_lpvt_1769181352e9adc950166aada465644e=1540344476',
)
[ info ] [ PARAM ] array (
  'id' => '210',
)
[ info ] [ RUN ] app\admin\controller\Show->showNote[ /var/www/html/daily/application/admin/controller/Show.php ]
[ info ] [ DB ] INIT mysql
[ info ] [ VIEW ] /var/www/html/daily/application/admin/view/show/shownote.html [ array (
  0 => 'note',
  1 => 'groups',
) ]
[ info ] [ LOG ] INIT File
[ sql ] [ DB ] CONNECT:[ UseTime:0.000756s ] mysql:host=74.120.168.12;dbname=diary;charset=utf8
[ sql ] [ SQL ] SHOW COLUMNS FROM `note` [ RunTime:0.001625s ]
[ sql ] [ SQL ] SELECT * FROM `note` WHERE  `id` = 210 LIMIT 1 [ RunTime:0.000477s ]
[ sql ] [ SQL ] SHOW COLUMNS FROM `groups` [ RunTime:0.000937s ]
[ sql ] [ SQL ] SELECT * FROM `groups` [ RunTime:0.000353s ]
---------------------------------------------------------------
[ 2018-10-24T21:16:08+08:00 ] 74.120.168.12 74.120.168.12 GET /daily/admin/note/shownote/id/210
[ info ] qingrang.top/daily/admin/note/shownote/id/210 [运行时间：0.070909s][吞吐率：14.10req/s] [内存消耗：1,989.54kb] [文件加载：55]
[ info ] [ LANG ] /var/www/html/daily/thinkphp/lang/zh-cn.php
[ info ] [ ROUTE ] array (
  'type' => 'module',
  'module' => 
  array (
    0 => 'admin',
    1 => 'note',
    2 => 'shownote',
  ),
)
[ info ] [ HEADER ] array (
  'host' => 'qingrang.top',
  'pragma' => 'no-cache',
  'cache-control' => 'no-cache',
  'upgrade-insecure-requests' => '1',
  'user-agent' => 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/69.0.3497.100 Safari/537.36',
  'accept' => 'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8',
  'referer' => 'http://qingrang.top/daily/admin/note',
  'accept-encoding' => 'gzip, deflate',
  'accept-language' => 'zh-CN,zh;q=0.9,la;q=0.8,en;q=0.7,lb;q=0.6',
  'cookie' => 'Hm_lvt_1769181352e9adc950166aada465644e=1539846308,1540133692,1540187497; PHPSESSID=cfl1sikl9c45c63c655g4q7rd4',
  'connection' => 'close',
)
[ info ] [ PARAM ] array (
  'id' => '210',
)
[ info ] [ SESSION ] INIT array (
  'id' => '',
  'var_session_id' => '',
  'prefix' => 'think',
  'type' => '',
  'auto_start' => true,
)
[ info ] [ RUN ] app\admin\controller\Note->showNote[ /var/www/html/daily/application/admin/controller/Note.php ]
[ info ] [ DB ] INIT mysql
[ info ] [ VIEW ] /var/www/html/daily/application/admin/view/note/shownote.html [ array (
  0 => 'note',
  1 => 'groups',
) ]
[ info ] [ LOG ] INIT File
[ sql ] [ DB ] CONNECT:[ UseTime:0.000533s ] mysql:host=74.120.168.12;dbname=diary;charset=utf8
[ sql ] [ SQL ] SHOW COLUMNS FROM `note` [ RunTime:0.001788s ]
[ sql ] [ SQL ] SELECT * FROM `note` WHERE  `id` = 210 LIMIT 1 [ RunTime:0.000558s ]
[ sql ] [ SQL ] SHOW COLUMNS FROM `groups` [ RunTime:0.001547s ]
[ sql ] [ SQL ] SELECT * FROM `groups` [ RunTime:0.000413s ]
---------------------------------------------------------------
[ 2018-10-24T21:18:42+08:00 ] 74.120.168.12 223.87.45.128 GET /daily/admin/show/shownote/id/210.html
[ info ] qingrang.top/daily/admin/show/shownote/id/210.html [运行时间：0.062511s][吞吐率：16.00req/s] [内存消耗：2,074.79kb] [文件加载：56]
[ info ] [ LANG ] /var/www/html/daily/thinkphp/lang/zh-cn.php
[ info ] [ ROUTE ] array (
  'type' => 'module',
  'module' => 
  array (
    0 => 'admin',
    1 => 'show',
    2 => 'shownote',
  ),
)
[ info ] [ HEADER ] array (
  'host' => 'qingrang.top',
  'connection' => 'keep-alive',
  'cache-control' => 'max-age=0',
  'upgrade-insecure-requests' => '1',
  'user-agent' => 'Mozilla/5.0 (Linux; Android 8.1.0; OE106 Build/OPM1.171019.026) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/62.0.3202.84 Mobile Safari/537.36',
  'accept' => 'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8',
  'referer' => 'http://qingrang.top/daily/admin/show/notelst/groups/Algorithm.html',
  'accept-encoding' => 'gzip, deflate',
  'accept-language' => 'zh-CN,zh;q=0.9',
  'cookie' => 'Hm_lvt_1769181352e9adc950166aada465644e=1540089729,1540256454,1540260910,1540344464; Hm_lpvt_1769181352e9adc950166aada465644e=1540387140',
)
[ info ] [ PARAM ] array (
  'id' => '210',
)
[ info ] [ RUN ] app\admin\controller\Show->showNote[ /var/www/html/daily/application/admin/controller/Show.php ]
[ info ] [ DB ] INIT mysql
[ info ] [ VIEW ] /var/www/html/daily/application/admin/view/show/shownote.html [ array (
  0 => 'note',
  1 => 'groups',
) ]
[ info ] [ LOG ] INIT File
[ sql ] [ DB ] CONNECT:[ UseTime:0.000644s ] mysql:host=74.120.168.12;dbname=diary;charset=utf8
[ sql ] [ SQL ] SHOW COLUMNS FROM `note` [ RunTime:0.001665s ]
[ sql ] [ SQL ] SELECT * FROM `note` WHERE  `id` = 210 LIMIT 1 [ RunTime:0.000540s ]
[ sql ] [ SQL ] SHOW COLUMNS FROM `groups` [ RunTime:0.000995s ]
[ sql ] [ SQL ] SELECT * FROM `groups` [ RunTime:0.000383s ]
---------------------------------------------------------------
[ 2018-10-24T21:20:37+08:00 ] 74.120.168.12 223.87.45.128 GET /daily/admin/show/shownote/id/210.html
[ info ] qingrang.top/daily/admin/show/shownote/id/210.html [运行时间：0.052066s][吞吐率：19.21req/s] [内存消耗：2,075.19kb] [文件加载：56]
[ info ] [ LANG ] /var/www/html/daily/thinkphp/lang/zh-cn.php
[ info ] [ ROUTE ] array (
  'type' => 'module',
  'module' => 
  array (
    0 => 'admin',
    1 => 'show',
    2 => 'shownote',
  ),
)
[ info ] [ HEADER ] array (
  'host' => 'qingrang.top',
  'connection' => 'keep-alive',
  'cache-control' => 'max-age=0',
  'upgrade-insecure-requests' => '1',
  'user-agent' => 'Mozilla/5.0 (Linux; Android 8.1.0; OE106 Build/OPM1.171019.026) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/62.0.3202.84 Mobile Safari/537.36',
  'accept' => 'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8',
  'referer' => 'http://qingrang.top/daily/admin/show/notelst/groups/Algorithm.html',
  'accept-encoding' => 'gzip, deflate',
  'accept-language' => 'zh-CN,zh;q=0.9',
  'cookie' => 'Hm_lvt_1769181352e9adc950166aada465644e=1540089729,1540256454,1540260910,1540344464; Hm_lpvt_1769181352e9adc950166aada465644e=1540387439',
)
[ info ] [ PARAM ] array (
  'id' => '210',
)
[ info ] [ RUN ] app\admin\controller\Show->showNote[ /var/www/html/daily/application/admin/controller/Show.php ]
[ info ] [ DB ] INIT mysql
[ info ] [ VIEW ] /var/www/html/daily/application/admin/view/show/shownote.html [ array (
  0 => 'note',
  1 => 'groups',
) ]
[ info ] [ LOG ] INIT File
[ sql ] [ DB ] CONNECT:[ UseTime:0.000570s ] mysql:host=74.120.168.12;dbname=diary;charset=utf8
[ sql ] [ SQL ] SHOW COLUMNS FROM `note` [ RunTime:0.001488s ]
[ sql ] [ SQL ] SELECT * FROM `note` WHERE  `id` = 210 LIMIT 1 [ RunTime:0.000492s ]
[ sql ] [ SQL ] SHOW COLUMNS FROM `groups` [ RunTime:0.000841s ]
[ sql ] [ SQL ] SELECT * FROM `groups` [ RunTime:0.000278s ]
---------------------------------------------------------------
[ 2018-10-24T21:22:46+08:00 ] 74.120.168.12 223.87.45.128 GET /daily/admin/show/shownote/id/210.html
[ info ] qingrang.top/daily/admin/show/shownote/id/210.html [运行时间：0.057160s][吞吐率：17.49req/s] [内存消耗：2,075.45kb] [文件加载：56]
[ info ] [ LANG ] /var/www/html/daily/thinkphp/lang/zh-cn.php
[ info ] [ ROUTE ] array (
  'type' => 'module',
  'module' => 
  array (
    0 => 'admin',
    1 => 'show',
    2 => 'shownote',
  ),
)
[ info ] [ HEADER ] array (
  'host' => 'qingrang.top',
  'connection' => 'keep-alive',
  'cache-control' => 'max-age=0',
  'upgrade-insecure-requests' => '1',
  'user-agent' => 'Mozilla/5.0 (Linux; Android 8.1.0; OE106 Build/OPM1.171019.026) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/62.0.3202.84 Mobile Safari/537.36',
  'accept' => 'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8',
  'referer' => 'http://qingrang.top/daily/admin/show/notelst/groups/Algorithm.html',
  'accept-encoding' => 'gzip, deflate',
  'accept-language' => 'zh-CN,zh;q=0.9',
  'cookie' => 'Hm_lvt_1769181352e9adc950166aada465644e=1540089729,1540256454,1540260910,1540344464; Hm_lpvt_1769181352e9adc950166aada465644e=1540387553',
)
[ info ] [ PARAM ] array (
  'id' => '210',
)
[ info ] [ RUN ] app\admin\controller\Show->showNote[ /var/www/html/daily/application/admin/controller/Show.php ]
[ info ] [ DB ] INIT mysql
[ info ] [ VIEW ] /var/www/html/daily/application/admin/view/show/shownote.html [ array (
  0 => 'note',
  1 => 'groups',
) ]
[ info ] [ LOG ] INIT File
[ sql ] [ DB ] CONNECT:[ UseTime:0.000836s ] mysql:host=74.120.168.12;dbname=diary;charset=utf8
[ sql ] [ SQL ] SHOW COLUMNS FROM `note` [ RunTime:0.001862s ]
[ sql ] [ SQL ] SELECT * FROM `note` WHERE  `id` = 210 LIMIT 1 [ RunTime:0.000507s ]
[ sql ] [ SQL ] SHOW COLUMNS FROM `groups` [ RunTime:0.001199s ]
[ sql ] [ SQL ] SELECT * FROM `groups` [ RunTime:0.000341s ]
---------------------------------------------------------------
[ 2018-10-24T21:23:06+08:00 ] 74.120.168.12 74.120.168.12 GET /daily/admin/note/shownote/id/210
[ info ] qingrang.top/daily/admin/note/shownote/id/210 [运行时间：0.061167s][吞吐率：16.35req/s] [内存消耗：2,115.09kb] [文件加载：57]
[ info ] [ LANG ] /var/www/html/daily/thinkphp/lang/zh-cn.php
[ info ] [ ROUTE ] array (
  'type' => 'module',
  'module' => 
  array (
    0 => 'admin',
    1 => 'note',
    2 => 'shownote',
  ),
)
[ info ] [ HEADER ] array (
  'host' => 'qingrang.top',
  'pragma' => 'no-cache',
  'cache-control' => 'no-cache',
  'upgrade-insecure-requests' => '1',
  'user-agent' => 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/69.0.3497.100 Safari/537.36',
  'accept' => 'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8',
  'referer' => 'http://qingrang.top/daily/admin/note',
  'accept-encoding' => 'gzip, deflate',
  'accept-language' => 'zh-CN,zh;q=0.9,la;q=0.8,en;q=0.7,lb;q=0.6',
  'cookie' => 'Hm_lvt_1769181352e9adc950166aada465644e=1539846308,1540133692,1540187497; PHPSESSID=cfl1sikl9c45c63c655g4q7rd4',
  'connection' => 'close',
)
[ info ] [ PARAM ] array (
  'id' => '210',
)
[ info ] [ SESSION ] INIT array (
  'id' => '',
  'var_session_id' => '',
  'prefix' => 'think',
  'type' => '',
  'auto_start' => true,
)
[ info ] [ RUN ] app\admin\controller\Note->showNote[ /var/www/html/daily/application/admin/controller/Note.php ]
[ info ] [ DB ] INIT mysql
[ info ] [ VIEW ] /var/www/html/daily/application/admin/view/note/shownote.html [ array (
  0 => 'note',
  1 => 'groups',
) ]
[ info ] [ LOG ] INIT File
[ sql ] [ DB ] CONNECT:[ UseTime:0.000518s ] mysql:host=74.120.168.12;dbname=diary;charset=utf8
[ sql ] [ SQL ] SHOW COLUMNS FROM `note` [ RunTime:0.001360s ]
[ sql ] [ SQL ] SELECT * FROM `note` WHERE  `id` = 210 LIMIT 1 [ RunTime:0.000495s ]
[ sql ] [ SQL ] SHOW COLUMNS FROM `groups` [ RunTime:0.000913s ]
[ sql ] [ SQL ] SELECT * FROM `groups` [ RunTime:0.000322s ]
---------------------------------------------------------------
[ 2018-10-24T21:24:06+08:00 ] 74.120.168.12 223.87.45.128 GET /daily/admin/show/shownote/id/210.html
[ info ] qingrang.top/daily/admin/show/shownote/id/210.html [运行时间：0.054763s][吞吐率：18.26req/s] [内存消耗：1,947.54kb] [文件加载：54]
[ info ] [ LANG ] /var/www/html/daily/thinkphp/lang/zh-cn.php
[ info ] [ ROUTE ] array (
  'type' => 'module',
  'module' => 
  array (
    0 => 'admin',
    1 => 'show',
    2 => 'shownote',
  ),
)
[ info ] [ HEADER ] array (
  'host' => 'qingrang.top',
  'connection' => 'keep-alive',
  'cache-control' => 'max-age=0',
  'upgrade-insecure-requests' => '1',
  'user-agent' => 'Mozilla/5.0 (Linux; Android 8.1.0; OE106 Build/OPM1.171019.026) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/62.0.3202.84 Mobile Safari/537.36',
  'accept' => 'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8',
  'referer' => 'http://qingrang.top/daily/admin/show/notelst/groups/Algorithm.html',
  'accept-encoding' => 'gzip, deflate',
  'accept-language' => 'zh-CN,zh;q=0.9',
  'cookie' => 'Hm_lvt_1769181352e9adc950166aada465644e=1540089729,1540256454,1540260910,1540344464; Hm_lpvt_1769181352e9adc950166aada465644e=1540387683',
)
[ info ] [ PARAM ] array (
  'id' => '210',
)
[ info ] [ RUN ] app\admin\controller\Show->showNote[ /var/www/html/daily/application/admin/controller/Show.php ]
[ info ] [ DB ] INIT mysql
[ info ] [ VIEW ] /var/www/html/daily/application/admin/view/show/shownote.html [ array (
  0 => 'note',
  1 => 'groups',
) ]
[ info ] [ LOG ] INIT File
[ sql ] [ DB ] CONNECT:[ UseTime:0.000553s ] mysql:host=74.120.168.12;dbname=diary;charset=utf8
[ sql ] [ SQL ] SHOW COLUMNS FROM `note` [ RunTime:0.002142s ]
[ sql ] [ SQL ] SELECT * FROM `note` WHERE  `id` = 210 LIMIT 1 [ RunTime:0.000646s ]
[ sql ] [ SQL ] SHOW COLUMNS FROM `groups` [ RunTime:0.001272s ]
[ sql ] [ SQL ] SELECT * FROM `groups` [ RunTime:0.000364s ]
---------------------------------------------------------------
[ 2018-10-24T21:24:13+08:00 ] 74.120.168.12 223.87.45.128 GET /daily/admin/show/shownote/id/210.html
[ info ] qingrang.top/daily/admin/show/shownote/id/210.html [运行时间：0.083103s][吞吐率：12.03req/s] [内存消耗：2,075.59kb] [文件加载：56]
[ info ] [ LANG ] /var/www/html/daily/thinkphp/lang/zh-cn.php
[ info ] [ ROUTE ] array (
  'type' => 'module',
  'module' => 
  array (
    0 => 'admin',
    1 => 'show',
    2 => 'shownote',
  ),
)
[ info ] [ HEADER ] array (
  'host' => 'qingrang.top',
  'connection' => 'keep-alive',
  'cache-control' => 'max-age=0',
  'upgrade-insecure-requests' => '1',
  'user-agent' => 'Mozilla/5.0 (Linux; Android 8.1.0; OE106 Build/OPM1.171019.026) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/62.0.3202.84 Mobile Safari/537.36',
  'accept' => 'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8',
  'referer' => 'http://qingrang.top/daily/admin/show/notelst/groups/Algorithm.html',
  'accept-encoding' => 'gzip, deflate',
  'accept-language' => 'zh-CN,zh;q=0.9',
  'cookie' => 'Hm_lvt_1769181352e9adc950166aada465644e=1540089729,1540256454,1540260910,1540344464; Hm_lpvt_1769181352e9adc950166aada465644e=1540387765',
)
[ info ] [ PARAM ] array (
  'id' => '210',
)
[ info ] [ RUN ] app\admin\controller\Show->showNote[ /var/www/html/daily/application/admin/controller/Show.php ]
[ info ] [ DB ] INIT mysql
[ info ] [ VIEW ] /var/www/html/daily/application/admin/view/show/shownote.html [ array (
  0 => 'note',
  1 => 'groups',
) ]
[ info ] [ LOG ] INIT File
[ sql ] [ DB ] CONNECT:[ UseTime:0.000574s ] mysql:host=74.120.168.12;dbname=diary;charset=utf8
[ sql ] [ SQL ] SHOW COLUMNS FROM `note` [ RunTime:0.001347s ]
[ sql ] [ SQL ] SELECT * FROM `note` WHERE  `id` = 210 LIMIT 1 [ RunTime:0.000587s ]
[ sql ] [ SQL ] SHOW COLUMNS FROM `groups` [ RunTime:0.000998s ]
[ sql ] [ SQL ] SELECT * FROM `groups` [ RunTime:0.000310s ]
---------------------------------------------------------------
[ 2018-10-24T21:24:33+08:00 ] 74.120.168.12 74.120.168.12 GET /daily/
[ info ] qingrang.top/daily/ [运行时间：0.081943s][吞吐率：12.20req/s] [内存消耗：2,119.45kb] [文件加载：58]
[ info ] [ LANG ] /var/www/html/daily/thinkphp/lang/zh-cn.php
[ info ] [ ROUTE ] array (
  'type' => 'module',
  'module' => 
  array (
    0 => '',
    1 => NULL,
    2 => NULL,
  ),
)
[ info ] [ HEADER ] array (
  'host' => 'qingrang.top',
  'purpose' => 'prefetch',
  'upgrade-insecure-requests' => '1',
  'user-agent' => 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/69.0.3497.100 Safari/537.36',
  'accept' => 'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8',
  'accept-encoding' => 'gzip, deflate',
  'accept-language' => 'zh-CN,zh;q=0.9,la;q=0.8,en;q=0.7,lb;q=0.6',
  'cookie' => 'Hm_lvt_1769181352e9adc950166aada465644e=1539846308,1540133692,1540187497; PHPSESSID=cfl1sikl9c45c63c655g4q7rd4',
  'connection' => 'close',
)
[ info ] [ PARAM ] array (
)
[ info ] [ RUN ] app\admin\controller\Show->notelst[ /var/www/html/daily/application/admin/controller/Show.php ]
[ info ] [ DB ] INIT mysql
[ info ] [ VIEW ] /var/www/html/daily/application/admin/view/show/notelst.html [ array (
  0 => 'list_new',
  1 => 'groups',
  2 => 'groups0',
  3 => 'groups1',
  4 => 'groups2',
  5 => 'groupname',
  6 => 'content',
) ]
[ info ] [ LOG ] INIT File
[ sql ] [ DB ] CONNECT:[ UseTime:0.000749s ] mysql:host=74.120.168.12;dbname=diary;charset=utf8
[ sql ] [ SQL ] SHOW COLUMNS FROM `note` [ RunTime:0.001350s ]
[ sql ] [ SQL ] SELECT `content` FROM `note` WHERE  (  id=32 ) LIMIT 1 [ RunTime:0.000535s ]
[ sql ] [ SQL ] SELECT COUNT(*) AS tp_count FROM `note` WHERE  `groups` <> 'Personal'  AND `publish` = 1 LIMIT 1 [ RunTime:0.001836s ]
[ sql ] [ SQL ] SELECT * FROM `note` WHERE  `groups` <> 'Personal'  AND `publish` = 1 ORDER BY id desc LIMIT 0,6 [ RunTime:0.000600s ]
[ sql ] [ SQL ] SHOW COLUMNS FROM `groups` [ RunTime:0.001396s ]
[ sql ] [ SQL ] SELECT * FROM `groups` WHERE  `groups` <> 'Personal' [ RunTime:0.000449s ]
[ sql ] [ SQL ] SELECT * FROM `groups` WHERE  `parent_id` = 0  AND `groups` <> 'Personal'  AND `id` <> 2 ORDER BY `groups` [ RunTime:0.000523s ]
[ sql ] [ SQL ] SELECT `groups` FROM `groups` WHERE  `parent_id` = 1  AND `groups` <> 'Personal' [ RunTime:0.000622s ]
[ sql ] [ SQL ] SELECT * FROM `groups` WHERE  `parent_id` = 2 ORDER BY `groups` [ RunTime:0.000481s ]
---------------------------------------------------------------
[ 2018-10-24T21:24:36+08:00 ] 74.120.168.12 74.120.168.12 GET /daily/
[ info ] qingrang.top/daily/ [运行时间：0.069207s][吞吐率：14.45req/s] [内存消耗：2,119.39kb] [文件加载：58]
[ info ] [ LANG ] /var/www/html/daily/thinkphp/lang/zh-cn.php
[ info ] [ ROUTE ] array (
  'type' => 'module',
  'module' => 
  array (
    0 => '',
    1 => NULL,
    2 => NULL,
  ),
)
[ info ] [ HEADER ] array (
  'host' => 'qingrang.top',
  'pragma' => 'no-cache',
  'cache-control' => 'no-cache',
  'upgrade-insecure-requests' => '1',
  'user-agent' => 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/69.0.3497.100 Safari/537.36',
  'accept' => 'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8',
  'accept-encoding' => 'gzip, deflate',
  'accept-language' => 'zh-CN,zh;q=0.9,la;q=0.8,en;q=0.7,lb;q=0.6',
  'cookie' => 'Hm_lvt_1769181352e9adc950166aada465644e=1539846308,1540133692,1540187497; PHPSESSID=cfl1sikl9c45c63c655g4q7rd4',
  'connection' => 'close',
)
[ info ] [ PARAM ] array (
)
[ info ] [ RUN ] app\admin\controller\Show->notelst[ /var/www/html/daily/application/admin/controller/Show.php ]
[ info ] [ DB ] INIT mysql
[ info ] [ VIEW ] /var/www/html/daily/application/admin/view/show/notelst.html [ array (
  0 => 'list_new',
  1 => 'groups',
  2 => 'groups0',
  3 => 'groups1',
  4 => 'groups2',
  5 => 'groupname',
  6 => 'content',
) ]
[ info ] [ LOG ] INIT File
[ sql ] [ DB ] CONNECT:[ UseTime:0.000469s ] mysql:host=74.120.168.12;dbname=diary;charset=utf8
[ sql ] [ SQL ] SHOW COLUMNS FROM `note` [ RunTime:0.001391s ]
[ sql ] [ SQL ] SELECT `content` FROM `note` WHERE  (  id=32 ) LIMIT 1 [ RunTime:0.000565s ]
[ sql ] [ SQL ] SELECT COUNT(*) AS tp_count FROM `note` WHERE  `groups` <> 'Personal'  AND `publish` = 1 LIMIT 1 [ RunTime:0.001216s ]
[ sql ] [ SQL ] SELECT * FROM `note` WHERE  `groups` <> 'Personal'  AND `publish` = 1 ORDER BY id desc LIMIT 0,6 [ RunTime:0.000494s ]
[ sql ] [ SQL ] SHOW COLUMNS FROM `groups` [ RunTime:0.001085s ]
[ sql ] [ SQL ] SELECT * FROM `groups` WHERE  `groups` <> 'Personal' [ RunTime:0.000322s ]
[ sql ] [ SQL ] SELECT * FROM `groups` WHERE  `parent_id` = 0  AND `groups` <> 'Personal'  AND `id` <> 2 ORDER BY `groups` [ RunTime:0.000440s ]
[ sql ] [ SQL ] SELECT `groups` FROM `groups` WHERE  `parent_id` = 1  AND `groups` <> 'Personal' [ RunTime:0.000380s ]
[ sql ] [ SQL ] SELECT * FROM `groups` WHERE  `parent_id` = 2 ORDER BY `groups` [ RunTime:0.000436s ]
---------------------------------------------------------------
[ 2018-10-24T21:24:43+08:00 ] 74.120.168.12 74.120.168.12 GET /daily/admin/show/notelst/groups/Algorithm.html
[ info ] qingrang.top/daily/admin/show/notelst/groups/Algorithm.html [运行时间：0.073598s][吞吐率：13.59req/s] [内存消耗：2,104.78kb] [文件加载：58]
[ info ] [ LANG ] /var/www/html/daily/thinkphp/lang/zh-cn.php
[ info ] [ ROUTE ] array (
  'type' => 'module',
  'module' => 
  array (
    0 => 'admin',
    1 => 'show',
    2 => 'notelst',
  ),
)
[ info ] [ HEADER ] array (
  'host' => 'qingrang.top',
  'upgrade-insecure-requests' => '1',
  'user-agent' => 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/69.0.3497.100 Safari/537.36',
  'accept' => 'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8',
  'referer' => 'http://qingrang.top/daily/',
  'accept-encoding' => 'gzip, deflate',
  'accept-language' => 'zh-CN,zh;q=0.9,la;q=0.8,en;q=0.7,lb;q=0.6',
  'cookie' => 'Hm_lvt_1769181352e9adc950166aada465644e=1539846308,1540133692,1540187497,1540387796; Hm_lpvt_1769181352e9adc950166aada465644e=1540387796; PHPSESSID=cfl1sikl9c45c63c655g4q7rd4',
  'connection' => 'close',
)
[ info ] [ PARAM ] array (
  'groups' => 'Algorithm',
)
[ info ] [ RUN ] app\admin\controller\Show->notelst[ /var/www/html/daily/application/admin/controller/Show.php ]
[ info ] [ DB ] INIT mysql
[ info ] [ VIEW ] /var/www/html/daily/application/admin/view/show/notelst.html [ array (
  0 => 'list_new',
  1 => 'groups',
  2 => 'groups0',
  3 => 'groups1',
  4 => 'groups2',
  5 => 'groupname',
  6 => 'content',
) ]
[ info ] [ LOG ] INIT File
[ sql ] [ DB ] CONNECT:[ UseTime:0.000541s ] mysql:host=74.120.168.12;dbname=diary;charset=utf8
[ sql ] [ SQL ] SHOW COLUMNS FROM `note` [ RunTime:0.001488s ]
[ sql ] [ SQL ] SELECT `content` FROM `note` WHERE  (  id=32 ) LIMIT 1 [ RunTime:0.000451s ]
[ sql ] [ SQL ] SELECT COUNT(*) AS tp_count FROM `note` WHERE  `groups` <> 'Personal'  AND `publish` = 1 LIMIT 1 [ RunTime:0.001302s ]
[ sql ] [ SQL ] SELECT * FROM `note` WHERE  `groups` <> 'Personal'  AND `publish` = 1 ORDER BY id desc LIMIT 0,6 [ RunTime:0.000904s ]
[ sql ] [ SQL ] SELECT COUNT(*) AS tp_count FROM `note` WHERE  ( `groups` <> 'Personal' AND `groups` = 'Algorithm' )  AND `publish` = 1 LIMIT 1 [ RunTime:0.001344s ]
[ sql ] [ SQL ] SELECT * FROM `note` WHERE  ( `groups` <> 'Personal' AND `groups` = 'Algorithm' )  AND `publish` = 1 ORDER BY id desc LIMIT 0,6 [ RunTime:0.002198s ]
[ sql ] [ SQL ] SHOW COLUMNS FROM `groups` [ RunTime:0.001273s ]
[ sql ] [ SQL ] SELECT * FROM `groups` WHERE  `groups` <> 'Personal' [ RunTime:0.000342s ]
[ sql ] [ SQL ] SELECT * FROM `groups` WHERE  `parent_id` = 0  AND `groups` <> 'Personal'  AND `id` <> 2 ORDER BY `groups` [ RunTime:0.000471s ]
[ sql ] [ SQL ] SELECT `groups` FROM `groups` WHERE  `parent_id` = 1  AND `groups` <> 'Personal' [ RunTime:0.000319s ]
[ sql ] [ SQL ] SELECT * FROM `groups` WHERE  `parent_id` = 2 ORDER BY `groups` [ RunTime:0.000480s ]
---------------------------------------------------------------
[ 2018-10-24T21:24:46+08:00 ] 74.120.168.12 74.120.168.12 GET /daily/admin/show/shownote/id/210.html
[ info ] qingrang.top/daily/admin/show/shownote/id/210.html [运行时间：0.081010s][吞吐率：12.34req/s] [内存消耗：1,947.44kb] [文件加载：54]
[ info ] [ LANG ] /var/www/html/daily/thinkphp/lang/zh-cn.php
[ info ] [ ROUTE ] array (
  'type' => 'module',
  'module' => 
  array (
    0 => 'admin',
    1 => 'show',
    2 => 'shownote',
  ),
)
[ info ] [ HEADER ] array (
  'host' => 'qingrang.top',
  'upgrade-insecure-requests' => '1',
  'user-agent' => 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/69.0.3497.100 Safari/537.36',
  'accept' => 'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8',
  'referer' => 'http://qingrang.top/daily/admin/show/notelst/groups/Algorithm.html',
  'accept-encoding' => 'gzip, deflate',
  'accept-language' => 'zh-CN,zh;q=0.9,la;q=0.8,en;q=0.7,lb;q=0.6',
  'cookie' => 'Hm_lvt_1769181352e9adc950166aada465644e=1539846308,1540133692,1540187497,1540387796; Hm_lpvt_1769181352e9adc950166aada465644e=1540387803; PHPSESSID=cfl1sikl9c45c63c655g4q7rd4',
  'connection' => 'close',
)
[ info ] [ PARAM ] array (
  'id' => '210',
)
[ info ] [ RUN ] app\admin\controller\Show->showNote[ /var/www/html/daily/application/admin/controller/Show.php ]
[ info ] [ DB ] INIT mysql
[ info ] [ VIEW ] /var/www/html/daily/application/admin/view/show/shownote.html [ array (
  0 => 'note',
  1 => 'groups',
) ]
[ info ] [ LOG ] INIT File
[ sql ] [ DB ] CONNECT:[ UseTime:0.000656s ] mysql:host=74.120.168.12;dbname=diary;charset=utf8
[ sql ] [ SQL ] SHOW COLUMNS FROM `note` [ RunTime:0.001925s ]
[ sql ] [ SQL ] SELECT * FROM `note` WHERE  `id` = 210 LIMIT 1 [ RunTime:0.000567s ]
[ sql ] [ SQL ] SHOW COLUMNS FROM `groups` [ RunTime:0.001417s ]
[ sql ] [ SQL ] SELECT * FROM `groups` [ RunTime:0.000458s ]
---------------------------------------------------------------
[ 2018-10-24T21:29:28+08:00 ] 74.120.168.12 74.120.168.12 GET /daily/admin/show/shownote/id/210.html
[ info ] qingrang.top/daily/admin/show/shownote/id/210.html [运行时间：0.055531s][吞吐率：18.01req/s] [内存消耗：1,947.82kb] [文件加载：54]
[ info ] [ LANG ] /var/www/html/daily/thinkphp/lang/zh-cn.php
[ info ] [ ROUTE ] array (
  'type' => 'module',
  'module' => 
  array (
    0 => 'admin',
    1 => 'show',
    2 => 'shownote',
  ),
)
[ info ] [ HEADER ] array (
  'host' => 'qingrang.top',
  'pragma' => 'no-cache',
  'cache-control' => 'no-cache',
  'upgrade-insecure-requests' => '1',
  'user-agent' => 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/69.0.3497.100 Safari/537.36',
  'accept' => 'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8',
  'referer' => 'http://qingrang.top/daily/admin/show/notelst/groups/Algorithm.html',
  'accept-encoding' => 'gzip, deflate',
  'accept-language' => 'zh-CN,zh;q=0.9,la;q=0.8,en;q=0.7,lb;q=0.6',
  'cookie' => 'Hm_lvt_1769181352e9adc950166aada465644e=1539846308,1540133692,1540187497,1540387796; Hm_lpvt_1769181352e9adc950166aada465644e=1540387806; PHPSESSID=cfl1sikl9c45c63c655g4q7rd4',
  'connection' => 'close',
)
[ info ] [ PARAM ] array (
  'id' => '210',
)
[ info ] [ RUN ] app\admin\controller\Show->showNote[ /var/www/html/daily/application/admin/controller/Show.php ]
[ info ] [ DB ] INIT mysql
[ info ] [ VIEW ] /var/www/html/daily/application/admin/view/show/shownote.html [ array (
  0 => 'note',
  1 => 'groups',
) ]
[ info ] [ LOG ] INIT File
[ sql ] [ DB ] CONNECT:[ UseTime:0.000572s ] mysql:host=74.120.168.12;dbname=diary;charset=utf8
[ sql ] [ SQL ] SHOW COLUMNS FROM `note` [ RunTime:0.001370s ]
[ sql ] [ SQL ] SELECT * FROM `note` WHERE  `id` = 210 LIMIT 1 [ RunTime:0.000490s ]
[ sql ] [ SQL ] SHOW COLUMNS FROM `groups` [ RunTime:0.000927s ]
[ sql ] [ SQL ] SELECT * FROM `groups` [ RunTime:0.000296s ]
---------------------------------------------------------------
[ 2018-10-24T21:29:48+08:00 ] 74.120.168.12 223.87.45.128 GET /daily/admin/show/shownote/id/210.html
[ info ] qingrang.top/daily/admin/show/shownote/id/210.html [运行时间：0.054327s][吞吐率：18.41req/s] [内存消耗：1,947.56kb] [文件加载：54]
[ info ] [ LANG ] /var/www/html/daily/thinkphp/lang/zh-cn.php
[ info ] [ ROUTE ] array (
  'type' => 'module',
  'module' => 
  array (
    0 => 'admin',
    1 => 'show',
    2 => 'shownote',
  ),
)
[ info ] [ HEADER ] array (
  'host' => 'qingrang.top',
  'connection' => 'keep-alive',
  'cache-control' => 'max-age=0',
  'upgrade-insecure-requests' => '1',
  'user-agent' => 'Mozilla/5.0 (Linux; Android 8.1.0; OE106 Build/OPM1.171019.026) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/62.0.3202.84 Mobile Safari/537.36',
  'accept' => 'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8',
  'referer' => 'http://qingrang.top/daily/admin/show/notelst/groups/Algorithm.html',
  'accept-encoding' => 'gzip, deflate',
  'accept-language' => 'zh-CN,zh;q=0.9',
  'cookie' => 'Hm_lvt_1769181352e9adc950166aada465644e=1540089729,1540256454,1540260910,1540344464; Hm_lpvt_1769181352e9adc950166aada465644e=1540387769',
)
[ info ] [ PARAM ] array (
  'id' => '210',
)
[ info ] [ RUN ] app\admin\controller\Show->showNote[ /var/www/html/daily/application/admin/controller/Show.php ]
[ info ] [ DB ] INIT mysql
[ info ] [ VIEW ] /var/www/html/daily/application/admin/view/show/shownote.html [ array (
  0 => 'note',
  1 => 'groups',
) ]
[ info ] [ LOG ] INIT File
[ sql ] [ DB ] CONNECT:[ UseTime:0.000520s ] mysql:host=74.120.168.12;dbname=diary;charset=utf8
[ sql ] [ SQL ] SHOW COLUMNS FROM `note` [ RunTime:0.001490s ]
[ sql ] [ SQL ] SELECT * FROM `note` WHERE  `id` = 210 LIMIT 1 [ RunTime:0.000494s ]
[ sql ] [ SQL ] SHOW COLUMNS FROM `groups` [ RunTime:0.000985s ]
[ sql ] [ SQL ] SELECT * FROM `groups` [ RunTime:0.000316s ]
---------------------------------------------------------------
[ 2018-10-24T21:32:15+08:00 ] 74.120.168.12 223.87.45.128 GET /daily/admin/show/shownote/id/210.html
[ info ] qingrang.top/daily/admin/show/shownote/id/210.html [运行时间：0.062661s][吞吐率：15.96req/s] [内存消耗：2,076.36kb] [文件加载：56]
[ info ] [ LANG ] /var/www/html/daily/thinkphp/lang/zh-cn.php
[ info ] [ ROUTE ] array (
  'type' => 'module',
  'module' => 
  array (
    0 => 'admin',
    1 => 'show',
    2 => 'shownote',
  ),
)
[ info ] [ HEADER ] array (
  'host' => 'qingrang.top',
  'connection' => 'keep-alive',
  'cache-control' => 'max-age=0',
  'upgrade-insecure-requests' => '1',
  'user-agent' => 'Mozilla/5.0 (Linux; Android 8.1.0; OE106 Build/OPM1.171019.026) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/62.0.3202.84 Mobile Safari/537.36',
  'accept' => 'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8',
  'referer' => 'http://qingrang.top/daily/admin/show/notelst/groups/Algorithm.html',
  'accept-encoding' => 'gzip, deflate',
  'accept-language' => 'zh-CN,zh;q=0.9',
  'cookie' => 'Hm_lvt_1769181352e9adc950166aada465644e=1540089729,1540256454,1540260910,1540344464; Hm_lpvt_1769181352e9adc950166aada465644e=1540388105',
)
[ info ] [ PARAM ] array (
  'id' => '210',
)
[ info ] [ RUN ] app\admin\controller\Show->showNote[ /var/www/html/daily/application/admin/controller/Show.php ]
[ info ] [ DB ] INIT mysql
[ info ] [ VIEW ] /var/www/html/daily/application/admin/view/show/shownote.html [ array (
  0 => 'note',
  1 => 'groups',
) ]
[ info ] [ LOG ] INIT File
[ sql ] [ DB ] CONNECT:[ UseTime:0.000533s ] mysql:host=74.120.168.12;dbname=diary;charset=utf8
[ sql ] [ SQL ] SHOW COLUMNS FROM `note` [ RunTime:0.002145s ]
[ sql ] [ SQL ] SELECT * FROM `note` WHERE  `id` = 210 LIMIT 1 [ RunTime:0.000619s ]
[ sql ] [ SQL ] SHOW COLUMNS FROM `groups` [ RunTime:0.001030s ]
[ sql ] [ SQL ] SELECT * FROM `groups` [ RunTime:0.000527s ]
---------------------------------------------------------------
[ 2018-10-24T21:33:52+08:00 ] 74.120.168.12 223.87.45.128 GET /daily/admin/show/shownote/id/210.html
[ info ] qingrang.top/daily/admin/show/shownote/id/210.html [运行时间：0.067755s][吞吐率：14.76req/s] [内存消耗：2,076.36kb] [文件加载：56]
[ info ] [ LANG ] /var/www/html/daily/thinkphp/lang/zh-cn.php
[ info ] [ ROUTE ] array (
  'type' => 'module',
  'module' => 
  array (
    0 => 'admin',
    1 => 'show',
    2 => 'shownote',
  ),
)
[ info ] [ HEADER ] array (
  'host' => 'qingrang.top',
  'connection' => 'keep-alive',
  'cache-control' => 'max-age=0',
  'upgrade-insecure-requests' => '1',
  'user-agent' => 'Mozilla/5.0 (Linux; Android 8.1.0; OE106 Build/OPM1.171019.026) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/62.0.3202.84 Mobile Safari/537.36',
  'accept' => 'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8',
  'referer' => 'http://qingrang.top/daily/admin/show/notelst/groups/Algorithm.html',
  'accept-encoding' => 'gzip, deflate',
  'accept-language' => 'zh-CN,zh;q=0.9',
  'cookie' => 'Hm_lvt_1769181352e9adc950166aada465644e=1540089729,1540256454,1540260910,1540344464; Hm_lpvt_1769181352e9adc950166aada465644e=1540388252',
)
[ info ] [ PARAM ] array (
  'id' => '210',
)
[ info ] [ RUN ] app\admin\controller\Show->showNote[ /var/www/html/daily/application/admin/controller/Show.php ]
[ info ] [ DB ] INIT mysql
[ info ] [ VIEW ] /var/www/html/daily/application/admin/view/show/shownote.html [ array (
  0 => 'note',
  1 => 'groups',
) ]
[ info ] [ LOG ] INIT File
[ sql ] [ DB ] CONNECT:[ UseTime:0.000582s ] mysql:host=74.120.168.12;dbname=diary;charset=utf8
[ sql ] [ SQL ] SHOW COLUMNS FROM `note` [ RunTime:0.001546s ]
[ sql ] [ SQL ] SELECT * FROM `note` WHERE  `id` = 210 LIMIT 1 [ RunTime:0.000518s ]
[ sql ] [ SQL ] SHOW COLUMNS FROM `groups` [ RunTime:0.001026s ]
[ sql ] [ SQL ] SELECT * FROM `groups` [ RunTime:0.000312s ]
---------------------------------------------------------------
[ 2018-10-24T21:37:49+08:00 ] 74.120.168.12 74.120.168.12 GET /daily/admin/note/shownote/id/210.html
[ info ] qingrang.top/daily/admin/note/shownote/id/210.html [运行时间：0.052376s][吞吐率：19.09req/s] [内存消耗：1,989.41kb] [文件加载：55]
[ info ] [ LANG ] /var/www/html/daily/thinkphp/lang/zh-cn.php
[ info ] [ ROUTE ] array (
  'type' => 'module',
  'module' => 
  array (
    0 => 'admin',
    1 => 'note',
    2 => 'shownote',
  ),
)
[ info ] [ HEADER ] array (
  'host' => 'qingrang.top',
  'pragma' => 'no-cache',
  'cache-control' => 'no-cache',
  'upgrade-insecure-requests' => '1',
  'user-agent' => 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/69.0.3497.100 Safari/537.36',
  'accept' => 'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8',
  'accept-encoding' => 'gzip, deflate',
  'accept-language' => 'zh-CN,zh;q=0.9,la;q=0.8,en;q=0.7,lb;q=0.6',
  'cookie' => 'Hm_lvt_1769181352e9adc950166aada465644e=1539846308,1540133692,1540187497,1540387796; Hm_lpvt_1769181352e9adc950166aada465644e=1540388092; PHPSESSID=cfl1sikl9c45c63c655g4q7rd4',
  'connection' => 'close',
)
[ info ] [ PARAM ] array (
  'id' => '210',
)
[ info ] [ SESSION ] INIT array (
  'id' => '',
  'var_session_id' => '',
  'prefix' => 'think',
  'type' => '',
  'auto_start' => true,
)
[ info ] [ RUN ] app\admin\controller\Note->showNote[ /var/www/html/daily/application/admin/controller/Note.php ]
[ info ] [ DB ] INIT mysql
[ info ] [ VIEW ] /var/www/html/daily/application/admin/view/note/shownote.html [ array (
  0 => 'note',
  1 => 'groups',
) ]
[ info ] [ LOG ] INIT File
[ sql ] [ DB ] CONNECT:[ UseTime:0.000514s ] mysql:host=74.120.168.12;dbname=diary;charset=utf8
[ sql ] [ SQL ] SHOW COLUMNS FROM `note` [ RunTime:0.001579s ]
[ sql ] [ SQL ] SELECT * FROM `note` WHERE  `id` = 210 LIMIT 1 [ RunTime:0.000449s ]
[ sql ] [ SQL ] SHOW COLUMNS FROM `groups` [ RunTime:0.000901s ]
[ sql ] [ SQL ] SELECT * FROM `groups` [ RunTime:0.000312s ]
---------------------------------------------------------------
[ 2018-10-24T21:38:14+08:00 ] 74.120.168.12 74.120.168.12 GET /daily/admin/note
[ info ] qingrang.top/daily/admin/note [运行时间：0.102472s][吞吐率：9.76req/s] [内存消耗：2,249.12kb] [文件加载：56]
[ info ] [ LANG ] /var/www/html/daily/thinkphp/lang/zh-cn.php
[ info ] [ ROUTE ] array (
  'type' => 'module',
  'module' => 
  array (
    0 => 'admin',
    1 => 'note',
    2 => NULL,
  ),
)
[ info ] [ HEADER ] array (
  'host' => 'qingrang.top',
  'cache-control' => 'max-age=0',
  'upgrade-insecure-requests' => '1',
  'user-agent' => 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/69.0.3497.100 Safari/537.36',
  'accept' => 'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8',
  'accept-encoding' => 'gzip, deflate',
  'accept-language' => 'zh-CN,zh;q=0.9,la;q=0.8,en;q=0.7,lb;q=0.6',
  'cookie' => 'Hm_lvt_1769181352e9adc950166aada465644e=1539846308,1540133692,1540187497,1540387796; Hm_lpvt_1769181352e9adc950166aada465644e=1540388092; PHPSESSID=cfl1sikl9c45c63c655g4q7rd4',
  'connection' => 'close',
)
[ info ] [ PARAM ] array (
)
[ info ] [ SESSION ] INIT array (
  'id' => '',
  'var_session_id' => '',
  'prefix' => 'think',
  'type' => '',
  'auto_start' => true,
)
[ info ] [ RUN ] app\admin\controller\Note->notelst[ /var/www/html/daily/application/admin/controller/Note.php ]
[ info ] [ DB ] INIT mysql
[ info ] [ VIEW ] /var/www/html/daily/application/admin/view/note/notelst.html [ array (
  0 => 'stickList',
  1 => 'hide',
  2 => 'list',
  3 => 'list_new',
  4 => 'groups',
  5 => 'groups0',
  6 => 'groups1',
  7 => 'groups2',
  8 => 'count',
  9 => 'year',
  10 => 'default_num',
) ]
[ info ] [ LOG ] INIT File
[ sql ] [ DB ] CONNECT:[ UseTime:0.000648s ] mysql:host=74.120.168.12;dbname=diary;charset=utf8
[ sql ] [ SQL ] SHOW COLUMNS FROM `note` [ RunTime:0.001866s ]
[ sql ] [ SQL ] SELECT * FROM `note` WHERE  `groups` <> 'Personal'  AND `is_show` = 1 ORDER BY date desc,id desc [ RunTime:0.002647s ]
[ sql ] [ SQL ] SELECT * FROM `note` WHERE  `groups` <> 'Personal' ORDER BY id desc LIMIT 5 [ RunTime:0.000648s ]
[ sql ] [ SQL ] SHOW COLUMNS FROM `config` [ RunTime:0.001417s ]
[ sql ] [ SQL ] SELECT * FROM `config` WHERE  `name` = 'hide' LIMIT 1 [ RunTime:0.000494s ]
[ sql ] [ SQL ] SELECT * FROM `note` WHERE  `id` < 5 [ RunTime:0.000760s ]
[ sql ] [ SQL ] SHOW COLUMNS FROM `groups` [ RunTime:0.001249s ]
[ sql ] [ SQL ] SELECT * FROM `groups` [ RunTime:0.000398s ]
[ sql ] [ SQL ] SELECT * FROM `groups` WHERE  `parent_id` = 0  AND `id` <> 2 ORDER BY `groups` [ RunTime:0.000550s ]
[ sql ] [ SQL ] SELECT `groups` FROM `groups` WHERE  `parent_id` = 1 [ RunTime:0.000393s ]
[ sql ] [ SQL ] SELECT * FROM `groups` WHERE  `parent_id` = 2 ORDER BY `groups` [ RunTime:0.000516s ]
[ sql ] [ SQL ] SELECT COUNT(*) AS tp_count FROM `note` WHERE  `groups` = 'Default' LIMIT 1 [ RunTime:0.001695s ]
[ sql ] [ SQL ] SELECT COUNT(*) AS tp_count FROM `note` LIMIT 1 [ RunTime:0.000365s ]
[ sql ] [ SQL ] SHOW COLUMNS FROM `yearlist` [ RunTime:0.001602s ]
[ sql ] [ SQL ] SELECT DISTINCT  `year` FROM `yearlist` ORDER BY year desc [ RunTime:0.001019s ]
---------------------------------------------------------------
[ 2018-10-24T21:38:24+08:00 ] 74.120.168.12 74.120.168.12 GET /daily/admin/note/shownote/id/212.html
[ info ] qingrang.top/daily/admin/note/shownote/id/212.html [运行时间：0.090578s][吞吐率：11.04req/s] [内存消耗：2,032.19kb] [文件加载：55]
[ info ] [ LANG ] /var/www/html/daily/thinkphp/lang/zh-cn.php
[ info ] [ ROUTE ] array (
  'type' => 'module',
  'module' => 
  array (
    0 => 'admin',
    1 => 'note',
    2 => 'shownote',
  ),
)
[ info ] [ HEADER ] array (
  'host' => 'qingrang.top',
  'upgrade-insecure-requests' => '1',
  'user-agent' => 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/69.0.3497.100 Safari/537.36',
  'accept' => 'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8',
  'referer' => 'http://qingrang.top/daily/admin/note',
  'accept-encoding' => 'gzip, deflate',
  'accept-language' => 'zh-CN,zh;q=0.9,la;q=0.8,en;q=0.7,lb;q=0.6',
  'cookie' => 'Hm_lvt_1769181352e9adc950166aada465644e=1539846308,1540133692,1540187497,1540387796; Hm_lpvt_1769181352e9adc950166aada465644e=1540388092; PHPSESSID=cfl1sikl9c45c63c655g4q7rd4',
  'connection' => 'close',
)
[ info ] [ PARAM ] array (
  'id' => '212',
)
[ info ] [ SESSION ] INIT array (
  'id' => '',
  'var_session_id' => '',
  'prefix' => 'think',
  'type' => '',
  'auto_start' => true,
)
[ info ] [ RUN ] app\admin\controller\Note->showNote[ /var/www/html/daily/application/admin/controller/Note.php ]
[ info ] [ DB ] INIT mysql
[ info ] [ VIEW ] /var/www/html/daily/application/admin/view/note/shownote.html [ array (
  0 => 'note',
  1 => 'groups',
) ]
[ info ] [ LOG ] INIT File
[ sql ] [ DB ] CONNECT:[ UseTime:0.000549s ] mysql:host=74.120.168.12;dbname=diary;charset=utf8
[ sql ] [ SQL ] SHOW COLUMNS FROM `note` [ RunTime:0.001664s ]
[ sql ] [ SQL ] SELECT * FROM `note` WHERE  `id` = 212 LIMIT 1 [ RunTime:0.000561s ]
[ sql ] [ SQL ] SHOW COLUMNS FROM `groups` [ RunTime:0.000930s ]
[ sql ] [ SQL ] SELECT * FROM `groups` [ RunTime:0.000352s ]
---------------------------------------------------------------
[ 2018-10-24T22:23:04+08:00 ] 74.120.168.12 74.120.168.12 GET /daily/admin/login/index.html
[ info ] qingrang.top/daily/admin/login/index.html [运行时间：0.038996s][吞吐率：25.64req/s] [内存消耗：1,339.90kb] [文件加载：47]
[ info ] [ LANG ] /var/www/html/daily/thinkphp/lang/zh-cn.php
[ info ] [ ROUTE ] array (
  'type' => 'module',
  'module' => 
  array (
    0 => 'admin',
    1 => 'login',
    2 => 'index',
  ),
)
[ info ] [ HEADER ] array (
  'host' => 'qingrang.top',
  'upgrade-insecure-requests' => '1',
  'user-agent' => 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/69.0.3497.100 Safari/537.36',
  'accept' => 'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8',
  'accept-encoding' => 'gzip, deflate',
  'accept-language' => 'zh-CN,zh;q=0.9,la;q=0.8,en;q=0.7,lb;q=0.6',
  'cookie' => 'Hm_lvt_1769181352e9adc950166aada465644e=1539846308,1540133692,1540187497,1540387796',
  'connection' => 'close',
)
[ info ] [ PARAM ] array (
)
[ info ] [ RUN ] app\admin\controller\Login->index[ /var/www/html/daily/application/admin/controller/Login.php ]
[ info ] [ VIEW ] /var/www/html/daily/application/admin/view/login/index.html [ array (
) ]
[ info ] [ LOG ] INIT File
---------------------------------------------------------------
[ 2018-10-24T22:23:13+08:00 ] 74.120.168.12 74.120.168.12 POST /daily/admin/login/index.html
[ info ] qingrang.top/daily/admin/login/index.html [运行时间：0.052080s][吞吐率：19.20req/s] [内存消耗：1,922.41kb] [文件加载：54]
[ info ] [ LANG ] /var/www/html/daily/thinkphp/lang/zh-cn.php
[ info ] [ ROUTE ] array (
  'type' => 'module',
  'module' => 
  array (
    0 => 'admin',
    1 => 'login',
    2 => 'index',
  ),
)
[ info ] [ HEADER ] array (
  'host' => 'qingrang.top',
  'content-length' => '8',
  'cache-control' => 'max-age=0',
  'origin' => 'http://qingrang.top',
  'upgrade-insecure-requests' => '1',
  'content-type' => 'application/x-www-form-urlencoded',
  'user-agent' => 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/69.0.3497.100 Safari/537.36',
  'accept' => 'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8',
  'referer' => 'http://qingrang.top/daily/admin/login/index.html',
  'accept-encoding' => 'gzip, deflate',
  'accept-language' => 'zh-CN,zh;q=0.9,la;q=0.8,en;q=0.7,lb;q=0.6',
  'cookie' => 'Hm_lvt_1769181352e9adc950166aada465644e=1539846308,1540133692,1540187497,1540387796',
  'connection' => 'close',
)
[ info ] [ PARAM ] array (
  'pwd' => 'shao',
)
[ info ] [ RUN ] app\admin\controller\Login->index[ /var/www/html/daily/application/admin/controller/Login.php ]
[ info ] [ DB ] INIT mysql
[ info ] [ SESSION ] INIT array (
  'id' => '',
  'var_session_id' => '',
  'prefix' => 'think',
  'type' => '',
  'auto_start' => true,
)
[ info ] [ LOG ] INIT File
[ sql ] [ DB ] CONNECT:[ UseTime:0.000682s ] mysql:host=74.120.168.12;dbname=diary;charset=utf8
[ sql ] [ SQL ] SHOW COLUMNS FROM `admin` [ RunTime:0.001226s ]
[ sql ] [ SQL ] SELECT * FROM `admin` WHERE  `id` = 1 LIMIT 1 [ RunTime:0.000348s ]
---------------------------------------------------------------
[ 2018-10-24T22:23:14+08:00 ] 74.120.168.12 74.120.168.12 GET /daily/admin/note
[ info ] qingrang.top/daily/admin/note [运行时间：0.075883s][吞吐率：13.18req/s] [内存消耗：2,249.28kb] [文件加载：56]
[ info ] [ LANG ] /var/www/html/daily/thinkphp/lang/zh-cn.php
[ info ] [ ROUTE ] array (
  'type' => 'module',
  'module' => 
  array (
    0 => 'admin',
    1 => 'note',
    2 => NULL,
  ),
)
[ info ] [ HEADER ] array (
  'host' => 'qingrang.top',
  'cache-control' => 'max-age=0',
  'upgrade-insecure-requests' => '1',
  'user-agent' => 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/69.0.3497.100 Safari/537.36',
  'accept' => 'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8',
  'referer' => 'http://qingrang.top/daily/admin/login/index.html',
  'accept-encoding' => 'gzip, deflate',
  'accept-language' => 'zh-CN,zh;q=0.9,la;q=0.8,en;q=0.7,lb;q=0.6',
  'cookie' => 'Hm_lvt_1769181352e9adc950166aada465644e=1539846308,1540133692,1540187497,1540387796; PHPSESSID=li1tggbg6dkjvd196u9vtqo7q4',
  'connection' => 'close',
)
[ info ] [ PARAM ] array (
)
[ info ] [ SESSION ] INIT array (
  'id' => '',
  'var_session_id' => '',
  'prefix' => 'think',
  'type' => '',
  'auto_start' => true,
)
[ info ] [ RUN ] app\admin\controller\Note->notelst[ /var/www/html/daily/application/admin/controller/Note.php ]
[ info ] [ DB ] INIT mysql
[ info ] [ VIEW ] /var/www/html/daily/application/admin/view/note/notelst.html [ array (
  0 => 'stickList',
  1 => 'hide',
  2 => 'list',
  3 => 'list_new',
  4 => 'groups',
  5 => 'groups0',
  6 => 'groups1',
  7 => 'groups2',
  8 => 'count',
  9 => 'year',
  10 => 'default_num',
) ]
[ info ] [ LOG ] INIT File
[ sql ] [ DB ] CONNECT:[ UseTime:0.000554s ] mysql:host=74.120.168.12;dbname=diary;charset=utf8
[ sql ] [ SQL ] SHOW COLUMNS FROM `note` [ RunTime:0.001410s ]
[ sql ] [ SQL ] SELECT * FROM `note` WHERE  `groups` <> 'Personal'  AND `is_show` = 1 ORDER BY date desc,id desc [ RunTime:0.001772s ]
[ sql ] [ SQL ] SELECT * FROM `note` WHERE  `groups` <> 'Personal' ORDER BY id desc LIMIT 5 [ RunTime:0.000486s ]
[ sql ] [ SQL ] SHOW COLUMNS FROM `config` [ RunTime:0.001025s ]
[ sql ] [ SQL ] SELECT * FROM `config` WHERE  `name` = 'hide' LIMIT 1 [ RunTime:0.000381s ]
[ sql ] [ SQL ] SELECT * FROM `note` WHERE  `id` < 5 [ RunTime:0.000534s ]
[ sql ] [ SQL ] SHOW COLUMNS FROM `groups` [ RunTime:0.000974s ]
[ sql ] [ SQL ] SELECT * FROM `groups` [ RunTime:0.000325s ]
[ sql ] [ SQL ] SELECT * FROM `groups` WHERE  `parent_id` = 0  AND `id` <> 2 ORDER BY `groups` [ RunTime:0.000414s ]
[ sql ] [ SQL ] SELECT `groups` FROM `groups` WHERE  `parent_id` = 1 [ RunTime:0.000363s ]
[ sql ] [ SQL ] SELECT * FROM `groups` WHERE  `parent_id` = 2 ORDER BY `groups` [ RunTime:0.000416s ]
[ sql ] [ SQL ] SELECT COUNT(*) AS tp_count FROM `note` WHERE  `groups` = 'Default' LIMIT 1 [ RunTime:0.001086s ]
[ sql ] [ SQL ] SELECT COUNT(*) AS tp_count FROM `note` LIMIT 1 [ RunTime:0.000245s ]
[ sql ] [ SQL ] SHOW COLUMNS FROM `yearlist` [ RunTime:0.001179s ]
[ sql ] [ SQL ] SELECT DISTINCT  `year` FROM `yearlist` ORDER BY year desc [ RunTime:0.000650s ]
---------------------------------------------------------------
[ 2018-10-24T22:23:21+08:00 ] 74.120.168.12 74.120.168.12 GET /daily/admin/note/shownote/id/212.html
[ info ] qingrang.top/daily/admin/note/shownote/id/212.html [运行时间：0.057762s][吞吐率：17.31req/s] [内存消耗：2,032.00kb] [文件加载：55]
[ info ] [ LANG ] /var/www/html/daily/thinkphp/lang/zh-cn.php
[ info ] [ ROUTE ] array (
  'type' => 'module',
  'module' => 
  array (
    0 => 'admin',
    1 => 'note',
    2 => 'shownote',
  ),
)
[ info ] [ HEADER ] array (
  'host' => 'qingrang.top',
  'upgrade-insecure-requests' => '1',
  'user-agent' => 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/69.0.3497.100 Safari/537.36',
  'accept' => 'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8',
  'referer' => 'http://qingrang.top/daily/admin/note',
  'accept-encoding' => 'gzip, deflate',
  'accept-language' => 'zh-CN,zh;q=0.9,la;q=0.8,en;q=0.7,lb;q=0.6',
  'cookie' => 'Hm_lvt_1769181352e9adc950166aada465644e=1539846308,1540133692,1540187497,1540387796; PHPSESSID=li1tggbg6dkjvd196u9vtqo7q4',
  'connection' => 'close',
)
[ info ] [ PARAM ] array (
  'id' => '212',
)
[ info ] [ SESSION ] INIT array (
  'id' => '',
  'var_session_id' => '',
  'prefix' => 'think',
  'type' => '',
  'auto_start' => true,
)
[ info ] [ RUN ] app\admin\controller\Note->showNote[ /var/www/html/daily/application/admin/controller/Note.php ]
[ info ] [ DB ] INIT mysql
[ info ] [ VIEW ] /var/www/html/daily/application/admin/view/note/shownote.html [ array (
  0 => 'note',
  1 => 'groups',
) ]
[ info ] [ LOG ] INIT File
[ sql ] [ DB ] CONNECT:[ UseTime:0.000452s ] mysql:host=74.120.168.12;dbname=diary;charset=utf8
[ sql ] [ SQL ] SHOW COLUMNS FROM `note` [ RunTime:0.001346s ]
[ sql ] [ SQL ] SELECT * FROM `note` WHERE  `id` = 212 LIMIT 1 [ RunTime:0.000701s ]
[ sql ] [ SQL ] SHOW COLUMNS FROM `groups` [ RunTime:0.000859s ]
[ sql ] [ SQL ] SELECT * FROM `groups` [ RunTime:0.000291s ]
---------------------------------------------------------------
[ 2018-10-24T22:23:57+08:00 ] 74.120.168.12 74.120.168.12 POST /daily/admin/note/ashownote2.html
[ info ] qingrang.top/daily/admin/note/ashownote2.html [运行时间：0.055201s][吞吐率：18.12req/s] [内存消耗：2,153.19kb] [文件加载：52]
[ info ] [ LANG ] /var/www/html/daily/thinkphp/lang/zh-cn.php
[ info ] [ ROUTE ] array (
  'type' => 'module',
  'module' => 
  array (
    0 => 'admin',
    1 => 'note',
    2 => 'ashownote2',
  ),
)
[ info ] [ HEADER ] array (
  'host' => 'qingrang.top',
  'content-length' => '19',
  'accept' => 'application/json, text/javascript, */*; q=0.01',
  'origin' => 'http://qingrang.top',
  'x-requested-with' => 'XMLHttpRequest',
  'user-agent' => 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/69.0.3497.100 Safari/537.36',
  'content-type' => 'application/x-www-form-urlencoded',
  'referer' => 'http://qingrang.top/daily/admin/note',
  'accept-encoding' => 'gzip, deflate',
  'accept-language' => 'zh-CN,zh;q=0.9,la;q=0.8,en;q=0.7,lb;q=0.6',
  'cookie' => 'Hm_lvt_1769181352e9adc950166aada465644e=1539846308,1540133692,1540187497,1540387796; PHPSESSID=li1tggbg6dkjvd196u9vtqo7q4',
  'connection' => 'close',
)
[ info ] [ PARAM ] array (
  'groupname' => 'Algorithm',
)
[ info ] [ SESSION ] INIT array (
  'id' => '',
  'var_session_id' => '',
  'prefix' => 'think',
  'type' => '',
  'auto_start' => true,
)
[ info ] [ RUN ] app\admin\controller\Note->aShowNote2[ /var/www/html/daily/application/admin/controller/Note.php ]
[ info ] [ DB ] INIT mysql
[ info ] [ LOG ] INIT File
[ sql ] [ DB ] CONNECT:[ UseTime:0.000517s ] mysql:host=74.120.168.12;dbname=diary;charset=utf8
[ sql ] [ SQL ] SHOW COLUMNS FROM `note` [ RunTime:0.001416s ]
[ sql ] [ SQL ] SELECT * FROM `note` WHERE  `groups` = 'Algorithm' ORDER BY date desc [ RunTime:0.001227s ]
---------------------------------------------------------------
[ 2018-10-24T22:24:01+08:00 ] 74.120.168.12 74.120.168.12 GET /daily/admin/note/shownote/id/210
[ info ] qingrang.top/daily/admin/note/shownote/id/210 [运行时间：0.054499s][吞吐率：18.35req/s] [内存消耗：1,989.15kb] [文件加载：55]
[ info ] [ LANG ] /var/www/html/daily/thinkphp/lang/zh-cn.php
[ info ] [ ROUTE ] array (
  'type' => 'module',
  'module' => 
  array (
    0 => 'admin',
    1 => 'note',
    2 => 'shownote',
  ),
)
[ info ] [ HEADER ] array (
  'host' => 'qingrang.top',
  'upgrade-insecure-requests' => '1',
  'user-agent' => 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/69.0.3497.100 Safari/537.36',
  'accept' => 'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8',
  'referer' => 'http://qingrang.top/daily/admin/note',
  'accept-encoding' => 'gzip, deflate',
  'accept-language' => 'zh-CN,zh;q=0.9,la;q=0.8,en;q=0.7,lb;q=0.6',
  'cookie' => 'Hm_lvt_1769181352e9adc950166aada465644e=1539846308,1540133692,1540187497,1540387796; PHPSESSID=li1tggbg6dkjvd196u9vtqo7q4',
  'connection' => 'close',
)
[ info ] [ PARAM ] array (
  'id' => '210',
)
[ info ] [ SESSION ] INIT array (
  'id' => '',
  'var_session_id' => '',
  'prefix' => 'think',
  'type' => '',
  'auto_start' => true,
)
[ info ] [ RUN ] app\admin\controller\Note->showNote[ /var/www/html/daily/application/admin/controller/Note.php ]
[ info ] [ DB ] INIT mysql
[ info ] [ VIEW ] /var/www/html/daily/application/admin/view/note/shownote.html [ array (
  0 => 'note',
  1 => 'groups',
) ]
[ info ] [ LOG ] INIT File
[ sql ] [ DB ] CONNECT:[ UseTime:0.000462s ] mysql:host=74.120.168.12;dbname=diary;charset=utf8
[ sql ] [ SQL ] SHOW COLUMNS FROM `note` [ RunTime:0.001186s ]
[ sql ] [ SQL ] SELECT * FROM `note` WHERE  `id` = 210 LIMIT 1 [ RunTime:0.000410s ]
[ sql ] [ SQL ] SHOW COLUMNS FROM `groups` [ RunTime:0.000984s ]
[ sql ] [ SQL ] SELECT * FROM `groups` [ RunTime:0.000354s ]
---------------------------------------------------------------
[ 2018-10-24T22:30:34+08:00 ] 74.120.168.12 74.120.168.12 GET /daily/admin/note
[ info ] qingrang.top/daily/admin/note [运行时间：0.081402s][吞吐率：12.28req/s] [内存消耗：2,249.28kb] [文件加载：56]
[ info ] [ LANG ] /var/www/html/daily/thinkphp/lang/zh-cn.php
[ info ] [ ROUTE ] array (
  'type' => 'module',
  'module' => 
  array (
    0 => 'admin',
    1 => 'note',
    2 => NULL,
  ),
)
[ info ] [ HEADER ] array (
  'host' => 'qingrang.top',
  'cache-control' => 'max-age=0',
  'upgrade-insecure-requests' => '1',
  'user-agent' => 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/69.0.3497.100 Safari/537.36',
  'accept' => 'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8',
  'referer' => 'http://qingrang.top/daily/admin/login/index.html',
  'accept-encoding' => 'gzip, deflate',
  'accept-language' => 'zh-CN,zh;q=0.9,la;q=0.8,en;q=0.7,lb;q=0.6',
  'cookie' => 'Hm_lvt_1769181352e9adc950166aada465644e=1539846308,1540133692,1540187497,1540387796; PHPSESSID=li1tggbg6dkjvd196u9vtqo7q4',
  'connection' => 'close',
)
[ info ] [ PARAM ] array (
)
[ info ] [ SESSION ] INIT array (
  'id' => '',
  'var_session_id' => '',
  'prefix' => 'think',
  'type' => '',
  'auto_start' => true,
)
[ info ] [ RUN ] app\admin\controller\Note->notelst[ /var/www/html/daily/application/admin/controller/Note.php ]
[ info ] [ DB ] INIT mysql
[ info ] [ VIEW ] /var/www/html/daily/application/admin/view/note/notelst.html [ array (
  0 => 'stickList',
  1 => 'hide',
  2 => 'list',
  3 => 'list_new',
  4 => 'groups',
  5 => 'groups0',
  6 => 'groups1',
  7 => 'groups2',
  8 => 'count',
  9 => 'year',
  10 => 'default_num',
) ]
[ info ] [ LOG ] INIT File
[ sql ] [ DB ] CONNECT:[ UseTime:0.000571s ] mysql:host=74.120.168.12;dbname=diary;charset=utf8
[ sql ] [ SQL ] SHOW COLUMNS FROM `note` [ RunTime:0.001366s ]
[ sql ] [ SQL ] SELECT * FROM `note` WHERE  `groups` <> 'Personal'  AND `is_show` = 1 ORDER BY date desc,id desc [ RunTime:0.002113s ]
[ sql ] [ SQL ] SELECT * FROM `note` WHERE  `groups` <> 'Personal' ORDER BY id desc LIMIT 5 [ RunTime:0.000542s ]
[ sql ] [ SQL ] SHOW COLUMNS FROM `config` [ RunTime:0.001465s ]
[ sql ] [ SQL ] SELECT * FROM `config` WHERE  `name` = 'hide' LIMIT 1 [ RunTime:0.000438s ]
[ sql ] [ SQL ] SELECT * FROM `note` WHERE  `id` < 5 [ RunTime:0.000507s ]
[ sql ] [ SQL ] SHOW COLUMNS FROM `groups` [ RunTime:0.001054s ]
[ sql ] [ SQL ] SELECT * FROM `groups` [ RunTime:0.000329s ]
[ sql ] [ SQL ] SELECT * FROM `groups` WHERE  `parent_id` = 0  AND `id` <> 2 ORDER BY `groups` [ RunTime:0.000546s ]
[ sql ] [ SQL ] SELECT `groups` FROM `groups` WHERE  `parent_id` = 1 [ RunTime:0.000321s ]
[ sql ] [ SQL ] SELECT * FROM `groups` WHERE  `parent_id` = 2 ORDER BY `groups` [ RunTime:0.000438s ]
[ sql ] [ SQL ] SELECT COUNT(*) AS tp_count FROM `note` WHERE  `groups` = 'Default' LIMIT 1 [ RunTime:0.001360s ]
[ sql ] [ SQL ] SELECT COUNT(*) AS tp_count FROM `note` LIMIT 1 [ RunTime:0.000313s ]
[ sql ] [ SQL ] SHOW COLUMNS FROM `yearlist` [ RunTime:0.001262s ]
[ sql ] [ SQL ] SELECT DISTINCT  `year` FROM `yearlist` ORDER BY year desc [ RunTime:0.000935s ]
---------------------------------------------------------------
[ 2018-10-24T22:30:52+08:00 ] 74.120.168.12 74.120.168.12 POST /daily/admin/note/ashownote2.html
[ info ] qingrang.top/daily/admin/note/ashownote2.html [运行时间：0.058654s][吞吐率：17.05req/s] [内存消耗：2,271.71kb] [文件加载：52]
[ info ] [ LANG ] /var/www/html/daily/thinkphp/lang/zh-cn.php
[ info ] [ ROUTE ] array (
  'type' => 'module',
  'module' => 
  array (
    0 => 'admin',
    1 => 'note',
    2 => 'ashownote2',
  ),
)
[ info ] [ HEADER ] array (
  'host' => 'qingrang.top',
  'content-length' => '14',
  'accept' => 'application/json, text/javascript, */*; q=0.01',
  'origin' => 'http://qingrang.top',
  'x-requested-with' => 'XMLHttpRequest',
  'user-agent' => 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/69.0.3497.100 Safari/537.36',
  'content-type' => 'application/x-www-form-urlencoded',
  'referer' => 'http://qingrang.top/daily/admin/note',
  'accept-encoding' => 'gzip, deflate',
  'accept-language' => 'zh-CN,zh;q=0.9,la;q=0.8,en;q=0.7,lb;q=0.6',
  'cookie' => 'Hm_lvt_1769181352e9adc950166aada465644e=1539846308,1540133692,1540187497,1540387796; PHPSESSID=li1tggbg6dkjvd196u9vtqo7q4',
  'connection' => 'close',
)
[ info ] [ PARAM ] array (
  'groupname' => 'Java',
)
[ info ] [ SESSION ] INIT array (
  'id' => '',
  'var_session_id' => '',
  'prefix' => 'think',
  'type' => '',
  'auto_start' => true,
)
[ info ] [ RUN ] app\admin\controller\Note->aShowNote2[ /var/www/html/daily/application/admin/controller/Note.php ]
[ info ] [ DB ] INIT mysql
[ info ] [ LOG ] INIT File
[ sql ] [ DB ] CONNECT:[ UseTime:0.000551s ] mysql:host=74.120.168.12;dbname=diary;charset=utf8
[ sql ] [ SQL ] SHOW COLUMNS FROM `note` [ RunTime:0.001626s ]
[ sql ] [ SQL ] SELECT * FROM `note` WHERE  `groups` = 'Java' ORDER BY date desc [ RunTime:0.002099s ]
---------------------------------------------------------------
[ 2018-10-24T22:31:04+08:00 ] 74.120.168.12 74.120.168.12 GET /daily/admin/note/editNote/id/224
[ info ] qingrang.top/daily/admin/note/editNote/id/224 [运行时间：0.057805s][吞吐率：17.30req/s] [内存消耗：2,029.98kb] [文件加载：56]
[ info ] [ LANG ] /var/www/html/daily/thinkphp/lang/zh-cn.php
[ info ] [ ROUTE ] array (
  'type' => 'module',
  'module' => 
  array (
    0 => 'admin',
    1 => 'note',
    2 => 'editNote',
  ),
)
[ info ] [ HEADER ] array (
  'host' => 'qingrang.top',
  'upgrade-insecure-requests' => '1',
  'user-agent' => 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/69.0.3497.100 Safari/537.36',
  'accept' => 'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8',
  'referer' => 'http://qingrang.top/daily/admin/note',
  'accept-encoding' => 'gzip, deflate',
  'accept-language' => 'zh-CN,zh;q=0.9,la;q=0.8,en;q=0.7,lb;q=0.6',
  'cookie' => 'Hm_lvt_1769181352e9adc950166aada465644e=1539846308,1540133692,1540187497,1540387796; PHPSESSID=li1tggbg6dkjvd196u9vtqo7q4',
  'connection' => 'close',
)
[ info ] [ PARAM ] array (
  'id' => '224',
)
[ info ] [ SESSION ] INIT array (
  'id' => '',
  'var_session_id' => '',
  'prefix' => 'think',
  'type' => '',
  'auto_start' => true,
)
[ info ] [ RUN ] app\admin\controller\Note->editNote[ /var/www/html/daily/application/admin/controller/Note.php ]
[ info ] [ DB ] INIT mysql
[ info ] [ VIEW ] /var/www/html/daily/application/admin/view/note/editnote.html [ array (
  0 => 'note',
  1 => 'groups',
) ]
[ info ] [ LOG ] INIT File
[ sql ] [ DB ] CONNECT:[ UseTime:0.000531s ] mysql:host=74.120.168.12;dbname=diary;charset=utf8
[ sql ] [ SQL ] SHOW COLUMNS FROM `note` [ RunTime:0.001674s ]
[ sql ] [ SQL ] SELECT * FROM `note` WHERE  `id` = 224 LIMIT 1 [ RunTime:0.000449s ]
[ sql ] [ SQL ] SHOW COLUMNS FROM `groups` [ RunTime:0.000850s ]
[ sql ] [ SQL ] SELECT * FROM `groups` [ RunTime:0.000307s ]
---------------------------------------------------------------
[ 2018-10-24T22:31:09+08:00 ] 74.120.168.12 74.120.168.12 POST /daily/admin/note/updatenote/id/224.html
[ info ] qingrang.top/daily/admin/note/updatenote/id/224.html [运行时间：0.064242s][吞吐率：15.57req/s] [内存消耗：2,061.86kb] [文件加载：58]
[ info ] [ LANG ] /var/www/html/daily/thinkphp/lang/zh-cn.php
[ info ] [ ROUTE ] array (
  'type' => 'module',
  'module' => 
  array (
    0 => 'admin',
    1 => 'note',
    2 => 'updatenote',
  ),
)
[ info ] [ HEADER ] array (
  'host' => 'qingrang.top',
  'content-length' => '4095',
  'cache-control' => 'max-age=0',
  'origin' => 'http://qingrang.top',
  'upgrade-insecure-requests' => '1',
  'content-type' => 'application/x-www-form-urlencoded',
  'user-agent' => 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/69.0.3497.100 Safari/537.36',
  'accept' => 'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8',
  'referer' => 'http://qingrang.top/daily/admin/note/editNote/id/224',
  'accept-encoding' => 'gzip, deflate',
  'accept-language' => 'zh-CN,zh;q=0.9,la;q=0.8,en;q=0.7,lb;q=0.6',
  'cookie' => 'Hm_lvt_1769181352e9adc950166aada465644e=1539846308,1540133692,1540187497,1540387796; PHPSESSID=li1tggbg6dkjvd196u9vtqo7q4',
  'connection' => 'close',
)
[ info ] [ PARAM ] array (
  'summary' => '',
  'content' => '# Java SE - Lambda
>Java lambda 表达式的简单例子

```
// 1. 不需要参数,返回值为 5  
() -> 5  
  
// 2. 接收一个参数(数字类型),返回其2倍的值  
x -> 2 * x  
  
// 3. 接受2个参数(数字),并返回他们的差值  
(x, y) -> x – y  
  
// 4. 接收2个int型整数,返回他们的和  
(int x, int y) -> x + y  
  
// 5. 接受一个 string 对象,并在控制台打印,不返回任何值(看起来像是返回void)  
(String s) -> System.out.print(s)
```
>基本的 Lambda 例子

```
package test;

import java.util.Arrays;
import java.util.List;

/**
 * Created by CaptainQR on 2018/10/15.
 */
public class Demo {
	public static void main(String[] args) {
		String[] strArr = {"1", "2", "3"};

		List<String> list = Arrays.asList(strArr);

		//传统方式
		for (String lst:list){
			System.out.println(lst);
		}
		System.out.println("-------------");

		//使用 lambda 表达式以及函数操作(functional operation)
		list.forEach((lst)-> System.out.println(lst));
		System.out.println("-------------");

		//在 Java 8 中使用双冒号操作符(double colon operator)
		list.forEach(System.out::println);
		System.out.println("-------------");
	}
}
```
>从匿名类演变成 Lambda 表达式

```
// ================================================
new Thread(new Runnable() {  
    @Override  
    public void run() {  
        System.out.println("Hello world !");  
    }  
}).start();  
------------------------
new Thread(() -> System.out.println("Hello world !")).start();  
  
// ================================================
Runnable race1 = new Runnable() {  
    @Override  
    public void run() {  
        System.out.println("Hello world !");  
    }  
};  
------------------------
Runnable race2 = () -> System.out.println("Hello world !");  

//================================================
HeroChecker c1 = new HeroChecker() {
    public boolean test(Hero h) {
        return (h.hp>100 && h.damage<50);
    }
};
------------------------
HeroChecker c4 = h ->h.hp>100 && h.damage<50;
```',
  'groups' => 'Java',
  'showsel' => '0',
  'showse2' => '1',
  'id' => '224',
)
[ info ] [ SESSION ] INIT array (
  'id' => '',
  'var_session_id' => '',
  'prefix' => 'think',
  'type' => '',
  'auto_start' => true,
)
[ info ] [ RUN ] app\admin\controller\Note->updateNote[ /var/www/html/daily/application/admin/controller/Note.php ]
[ info ] [ DB ] INIT mysql
[ info ] [ CACHE ] INIT File
[ info ] [ LOG ] INIT File
[ sql ] [ DB ] CONNECT:[ UseTime:0.000472s ] mysql:host=74.120.168.12;dbname=diary;charset=utf8
[ sql ] [ SQL ] SHOW COLUMNS FROM `note` [ RunTime:0.002144s ]
[ sql ] [ SQL ] SELECT * FROM `note` WHERE  `id` = 224 LIMIT 1 [ RunTime:0.000528s ]
[ sql ] [ SQL ] SELECT `groups` FROM `note` WHERE  `id` = 224 LIMIT 1 [ RunTime:0.000342s ]
[ sql ] [ SQL ] SHOW COLUMNS FROM `groups` [ RunTime:0.001011s ]
[ sql ] [ SQL ] SELECT `parent_id` FROM `groups` WHERE  `groups` = 'Java' LIMIT 1 [ RunTime:0.000335s ]
[ sql ] [ SQL ] SELECT `groups` FROM `groups` WHERE  `id` = 2 LIMIT 1 [ RunTime:0.000320s ]
[ sql ] [ SQL ] UPDATE `note`  SET `id`=224,`p_id`=2,`title`='Java SE - Lambda\r',`content`='# Java SE - Lambda\r\n>Java lambda 表达式的简单例子\r\n\r\n```\r\n// 1. 不需要参数,返回值为 5  \r\n() -> 5  \r\n  \r\n// 2. 接收一个参数(数字类型),返回其2倍的值  \r\nx -> 2 * x  \r\n  \r\n// 3. 接受2个参数(数字),并返回他们的差值  \r\n(x, y) -> x – y  \r\n  \r\n// 4. 接收2个int型整数,返回他们的和  \r\n(int x, int y) -> x + y  \r\n  \r\n// 5. 接受一个 string 对象,并在控制台打印,不返回任何值(看起来像是返回void)  \r\n(String s) -> System.out.print(s)\r\n```\r\n>基本的 Lambda 例子\r\n\r\n```\r\npackage test;\r\n\r\nimport java.util.Arrays;\r\nimport java.util.List;\r\n\r\n/**\r\n * Created by CaptainQR on 2018/10/15.\r\n */\r\npublic class Demo {\r\n	public static void main(String[] args) {\r\n		String[] strArr = {\"1\", \"2\", \"3\"};\r\n\r\n		List<String> list = Arrays.asList(strArr);\r\n\r\n		//传统方式\r\n		for (String lst:list){\r\n			System.out.println(lst);\r\n		}\r\n		System.out.println(\"-------------\");\r\n\r\n		//使用 lambda 表达式以及函数操作(functional operation)\r\n		list.forEach((lst)-> System.out.println(lst));\r\n		System.out.println(\"-------------\");\r\n\r\n		//在 Java 8 中使用双冒号操作符(double colon operator)\r\n		list.forEach(System.out::println);\r\n		System.out.println(\"-------------\");\r\n	}\r\n}\r\n```\r\n>从匿名类演变成 Lambda 表达式\r\n\r\n```\r\n// ================================================\r\nnew Thread(new Runnable() {  \r\n    @Override  \r\n    public void run() {  \r\n        System.out.println(\"Hello world !\");  \r\n    }  \r\n}).start();  \r\n------------------------\r\nnew Thread(() -> System.out.println(\"Hello world !\")).start();  \r\n  \r\n// ================================================\r\nRunnable race1 = new Runnable() {  \r\n    @Override  \r\n    public void run() {  \r\n        System.out.println(\"Hello world !\");  \r\n    }  \r\n};  \r\n------------------------\r\nRunnable race2 = () -> System.out.println(\"Hello world !\");  \r\n\r\n//================================================\r\nHeroChecker c1 = new HeroChecker() {\r\n    public boolean test(Hero h) {\r\n        return (h.hp>100 && h.damage<50);\r\n    }\r\n};\r\n------------------------\r\nHeroChecker c4 = h ->h.hp>100 && h.damage<50;\r\n```',`groups`='Java',`is_show`=0,`publish`=1,`summary`=''  WHERE  `id` = 224 [ RunTime:0.000640s ]
[ sql ] [ SQL ] SELECT COUNT(*) AS tp_count FROM `note` WHERE  `groups` = 'Java' LIMIT 1 [ RunTime:0.001183s ]
[ sql ] [ SQL ] UPDATE `groups`  SET `g_count`=8  WHERE  `groups` = 'Java' [ RunTime:0.000326s ]
[ sql ] [ SQL ] SELECT COUNT(*) AS tp_count FROM `note` WHERE  `groups` = 'Java' LIMIT 1 [ RunTime:0.000956s ]
[ sql ] [ SQL ] UPDATE `groups`  SET `g_count`=8  WHERE  `groups` = 'Java' [ RunTime:0.000340s ]
---------------------------------------------------------------
[ 2018-10-24T22:31:10+08:00 ] 74.120.168.12 74.120.168.12 GET /daily/admin/note/shownote/id/224.html
[ info ] qingrang.top/daily/admin/note/shownote/id/224.html [运行时间：0.055922s][吞吐率：17.88req/s] [内存消耗：1,982.07kb] [文件加载：55]
[ info ] [ LANG ] /var/www/html/daily/thinkphp/lang/zh-cn.php
[ info ] [ ROUTE ] array (
  'type' => 'module',
  'module' => 
  array (
    0 => 'admin',
    1 => 'note',
    2 => 'shownote',
  ),
)
[ info ] [ HEADER ] array (
  'host' => 'qingrang.top',
  'cache-control' => 'max-age=0',
  'upgrade-insecure-requests' => '1',
  'user-agent' => 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/69.0.3497.100 Safari/537.36',
  'accept' => 'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8',
  'referer' => 'http://qingrang.top/daily/admin/note/editNote/id/224',
  'accept-encoding' => 'gzip, deflate',
  'accept-language' => 'zh-CN,zh;q=0.9,la;q=0.8,en;q=0.7,lb;q=0.6',
  'cookie' => 'Hm_lvt_1769181352e9adc950166aada465644e=1539846308,1540133692,1540187497,1540387796; PHPSESSID=li1tggbg6dkjvd196u9vtqo7q4',
  'connection' => 'close',
)
[ info ] [ PARAM ] array (
  'id' => '224',
)
[ info ] [ SESSION ] INIT array (
  'id' => '',
  'var_session_id' => '',
  'prefix' => 'think',
  'type' => '',
  'auto_start' => true,
)
[ info ] [ RUN ] app\admin\controller\Note->showNote[ /var/www/html/daily/application/admin/controller/Note.php ]
[ info ] [ DB ] INIT mysql
[ info ] [ VIEW ] /var/www/html/daily/application/admin/view/note/shownote.html [ array (
  0 => 'note',
  1 => 'groups',
) ]
[ info ] [ LOG ] INIT File
[ sql ] [ DB ] CONNECT:[ UseTime:0.000418s ] mysql:host=74.120.168.12;dbname=diary;charset=utf8
[ sql ] [ SQL ] SHOW COLUMNS FROM `note` [ RunTime:0.001370s ]
[ sql ] [ SQL ] SELECT * FROM `note` WHERE  `id` = 224 LIMIT 1 [ RunTime:0.000385s ]
[ sql ] [ SQL ] SHOW COLUMNS FROM `groups` [ RunTime:0.001420s ]
[ sql ] [ SQL ] SELECT * FROM `groups` [ RunTime:0.000313s ]
---------------------------------------------------------------
[ 2018-10-24T22:31:16+08:00 ] 74.120.168.12 74.120.168.12 GET /daily/admin/note/editNote/id/29
[ info ] qingrang.top/daily/admin/note/editNote/id/29 [运行时间：0.055941s][吞吐率：17.88req/s] [内存消耗：2,029.16kb] [文件加载：56]
[ info ] [ LANG ] /var/www/html/daily/thinkphp/lang/zh-cn.php
[ info ] [ ROUTE ] array (
  'type' => 'module',
  'module' => 
  array (
    0 => 'admin',
    1 => 'note',
    2 => 'editNote',
  ),
)
[ info ] [ HEADER ] array (
  'host' => 'qingrang.top',
  'upgrade-insecure-requests' => '1',
  'user-agent' => 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/69.0.3497.100 Safari/537.36',
  'accept' => 'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8',
  'referer' => 'http://qingrang.top/daily/admin/note',
  'accept-encoding' => 'gzip, deflate',
  'accept-language' => 'zh-CN,zh;q=0.9,la;q=0.8,en;q=0.7,lb;q=0.6',
  'cookie' => 'Hm_lvt_1769181352e9adc950166aada465644e=1539846308,1540133692,1540187497,1540387796; PHPSESSID=li1tggbg6dkjvd196u9vtqo7q4',
  'connection' => 'close',
)
[ info ] [ PARAM ] array (
  'id' => '29',
)
[ info ] [ SESSION ] INIT array (
  'id' => '',
  'var_session_id' => '',
  'prefix' => 'think',
  'type' => '',
  'auto_start' => true,
)
[ info ] [ RUN ] app\admin\controller\Note->editNote[ /var/www/html/daily/application/admin/controller/Note.php ]
[ info ] [ DB ] INIT mysql
[ info ] [ VIEW ] /var/www/html/daily/application/admin/view/note/editnote.html [ array (
  0 => 'note',
  1 => 'groups',
) ]
[ info ] [ LOG ] INIT File
[ sql ] [ DB ] CONNECT:[ UseTime:0.000544s ] mysql:host=74.120.168.12;dbname=diary;charset=utf8
[ sql ] [ SQL ] SHOW COLUMNS FROM `note` [ RunTime:0.001318s ]
[ sql ] [ SQL ] SELECT * FROM `note` WHERE  `id` = 29 LIMIT 1 [ RunTime:0.000468s ]
[ sql ] [ SQL ] SHOW COLUMNS FROM `groups` [ RunTime:0.000897s ]
[ sql ] [ SQL ] SELECT * FROM `groups` [ RunTime:0.000298s ]
---------------------------------------------------------------
[ 2018-10-24T22:31:18+08:00 ] 74.120.168.12 74.120.168.12 GET /daily/admin/note/editNote/id/93
[ info ] qingrang.top/daily/admin/note/editNote/id/93 [运行时间：0.067103s][吞吐率：14.90req/s] [内存消耗：2,028.71kb] [文件加载：56]
[ info ] [ LANG ] /var/www/html/daily/thinkphp/lang/zh-cn.php
[ info ] [ ROUTE ] array (
  'type' => 'module',
  'module' => 
  array (
    0 => 'admin',
    1 => 'note',
    2 => 'editNote',
  ),
)
[ info ] [ HEADER ] array (
  'host' => 'qingrang.top',
  'upgrade-insecure-requests' => '1',
  'user-agent' => 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/69.0.3497.100 Safari/537.36',
  'accept' => 'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8',
  'referer' => 'http://qingrang.top/daily/admin/note',
  'accept-encoding' => 'gzip, deflate',
  'accept-language' => 'zh-CN,zh;q=0.9,la;q=0.8,en;q=0.7,lb;q=0.6',
  'cookie' => 'Hm_lvt_1769181352e9adc950166aada465644e=1539846308,1540133692,1540187497,1540387796; PHPSESSID=li1tggbg6dkjvd196u9vtqo7q4',
  'connection' => 'close',
)
[ info ] [ PARAM ] array (
  'id' => '93',
)
[ info ] [ SESSION ] INIT array (
  'id' => '',
  'var_session_id' => '',
  'prefix' => 'think',
  'type' => '',
  'auto_start' => true,
)
[ info ] [ RUN ] app\admin\controller\Note->editNote[ /var/www/html/daily/application/admin/controller/Note.php ]
[ info ] [ DB ] INIT mysql
[ info ] [ VIEW ] /var/www/html/daily/application/admin/view/note/editnote.html [ array (
  0 => 'note',
  1 => 'groups',
) ]
[ info ] [ LOG ] INIT File
[ sql ] [ DB ] CONNECT:[ UseTime:0.000739s ] mysql:host=74.120.168.12;dbname=diary;charset=utf8
[ sql ] [ SQL ] SHOW COLUMNS FROM `note` [ RunTime:0.002408s ]
[ sql ] [ SQL ] SELECT * FROM `note` WHERE  `id` = 93 LIMIT 1 [ RunTime:0.000535s ]
[ sql ] [ SQL ] SHOW COLUMNS FROM `groups` [ RunTime:0.001084s ]
[ sql ] [ SQL ] SELECT * FROM `groups` [ RunTime:0.000358s ]
---------------------------------------------------------------
[ 2018-10-24T22:31:31+08:00 ] 74.120.168.12 74.120.168.12 POST /daily/admin/note/updatenote/id/29.html
[ info ] qingrang.top/daily/admin/note/updatenote/id/29.html [运行时间：0.062226s][吞吐率：16.07req/s] [内存消耗：2,056.18kb] [文件加载：58]
[ info ] [ LANG ] /var/www/html/daily/thinkphp/lang/zh-cn.php
[ info ] [ ROUTE ] array (
  'type' => 'module',
  'module' => 
  array (
    0 => 'admin',
    1 => 'note',
    2 => 'updatenote',
  ),
)
[ info ] [ HEADER ] array (
  'host' => 'qingrang.top',
  'content-length' => '2972',
  'cache-control' => 'max-age=0',
  'origin' => 'http://qingrang.top',
  'upgrade-insecure-requests' => '1',
  'content-type' => 'application/x-www-form-urlencoded',
  'user-agent' => 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/69.0.3497.100 Safari/537.36',
  'accept' => 'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8',
  'referer' => 'http://qingrang.top/daily/admin/note/editNote/id/29',
  'accept-encoding' => 'gzip, deflate',
  'accept-language' => 'zh-CN,zh;q=0.9,la;q=0.8,en;q=0.7,lb;q=0.6',
  'cookie' => 'Hm_lvt_1769181352e9adc950166aada465644e=1539846308,1540133692,1540187497,1540387796; PHPSESSID=li1tggbg6dkjvd196u9vtqo7q4',
  'connection' => 'close',
)
[ info ] [ PARAM ] array (
  'summary' => '',
  'content' => '# Java 正则
## Pattern，Matcher，PatternSyntaxException
>Pattern 类：

pattern 对象是一个正则表达式的编译表示。Pattern 类没有公共构造方法。要创建一个 Pattern 对象，你必须首先调用其公共静态编译方法，它返回一个 Pattern 对象。该方法接受一个正则表达式作为它的第一个参数。

>Matcher 类：

Matcher 对象是对输入字符串进行解释和匹配操作的引擎。与Pattern 类一样，Matcher 也没有公共构造方法。你需要调用 Pattern 对象的 matcher 方法来获得一个 Matcher 对象。

>PatternSyntaxException 类：

PatternSyntaxException 是一个非强制异常类，它表示一个正则表达式模式中的语法错误。

## 查找字符串中是否包含了子串
以下实例中使用了正则表达式 .\\*runoob.* 用于查找字符串中是否包了 runoob 子串：
```java
      String content = "I am noob from runoob.com.";
      String pattern = ".*runoob.*";
      boolean isMatch = Pattern.matches(pattern, content);
      System.out.println("字符串中是否包含了 \\\'runoob\\\' 子字符串? " + isMatch);
```
实例输出结果为：
字符串中是否包含了 \\\'runoob\\\' 子字符串? true',
  'groups' => 'Java',
  'showsel' => '0',
  'showse2' => '1',
  'id' => '29',
)
[ info ] [ SESSION ] INIT array (
  'id' => '',
  'var_session_id' => '',
  'prefix' => 'think',
  'type' => '',
  'auto_start' => true,
)
[ info ] [ RUN ] app\admin\controller\Note->updateNote[ /var/www/html/daily/application/admin/controller/Note.php ]
[ info ] [ DB ] INIT mysql
[ info ] [ CACHE ] INIT File
[ info ] [ LOG ] INIT File
[ sql ] [ DB ] CONNECT:[ UseTime:0.000581s ] mysql:host=74.120.168.12;dbname=diary;charset=utf8
[ sql ] [ SQL ] SHOW COLUMNS FROM `note` [ RunTime:0.001883s ]
[ sql ] [ SQL ] SELECT * FROM `note` WHERE  `id` = 29 LIMIT 1 [ RunTime:0.000601s ]
[ sql ] [ SQL ] SELECT `groups` FROM `note` WHERE  `id` = 29 LIMIT 1 [ RunTime:0.000378s ]
[ sql ] [ SQL ] SHOW COLUMNS FROM `groups` [ RunTime:0.000999s ]
[ sql ] [ SQL ] SELECT `parent_id` FROM `groups` WHERE  `groups` = 'Java' LIMIT 1 [ RunTime:0.000406s ]
[ sql ] [ SQL ] SELECT `groups` FROM `groups` WHERE  `id` = 2 LIMIT 1 [ RunTime:0.000606s ]
[ sql ] [ SQL ] UPDATE `note`  SET `id`=29,`p_id`=2,`title`='Java 正则\r',`content`='# Java 正则\r\n## Pattern，Matcher，PatternSyntaxException\r\n>Pattern 类：\r\n\r\npattern 对象是一个正则表达式的编译表示。Pattern 类没有公共构造方法。要创建一个 Pattern 对象，你必须首先调用其公共静态编译方法，它返回一个 Pattern 对象。该方法接受一个正则表达式作为它的第一个参数。\r\n\r\n>Matcher 类：\r\n\r\nMatcher 对象是对输入字符串进行解释和匹配操作的引擎。与Pattern 类一样，Matcher 也没有公共构造方法。你需要调用 Pattern 对象的 matcher 方法来获得一个 Matcher 对象。\r\n\r\n>PatternSyntaxException 类：\r\n\r\nPatternSyntaxException 是一个非强制异常类，它表示一个正则表达式模式中的语法错误。\r\n\r\n## 查找字符串中是否包含了子串\r\n以下实例中使用了正则表达式 .\\*runoob.* 用于查找字符串中是否包了 runoob 子串：\r\n```java\r\n      String content = \"I am noob from runoob.com.\";\r\n      String pattern = \".*runoob.*\";\r\n      boolean isMatch = Pattern.matches(pattern, content);\r\n      System.out.println(\"字符串中是否包含了 \\\'runoob\\\' 子字符串? \" + isMatch);\r\n```\r\n实例输出结果为：\r\n字符串中是否包含了 \\\'runoob\\\' 子字符串? true',`groups`='Java',`is_show`=0,`publish`=1,`summary`=''  WHERE  `id` = 29 [ RunTime:0.000484s ]
[ sql ] [ SQL ] SELECT COUNT(*) AS tp_count FROM `note` WHERE  `groups` = 'Java' LIMIT 1 [ RunTime:0.001034s ]
[ sql ] [ SQL ] UPDATE `groups`  SET `g_count`=8  WHERE  `groups` = 'Java' [ RunTime:0.000343s ]
[ sql ] [ SQL ] SELECT COUNT(*) AS tp_count FROM `note` WHERE  `groups` = 'Java' LIMIT 1 [ RunTime:0.001324s ]
[ sql ] [ SQL ] UPDATE `groups`  SET `g_count`=8  WHERE  `groups` = 'Java' [ RunTime:0.000414s ]
---------------------------------------------------------------
[ 2018-10-24T22:31:32+08:00 ] 74.120.168.12 74.120.168.12 GET /daily/admin/note/shownote/id/29.html
[ info ] qingrang.top/daily/admin/note/shownote/id/29.html [运行时间：0.058671s][吞吐率：17.04req/s] [内存消耗：1,981.16kb] [文件加载：55]
[ info ] [ LANG ] /var/www/html/daily/thinkphp/lang/zh-cn.php
[ info ] [ ROUTE ] array (
  'type' => 'module',
  'module' => 
  array (
    0 => 'admin',
    1 => 'note',
    2 => 'shownote',
  ),
)
[ info ] [ HEADER ] array (
  'host' => 'qingrang.top',
  'cache-control' => 'max-age=0',
  'upgrade-insecure-requests' => '1',
  'user-agent' => 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/69.0.3497.100 Safari/537.36',
  'accept' => 'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8',
  'referer' => 'http://qingrang.top/daily/admin/note/editNote/id/29',
  'accept-encoding' => 'gzip, deflate',
  'accept-language' => 'zh-CN,zh;q=0.9,la;q=0.8,en;q=0.7,lb;q=0.6',
  'cookie' => 'Hm_lvt_1769181352e9adc950166aada465644e=1539846308,1540133692,1540187497,1540387796; PHPSESSID=li1tggbg6dkjvd196u9vtqo7q4',
  'connection' => 'close',
)
[ info ] [ PARAM ] array (
  'id' => '29',
)
[ info ] [ SESSION ] INIT array (
  'id' => '',
  'var_session_id' => '',
  'prefix' => 'think',
  'type' => '',
  'auto_start' => true,
)
[ info ] [ RUN ] app\admin\controller\Note->showNote[ /var/www/html/daily/application/admin/controller/Note.php ]
[ info ] [ DB ] INIT mysql
[ info ] [ VIEW ] /var/www/html/daily/application/admin/view/note/shownote.html [ array (
  0 => 'note',
  1 => 'groups',
) ]
[ info ] [ LOG ] INIT File
[ sql ] [ DB ] CONNECT:[ UseTime:0.000464s ] mysql:host=74.120.168.12;dbname=diary;charset=utf8
[ sql ] [ SQL ] SHOW COLUMNS FROM `note` [ RunTime:0.001836s ]
[ sql ] [ SQL ] SELECT * FROM `note` WHERE  `id` = 29 LIMIT 1 [ RunTime:0.000593s ]
[ sql ] [ SQL ] SHOW COLUMNS FROM `groups` [ RunTime:0.001600s ]
[ sql ] [ SQL ] SELECT * FROM `groups` [ RunTime:0.000340s ]
---------------------------------------------------------------
[ 2018-10-24T22:31:36+08:00 ] 74.120.168.12 74.120.168.12 POST /daily/admin/note/updatenote/id/93.html
[ info ] qingrang.top/daily/admin/note/updatenote/id/93.html [运行时间：0.066112s][吞吐率：15.13req/s] [内存消耗：2,052.40kb] [文件加载：58]
[ info ] [ LANG ] /var/www/html/daily/thinkphp/lang/zh-cn.php
[ info ] [ ROUTE ] array (
  'type' => 'module',
  'module' => 
  array (
    0 => 'admin',
    1 => 'note',
    2 => 'updatenote',
  ),
)
[ info ] [ HEADER ] array (
  'host' => 'qingrang.top',
  'content-length' => '1504',
  'cache-control' => 'max-age=0',
  'origin' => 'http://qingrang.top',
  'upgrade-insecure-requests' => '1',
  'content-type' => 'application/x-www-form-urlencoded',
  'user-agent' => 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/69.0.3497.100 Safari/537.36',
  'accept' => 'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8',
  'referer' => 'http://qingrang.top/daily/admin/note/editNote/id/93',
  'accept-encoding' => 'gzip, deflate',
  'accept-language' => 'zh-CN,zh;q=0.9,la;q=0.8,en;q=0.7,lb;q=0.6',
  'cookie' => 'Hm_lvt_1769181352e9adc950166aada465644e=1539846308,1540133692,1540187497,1540387796; PHPSESSID=li1tggbg6dkjvd196u9vtqo7q4',
  'connection' => 'close',
)
[ info ] [ PARAM ] array (
  'summary' => '',
  'content' => '# MD5 加密(Java)
```java
public static String getMD5(String str) {
    	String md5="0";
        try {
            // 生成一个MD5加密计算摘要
            MessageDigest md = MessageDigest.getInstance("MD5");
            // 计算md5函数
            md.update(str.getBytes());
            // digest()最后确定返回md5 hash值，返回值为8为字符串。因为md5 hash值是16位的hex值，实际上就是8位的字符
            // BigInteger函数则将8位的字符串转换成16位hex值，用字符串来表示；得到字符串形式的hash值
            md5 = new BigInteger(1, md.digest()).toString(16);
            return md5;
        } catch (Exception e) {
            e.getMessage();
        }
        return md5;
    }
```',
  'groups' => 'Java',
  'showsel' => '0',
  'showse2' => '1',
  'id' => '93',
)
[ info ] [ SESSION ] INIT array (
  'id' => '',
  'var_session_id' => '',
  'prefix' => 'think',
  'type' => '',
  'auto_start' => true,
)
[ info ] [ RUN ] app\admin\controller\Note->updateNote[ /var/www/html/daily/application/admin/controller/Note.php ]
[ info ] [ DB ] INIT mysql
[ info ] [ CACHE ] INIT File
[ info ] [ LOG ] INIT File
[ sql ] [ DB ] CONNECT:[ UseTime:0.000515s ] mysql:host=74.120.168.12;dbname=diary;charset=utf8
[ sql ] [ SQL ] SHOW COLUMNS FROM `note` [ RunTime:0.001289s ]
[ sql ] [ SQL ] SELECT * FROM `note` WHERE  `id` = 93 LIMIT 1 [ RunTime:0.000441s ]
[ sql ] [ SQL ] SELECT `groups` FROM `note` WHERE  `id` = 93 LIMIT 1 [ RunTime:0.000335s ]
[ sql ] [ SQL ] SHOW COLUMNS FROM `groups` [ RunTime:0.000864s ]
[ sql ] [ SQL ] SELECT `parent_id` FROM `groups` WHERE  `groups` = 'Java' LIMIT 1 [ RunTime:0.000315s ]
[ sql ] [ SQL ] SELECT `groups` FROM `groups` WHERE  `id` = 2 LIMIT 1 [ RunTime:0.000287s ]
[ sql ] [ SQL ] UPDATE `note`  SET `id`=93,`p_id`=2,`title`='MD5 加密(Java)\r',`content`='# MD5 加密(Java)\r\n```java\r\npublic static String getMD5(String str) {\r\n    	String md5=\"0\";\r\n        try {\r\n            // 生成一个MD5加密计算摘要\r\n            MessageDigest md = MessageDigest.getInstance(\"MD5\");\r\n            // 计算md5函数\r\n            md.update(str.getBytes());\r\n            // digest()最后确定返回md5 hash值，返回值为8为字符串。因为md5 hash值是16位的hex值，实际上就是8位的字符\r\n            // BigInteger函数则将8位的字符串转换成16位hex值，用字符串来表示；得到字符串形式的hash值\r\n            md5 = new BigInteger(1, md.digest()).toString(16);\r\n            return md5;\r\n        } catch (Exception e) {\r\n            e.getMessage();\r\n        }\r\n        return md5;\r\n    }\r\n```',`groups`='Java',`is_show`=0,`publish`=1,`summary`=''  WHERE  `id` = 93 [ RunTime:0.000462s ]
[ sql ] [ SQL ] SELECT COUNT(*) AS tp_count FROM `note` WHERE  `groups` = 'Java' LIMIT 1 [ RunTime:0.001028s ]
[ sql ] [ SQL ] UPDATE `groups`  SET `g_count`=8  WHERE  `groups` = 'Java' [ RunTime:0.000328s ]
[ sql ] [ SQL ] SELECT COUNT(*) AS tp_count FROM `note` WHERE  `groups` = 'Java' LIMIT 1 [ RunTime:0.000948s ]
[ sql ] [ SQL ] UPDATE `groups`  SET `g_count`=8  WHERE  `groups` = 'Java' [ RunTime:0.000350s ]
---------------------------------------------------------------
[ 2018-10-24T22:31:37+08:00 ] 74.120.168.12 74.120.168.12 GET /daily/admin/note/shownote/id/93.html
[ info ] qingrang.top/daily/admin/note/shownote/id/93.html [运行时间：0.052944s][吞吐率：18.89req/s] [内存消耗：1,980.73kb] [文件加载：55]
[ info ] [ LANG ] /var/www/html/daily/thinkphp/lang/zh-cn.php
[ info ] [ ROUTE ] array (
  'type' => 'module',
  'module' => 
  array (
    0 => 'admin',
    1 => 'note',
    2 => 'shownote',
  ),
)
[ info ] [ HEADER ] array (
  'host' => 'qingrang.top',
  'cache-control' => 'max-age=0',
  'upgrade-insecure-requests' => '1',
  'user-agent' => 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/69.0.3497.100 Safari/537.36',
  'accept' => 'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8',
  'referer' => 'http://qingrang.top/daily/admin/note/editNote/id/93',
  'accept-encoding' => 'gzip, deflate',
  'accept-language' => 'zh-CN,zh;q=0.9,la;q=0.8,en;q=0.7,lb;q=0.6',
  'cookie' => 'Hm_lvt_1769181352e9adc950166aada465644e=1539846308,1540133692,1540187497,1540387796; PHPSESSID=li1tggbg6dkjvd196u9vtqo7q4',
  'connection' => 'close',
)
[ info ] [ PARAM ] array (
  'id' => '93',
)
[ info ] [ SESSION ] INIT array (
  'id' => '',
  'var_session_id' => '',
  'prefix' => 'think',
  'type' => '',
  'auto_start' => true,
)
[ info ] [ RUN ] app\admin\controller\Note->showNote[ /var/www/html/daily/application/admin/controller/Note.php ]
[ info ] [ DB ] INIT mysql
[ info ] [ VIEW ] /var/www/html/daily/application/admin/view/note/shownote.html [ array (
  0 => 'note',
  1 => 'groups',
) ]
[ info ] [ LOG ] INIT File
[ sql ] [ DB ] CONNECT:[ UseTime:0.000535s ] mysql:host=74.120.168.12;dbname=diary;charset=utf8
[ sql ] [ SQL ] SHOW COLUMNS FROM `note` [ RunTime:0.001469s ]
[ sql ] [ SQL ] SELECT * FROM `note` WHERE  `id` = 93 LIMIT 1 [ RunTime:0.000495s ]
[ sql ] [ SQL ] SHOW COLUMNS FROM `groups` [ RunTime:0.001058s ]
[ sql ] [ SQL ] SELECT * FROM `groups` [ RunTime:0.000289s ]
---------------------------------------------------------------
[ 2018-10-24T22:31:43+08:00 ] 74.120.168.12 74.120.168.12 GET /daily/admin/note
[ info ] qingrang.top/daily/admin/note [运行时间：0.085169s][吞吐率：11.74req/s] [内存消耗：2,249.28kb] [文件加载：56]
[ info ] [ LANG ] /var/www/html/daily/thinkphp/lang/zh-cn.php
[ info ] [ ROUTE ] array (
  'type' => 'module',
  'module' => 
  array (
    0 => 'admin',
    1 => 'note',
    2 => NULL,
  ),
)
[ info ] [ HEADER ] array (
  'host' => 'qingrang.top',
  'cache-control' => 'max-age=0',
  'upgrade-insecure-requests' => '1',
  'user-agent' => 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/69.0.3497.100 Safari/537.36',
  'accept' => 'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8',
  'referer' => 'http://qingrang.top/daily/admin/login/index.html',
  'accept-encoding' => 'gzip, deflate',
  'accept-language' => 'zh-CN,zh;q=0.9,la;q=0.8,en;q=0.7,lb;q=0.6',
  'cookie' => 'Hm_lvt_1769181352e9adc950166aada465644e=1539846308,1540133692,1540187497,1540387796; PHPSESSID=li1tggbg6dkjvd196u9vtqo7q4',
  'connection' => 'close',
)
[ info ] [ PARAM ] array (
)
[ info ] [ SESSION ] INIT array (
  'id' => '',
  'var_session_id' => '',
  'prefix' => 'think',
  'type' => '',
  'auto_start' => true,
)
[ info ] [ RUN ] app\admin\controller\Note->notelst[ /var/www/html/daily/application/admin/controller/Note.php ]
[ info ] [ DB ] INIT mysql
[ info ] [ VIEW ] /var/www/html/daily/application/admin/view/note/notelst.html [ array (
  0 => 'stickList',
  1 => 'hide',
  2 => 'list',
  3 => 'list_new',
  4 => 'groups',
  5 => 'groups0',
  6 => 'groups1',
  7 => 'groups2',
  8 => 'count',
  9 => 'year',
  10 => 'default_num',
) ]
[ info ] [ LOG ] INIT File
[ sql ] [ DB ] CONNECT:[ UseTime:0.000829s ] mysql:host=74.120.168.12;dbname=diary;charset=utf8
[ sql ] [ SQL ] SHOW COLUMNS FROM `note` [ RunTime:0.001974s ]
[ sql ] [ SQL ] SELECT * FROM `note` WHERE  `groups` <> 'Personal'  AND `is_show` = 1 ORDER BY date desc,id desc [ RunTime:0.003279s ]
[ sql ] [ SQL ] SELECT * FROM `note` WHERE  `groups` <> 'Personal' ORDER BY id desc LIMIT 5 [ RunTime:0.000701s ]
[ sql ] [ SQL ] SHOW COLUMNS FROM `config` [ RunTime:0.001538s ]
[ sql ] [ SQL ] SELECT * FROM `config` WHERE  `name` = 'hide' LIMIT 1 [ RunTime:0.000410s ]
[ sql ] [ SQL ] SELECT * FROM `note` WHERE  `id` < 5 [ RunTime:0.000542s ]
[ sql ] [ SQL ] SHOW COLUMNS FROM `groups` [ RunTime:0.001127s ]
[ sql ] [ SQL ] SELECT * FROM `groups` [ RunTime:0.000400s ]
[ sql ] [ SQL ] SELECT * FROM `groups` WHERE  `parent_id` = 0  AND `id` <> 2 ORDER BY `groups` [ RunTime:0.000492s ]
[ sql ] [ SQL ] SELECT `groups` FROM `groups` WHERE  `parent_id` = 1 [ RunTime:0.000517s ]
[ sql ] [ SQL ] SELECT * FROM `groups` WHERE  `parent_id` = 2 ORDER BY `groups` [ RunTime:0.000452s ]
[ sql ] [ SQL ] SELECT COUNT(*) AS tp_count FROM `note` WHERE  `groups` = 'Default' LIMIT 1 [ RunTime:0.001404s ]
[ sql ] [ SQL ] SELECT COUNT(*) AS tp_count FROM `note` LIMIT 1 [ RunTime:0.000315s ]
[ sql ] [ SQL ] SHOW COLUMNS FROM `yearlist` [ RunTime:0.001301s ]
[ sql ] [ SQL ] SELECT DISTINCT  `year` FROM `yearlist` ORDER BY year desc [ RunTime:0.000723s ]
---------------------------------------------------------------
[ 2018-10-24T22:32:25+08:00 ] 74.120.168.12 74.120.168.12 GET /daily/admin/note/shownote/id/32.html
[ info ] qingrang.top/daily/admin/note/shownote/id/32.html [运行时间：0.052963s][吞吐率：18.88req/s] [内存消耗：2,039.82kb] [文件加载：55]
[ info ] [ LANG ] /var/www/html/daily/thinkphp/lang/zh-cn.php
[ info ] [ ROUTE ] array (
  'type' => 'module',
  'module' => 
  array (
    0 => 'admin',
    1 => 'note',
    2 => 'shownote',
  ),
)
[ info ] [ HEADER ] array (
  'host' => 'qingrang.top',
  'upgrade-insecure-requests' => '1',
  'user-agent' => 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/69.0.3497.100 Safari/537.36',
  'accept' => 'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8',
  'referer' => 'http://qingrang.top/daily/admin/note',
  'accept-encoding' => 'gzip, deflate',
  'accept-language' => 'zh-CN,zh;q=0.9,la;q=0.8,en;q=0.7,lb;q=0.6',
  'cookie' => 'Hm_lvt_1769181352e9adc950166aada465644e=1539846308,1540133692,1540187497,1540387796; PHPSESSID=li1tggbg6dkjvd196u9vtqo7q4',
  'connection' => 'close',
)
[ info ] [ PARAM ] array (
  'id' => '32',
)
[ info ] [ SESSION ] INIT array (
  'id' => '',
  'var_session_id' => '',
  'prefix' => 'think',
  'type' => '',
  'auto_start' => true,
)
[ info ] [ RUN ] app\admin\controller\Note->showNote[ /var/www/html/daily/application/admin/controller/Note.php ]
[ info ] [ DB ] INIT mysql
[ info ] [ VIEW ] /var/www/html/daily/application/admin/view/note/shownote.html [ array (
  0 => 'note',
  1 => 'groups',
) ]
[ info ] [ LOG ] INIT File
[ sql ] [ DB ] CONNECT:[ UseTime:0.000535s ] mysql:host=74.120.168.12;dbname=diary;charset=utf8
[ sql ] [ SQL ] SHOW COLUMNS FROM `note` [ RunTime:0.001292s ]
[ sql ] [ SQL ] SELECT * FROM `note` WHERE  `id` = 32 LIMIT 1 [ RunTime:0.000512s ]
[ sql ] [ SQL ] SHOW COLUMNS FROM `groups` [ RunTime:0.001044s ]
[ sql ] [ SQL ] SELECT * FROM `groups` [ RunTime:0.000303s ]
---------------------------------------------------------------
[ 2018-10-24T22:35:45+08:00 ] 74.120.168.12 74.120.168.12 GET /daily/admin/note/editnote/id/210.html
[ info ] qingrang.top/daily/admin/note/editnote/id/210.html [运行时间：0.054231s][吞吐率：18.44req/s] [内存消耗：2,053.56kb] [文件加载：56]
[ info ] [ LANG ] /var/www/html/daily/thinkphp/lang/zh-cn.php
[ info ] [ ROUTE ] array (
  'type' => 'module',
  'module' => 
  array (
    0 => 'admin',
    1 => 'note',
    2 => 'editnote',
  ),
)
[ info ] [ HEADER ] array (
  'host' => 'qingrang.top',
  'upgrade-insecure-requests' => '1',
  'user-agent' => 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/69.0.3497.100 Safari/537.36',
  'accept' => 'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8',
  'referer' => 'http://qingrang.top/daily/admin/note',
  'accept-encoding' => 'gzip, deflate',
  'accept-language' => 'zh-CN,zh;q=0.9,la;q=0.8,en;q=0.7,lb;q=0.6',
  'cookie' => 'Hm_lvt_1769181352e9adc950166aada465644e=1539846308,1540133692,1540187497,1540387796; PHPSESSID=li1tggbg6dkjvd196u9vtqo7q4',
  'connection' => 'close',
)
[ info ] [ PARAM ] array (
  'id' => '210',
)
[ info ] [ SESSION ] INIT array (
  'id' => '',
  'var_session_id' => '',
  'prefix' => 'think',
  'type' => '',
  'auto_start' => true,
)
[ info ] [ RUN ] app\admin\controller\Note->editNote[ /var/www/html/daily/application/admin/controller/Note.php ]
[ info ] [ DB ] INIT mysql
[ info ] [ VIEW ] /var/www/html/daily/application/admin/view/note/editnote.html [ array (
  0 => 'note',
  1 => 'groups',
) ]
[ info ] [ LOG ] INIT File
[ sql ] [ DB ] CONNECT:[ UseTime:0.000589s ] mysql:host=74.120.168.12;dbname=diary;charset=utf8
[ sql ] [ SQL ] SHOW COLUMNS FROM `note` [ RunTime:0.001590s ]
[ sql ] [ SQL ] SELECT * FROM `note` WHERE  `id` = 210 LIMIT 1 [ RunTime:0.000450s ]
[ sql ] [ SQL ] SHOW COLUMNS FROM `groups` [ RunTime:0.000905s ]
[ sql ] [ SQL ] SELECT * FROM `groups` [ RunTime:0.000281s ]
---------------------------------------------------------------
[ 2018-10-24T22:37:39+08:00 ] 74.120.168.12 74.120.168.12 POST /daily/admin/note/updatenote/id/210.html
[ info ] qingrang.top/daily/admin/note/updatenote/id/210.html [运行时间：0.058011s][吞吐率：17.24req/s] [内存消耗：2,122.48kb] [文件加载：58]
[ info ] [ LANG ] /var/www/html/daily/thinkphp/lang/zh-cn.php
[ info ] [ ROUTE ] array (
  'type' => 'module',
  'module' => 
  array (
    0 => 'admin',
    1 => 'note',
    2 => 'updatenote',
  ),
)
[ info ] [ HEADER ] array (
  'host' => 'qingrang.top',
  'content-length' => '26647',
  'cache-control' => 'max-age=0',
  'origin' => 'http://qingrang.top',
  'upgrade-insecure-requests' => '1',
  'content-type' => 'application/x-www-form-urlencoded',
  'user-agent' => 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/69.0.3497.100 Safari/537.36',
  'accept' => 'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8',
  'referer' => 'http://qingrang.top/daily/admin/note/editnote/id/210.html',
  'accept-encoding' => 'gzip, deflate',
  'accept-language' => 'zh-CN,zh;q=0.9,la;q=0.8,en;q=0.7,lb;q=0.6',
  'cookie' => 'Hm_lvt_1769181352e9adc950166aada465644e=1539846308,1540133692,1540187497,1540387796; PHPSESSID=li1tggbg6dkjvd196u9vtqo7q4',
  'connection' => 'close',
)
[ info ] [ PARAM ] array (
  'summary' => '20 个最常用的、最基础数据结构与算法',
  'content' => '# 数据结构与算法之美
`数据结构` `算法`

[TOC]
## 一. 简介
>什么是数据结构？什么是算法？

数据结构就是指一组数据的存储结构。算法就是操作数据的一组方法。
>数据结构和算法有什么关系呢？

这是因为，数据结构和算法是相辅相成的。数据结构是为算法服务的，算法也需要作用在特定的数据结构之上。

>数据结构和算法的知识体系 - 思维导图

![数据结构和算法的知识体系](http://p0tymq1rr.bkt.clouddn.com/daily/180928/A7fFlBkGHG.jpg)

>20 个最常用的、最基础数据结构与算法

10 个数据结构：数组、链表、栈、队列、散列表、二叉树、堆、跳表、图、Trie 树；

10 个算法：递归、排序、二分查找、搜索、哈希算法、贪心算法、分治算法、回溯算法、动态规划、字符串匹配算法。

## 二. 复杂度分析
### 1. 什么是复杂度分析？
数据结构和算法解决是“如何让计算机更快时间、更省空间的解决问题”。因此需从执行时间和占用空间两个维度来评估数据结构和算法的性能。分别用时间复杂度和空间复杂度两个概念来描述性能问题，二者统称为复杂度。复杂度描述的是算法执行时间（或占用空间）与数据规模的增长关系。可以粗略地表示，越高阶复杂度的算法，执行效率越低。

常见的复杂度并不多，从低阶到高阶有：O(1)、O(logn)、O(n)、O(nlogn)、O(n2 )。

![常见的复杂度](http://p0tymq1rr.bkt.clouddn.com/daily/181007/29BeCEjAmF.png)
### 2. 为什么要进行复杂度分析？
1.和性能测试相比，复杂度分析有不依赖执行环境、成本低、效率高、易操作、指导性强的特点。
2.掌握复杂度分析，将能编写出性能更优的代码，有利于降低系统开发和维护成本。
### 3. 如何进行复杂度分析？
#### 大 O 表示法
>示例

从 CPU 的角度来看，这段代码的每一行都执行着类似的操作：读数据-运算-写数据。尽管每行代码对应的 CPU 执行的个数、执行的时间都不一样，但是，我们这里只是粗略估计，所以可以假设每行代码执行的时间都一样，为 unit_time。在这个假设的基础之上，这两段代码的总执行时间是多少呢？

```
//估算一下这段代码的执行时间。
int cal(int n) {
  int sum = 0;
  int i = 1;
  for (; i <= n; ++i) {
    sum = sum + i;
  }
  return sum;
}
```

第 2、3 行代码分别需要 1 个 unit_time 的执行时间，第 4、5 行都运行了 n 遍，所以需要 2n\\*unit_time 的执行时间，所以这段代码总的执行时间就是 (2n+2)\\*unit_time。

```
//估算一下这段代码的执行时间
int cal(int n) {
  int sum = 0;
  int i = 1;
  int j = 1;
  for (; i <= n; ++i) {
    j = 1;
    for (; j <= n; ++j) {
      sum = sum +  i * j;
    }
   }
 }
```

执行时间：$$T(n) = (2n^2+2n+3)\\*unit\\\\_time$$

结合以上两个例子可以看出来：**所有代码的执行时间 T(n) 与每行代码的执行次数成正比**。

我们可以把这个规律总结成一个公式，即，大 O 表示法：

$$T(n) = O(f(n))$$

T(n) 表示代码执行的时间；n 表示数据规模的大小；f(n) 表示每行代码执行的次数总和。公式中的 O，表示代码的执行时间 T(n) 与 f(n) 表达式成正比。

所以，第一个例子中的 $$T(n) = O(2n+2)$$，第二个例子中的 $$T(n) = O(2n^2+2n+3)$$。这就是大 O 时间复杂度表示法。

**大 O 时间复杂度**实际上并不具体表示代码真正的执行时间，而是**表示代码执行时间随数据规模增长的变化趋势**，所以，也叫作渐进时间复杂度（asymptotic time complexity），简称**时间复杂度**。

当 n 很大时，你可以把它想象成 10000、100000。而**公式中的低阶、常量、系数三部分并不左右增长趋势**，所以都可以忽略。我们**只需要记录一个最大量级**就可以了。

如果用大 O 表示法表示刚讲的那两段代码的时间复杂度，就可以记为：$$T(n) = O(n)$$； $$T(n) = O(n^2)$$。

#### 如何分析一段代码的时间复杂度？

1. 只关注循环执行次数最多的一段代码
2. 加法法则：总复杂度等于量级最大的那段代码的复杂度
3. 乘法法则：嵌套代码的复杂度等于嵌套内外代码复杂度的乘积

#### 常见的复杂度量级

![常见的复杂度量级](http://p0tymq1rr.bkt.clouddn.com/daily/181007/3CmEAm6d1d.png)

对于刚罗列的复杂度量级，可以粗略地分为两类，**多项式量级**和**非多项式量级**。其中，非多项式量级只有两个：$$O(2^n)$$ 和 $$O(n!)$$。

我们把时间复杂度为非多项式量级的算法问题叫作 NP（Non-Deterministic Polynomial，非确定多项式）问题。

当数据规模 n 越来越大时，非多项式量级算法的执行时间会急剧增加，求解问题的执行时间会无限增长。所以，**非多项式时间复杂度的算法其实是非常低效的算法**。因此，关于 NP 时间复杂度我就不展开讲了。我们主要来看几种常见的多项式时间复杂度。

#### 常见的多项式时间复杂度

>1.O(1)

首先你必须明确一个概念，O(1) 只是常量级时间复杂度的一种表示方法，并不是指只执行了一行代码。比如这段代码，即便有 3 行，它的时间复杂度也是 O(1），而不是 O(3)。
```
int i = 8;
int j = 6
int sum = i + j;
```
我稍微总结一下，**只要代码的执行时间不随 n 的增大而增长，这样代码的时间复杂度我们都记作 O(1)**。或者说，**一般情况下，只要算法中不存在循环语句、递归语句，即使有成千上万行的代码，其时间复杂度也是Ο(1)**。

>2.O(logn)、O(nlogn)

```
i=1;
while (i <= n)  {
  i = i * 2;
}
```
根据我们前面讲的复杂度分析方法，第三行代码是循环执行次数最多的。所以，我们只要能计算出这行代码被执行了多少次，就能知道整段代码的时间复杂度。

从代码中可以看出，变量 i 的值从 1 开始取，每循环一次就乘以 2。当大于 n 时，循环结束。还记得我们高中学过的等比数列吗？实际上，变量 i 的取值就是一个等比数列。如果我把它一个一个列出来，就应该是这个样子的：

![mark](http://p0tymq1rr.bkt.clouddn.com/daily/181007/8FJcBja6lK.png)

即 $$2^x=n$$，所以，我们只要知道 x 值是多少，就知道这行代码执行的次数了。

利用换底公式得：$$x=log_2n$$。

所以，这段代码的时间复杂度就是 $$T(n) = O(log_2n)$$。

```
//这段代码的时间复杂度是多少？
i=1;
while (i <= n)  {
  i = i * 3;
}
```
 $$O(log_3n)$$

实际上，不管是以 2 为底、以 3 为底，还是以 10 为底，我们可以把所有对数阶的时间复杂度都记为 $$O(logn)$$。为什么呢？

我们知道，对数之间是可以互相转换的，$$log_3n$$ 就等于 $$log_32 \\* log_2n$$，所以 $$O(log_3n) = O(C * log_2n)$$，其中 $$C=log_32$$ 是一个常量。基于我们前面的一个理论：在采用大 O 标记复杂度的时候，可以忽略系数，即 $$O(Cf(n)) = O(f(n))$$。所以，$$O(log_2n)$$ 就等于 $$O(log_3n)$$。

因此，**在对数阶时间复杂度的表示方法里，我们忽略对数的“底”**，统一表示为 $$O(logn)$$ 。

如果你理解了我前面讲的 $$O(logn)$$，那 $$O(nlogn)$$ 就很容易理解了。还记得我们刚讲的乘法法则吗？如果一段代码的时间复杂度是 $$O(logn)$$，我们循环执行 n 遍，时间复杂度就是 $$O(nlogn)$$ 了。而且，$$O(nlogn)$$ 也是一种非常常见的算法时间复杂度。比如，归并排序、快速排序的时间复杂度都是 $$O(nlogn)$$。

>3.O(m+n)、O(m*n)

```
int cal(int m, int n) {
  int sum_1 = 0;
  int i = 1;
  for (; i < m; ++i) {
    sum_1 = sum_1 + i;
  }

  int sum_2 = 0;
  int j = 1;
  for (; j < n; ++j) {
    sum_2 = sum_2 + j;
  }

  return sum_1 + sum_2;
}
```
从代码中可以看出，m 和 n 是表示两个数据规模。我们无法事先评估 m 和 n 谁的量级大，所以我们在表示复杂度的时候，就不能简单地利用加法法则，省略掉其中一个。所以，上面代码的时间复杂度就是 O(m+n)。

针对这种情况，原来的加法法则就不正确了，我们需要将加法规则改为：T1(m) + T2(n) = O(f(m) + g(n))。但是乘法法则继续有效：T1(m)\\*T2(n) = O(f(m) * f(n))。

#### 空间复杂度分析

空间复杂度全称就是渐进空间复杂度（asymptotic space complexity），表示算法的存储空间与数据规模之间的增长关系。

>示例

```
void print(int n) {
 int i = 0;
 int[] a = new int[n];
 for (i; i <n; ++i) {
   a[i] = i * i;
 }

 for (i = n-1; i >= 0; --i) {
   print out a[i]
 }
}
```

跟时间复杂度分析一样，我们可以看到，第 2 行代码中，我们申请了一个空间存储变量 i，但是它是常量阶的，跟数据规模 n 没有关系，所以我们可以忽略。第 3 行申请了一个大小为 n 的 int 类型数组，除此之外，剩下的代码都没有占用更多的空间，所以整段代码的空间复杂度就是 O(n)。

我们常见的空间复杂度就是 O(1)、O(n)、O(n2 )，像 O(logn)、O(nlogn) 这样的对数阶复杂度平时都用不到。而且，空间复杂度分析比时间复杂度分析要简单很多。所以，对于空间复杂度，掌握刚我说的这些内容已经足够了。
## 三. 最好、最坏、平均、均摊时间复杂度',
  'groups' => 'Algorithm',
  'showsel' => '1',
  'showse2' => '1',
  'id' => '210',
)
[ info ] [ SESSION ] INIT array (
  'id' => '',
  'var_session_id' => '',
  'prefix' => 'think',
  'type' => '',
  'auto_start' => true,
)
[ info ] [ RUN ] app\admin\controller\Note->updateNote[ /var/www/html/daily/application/admin/controller/Note.php ]
[ info ] [ DB ] INIT mysql
[ info ] [ CACHE ] INIT File
[ info ] [ LOG ] INIT File
[ sql ] [ DB ] CONNECT:[ UseTime:0.000493s ] mysql:host=74.120.168.12;dbname=diary;charset=utf8
[ sql ] [ SQL ] SHOW COLUMNS FROM `note` [ RunTime:0.001379s ]
[ sql ] [ SQL ] SELECT * FROM `note` WHERE  `id` = 210 LIMIT 1 [ RunTime:0.000447s ]
[ sql ] [ SQL ] SELECT `groups` FROM `note` WHERE  `id` = 210 LIMIT 1 [ RunTime:0.000315s ]
[ sql ] [ SQL ] SHOW COLUMNS FROM `groups` [ RunTime:0.000972s ]
[ sql ] [ SQL ] SELECT `parent_id` FROM `groups` WHERE  `groups` = 'Algorithm' LIMIT 1 [ RunTime:0.000294s ]
[ sql ] [ SQL ] SELECT `groups` FROM `groups` WHERE  `id` = 2 LIMIT 1 [ RunTime:0.000276s ]
[ sql ] [ SQL ] UPDATE `note`  SET `id`=210,`p_id`=2,`title`='数据结构与算法之美\r',`content`='# 数据结构与算法之美\r\n`数据结构` `算法`\r\n\r\n[TOC]\r\n## 一. 简介\r\n>什么是数据结构？什么是算法？\r\n\r\n数据结构就是指一组数据的存储结构。算法就是操作数据的一组方法。\r\n>数据结构和算法有什么关系呢？\r\n\r\n这是因为，数据结构和算法是相辅相成的。数据结构是为算法服务的，算法也需要作用在特定的数据结构之上。\r\n\r\n>数据结构和算法的知识体系 - 思维导图\r\n\r\n![数据结构和算法的知识体系](http://p0tymq1rr.bkt.clouddn.com/daily/180928/A7fFlBkGHG.jpg)\r\n\r\n>20 个最常用的、最基础数据结构与算法\r\n\r\n10 个数据结构：数组、链表、栈、队列、散列表、二叉树、堆、跳表、图、Trie 树；\r\n\r\n10 个算法：递归、排序、二分查找、搜索、哈希算法、贪心算法、分治算法、回溯算法、动态规划、字符串匹配算法。\r\n\r\n## 二. 复杂度分析\r\n### 1. 什么是复杂度分析？\r\n数据结构和算法解决是“如何让计算机更快时间、更省空间的解决问题”。因此需从执行时间和占用空间两个维度来评估数据结构和算法的性能。分别用时间复杂度和空间复杂度两个概念来描述性能问题，二者统称为复杂度。复杂度描述的是算法执行时间（或占用空间）与数据规模的增长关系。可以粗略地表示，越高阶复杂度的算法，执行效率越低。\r\n\r\n常见的复杂度并不多，从低阶到高阶有：O(1)、O(logn)、O(n)、O(nlogn)、O(n2 )。\r\n\r\n![常见的复杂度](http://p0tymq1rr.bkt.clouddn.com/daily/181007/29BeCEjAmF.png)\r\n### 2. 为什么要进行复杂度分析？\r\n1.和性能测试相比，复杂度分析有不依赖执行环境、成本低、效率高、易操作、指导性强的特点。\r\n2.掌握复杂度分析，将能编写出性能更优的代码，有利于降低系统开发和维护成本。\r\n### 3. 如何进行复杂度分析？\r\n#### 大 O 表示法\r\n>示例\r\n\r\n从 CPU 的角度来看，这段代码的每一行都执行着类似的操作：读数据-运算-写数据。尽管每行代码对应的 CPU 执行的个数、执行的时间都不一样，但是，我们这里只是粗略估计，所以可以假设每行代码执行的时间都一样，为 unit_time。在这个假设的基础之上，这两段代码的总执行时间是多少呢？\r\n\r\n```\r\n//估算一下这段代码的执行时间。\r\nint cal(int n) {\r\n  int sum = 0;\r\n  int i = 1;\r\n  for (; i <= n; ++i) {\r\n    sum = sum + i;\r\n  }\r\n  return sum;\r\n}\r\n```\r\n\r\n第 2、3 行代码分别需要 1 个 unit_time 的执行时间，第 4、5 行都运行了 n 遍，所以需要 2n\\*unit_time 的执行时间，所以这段代码总的执行时间就是 (2n+2)\\*unit_time。\r\n\r\n```\r\n//估算一下这段代码的执行时间\r\nint cal(int n) {\r\n  int sum = 0;\r\n  int i = 1;\r\n  int j = 1;\r\n  for (; i <= n; ++i) {\r\n    j = 1;\r\n    for (; j <= n; ++j) {\r\n      sum = sum +  i * j;\r\n    }\r\n   }\r\n }\r\n```\r\n\r\n执行时间：$$T(n) = (2n^2+2n+3)\\*unit\\\\_time$$\r\n\r\n结合以上两个例子可以看出来：**所有代码的执行时间 T(n) 与每行代码的执行次数成正比**。\r\n\r\n我们可以把这个规律总结成一个公式，即，大 O 表示法：\r\n\r\n$$T(n) = O(f(n))$$\r\n\r\nT(n) 表示代码执行的时间；n 表示数据规模的大小；f(n) 表示每行代码执行的次数总和。公式中的 O，表示代码的执行时间 T(n) 与 f(n) 表达式成正比。\r\n\r\n所以，第一个例子中的 $$T(n) = O(2n+2)$$，第二个例子中的 $$T(n) = O(2n^2+2n+3)$$。这就是大 O 时间复杂度表示法。\r\n\r\n**大 O 时间复杂度**实际上并不具体表示代码真正的执行时间，而是**表示代码执行时间随数据规模增长的变化趋势**，所以，也叫作渐进时间复杂度（asymptotic time complexity），简称**时间复杂度**。\r\n\r\n当 n 很大时，你可以把它想象成 10000、100000。而**公式中的低阶、常量、系数三部分并不左右增长趋势**，所以都可以忽略。我们**只需要记录一个最大量级**就可以了。\r\n\r\n如果用大 O 表示法表示刚讲的那两段代码的时间复杂度，就可以记为：$$T(n) = O(n)$$； $$T(n) = O(n^2)$$。\r\n\r\n#### 如何分析一段代码的时间复杂度？\r\n\r\n1. 只关注循环执行次数最多的一段代码\r\n2. 加法法则：总复杂度等于量级最大的那段代码的复杂度\r\n3. 乘法法则：嵌套代码的复杂度等于嵌套内外代码复杂度的乘积\r\n\r\n#### 常见的复杂度量级\r\n\r\n![常见的复杂度量级](http://p0tymq1rr.bkt.clouddn.com/daily/181007/3CmEAm6d1d.png)\r\n\r\n对于刚罗列的复杂度量级，可以粗略地分为两类，**多项式量级**和**非多项式量级**。其中，非多项式量级只有两个：$$O(2^n)$$ 和 $$O(n!)$$。\r\n\r\n我们把时间复杂度为非多项式量级的算法问题叫作 NP（Non-Deterministic Polynomial，非确定多项式）问题。\r\n\r\n当数据规模 n 越来越大时，非多项式量级算法的执行时间会急剧增加，求解问题的执行时间会无限增长。所以，**非多项式时间复杂度的算法其实是非常低效的算法**。因此，关于 NP 时间复杂度我就不展开讲了。我们主要来看几种常见的多项式时间复杂度。\r\n\r\n#### 常见的多项式时间复杂度\r\n\r\n>1.O(1)\r\n\r\n首先你必须明确一个概念，O(1) 只是常量级时间复杂度的一种表示方法，并不是指只执行了一行代码。比如这段代码，即便有 3 行，它的时间复杂度也是 O(1），而不是 O(3)。\r\n```\r\nint i = 8;\r\nint j = 6\r\nint sum = i + j;\r\n```\r\n我稍微总结一下，**只要代码的执行时间不随 n 的增大而增长，这样代码的时间复杂度我们都记作 O(1)**。或者说，**一般情况下，只要算法中不存在循环语句、递归语句，即使有成千上万行的代码，其时间复杂度也是Ο(1)**。\r\n\r\n>2.O(logn)、O(nlogn)\r\n\r\n```\r\ni=1;\r\nwhile (i <= n)  {\r\n  i = i * 2;\r\n}\r\n```\r\n根据我们前面讲的复杂度分析方法，第三行代码是循环执行次数最多的。所以，我们只要能计算出这行代码被执行了多少次，就能知道整段代码的时间复杂度。\r\n\r\n从代码中可以看出，变量 i 的值从 1 开始取，每循环一次就乘以 2。当大于 n 时，循环结束。还记得我们高中学过的等比数列吗？实际上，变量 i 的取值就是一个等比数列。如果我把它一个一个列出来，就应该是这个样子的：\r\n\r\n![mark](http://p0tymq1rr.bkt.clouddn.com/daily/181007/8FJcBja6lK.png)\r\n\r\n即 $$2^x=n$$，所以，我们只要知道 x 值是多少，就知道这行代码执行的次数了。\r\n\r\n利用换底公式得：$$x=log_2n$$。\r\n\r\n所以，这段代码的时间复杂度就是 $$T(n) = O(log_2n)$$。\r\n\r\n```\r\n//这段代码的时间复杂度是多少？\r\ni=1;\r\nwhile (i <= n)  {\r\n  i = i * 3;\r\n}\r\n```\r\n $$O(log_3n)$$\r\n\r\n实际上，不管是以 2 为底、以 3 为底，还是以 10 为底，我们可以把所有对数阶的时间复杂度都记为 $$O(logn)$$。为什么呢？\r\n\r\n我们知道，对数之间是可以互相转换的，$$log_3n$$ 就等于 $$log_32 \\* log_2n$$，所以 $$O(log_3n) = O(C * log_2n)$$，其中 $$C=log_32$$ 是一个常量。基于我们前面的一个理论：在采用大 O 标记复杂度的时候，可以忽略系数，即 $$O(Cf(n)) = O(f(n))$$。所以，$$O(log_2n)$$ 就等于 $$O(log_3n)$$。\r\n\r\n因此，**在对数阶时间复杂度的表示方法里，我们忽略对数的“底”**，统一表示为 $$O(logn)$$ 。\r\n\r\n如果你理解了我前面讲的 $$O(logn)$$，那 $$O(nlogn)$$ 就很容易理解了。还记得我们刚讲的乘法法则吗？如果一段代码的时间复杂度是 $$O(logn)$$，我们循环执行 n 遍，时间复杂度就是 $$O(nlogn)$$ 了。而且，$$O(nlogn)$$ 也是一种非常常见的算法时间复杂度。比如，归并排序、快速排序的时间复杂度都是 $$O(nlogn)$$。\r\n\r\n>3.O(m+n)、O(m*n)\r\n\r\n```\r\nint cal(int m, int n) {\r\n  int sum_1 = 0;\r\n  int i = 1;\r\n  for (; i < m; ++i) {\r\n    sum_1 = sum_1 + i;\r\n  }\r\n\r\n  int sum_2 = 0;\r\n  int j = 1;\r\n  for (; j < n; ++j) {\r\n    sum_2 = sum_2 + j;\r\n  }\r\n\r\n  return sum_1 + sum_2;\r\n}\r\n```\r\n从代码中可以看出，m 和 n 是表示两个数据规模。我们无法事先评估 m 和 n 谁的量级大，所以我们在表示复杂度的时候，就不能简单地利用加法法则，省略掉其中一个。所以，上面代码的时间复杂度就是 O(m+n)。\r\n\r\n针对这种情况，原来的加法法则就不正确了，我们需要将加法规则改为：T1(m) + T2(n) = O(f(m) + g(n))。但是乘法法则继续有效：T1(m)\\*T2(n) = O(f(m) * f(n))。\r\n\r\n#### 空间复杂度分析\r\n\r\n空间复杂度全称就是渐进空间复杂度（asymptotic space complexity），表示算法的存储空间与数据规模之间的增长关系。\r\n\r\n>示例\r\n\r\n```\r\nvoid print(int n) {\r\n int i = 0;\r\n int[] a = new int[n];\r\n for (i; i <n; ++i) {\r\n   a[i] = i * i;\r\n }\r\n\r\n for (i = n-1; i >= 0; --i) {\r\n   print out a[i]\r\n }\r\n}\r\n```\r\n\r\n跟时间复杂度分析一样，我们可以看到，第 2 行代码中，我们申请了一个空间存储变量 i，但是它是常量阶的，跟数据规模 n 没有关系，所以我们可以忽略。第 3 行申请了一个大小为 n 的 int 类型数组，除此之外，剩下的代码都没有占用更多的空间，所以整段代码的空间复杂度就是 O(n)。\r\n\r\n我们常见的空间复杂度就是 O(1)、O(n)、O(n2 )，像 O(logn)、O(nlogn) 这样的对数阶复杂度平时都用不到。而且，空间复杂度分析比时间复杂度分析要简单很多。所以，对于空间复杂度，掌握刚我说的这些内容已经足够了。\r\n## 三. 最好、最坏、平均、均摊时间复杂度',`groups`='Algorithm',`is_show`=1,`publish`=1,`summary`='20 个最常用的、最基础数据结构与算法'  WHERE  `id` = 210 [ RunTime:0.000676s ]
[ sql ] [ SQL ] SELECT COUNT(*) AS tp_count FROM `note` WHERE  `groups` = 'Algorithm' LIMIT 1 [ RunTime:0.001021s ]
[ sql ] [ SQL ] UPDATE `groups`  SET `g_count`=1  WHERE  `groups` = 'Algorithm' [ RunTime:0.000378s ]
[ sql ] [ SQL ] SELECT COUNT(*) AS tp_count FROM `note` WHERE  `groups` = 'Algorithm' LIMIT 1 [ RunTime:0.001087s ]
[ sql ] [ SQL ] UPDATE `groups`  SET `g_count`=1  WHERE  `groups` = 'Algorithm' [ RunTime:0.000324s ]
---------------------------------------------------------------
[ 2018-10-24T22:37:40+08:00 ] 74.120.168.12 74.120.168.12 GET /daily/admin/note/shownote/id/210.html
[ info ] qingrang.top/daily/admin/note/shownote/id/210.html [运行时间：0.057157s][吞吐率：17.50req/s] [内存消耗：1,989.43kb] [文件加载：55]
[ info ] [ LANG ] /var/www/html/daily/thinkphp/lang/zh-cn.php
[ info ] [ ROUTE ] array (
  'type' => 'module',
  'module' => 
  array (
    0 => 'admin',
    1 => 'note',
    2 => 'shownote',
  ),
)
[ info ] [ HEADER ] array (
  'host' => 'qingrang.top',
  'cache-control' => 'max-age=0',
  'upgrade-insecure-requests' => '1',
  'user-agent' => 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/69.0.3497.100 Safari/537.36',
  'accept' => 'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8',
  'referer' => 'http://qingrang.top/daily/admin/note/editnote/id/210.html',
  'accept-encoding' => 'gzip, deflate',
  'accept-language' => 'zh-CN,zh;q=0.9,la;q=0.8,en;q=0.7,lb;q=0.6',
  'cookie' => 'Hm_lvt_1769181352e9adc950166aada465644e=1539846308,1540133692,1540187497,1540387796; PHPSESSID=li1tggbg6dkjvd196u9vtqo7q4',
  'connection' => 'close',
)
[ info ] [ PARAM ] array (
  'id' => '210',
)
[ info ] [ SESSION ] INIT array (
  'id' => '',
  'var_session_id' => '',
  'prefix' => 'think',
  'type' => '',
  'auto_start' => true,
)
[ info ] [ RUN ] app\admin\controller\Note->showNote[ /var/www/html/daily/application/admin/controller/Note.php ]
[ info ] [ DB ] INIT mysql
[ info ] [ VIEW ] /var/www/html/daily/application/admin/view/note/shownote.html [ array (
  0 => 'note',
  1 => 'groups',
) ]
[ info ] [ LOG ] INIT File
[ sql ] [ DB ] CONNECT:[ UseTime:0.000467s ] mysql:host=74.120.168.12;dbname=diary;charset=utf8
[ sql ] [ SQL ] SHOW COLUMNS FROM `note` [ RunTime:0.001963s ]
[ sql ] [ SQL ] SELECT * FROM `note` WHERE  `id` = 210 LIMIT 1 [ RunTime:0.000664s ]
[ sql ] [ SQL ] SHOW COLUMNS FROM `groups` [ RunTime:0.001720s ]
[ sql ] [ SQL ] SELECT * FROM `groups` [ RunTime:0.000442s ]
---------------------------------------------------------------
[ 2018-10-24T23:43:18+08:00 ] 74.120.168.12 117.136.63.26 GET /daily/admin/show/shownote/id/210.html
[ info ] qingrang.top/daily/admin/show/shownote/id/210.html [运行时间：0.058493s][吞吐率：17.10req/s] [内存消耗：1,947.27kb] [文件加载：54]
[ info ] [ LANG ] /var/www/html/daily/thinkphp/lang/zh-cn.php
[ info ] [ ROUTE ] array (
  'type' => 'module',
  'module' => 
  array (
    0 => 'admin',
    1 => 'show',
    2 => 'shownote',
  ),
)
[ info ] [ HEADER ] array (
  'host' => 'qingrang.top',
  'connection' => 'keep-alive',
  'upgrade-insecure-requests' => '1',
  'user-agent' => 'Mozilla/5.0 (Linux; Android 8.1.0; OE106 Build/OPM1.171019.026) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/62.0.3202.84 Mobile Safari/537.36',
  'accept' => 'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8',
  'referer' => 'http://qingrang.top/daily/admin/show/notelst/groups/Algorithm.html',
  'accept-encoding' => 'gzip, deflate',
  'accept-language' => 'zh-CN,zh;q=0.9',
  'cookie' => 'Hm_lvt_1769181352e9adc950166aada465644e=1540256454,1540260910,1540344464,1540396075; Hm_lpvt_1769181352e9adc950166aada465644e=1540396112',
)
[ info ] [ PARAM ] array (
  'id' => '210',
)
[ info ] [ RUN ] app\admin\controller\Show->showNote[ /var/www/html/daily/application/admin/controller/Show.php ]
[ info ] [ DB ] INIT mysql
[ info ] [ VIEW ] /var/www/html/daily/application/admin/view/show/shownote.html [ array (
  0 => 'note',
  1 => 'groups',
) ]
[ info ] [ LOG ] INIT File
[ sql ] [ DB ] CONNECT:[ UseTime:0.000827s ] mysql:host=74.120.168.12;dbname=diary;charset=utf8
[ sql ] [ SQL ] SHOW COLUMNS FROM `note` [ RunTime:0.001926s ]
[ sql ] [ SQL ] SELECT * FROM `note` WHERE  `id` = 210 LIMIT 1 [ RunTime:0.000598s ]
[ sql ] [ SQL ] SHOW COLUMNS FROM `groups` [ RunTime:0.001074s ]
[ sql ] [ SQL ] SELECT * FROM `groups` [ RunTime:0.000345s ]
