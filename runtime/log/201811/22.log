---------------------------------------------------------------
[ 2018-11-22T18:23:42+08:00 ] 74.120.168.12 74.120.168.12 GET /daily/admin/login/index.html
[ info ] qingrang.top/daily/admin/login/index.html [运行时间：0.043337s][吞吐率：23.07req/s] [内存消耗：1,340.50kb] [文件加载：47]
[ info ] [ LANG ] /var/www/html/daily/thinkphp/lang/zh-cn.php
[ info ] [ ROUTE ] array (
  'type' => 'module',
  'module' => 
  array (
    0 => 'admin',
    1 => 'login',
    2 => 'index',
  ),
)
[ info ] [ HEADER ] array (
  'host' => 'qingrang.top',
  'cache-control' => 'max-age=0',
  'upgrade-insecure-requests' => '1',
  'user-agent' => 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/70.0.3538.102 Safari/537.36',
  'accept' => 'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8',
  'accept-encoding' => 'gzip, deflate',
  'accept-language' => 'zh-CN,zh;q=0.9,la;q=0.8,en;q=0.7,lb;q=0.6',
  'cookie' => 'Hm_lvt_1769181352e9adc950166aada465644e=1541082864,1541122974,1541171416,1542098176',
  'connection' => 'close',
)
[ info ] [ PARAM ] array (
)
[ info ] [ RUN ] app\admin\controller\Login->index[ /var/www/html/daily/application/admin/controller/Login.php ]
[ info ] [ VIEW ] /var/www/html/daily/application/admin/view/login/index.html [ array (
) ]
[ info ] [ LOG ] INIT File
---------------------------------------------------------------
[ 2018-11-22T18:24:22+08:00 ] 74.120.168.12 74.120.168.12 POST /daily/admin/login/index.html
[ info ] qingrang.top/daily/admin/login/index.html [运行时间：0.052025s][吞吐率：19.22req/s] [内存消耗：1,922.41kb] [文件加载：54]
[ info ] [ LANG ] /var/www/html/daily/thinkphp/lang/zh-cn.php
[ info ] [ ROUTE ] array (
  'type' => 'module',
  'module' => 
  array (
    0 => 'admin',
    1 => 'login',
    2 => 'index',
  ),
)
[ info ] [ HEADER ] array (
  'host' => 'qingrang.top',
  'content-length' => '8',
  'cache-control' => 'max-age=0',
  'origin' => 'http://qingrang.top',
  'upgrade-insecure-requests' => '1',
  'content-type' => 'application/x-www-form-urlencoded',
  'user-agent' => 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/70.0.3538.102 Safari/537.36',
  'accept' => 'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8',
  'referer' => 'http://qingrang.top/daily/admin/login/index.html',
  'accept-encoding' => 'gzip, deflate',
  'accept-language' => 'zh-CN,zh;q=0.9,la;q=0.8,en;q=0.7,lb;q=0.6',
  'cookie' => 'Hm_lvt_1769181352e9adc950166aada465644e=1541082864,1541122974,1541171416,1542098176',
  'connection' => 'close',
)
[ info ] [ PARAM ] array (
  'pwd' => 'shao',
)
[ info ] [ RUN ] app\admin\controller\Login->index[ /var/www/html/daily/application/admin/controller/Login.php ]
[ info ] [ DB ] INIT mysql
[ info ] [ SESSION ] INIT array (
  'id' => '',
  'var_session_id' => '',
  'prefix' => 'think',
  'type' => '',
  'auto_start' => true,
)
[ info ] [ LOG ] INIT File
[ sql ] [ DB ] CONNECT:[ UseTime:0.000772s ] mysql:host=74.120.168.12;dbname=diary;charset=utf8
[ sql ] [ SQL ] SHOW COLUMNS FROM `admin` [ RunTime:0.001998s ]
[ sql ] [ SQL ] SELECT * FROM `admin` WHERE  `id` = 1 LIMIT 1 [ RunTime:0.000475s ]
---------------------------------------------------------------
[ 2018-11-22T18:24:26+08:00 ] 74.120.168.12 74.120.168.12 GET /daily/admin/note
[ info ] qingrang.top/daily/admin/note [运行时间：0.074201s][吞吐率：13.48req/s] [内存消耗：2,302.72kb] [文件加载：56]
[ info ] [ LANG ] /var/www/html/daily/thinkphp/lang/zh-cn.php
[ info ] [ ROUTE ] array (
  'type' => 'module',
  'module' => 
  array (
    0 => 'admin',
    1 => 'note',
    2 => NULL,
  ),
)
[ info ] [ HEADER ] array (
  'host' => 'qingrang.top',
  'cache-control' => 'max-age=0',
  'upgrade-insecure-requests' => '1',
  'user-agent' => 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/70.0.3538.102 Safari/537.36',
  'accept' => 'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8',
  'referer' => 'http://qingrang.top/daily/admin/login/index.html',
  'accept-encoding' => 'gzip, deflate',
  'accept-language' => 'zh-CN,zh;q=0.9,la;q=0.8,en;q=0.7,lb;q=0.6',
  'cookie' => 'Hm_lvt_1769181352e9adc950166aada465644e=1541082864,1541122974,1541171416,1542098176; PHPSESSID=cs4ll16s0kjq1pmnpkf29456n2',
  'connection' => 'close',
)
[ info ] [ PARAM ] array (
)
[ info ] [ SESSION ] INIT array (
  'id' => '',
  'var_session_id' => '',
  'prefix' => 'think',
  'type' => '',
  'auto_start' => true,
)
[ info ] [ RUN ] app\admin\controller\Note->notelst[ /var/www/html/daily/application/admin/controller/Note.php ]
[ info ] [ DB ] INIT mysql
[ info ] [ VIEW ] /var/www/html/daily/application/admin/view/note/notelst.html [ array (
  0 => 'stickList',
  1 => 'hide',
  2 => 'list',
  3 => 'list_new',
  4 => 'groups',
  5 => 'groups0',
  6 => 'groups1',
  7 => 'groups2',
  8 => 'count',
  9 => 'year',
  10 => 'default_num',
) ]
[ info ] [ LOG ] INIT File
[ sql ] [ DB ] CONNECT:[ UseTime:0.000618s ] mysql:host=74.120.168.12;dbname=diary;charset=utf8
[ sql ] [ SQL ] SHOW COLUMNS FROM `note` [ RunTime:0.001365s ]
[ sql ] [ SQL ] SELECT * FROM `note` WHERE  `groups` <> 'Personal'  AND `is_show` = 1 ORDER BY date desc,id desc [ RunTime:0.003279s ]
[ sql ] [ SQL ] SELECT * FROM `note` WHERE  `groups` <> 'Personal'  AND `is_show` <> 1 ORDER BY gmt_modified desc LIMIT 5 [ RunTime:0.002221s ]
[ sql ] [ SQL ] SHOW COLUMNS FROM `config` [ RunTime:0.000889s ]
[ sql ] [ SQL ] SELECT * FROM `config` WHERE  `name` = 'hide' LIMIT 1 [ RunTime:0.000346s ]
[ sql ] [ SQL ] SELECT * FROM `note` WHERE  `id` < 5 [ RunTime:0.000577s ]
[ sql ] [ SQL ] SHOW COLUMNS FROM `groups` [ RunTime:0.000855s ]
[ sql ] [ SQL ] SELECT * FROM `groups` [ RunTime:0.000332s ]
[ sql ] [ SQL ] SELECT * FROM `groups` WHERE  `parent_id` = 0  AND `id` <> 2 ORDER BY `groups` [ RunTime:0.000408s ]
[ sql ] [ SQL ] SELECT `groups` FROM `groups` WHERE  `parent_id` = 1 [ RunTime:0.000313s ]
[ sql ] [ SQL ] SELECT * FROM `groups` WHERE  `parent_id` = 2 ORDER BY `groups` [ RunTime:0.000348s ]
[ sql ] [ SQL ] SELECT COUNT(*) AS tp_count FROM `note` WHERE  `groups` = 'Default' LIMIT 1 [ RunTime:0.001184s ]
[ sql ] [ SQL ] SELECT COUNT(*) AS tp_count FROM `note` LIMIT 1 [ RunTime:0.000241s ]
[ sql ] [ SQL ] SHOW COLUMNS FROM `yearlist` [ RunTime:0.001116s ]
[ sql ] [ SQL ] SELECT DISTINCT  `year` FROM `yearlist` ORDER BY year desc [ RunTime:0.000712s ]
---------------------------------------------------------------
[ 2018-11-22T18:26:50+08:00 ] 74.120.168.12 74.120.168.12 POST /daily/admin/note/ashownote2.html
[ info ] qingrang.top/daily/admin/note/ashownote2.html [运行时间：0.059452s][吞吐率：16.82req/s] [内存消耗：2,545.68kb] [文件加载：52]
[ info ] [ LANG ] /var/www/html/daily/thinkphp/lang/zh-cn.php
[ info ] [ ROUTE ] array (
  'type' => 'module',
  'module' => 
  array (
    0 => 'admin',
    1 => 'note',
    2 => 'ashownote2',
  ),
)
[ info ] [ HEADER ] array (
  'host' => 'qingrang.top',
  'content-length' => '17',
  'accept' => 'application/json, text/javascript, */*; q=0.01',
  'origin' => 'http://qingrang.top',
  'x-requested-with' => 'XMLHttpRequest',
  'user-agent' => 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/70.0.3538.102 Safari/537.36',
  'content-type' => 'application/x-www-form-urlencoded',
  'referer' => 'http://qingrang.top/daily/admin/note',
  'accept-encoding' => 'gzip, deflate',
  'accept-language' => 'zh-CN,zh;q=0.9,la;q=0.8,en;q=0.7,lb;q=0.6',
  'cookie' => 'Hm_lvt_1769181352e9adc950166aada465644e=1541082864,1541122974,1541171416,1542098176; PHPSESSID=cs4ll16s0kjq1pmnpkf29456n2',
  'connection' => 'close',
)
[ info ] [ PARAM ] array (
  'groupname' => 'Android',
)
[ info ] [ SESSION ] INIT array (
  'id' => '',
  'var_session_id' => '',
  'prefix' => 'think',
  'type' => '',
  'auto_start' => true,
)
[ info ] [ RUN ] app\admin\controller\Note->aShowNote2[ /var/www/html/daily/application/admin/controller/Note.php ]
[ info ] [ DB ] INIT mysql
[ info ] [ LOG ] INIT File
[ sql ] [ DB ] CONNECT:[ UseTime:0.000605s ] mysql:host=74.120.168.12;dbname=diary;charset=utf8
[ sql ] [ SQL ] SHOW COLUMNS FROM `note` [ RunTime:0.001538s ]
[ sql ] [ SQL ] SELECT * FROM `note` WHERE  `groups` = 'Android' ORDER BY date desc [ RunTime:0.002552s ]
---------------------------------------------------------------
[ 2018-11-22T18:27:28+08:00 ] 74.120.168.12 74.120.168.12 GET /daily/admin/note
[ info ] qingrang.top/daily/admin/note [运行时间：0.084301s][吞吐率：11.86req/s] [内存消耗：2,302.72kb] [文件加载：56]
[ info ] [ LANG ] /var/www/html/daily/thinkphp/lang/zh-cn.php
[ info ] [ ROUTE ] array (
  'type' => 'module',
  'module' => 
  array (
    0 => 'admin',
    1 => 'note',
    2 => NULL,
  ),
)
[ info ] [ HEADER ] array (
  'host' => 'qingrang.top',
  'cache-control' => 'max-age=0',
  'upgrade-insecure-requests' => '1',
  'user-agent' => 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/70.0.3538.102 Safari/537.36',
  'accept' => 'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8',
  'referer' => 'http://qingrang.top/daily/admin/login/index.html',
  'accept-encoding' => 'gzip, deflate',
  'accept-language' => 'zh-CN,zh;q=0.9,la;q=0.8,en;q=0.7,lb;q=0.6',
  'cookie' => 'Hm_lvt_1769181352e9adc950166aada465644e=1541082864,1541122974,1541171416,1542098176; PHPSESSID=cs4ll16s0kjq1pmnpkf29456n2',
  'connection' => 'close',
)
[ info ] [ PARAM ] array (
)
[ info ] [ SESSION ] INIT array (
  'id' => '',
  'var_session_id' => '',
  'prefix' => 'think',
  'type' => '',
  'auto_start' => true,
)
[ info ] [ RUN ] app\admin\controller\Note->notelst[ /var/www/html/daily/application/admin/controller/Note.php ]
[ info ] [ DB ] INIT mysql
[ info ] [ VIEW ] /var/www/html/daily/application/admin/view/note/notelst.html [ array (
  0 => 'stickList',
  1 => 'hide',
  2 => 'list',
  3 => 'list_new',
  4 => 'groups',
  5 => 'groups0',
  6 => 'groups1',
  7 => 'groups2',
  8 => 'count',
  9 => 'year',
  10 => 'default_num',
) ]
[ info ] [ LOG ] INIT File
[ sql ] [ DB ] CONNECT:[ UseTime:0.000590s ] mysql:host=74.120.168.12;dbname=diary;charset=utf8
[ sql ] [ SQL ] SHOW COLUMNS FROM `note` [ RunTime:0.001447s ]
[ sql ] [ SQL ] SELECT * FROM `note` WHERE  `groups` <> 'Personal'  AND `is_show` = 1 ORDER BY date desc,id desc [ RunTime:0.003181s ]
[ sql ] [ SQL ] SELECT * FROM `note` WHERE  `groups` <> 'Personal'  AND `is_show` <> 1 ORDER BY gmt_modified desc LIMIT 5 [ RunTime:0.003777s ]
[ sql ] [ SQL ] SHOW COLUMNS FROM `config` [ RunTime:0.001296s ]
[ sql ] [ SQL ] SELECT * FROM `config` WHERE  `name` = 'hide' LIMIT 1 [ RunTime:0.000388s ]
[ sql ] [ SQL ] SELECT * FROM `note` WHERE  `id` < 5 [ RunTime:0.000500s ]
[ sql ] [ SQL ] SHOW COLUMNS FROM `groups` [ RunTime:0.001111s ]
[ sql ] [ SQL ] SELECT * FROM `groups` [ RunTime:0.000498s ]
[ sql ] [ SQL ] SELECT * FROM `groups` WHERE  `parent_id` = 0  AND `id` <> 2 ORDER BY `groups` [ RunTime:0.000505s ]
[ sql ] [ SQL ] SELECT `groups` FROM `groups` WHERE  `parent_id` = 1 [ RunTime:0.000362s ]
[ sql ] [ SQL ] SELECT * FROM `groups` WHERE  `parent_id` = 2 ORDER BY `groups` [ RunTime:0.000428s ]
[ sql ] [ SQL ] SELECT COUNT(*) AS tp_count FROM `note` WHERE  `groups` = 'Default' LIMIT 1 [ RunTime:0.001891s ]
[ sql ] [ SQL ] SELECT COUNT(*) AS tp_count FROM `note` LIMIT 1 [ RunTime:0.000287s ]
[ sql ] [ SQL ] SHOW COLUMNS FROM `yearlist` [ RunTime:0.001372s ]
[ sql ] [ SQL ] SELECT DISTINCT  `year` FROM `yearlist` ORDER BY year desc [ RunTime:0.000772s ]
---------------------------------------------------------------
[ 2018-11-22T18:27:47+08:00 ] 74.120.168.12 74.120.168.12 POST /daily/admin/note/ashownote2.html
[ info ] qingrang.top/daily/admin/note/ashownote2.html [运行时间：0.088439s][吞吐率：11.31req/s] [内存消耗：2,545.68kb] [文件加载：52]
[ info ] [ LANG ] /var/www/html/daily/thinkphp/lang/zh-cn.php
[ info ] [ ROUTE ] array (
  'type' => 'module',
  'module' => 
  array (
    0 => 'admin',
    1 => 'note',
    2 => 'ashownote2',
  ),
)
[ info ] [ HEADER ] array (
  'host' => 'qingrang.top',
  'content-length' => '17',
  'accept' => 'application/json, text/javascript, */*; q=0.01',
  'origin' => 'http://qingrang.top',
  'x-requested-with' => 'XMLHttpRequest',
  'user-agent' => 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/70.0.3538.102 Safari/537.36',
  'content-type' => 'application/x-www-form-urlencoded',
  'referer' => 'http://qingrang.top/daily/admin/note',
  'accept-encoding' => 'gzip, deflate',
  'accept-language' => 'zh-CN,zh;q=0.9,la;q=0.8,en;q=0.7,lb;q=0.6',
  'cookie' => 'Hm_lvt_1769181352e9adc950166aada465644e=1541082864,1541122974,1541171416,1542098176; PHPSESSID=cs4ll16s0kjq1pmnpkf29456n2',
  'connection' => 'close',
)
[ info ] [ PARAM ] array (
  'groupname' => 'Android',
)
[ info ] [ SESSION ] INIT array (
  'id' => '',
  'var_session_id' => '',
  'prefix' => 'think',
  'type' => '',
  'auto_start' => true,
)
[ info ] [ RUN ] app\admin\controller\Note->aShowNote2[ /var/www/html/daily/application/admin/controller/Note.php ]
[ info ] [ DB ] INIT mysql
[ info ] [ LOG ] INIT File
[ sql ] [ DB ] CONNECT:[ UseTime:0.000846s ] mysql:host=74.120.168.12;dbname=diary;charset=utf8
[ sql ] [ SQL ] SHOW COLUMNS FROM `note` [ RunTime:0.001352s ]
[ sql ] [ SQL ] SELECT * FROM `note` WHERE  `groups` = 'Android' ORDER BY date desc [ RunTime:0.002843s ]
---------------------------------------------------------------
[ 2018-11-22T18:28:07+08:00 ] 74.120.168.12 74.120.168.12 GET /daily/admin/note/shownote/id/133
[ info ] qingrang.top/daily/admin/note/shownote/id/133 [运行时间：0.053516s][吞吐率：18.69req/s] [内存消耗：1,985.55kb] [文件加载：55]
[ info ] [ LANG ] /var/www/html/daily/thinkphp/lang/zh-cn.php
[ info ] [ ROUTE ] array (
  'type' => 'module',
  'module' => 
  array (
    0 => 'admin',
    1 => 'note',
    2 => 'shownote',
  ),
)
[ info ] [ HEADER ] array (
  'host' => 'qingrang.top',
  'upgrade-insecure-requests' => '1',
  'user-agent' => 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/70.0.3538.102 Safari/537.36',
  'accept' => 'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8',
  'referer' => 'http://qingrang.top/daily/admin/note',
  'accept-encoding' => 'gzip, deflate',
  'accept-language' => 'zh-CN,zh;q=0.9,la;q=0.8,en;q=0.7,lb;q=0.6',
  'cookie' => 'Hm_lvt_1769181352e9adc950166aada465644e=1541082864,1541122974,1541171416,1542098176; PHPSESSID=cs4ll16s0kjq1pmnpkf29456n2',
  'connection' => 'close',
)
[ info ] [ PARAM ] array (
  'id' => '133',
)
[ info ] [ SESSION ] INIT array (
  'id' => '',
  'var_session_id' => '',
  'prefix' => 'think',
  'type' => '',
  'auto_start' => true,
)
[ info ] [ RUN ] app\admin\controller\Note->showNote[ /var/www/html/daily/application/admin/controller/Note.php ]
[ info ] [ DB ] INIT mysql
[ info ] [ VIEW ] /var/www/html/daily/application/admin/view/note/shownote.html [ array (
  0 => 'note',
  1 => 'groups',
) ]
[ info ] [ LOG ] INIT File
[ sql ] [ DB ] CONNECT:[ UseTime:0.000684s ] mysql:host=74.120.168.12;dbname=diary;charset=utf8
[ sql ] [ SQL ] SHOW COLUMNS FROM `note` [ RunTime:0.001198s ]
[ sql ] [ SQL ] SELECT * FROM `note` WHERE  `id` = 133 LIMIT 1 [ RunTime:0.000411s ]
[ sql ] [ SQL ] SHOW COLUMNS FROM `groups` [ RunTime:0.000705s ]
[ sql ] [ SQL ] SELECT * FROM `groups` [ RunTime:0.000269s ]
---------------------------------------------------------------
[ 2018-11-22T20:00:42+08:00 ] 74.120.168.12 74.120.168.12 GET /daily/admin/note
[ info ] qingrang.top/daily/admin/note [运行时间：0.077619s][吞吐率：12.88req/s] [内存消耗：2,301.92kb] [文件加载：56]
[ info ] [ LANG ] /var/www/html/daily/thinkphp/lang/zh-cn.php
[ info ] [ ROUTE ] array (
  'type' => 'module',
  'module' => 
  array (
    0 => 'admin',
    1 => 'note',
    2 => NULL,
  ),
)
[ info ] [ HEADER ] array (
  'host' => 'qingrang.top',
  'upgrade-insecure-requests' => '1',
  'user-agent' => 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/70.0.3538.102 Safari/537.36',
  'accept' => 'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8',
  'accept-encoding' => 'gzip, deflate',
  'accept-language' => 'zh-CN,zh;q=0.9,la;q=0.8,en;q=0.7,lb;q=0.6',
  'cookie' => 'Hm_lvt_1769181352e9adc950166aada465644e=1541082864,1541122974,1541171416,1542098176; PHPSESSID=cs4ll16s0kjq1pmnpkf29456n2',
  'connection' => 'close',
)
[ info ] [ PARAM ] array (
)
[ info ] [ SESSION ] INIT array (
  'id' => '',
  'var_session_id' => '',
  'prefix' => 'think',
  'type' => '',
  'auto_start' => true,
)
[ info ] [ RUN ] app\admin\controller\Note->notelst[ /var/www/html/daily/application/admin/controller/Note.php ]
[ info ] [ DB ] INIT mysql
[ info ] [ VIEW ] /var/www/html/daily/application/admin/view/note/notelst.html [ array (
  0 => 'stickList',
  1 => 'hide',
  2 => 'list',
  3 => 'list_new',
  4 => 'groups',
  5 => 'groups0',
  6 => 'groups1',
  7 => 'groups2',
  8 => 'count',
  9 => 'year',
  10 => 'default_num',
) ]
[ info ] [ LOG ] INIT File
[ sql ] [ DB ] CONNECT:[ UseTime:0.001024s ] mysql:host=74.120.168.12;dbname=diary;charset=utf8
[ sql ] [ SQL ] SHOW COLUMNS FROM `note` [ RunTime:0.002120s ]
[ sql ] [ SQL ] SELECT * FROM `note` WHERE  `groups` <> 'Personal'  AND `is_show` = 1 ORDER BY date desc,id desc [ RunTime:0.002728s ]
[ sql ] [ SQL ] SELECT * FROM `note` WHERE  `groups` <> 'Personal'  AND `is_show` <> 1 ORDER BY gmt_modified desc LIMIT 5 [ RunTime:0.002180s ]
[ sql ] [ SQL ] SHOW COLUMNS FROM `config` [ RunTime:0.000971s ]
[ sql ] [ SQL ] SELECT * FROM `config` WHERE  `name` = 'hide' LIMIT 1 [ RunTime:0.000319s ]
[ sql ] [ SQL ] SELECT * FROM `note` WHERE  `id` < 5 [ RunTime:0.000447s ]
[ sql ] [ SQL ] SHOW COLUMNS FROM `groups` [ RunTime:0.000774s ]
[ sql ] [ SQL ] SELECT * FROM `groups` [ RunTime:0.000305s ]
[ sql ] [ SQL ] SELECT * FROM `groups` WHERE  `parent_id` = 0  AND `id` <> 2 ORDER BY `groups` [ RunTime:0.000415s ]
[ sql ] [ SQL ] SELECT `groups` FROM `groups` WHERE  `parent_id` = 1 [ RunTime:0.000323s ]
[ sql ] [ SQL ] SELECT * FROM `groups` WHERE  `parent_id` = 2 ORDER BY `groups` [ RunTime:0.000395s ]
[ sql ] [ SQL ] SELECT COUNT(*) AS tp_count FROM `note` WHERE  `groups` = 'Default' LIMIT 1 [ RunTime:0.001224s ]
[ sql ] [ SQL ] SELECT COUNT(*) AS tp_count FROM `note` LIMIT 1 [ RunTime:0.000224s ]
[ sql ] [ SQL ] SHOW COLUMNS FROM `yearlist` [ RunTime:0.001087s ]
[ sql ] [ SQL ] SELECT DISTINCT  `year` FROM `yearlist` ORDER BY year desc [ RunTime:0.000647s ]
---------------------------------------------------------------
[ 2018-11-22T20:03:21+08:00 ] 74.120.168.12 74.120.168.12 POST /daily/admin/note/ashownote2.html
[ info ] qingrang.top/daily/admin/note/ashownote2.html [运行时间：0.065477s][吞吐率：15.27req/s] [内存消耗：2,725.96kb] [文件加载：52]
[ info ] [ LANG ] /var/www/html/daily/thinkphp/lang/zh-cn.php
[ info ] [ ROUTE ] array (
  'type' => 'module',
  'module' => 
  array (
    0 => 'admin',
    1 => 'note',
    2 => 'ashownote2',
  ),
)
[ info ] [ HEADER ] array (
  'host' => 'qingrang.top',
  'content-length' => '14',
  'accept' => 'application/json, text/javascript, */*; q=0.01',
  'origin' => 'http://qingrang.top',
  'x-requested-with' => 'XMLHttpRequest',
  'user-agent' => 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/70.0.3538.102 Safari/537.36',
  'content-type' => 'application/x-www-form-urlencoded',
  'referer' => 'http://qingrang.top/daily/admin/note',
  'accept-encoding' => 'gzip, deflate',
  'accept-language' => 'zh-CN,zh;q=0.9,la;q=0.8,en;q=0.7,lb;q=0.6',
  'cookie' => 'Hm_lvt_1769181352e9adc950166aada465644e=1541082864,1541122974,1541171416,1542098176; PHPSESSID=cs4ll16s0kjq1pmnpkf29456n2',
  'connection' => 'close',
)
[ info ] [ PARAM ] array (
  'groupname' => 'Java',
)
[ info ] [ SESSION ] INIT array (
  'id' => '',
  'var_session_id' => '',
  'prefix' => 'think',
  'type' => '',
  'auto_start' => true,
)
[ info ] [ RUN ] app\admin\controller\Note->aShowNote2[ /var/www/html/daily/application/admin/controller/Note.php ]
[ info ] [ DB ] INIT mysql
[ info ] [ LOG ] INIT File
[ sql ] [ DB ] CONNECT:[ UseTime:0.000513s ] mysql:host=74.120.168.12;dbname=diary;charset=utf8
[ sql ] [ SQL ] SHOW COLUMNS FROM `note` [ RunTime:0.001297s ]
[ sql ] [ SQL ] SELECT * FROM `note` WHERE  `groups` = 'Java' ORDER BY date desc [ RunTime:0.002294s ]
---------------------------------------------------------------
[ 2018-11-22T20:03:52+08:00 ] 74.120.168.12 74.120.168.12 POST /daily/admin/note/ashownote2.html
[ info ] qingrang.top/daily/admin/note/ashownote2.html [运行时间：0.054294s][吞吐率：18.42req/s] [内存消耗：2,725.96kb] [文件加载：52]
[ info ] [ LANG ] /var/www/html/daily/thinkphp/lang/zh-cn.php
[ info ] [ ROUTE ] array (
  'type' => 'module',
  'module' => 
  array (
    0 => 'admin',
    1 => 'note',
    2 => 'ashownote2',
  ),
)
[ info ] [ HEADER ] array (
  'host' => 'qingrang.top',
  'content-length' => '14',
  'accept' => 'application/json, text/javascript, */*; q=0.01',
  'origin' => 'http://qingrang.top',
  'x-requested-with' => 'XMLHttpRequest',
  'user-agent' => 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/70.0.3538.102 Safari/537.36',
  'content-type' => 'application/x-www-form-urlencoded',
  'referer' => 'http://qingrang.top/daily/admin/note',
  'accept-encoding' => 'gzip, deflate',
  'accept-language' => 'zh-CN,zh;q=0.9,la;q=0.8,en;q=0.7,lb;q=0.6',
  'cookie' => 'Hm_lvt_1769181352e9adc950166aada465644e=1541082864,1541122974,1541171416,1542098176; PHPSESSID=cs4ll16s0kjq1pmnpkf29456n2',
  'connection' => 'close',
)
[ info ] [ PARAM ] array (
  'groupname' => 'Java',
)
[ info ] [ SESSION ] INIT array (
  'id' => '',
  'var_session_id' => '',
  'prefix' => 'think',
  'type' => '',
  'auto_start' => true,
)
[ info ] [ RUN ] app\admin\controller\Note->aShowNote2[ /var/www/html/daily/application/admin/controller/Note.php ]
[ info ] [ DB ] INIT mysql
[ info ] [ LOG ] INIT File
[ sql ] [ DB ] CONNECT:[ UseTime:0.000495s ] mysql:host=74.120.168.12;dbname=diary;charset=utf8
[ sql ] [ SQL ] SHOW COLUMNS FROM `note` [ RunTime:0.001152s ]
[ sql ] [ SQL ] SELECT * FROM `note` WHERE  `groups` = 'Java' ORDER BY date desc [ RunTime:0.002398s ]
---------------------------------------------------------------
[ 2018-11-22T20:03:54+08:00 ] 74.120.168.12 74.120.168.12 GET /daily/admin/note/shownote/id/253
[ info ] qingrang.top/daily/admin/note/shownote/id/253 [运行时间：0.047717s][吞吐率：20.96req/s] [内存消耗：1,992.95kb] [文件加载：55]
[ info ] [ LANG ] /var/www/html/daily/thinkphp/lang/zh-cn.php
[ info ] [ ROUTE ] array (
  'type' => 'module',
  'module' => 
  array (
    0 => 'admin',
    1 => 'note',
    2 => 'shownote',
  ),
)
[ info ] [ HEADER ] array (
  'host' => 'qingrang.top',
  'upgrade-insecure-requests' => '1',
  'user-agent' => 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/70.0.3538.102 Safari/537.36',
  'accept' => 'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8',
  'referer' => 'http://qingrang.top/daily/admin/note',
  'accept-encoding' => 'gzip, deflate',
  'accept-language' => 'zh-CN,zh;q=0.9,la;q=0.8,en;q=0.7,lb;q=0.6',
  'cookie' => 'Hm_lvt_1769181352e9adc950166aada465644e=1541082864,1541122974,1541171416,1542098176; PHPSESSID=cs4ll16s0kjq1pmnpkf29456n2',
  'connection' => 'close',
)
[ info ] [ PARAM ] array (
  'id' => '253',
)
[ info ] [ SESSION ] INIT array (
  'id' => '',
  'var_session_id' => '',
  'prefix' => 'think',
  'type' => '',
  'auto_start' => true,
)
[ info ] [ RUN ] app\admin\controller\Note->showNote[ /var/www/html/daily/application/admin/controller/Note.php ]
[ info ] [ DB ] INIT mysql
[ info ] [ VIEW ] /var/www/html/daily/application/admin/view/note/shownote.html [ array (
  0 => 'note',
  1 => 'groups',
) ]
[ info ] [ LOG ] INIT File
[ sql ] [ DB ] CONNECT:[ UseTime:0.000506s ] mysql:host=74.120.168.12;dbname=diary;charset=utf8
[ sql ] [ SQL ] SHOW COLUMNS FROM `note` [ RunTime:0.001304s ]
[ sql ] [ SQL ] SELECT * FROM `note` WHERE  `id` = 253 LIMIT 1 [ RunTime:0.000470s ]
[ sql ] [ SQL ] SHOW COLUMNS FROM `groups` [ RunTime:0.000759s ]
[ sql ] [ SQL ] SELECT * FROM `groups` [ RunTime:0.000264s ]
---------------------------------------------------------------
[ 2018-11-22T20:04:21+08:00 ] 74.120.168.12 74.120.168.12 GET /daily/admin/note/editnote/id/253
[ info ] qingrang.top/daily/admin/note/editnote/id/253 [运行时间：0.067163s][吞吐率：14.89req/s] [内存消耗：2,057.01kb] [文件加载：56]
[ info ] [ LANG ] /var/www/html/daily/thinkphp/lang/zh-cn.php
[ info ] [ ROUTE ] array (
  'type' => 'module',
  'module' => 
  array (
    0 => 'admin',
    1 => 'note',
    2 => 'editnote',
  ),
)
[ info ] [ HEADER ] array (
  'host' => 'qingrang.top',
  'upgrade-insecure-requests' => '1',
  'user-agent' => 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/70.0.3538.102 Safari/537.36',
  'accept' => 'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8',
  'accept-encoding' => 'gzip, deflate',
  'accept-language' => 'zh-CN,zh;q=0.9,la;q=0.8,en;q=0.7,lb;q=0.6',
  'cookie' => 'Hm_lvt_1769181352e9adc950166aada465644e=1541082864,1541122974,1541171416,1542098176; PHPSESSID=cs4ll16s0kjq1pmnpkf29456n2',
  'connection' => 'close',
)
[ info ] [ PARAM ] array (
  'id' => '253',
)
[ info ] [ SESSION ] INIT array (
  'id' => '',
  'var_session_id' => '',
  'prefix' => 'think',
  'type' => '',
  'auto_start' => true,
)
[ info ] [ RUN ] app\admin\controller\Note->editNote[ /var/www/html/daily/application/admin/controller/Note.php ]
[ info ] [ DB ] INIT mysql
[ info ] [ VIEW ] /var/www/html/daily/application/admin/view/note/editnote.html [ array (
  0 => 'note',
  1 => 'groups',
) ]
[ info ] [ LOG ] INIT File
[ sql ] [ DB ] CONNECT:[ UseTime:0.000711s ] mysql:host=74.120.168.12;dbname=diary;charset=utf8
[ sql ] [ SQL ] SHOW COLUMNS FROM `note` [ RunTime:0.001417s ]
[ sql ] [ SQL ] SELECT * FROM `note` WHERE  `id` = 253 LIMIT 1 [ RunTime:0.000511s ]
[ sql ] [ SQL ] SHOW COLUMNS FROM `groups` [ RunTime:0.000957s ]
[ sql ] [ SQL ] SELECT * FROM `groups` [ RunTime:0.000312s ]
---------------------------------------------------------------
[ 2018-11-22T20:06:38+08:00 ] 74.120.168.12 74.120.168.12 GET /daily/admin/note/shownote/id/253
[ info ] qingrang.top/daily/admin/note/shownote/id/253 [运行时间：0.049506s][吞吐率：20.20req/s] [内存消耗：1,992.95kb] [文件加载：55]
[ info ] [ LANG ] /var/www/html/daily/thinkphp/lang/zh-cn.php
[ info ] [ ROUTE ] array (
  'type' => 'module',
  'module' => 
  array (
    0 => 'admin',
    1 => 'note',
    2 => 'shownote',
  ),
)
[ info ] [ HEADER ] array (
  'host' => 'qingrang.top',
  'upgrade-insecure-requests' => '1',
  'user-agent' => 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/70.0.3538.102 Safari/537.36',
  'accept' => 'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8',
  'referer' => 'http://qingrang.top/daily/admin/note',
  'accept-encoding' => 'gzip, deflate',
  'accept-language' => 'zh-CN,zh;q=0.9,la;q=0.8,en;q=0.7,lb;q=0.6',
  'cookie' => 'Hm_lvt_1769181352e9adc950166aada465644e=1541082864,1541122974,1541171416,1542098176; PHPSESSID=cs4ll16s0kjq1pmnpkf29456n2',
  'connection' => 'close',
)
[ info ] [ PARAM ] array (
  'id' => '253',
)
[ info ] [ SESSION ] INIT array (
  'id' => '',
  'var_session_id' => '',
  'prefix' => 'think',
  'type' => '',
  'auto_start' => true,
)
[ info ] [ RUN ] app\admin\controller\Note->showNote[ /var/www/html/daily/application/admin/controller/Note.php ]
[ info ] [ DB ] INIT mysql
[ info ] [ VIEW ] /var/www/html/daily/application/admin/view/note/shownote.html [ array (
  0 => 'note',
  1 => 'groups',
) ]
[ info ] [ LOG ] INIT File
[ sql ] [ DB ] CONNECT:[ UseTime:0.000512s ] mysql:host=74.120.168.12;dbname=diary;charset=utf8
[ sql ] [ SQL ] SHOW COLUMNS FROM `note` [ RunTime:0.001295s ]
[ sql ] [ SQL ] SELECT * FROM `note` WHERE  `id` = 253 LIMIT 1 [ RunTime:0.000458s ]
[ sql ] [ SQL ] SHOW COLUMNS FROM `groups` [ RunTime:0.000759s ]
[ sql ] [ SQL ] SELECT * FROM `groups` [ RunTime:0.000253s ]
---------------------------------------------------------------
[ 2018-11-22T20:20:09+08:00 ] 74.120.168.12 74.120.168.12 GET /daily/admin/note/editNote/id/253
[ info ] qingrang.top/daily/admin/note/editNote/id/253 [运行时间：0.091483s][吞吐率：10.93req/s] [内存消耗：2,057.25kb] [文件加载：56]
[ info ] [ LANG ] /var/www/html/daily/thinkphp/lang/zh-cn.php
[ info ] [ ROUTE ] array (
  'type' => 'module',
  'module' => 
  array (
    0 => 'admin',
    1 => 'note',
    2 => 'editNote',
  ),
)
[ info ] [ HEADER ] array (
  'host' => 'qingrang.top',
  'upgrade-insecure-requests' => '1',
  'user-agent' => 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/70.0.3538.102 Safari/537.36',
  'accept' => 'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8',
  'referer' => 'http://qingrang.top/daily/admin/note',
  'accept-encoding' => 'gzip, deflate',
  'accept-language' => 'zh-CN,zh;q=0.9,la;q=0.8,en;q=0.7,lb;q=0.6',
  'cookie' => 'Hm_lvt_1769181352e9adc950166aada465644e=1541082864,1541122974,1541171416,1542098176; PHPSESSID=cs4ll16s0kjq1pmnpkf29456n2',
  'connection' => 'close',
)
[ info ] [ PARAM ] array (
  'id' => '253',
)
[ info ] [ SESSION ] INIT array (
  'id' => '',
  'var_session_id' => '',
  'prefix' => 'think',
  'type' => '',
  'auto_start' => true,
)
[ info ] [ RUN ] app\admin\controller\Note->editNote[ /var/www/html/daily/application/admin/controller/Note.php ]
[ info ] [ DB ] INIT mysql
[ info ] [ VIEW ] /var/www/html/daily/application/admin/view/note/editnote.html [ array (
  0 => 'note',
  1 => 'groups',
) ]
[ info ] [ LOG ] INIT File
[ sql ] [ DB ] CONNECT:[ UseTime:0.000736s ] mysql:host=74.120.168.12;dbname=diary;charset=utf8
[ sql ] [ SQL ] SHOW COLUMNS FROM `note` [ RunTime:0.002231s ]
[ sql ] [ SQL ] SELECT * FROM `note` WHERE  `id` = 253 LIMIT 1 [ RunTime:0.000986s ]
[ sql ] [ SQL ] SHOW COLUMNS FROM `groups` [ RunTime:0.001566s ]
[ sql ] [ SQL ] SELECT * FROM `groups` [ RunTime:0.000585s ]
---------------------------------------------------------------
[ 2018-11-22T20:24:18+08:00 ] 74.120.168.12 74.120.168.12 GET /daily/admin/note/editNote/id/249
[ info ] qingrang.top/daily/admin/note/editNote/id/249 [运行时间：0.050923s][吞吐率：19.64req/s] [内存消耗：2,032.72kb] [文件加载：56]
[ info ] [ LANG ] /var/www/html/daily/thinkphp/lang/zh-cn.php
[ info ] [ ROUTE ] array (
  'type' => 'module',
  'module' => 
  array (
    0 => 'admin',
    1 => 'note',
    2 => 'editNote',
  ),
)
[ info ] [ HEADER ] array (
  'host' => 'qingrang.top',
  'upgrade-insecure-requests' => '1',
  'user-agent' => 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/70.0.3538.102 Safari/537.36',
  'accept' => 'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8',
  'referer' => 'http://qingrang.top/daily/admin/note',
  'accept-encoding' => 'gzip, deflate',
  'accept-language' => 'zh-CN,zh;q=0.9,la;q=0.8,en;q=0.7,lb;q=0.6',
  'cookie' => 'Hm_lvt_1769181352e9adc950166aada465644e=1541082864,1541122974,1541171416,1542098176; PHPSESSID=cs4ll16s0kjq1pmnpkf29456n2',
  'connection' => 'close',
)
[ info ] [ PARAM ] array (
  'id' => '249',
)
[ info ] [ SESSION ] INIT array (
  'id' => '',
  'var_session_id' => '',
  'prefix' => 'think',
  'type' => '',
  'auto_start' => true,
)
[ info ] [ RUN ] app\admin\controller\Note->editNote[ /var/www/html/daily/application/admin/controller/Note.php ]
[ info ] [ DB ] INIT mysql
[ info ] [ VIEW ] /var/www/html/daily/application/admin/view/note/editnote.html [ array (
  0 => 'note',
  1 => 'groups',
) ]
[ info ] [ LOG ] INIT File
[ sql ] [ DB ] CONNECT:[ UseTime:0.000454s ] mysql:host=74.120.168.12;dbname=diary;charset=utf8
[ sql ] [ SQL ] SHOW COLUMNS FROM `note` [ RunTime:0.001374s ]
[ sql ] [ SQL ] SELECT * FROM `note` WHERE  `id` = 249 LIMIT 1 [ RunTime:0.000447s ]
[ sql ] [ SQL ] SHOW COLUMNS FROM `groups` [ RunTime:0.000828s ]
[ sql ] [ SQL ] SELECT * FROM `groups` [ RunTime:0.000276s ]
---------------------------------------------------------------
[ 2018-11-22T20:25:09+08:00 ] 74.120.168.12 74.120.168.12 GET /daily/admin/note/shownote/id/244
[ info ] qingrang.top/daily/admin/note/shownote/id/244 [运行时间：0.056623s][吞吐率：17.66req/s] [内存消耗：1,985.79kb] [文件加载：55]
[ info ] [ LANG ] /var/www/html/daily/thinkphp/lang/zh-cn.php
[ info ] [ ROUTE ] array (
  'type' => 'module',
  'module' => 
  array (
    0 => 'admin',
    1 => 'note',
    2 => 'shownote',
  ),
)
[ info ] [ HEADER ] array (
  'host' => 'qingrang.top',
  'upgrade-insecure-requests' => '1',
  'user-agent' => 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/70.0.3538.102 Safari/537.36',
  'accept' => 'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8',
  'referer' => 'http://qingrang.top/daily/admin/note',
  'accept-encoding' => 'gzip, deflate',
  'accept-language' => 'zh-CN,zh;q=0.9,la;q=0.8,en;q=0.7,lb;q=0.6',
  'cookie' => 'Hm_lvt_1769181352e9adc950166aada465644e=1541082864,1541122974,1541171416,1542098176; PHPSESSID=cs4ll16s0kjq1pmnpkf29456n2',
  'connection' => 'close',
)
[ info ] [ PARAM ] array (
  'id' => '244',
)
[ info ] [ SESSION ] INIT array (
  'id' => '',
  'var_session_id' => '',
  'prefix' => 'think',
  'type' => '',
  'auto_start' => true,
)
[ info ] [ RUN ] app\admin\controller\Note->showNote[ /var/www/html/daily/application/admin/controller/Note.php ]
[ info ] [ DB ] INIT mysql
[ info ] [ VIEW ] /var/www/html/daily/application/admin/view/note/shownote.html [ array (
  0 => 'note',
  1 => 'groups',
) ]
[ info ] [ LOG ] INIT File
[ sql ] [ DB ] CONNECT:[ UseTime:0.000558s ] mysql:host=74.120.168.12;dbname=diary;charset=utf8
[ sql ] [ SQL ] SHOW COLUMNS FROM `note` [ RunTime:0.001403s ]
[ sql ] [ SQL ] SELECT * FROM `note` WHERE  `id` = 244 LIMIT 1 [ RunTime:0.000401s ]
[ sql ] [ SQL ] SHOW COLUMNS FROM `groups` [ RunTime:0.000817s ]
[ sql ] [ SQL ] SELECT * FROM `groups` [ RunTime:0.000246s ]
---------------------------------------------------------------
[ 2018-11-22T20:25:49+08:00 ] 74.120.168.12 74.120.168.12 GET /daily/admin/note/shownote/id/236
[ info ] qingrang.top/daily/admin/note/shownote/id/236 [运行时间：0.052190s][吞吐率：19.16req/s] [内存消耗：1,987.69kb] [文件加载：55]
[ info ] [ LANG ] /var/www/html/daily/thinkphp/lang/zh-cn.php
[ info ] [ ROUTE ] array (
  'type' => 'module',
  'module' => 
  array (
    0 => 'admin',
    1 => 'note',
    2 => 'shownote',
  ),
)
[ info ] [ HEADER ] array (
  'host' => 'qingrang.top',
  'upgrade-insecure-requests' => '1',
  'user-agent' => 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/70.0.3538.102 Safari/537.36',
  'accept' => 'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8',
  'referer' => 'http://qingrang.top/daily/admin/note',
  'accept-encoding' => 'gzip, deflate',
  'accept-language' => 'zh-CN,zh;q=0.9,la;q=0.8,en;q=0.7,lb;q=0.6',
  'cookie' => 'Hm_lvt_1769181352e9adc950166aada465644e=1541082864,1541122974,1541171416,1542098176; PHPSESSID=cs4ll16s0kjq1pmnpkf29456n2',
  'connection' => 'close',
)
[ info ] [ PARAM ] array (
  'id' => '236',
)
[ info ] [ SESSION ] INIT array (
  'id' => '',
  'var_session_id' => '',
  'prefix' => 'think',
  'type' => '',
  'auto_start' => true,
)
[ info ] [ RUN ] app\admin\controller\Note->showNote[ /var/www/html/daily/application/admin/controller/Note.php ]
[ info ] [ DB ] INIT mysql
[ info ] [ VIEW ] /var/www/html/daily/application/admin/view/note/shownote.html [ array (
  0 => 'note',
  1 => 'groups',
) ]
[ info ] [ LOG ] INIT File
[ sql ] [ DB ] CONNECT:[ UseTime:0.000575s ] mysql:host=74.120.168.12;dbname=diary;charset=utf8
[ sql ] [ SQL ] SHOW COLUMNS FROM `note` [ RunTime:0.001481s ]
[ sql ] [ SQL ] SELECT * FROM `note` WHERE  `id` = 236 LIMIT 1 [ RunTime:0.000428s ]
[ sql ] [ SQL ] SHOW COLUMNS FROM `groups` [ RunTime:0.000774s ]
[ sql ] [ SQL ] SELECT * FROM `groups` [ RunTime:0.000301s ]
---------------------------------------------------------------
[ 2018-11-22T20:26:04+08:00 ] 74.120.168.12 74.120.168.12 GET /daily/admin/note
[ info ] qingrang.top/daily/admin/note [运行时间：0.068482s][吞吐率：14.60req/s] [内存消耗：2,301.92kb] [文件加载：56]
[ info ] [ LANG ] /var/www/html/daily/thinkphp/lang/zh-cn.php
[ info ] [ ROUTE ] array (
  'type' => 'module',
  'module' => 
  array (
    0 => 'admin',
    1 => 'note',
    2 => NULL,
  ),
)
[ info ] [ HEADER ] array (
  'host' => 'qingrang.top',
  'upgrade-insecure-requests' => '1',
  'user-agent' => 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/70.0.3538.102 Safari/537.36',
  'accept' => 'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8',
  'accept-encoding' => 'gzip, deflate',
  'accept-language' => 'zh-CN,zh;q=0.9,la;q=0.8,en;q=0.7,lb;q=0.6',
  'cookie' => 'Hm_lvt_1769181352e9adc950166aada465644e=1541082864,1541122974,1541171416,1542098176; PHPSESSID=cs4ll16s0kjq1pmnpkf29456n2',
  'connection' => 'close',
)
[ info ] [ PARAM ] array (
)
[ info ] [ SESSION ] INIT array (
  'id' => '',
  'var_session_id' => '',
  'prefix' => 'think',
  'type' => '',
  'auto_start' => true,
)
[ info ] [ RUN ] app\admin\controller\Note->notelst[ /var/www/html/daily/application/admin/controller/Note.php ]
[ info ] [ DB ] INIT mysql
[ info ] [ VIEW ] /var/www/html/daily/application/admin/view/note/notelst.html [ array (
  0 => 'stickList',
  1 => 'hide',
  2 => 'list',
  3 => 'list_new',
  4 => 'groups',
  5 => 'groups0',
  6 => 'groups1',
  7 => 'groups2',
  8 => 'count',
  9 => 'year',
  10 => 'default_num',
) ]
[ info ] [ LOG ] INIT File
[ sql ] [ DB ] CONNECT:[ UseTime:0.000564s ] mysql:host=74.120.168.12;dbname=diary;charset=utf8
[ sql ] [ SQL ] SHOW COLUMNS FROM `note` [ RunTime:0.001209s ]
[ sql ] [ SQL ] SELECT * FROM `note` WHERE  `groups` <> 'Personal'  AND `is_show` = 1 ORDER BY date desc,id desc [ RunTime:0.001675s ]
[ sql ] [ SQL ] SELECT * FROM `note` WHERE  `groups` <> 'Personal'  AND `is_show` <> 1 ORDER BY gmt_modified desc LIMIT 5 [ RunTime:0.002217s ]
[ sql ] [ SQL ] SHOW COLUMNS FROM `config` [ RunTime:0.000931s ]
[ sql ] [ SQL ] SELECT * FROM `config` WHERE  `name` = 'hide' LIMIT 1 [ RunTime:0.000671s ]
[ sql ] [ SQL ] SELECT * FROM `note` WHERE  `id` < 5 [ RunTime:0.000384s ]
[ sql ] [ SQL ] SHOW COLUMNS FROM `groups` [ RunTime:0.000809s ]
[ sql ] [ SQL ] SELECT * FROM `groups` [ RunTime:0.000300s ]
[ sql ] [ SQL ] SELECT * FROM `groups` WHERE  `parent_id` = 0  AND `id` <> 2 ORDER BY `groups` [ RunTime:0.000362s ]
[ sql ] [ SQL ] SELECT `groups` FROM `groups` WHERE  `parent_id` = 1 [ RunTime:0.000271s ]
[ sql ] [ SQL ] SELECT * FROM `groups` WHERE  `parent_id` = 2 ORDER BY `groups` [ RunTime:0.000364s ]
[ sql ] [ SQL ] SELECT COUNT(*) AS tp_count FROM `note` WHERE  `groups` = 'Default' LIMIT 1 [ RunTime:0.001190s ]
[ sql ] [ SQL ] SELECT COUNT(*) AS tp_count FROM `note` LIMIT 1 [ RunTime:0.000248s ]
[ sql ] [ SQL ] SHOW COLUMNS FROM `yearlist` [ RunTime:0.000993s ]
[ sql ] [ SQL ] SELECT DISTINCT  `year` FROM `yearlist` ORDER BY year desc [ RunTime:0.000565s ]
---------------------------------------------------------------
[ 2018-11-22T20:26:13+08:00 ] 74.120.168.12 74.120.168.12 POST /daily/admin/note/ashownote2.html
[ info ] qingrang.top/daily/admin/note/ashownote2.html [运行时间：0.047634s][吞吐率：20.99req/s] [内存消耗：2,174.76kb] [文件加载：52]
[ info ] [ LANG ] /var/www/html/daily/thinkphp/lang/zh-cn.php
[ info ] [ ROUTE ] array (
  'type' => 'module',
  'module' => 
  array (
    0 => 'admin',
    1 => 'note',
    2 => 'ashownote2',
  ),
)
[ info ] [ HEADER ] array (
  'host' => 'qingrang.top',
  'content-length' => '23',
  'accept' => 'application/json, text/javascript, */*; q=0.01',
  'origin' => 'http://qingrang.top',
  'x-requested-with' => 'XMLHttpRequest',
  'user-agent' => 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/70.0.3538.102 Safari/537.36',
  'content-type' => 'application/x-www-form-urlencoded',
  'referer' => 'http://qingrang.top/daily/admin/note',
  'accept-encoding' => 'gzip, deflate',
  'accept-language' => 'zh-CN,zh;q=0.9,la;q=0.8,en;q=0.7,lb;q=0.6',
  'cookie' => 'Hm_lvt_1769181352e9adc950166aada465644e=1541082864,1541122974,1541171416,1542098176; PHPSESSID=cs4ll16s0kjq1pmnpkf29456n2',
  'connection' => 'close',
)
[ info ] [ PARAM ] array (
  'groupname' => 'DesignPattern',
)
[ info ] [ SESSION ] INIT array (
  'id' => '',
  'var_session_id' => '',
  'prefix' => 'think',
  'type' => '',
  'auto_start' => true,
)
[ info ] [ RUN ] app\admin\controller\Note->aShowNote2[ /var/www/html/daily/application/admin/controller/Note.php ]
[ info ] [ DB ] INIT mysql
[ info ] [ LOG ] INIT File
[ sql ] [ DB ] CONNECT:[ UseTime:0.000488s ] mysql:host=74.120.168.12;dbname=diary;charset=utf8
[ sql ] [ SQL ] SHOW COLUMNS FROM `note` [ RunTime:0.001253s ]
[ sql ] [ SQL ] SELECT * FROM `note` WHERE  `groups` = 'DesignPattern' ORDER BY date desc [ RunTime:0.001965s ]
---------------------------------------------------------------
[ 2018-11-22T20:26:19+08:00 ] 74.120.168.12 74.120.168.12 GET /daily/admin/note/shownote/id/237
[ info ] qingrang.top/daily/admin/note/shownote/id/237 [运行时间：0.057737s][吞吐率：17.32req/s] [内存消耗：1,990.66kb] [文件加载：55]
[ info ] [ LANG ] /var/www/html/daily/thinkphp/lang/zh-cn.php
[ info ] [ ROUTE ] array (
  'type' => 'module',
  'module' => 
  array (
    0 => 'admin',
    1 => 'note',
    2 => 'shownote',
  ),
)
[ info ] [ HEADER ] array (
  'host' => 'qingrang.top',
  'upgrade-insecure-requests' => '1',
  'user-agent' => 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/70.0.3538.102 Safari/537.36',
  'accept' => 'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8',
  'referer' => 'http://qingrang.top/daily/admin/note',
  'accept-encoding' => 'gzip, deflate',
  'accept-language' => 'zh-CN,zh;q=0.9,la;q=0.8,en;q=0.7,lb;q=0.6',
  'cookie' => 'Hm_lvt_1769181352e9adc950166aada465644e=1541082864,1541122974,1541171416,1542098176; PHPSESSID=cs4ll16s0kjq1pmnpkf29456n2',
  'connection' => 'close',
)
[ info ] [ PARAM ] array (
  'id' => '237',
)
[ info ] [ SESSION ] INIT array (
  'id' => '',
  'var_session_id' => '',
  'prefix' => 'think',
  'type' => '',
  'auto_start' => true,
)
[ info ] [ RUN ] app\admin\controller\Note->showNote[ /var/www/html/daily/application/admin/controller/Note.php ]
[ info ] [ DB ] INIT mysql
[ info ] [ VIEW ] /var/www/html/daily/application/admin/view/note/shownote.html [ array (
  0 => 'note',
  1 => 'groups',
) ]
[ info ] [ LOG ] INIT File
[ sql ] [ DB ] CONNECT:[ UseTime:0.000603s ] mysql:host=74.120.168.12;dbname=diary;charset=utf8
[ sql ] [ SQL ] SHOW COLUMNS FROM `note` [ RunTime:0.001224s ]
[ sql ] [ SQL ] SELECT * FROM `note` WHERE  `id` = 237 LIMIT 1 [ RunTime:0.000523s ]
[ sql ] [ SQL ] SHOW COLUMNS FROM `groups` [ RunTime:0.000839s ]
[ sql ] [ SQL ] SELECT * FROM `groups` [ RunTime:0.000260s ]
---------------------------------------------------------------
[ 2018-11-22T20:29:32+08:00 ] 74.120.168.12 74.120.168.12 POST /daily/admin/note/ashownote2.html
[ info ] qingrang.top/daily/admin/note/ashownote2.html [运行时间：0.048600s][吞吐率：20.58req/s] [内存消耗：2,182.77kb] [文件加载：52]
[ info ] [ LANG ] /var/www/html/daily/thinkphp/lang/zh-cn.php
[ info ] [ ROUTE ] array (
  'type' => 'module',
  'module' => 
  array (
    0 => 'admin',
    1 => 'note',
    2 => 'ashownote2',
  ),
)
[ info ] [ HEADER ] array (
  'host' => 'qingrang.top',
  'content-length' => '19',
  'accept' => 'application/json, text/javascript, */*; q=0.01',
  'origin' => 'http://qingrang.top',
  'x-requested-with' => 'XMLHttpRequest',
  'user-agent' => 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/70.0.3538.102 Safari/537.36',
  'content-type' => 'application/x-www-form-urlencoded',
  'referer' => 'http://qingrang.top/daily/admin/note',
  'accept-encoding' => 'gzip, deflate',
  'accept-language' => 'zh-CN,zh;q=0.9,la;q=0.8,en;q=0.7,lb;q=0.6',
  'cookie' => 'Hm_lvt_1769181352e9adc950166aada465644e=1541082864,1541122974,1541171416,1542098176; PHPSESSID=cs4ll16s0kjq1pmnpkf29456n2',
  'connection' => 'close',
)
[ info ] [ PARAM ] array (
  'groupname' => 'Algorithm',
)
[ info ] [ SESSION ] INIT array (
  'id' => '',
  'var_session_id' => '',
  'prefix' => 'think',
  'type' => '',
  'auto_start' => true,
)
[ info ] [ RUN ] app\admin\controller\Note->aShowNote2[ /var/www/html/daily/application/admin/controller/Note.php ]
[ info ] [ DB ] INIT mysql
[ info ] [ LOG ] INIT File
[ sql ] [ DB ] CONNECT:[ UseTime:0.000450s ] mysql:host=74.120.168.12;dbname=diary;charset=utf8
[ sql ] [ SQL ] SHOW COLUMNS FROM `note` [ RunTime:0.001279s ]
[ sql ] [ SQL ] SELECT * FROM `note` WHERE  `groups` = 'Algorithm' ORDER BY date desc [ RunTime:0.001319s ]
---------------------------------------------------------------
[ 2018-11-22T20:29:36+08:00 ] 74.120.168.12 74.120.168.12 POST /daily/admin/note/ashownote2.html
[ info ] qingrang.top/daily/admin/note/ashownote2.html [运行时间：0.051269s][吞吐率：19.50req/s] [内存消耗：2,545.68kb] [文件加载：52]
[ info ] [ LANG ] /var/www/html/daily/thinkphp/lang/zh-cn.php
[ info ] [ ROUTE ] array (
  'type' => 'module',
  'module' => 
  array (
    0 => 'admin',
    1 => 'note',
    2 => 'ashownote2',
  ),
)
[ info ] [ HEADER ] array (
  'host' => 'qingrang.top',
  'content-length' => '17',
  'accept' => 'application/json, text/javascript, */*; q=0.01',
  'origin' => 'http://qingrang.top',
  'x-requested-with' => 'XMLHttpRequest',
  'user-agent' => 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/70.0.3538.102 Safari/537.36',
  'content-type' => 'application/x-www-form-urlencoded',
  'referer' => 'http://qingrang.top/daily/admin/note',
  'accept-encoding' => 'gzip, deflate',
  'accept-language' => 'zh-CN,zh;q=0.9,la;q=0.8,en;q=0.7,lb;q=0.6',
  'cookie' => 'Hm_lvt_1769181352e9adc950166aada465644e=1541082864,1541122974,1541171416,1542098176; PHPSESSID=cs4ll16s0kjq1pmnpkf29456n2',
  'connection' => 'close',
)
[ info ] [ PARAM ] array (
  'groupname' => 'Android',
)
[ info ] [ SESSION ] INIT array (
  'id' => '',
  'var_session_id' => '',
  'prefix' => 'think',
  'type' => '',
  'auto_start' => true,
)
[ info ] [ RUN ] app\admin\controller\Note->aShowNote2[ /var/www/html/daily/application/admin/controller/Note.php ]
[ info ] [ DB ] INIT mysql
[ info ] [ LOG ] INIT File
[ sql ] [ DB ] CONNECT:[ UseTime:0.000404s ] mysql:host=74.120.168.12;dbname=diary;charset=utf8
[ sql ] [ SQL ] SHOW COLUMNS FROM `note` [ RunTime:0.001137s ]
[ sql ] [ SQL ] SELECT * FROM `note` WHERE  `groups` = 'Android' ORDER BY date desc [ RunTime:0.002467s ]
---------------------------------------------------------------
[ 2018-11-22T20:29:57+08:00 ] 74.120.168.12 74.120.168.12 GET /daily/admin/note/shownote/id/122
[ info ] qingrang.top/daily/admin/note/shownote/id/122 [运行时间：0.056277s][吞吐率：17.77req/s] [内存消耗：1,982.03kb] [文件加载：55]
[ info ] [ LANG ] /var/www/html/daily/thinkphp/lang/zh-cn.php
[ info ] [ ROUTE ] array (
  'type' => 'module',
  'module' => 
  array (
    0 => 'admin',
    1 => 'note',
    2 => 'shownote',
  ),
)
[ info ] [ HEADER ] array (
  'host' => 'qingrang.top',
  'upgrade-insecure-requests' => '1',
  'user-agent' => 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/70.0.3538.102 Safari/537.36',
  'accept' => 'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8',
  'referer' => 'http://qingrang.top/daily/admin/note',
  'accept-encoding' => 'gzip, deflate',
  'accept-language' => 'zh-CN,zh;q=0.9,la;q=0.8,en;q=0.7,lb;q=0.6',
  'cookie' => 'Hm_lvt_1769181352e9adc950166aada465644e=1541082864,1541122974,1541171416,1542098176; PHPSESSID=cs4ll16s0kjq1pmnpkf29456n2',
  'connection' => 'close',
)
[ info ] [ PARAM ] array (
  'id' => '122',
)
[ info ] [ SESSION ] INIT array (
  'id' => '',
  'var_session_id' => '',
  'prefix' => 'think',
  'type' => '',
  'auto_start' => true,
)
[ info ] [ RUN ] app\admin\controller\Note->showNote[ /var/www/html/daily/application/admin/controller/Note.php ]
[ info ] [ DB ] INIT mysql
[ info ] [ VIEW ] /var/www/html/daily/application/admin/view/note/shownote.html [ array (
  0 => 'note',
  1 => 'groups',
) ]
[ info ] [ LOG ] INIT File
[ sql ] [ DB ] CONNECT:[ UseTime:0.000650s ] mysql:host=74.120.168.12;dbname=diary;charset=utf8
[ sql ] [ SQL ] SHOW COLUMNS FROM `note` [ RunTime:0.001837s ]
[ sql ] [ SQL ] SELECT * FROM `note` WHERE  `id` = 122 LIMIT 1 [ RunTime:0.000547s ]
[ sql ] [ SQL ] SHOW COLUMNS FROM `groups` [ RunTime:0.001171s ]
[ sql ] [ SQL ] SELECT * FROM `groups` [ RunTime:0.000440s ]
---------------------------------------------------------------
[ 2018-11-22T20:30:55+08:00 ] 74.120.168.12 74.120.168.12 POST /daily/admin/note/ashownote2.html
[ info ] qingrang.top/daily/admin/note/ashownote2.html [运行时间：0.051049s][吞吐率：19.59req/s] [内存消耗：2,250.08kb] [文件加载：52]
[ info ] [ LANG ] /var/www/html/daily/thinkphp/lang/zh-cn.php
[ info ] [ ROUTE ] array (
  'type' => 'module',
  'module' => 
  array (
    0 => 'admin',
    1 => 'note',
    2 => 'ashownote2',
  ),
)
[ info ] [ HEADER ] array (
  'host' => 'qingrang.top',
  'content-length' => '16',
  'accept' => 'application/json, text/javascript, */*; q=0.01',
  'origin' => 'http://qingrang.top',
  'x-requested-with' => 'XMLHttpRequest',
  'user-agent' => 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/70.0.3538.102 Safari/537.36',
  'content-type' => 'application/x-www-form-urlencoded',
  'referer' => 'http://qingrang.top/daily/admin/note',
  'accept-encoding' => 'gzip, deflate',
  'accept-language' => 'zh-CN,zh;q=0.9,la;q=0.8,en;q=0.7,lb;q=0.6',
  'cookie' => 'Hm_lvt_1769181352e9adc950166aada465644e=1541082864,1541122974,1541171416,1542098176; PHPSESSID=cs4ll16s0kjq1pmnpkf29456n2',
  'connection' => 'close',
)
[ info ] [ PARAM ] array (
  'groupname' => 'Basics',
)
[ info ] [ SESSION ] INIT array (
  'id' => '',
  'var_session_id' => '',
  'prefix' => 'think',
  'type' => '',
  'auto_start' => true,
)
[ info ] [ RUN ] app\admin\controller\Note->aShowNote2[ /var/www/html/daily/application/admin/controller/Note.php ]
[ info ] [ DB ] INIT mysql
[ info ] [ LOG ] INIT File
[ sql ] [ DB ] CONNECT:[ UseTime:0.000613s ] mysql:host=74.120.168.12;dbname=diary;charset=utf8
[ sql ] [ SQL ] SHOW COLUMNS FROM `note` [ RunTime:0.001271s ]
[ sql ] [ SQL ] SELECT * FROM `note` WHERE  `groups` = 'Basics' ORDER BY date desc [ RunTime:0.001949s ]
---------------------------------------------------------------
[ 2018-11-22T20:31:14+08:00 ] 74.120.168.12 74.120.168.12 GET /daily/admin/note/shownote/id/137
[ info ] qingrang.top/daily/admin/note/shownote/id/137 [运行时间：0.047899s][吞吐率：20.88req/s] [内存消耗：1,980.79kb] [文件加载：55]
[ info ] [ LANG ] /var/www/html/daily/thinkphp/lang/zh-cn.php
[ info ] [ ROUTE ] array (
  'type' => 'module',
  'module' => 
  array (
    0 => 'admin',
    1 => 'note',
    2 => 'shownote',
  ),
)
[ info ] [ HEADER ] array (
  'host' => 'qingrang.top',
  'upgrade-insecure-requests' => '1',
  'user-agent' => 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/70.0.3538.102 Safari/537.36',
  'accept' => 'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8',
  'referer' => 'http://qingrang.top/daily/admin/note',
  'accept-encoding' => 'gzip, deflate',
  'accept-language' => 'zh-CN,zh;q=0.9,la;q=0.8,en;q=0.7,lb;q=0.6',
  'cookie' => 'Hm_lvt_1769181352e9adc950166aada465644e=1541082864,1541122974,1541171416,1542098176; PHPSESSID=cs4ll16s0kjq1pmnpkf29456n2',
  'connection' => 'close',
)
[ info ] [ PARAM ] array (
  'id' => '137',
)
[ info ] [ SESSION ] INIT array (
  'id' => '',
  'var_session_id' => '',
  'prefix' => 'think',
  'type' => '',
  'auto_start' => true,
)
[ info ] [ RUN ] app\admin\controller\Note->showNote[ /var/www/html/daily/application/admin/controller/Note.php ]
[ info ] [ DB ] INIT mysql
[ info ] [ VIEW ] /var/www/html/daily/application/admin/view/note/shownote.html [ array (
  0 => 'note',
  1 => 'groups',
) ]
[ info ] [ LOG ] INIT File
[ sql ] [ DB ] CONNECT:[ UseTime:0.000446s ] mysql:host=74.120.168.12;dbname=diary;charset=utf8
[ sql ] [ SQL ] SHOW COLUMNS FROM `note` [ RunTime:0.001557s ]
[ sql ] [ SQL ] SELECT * FROM `note` WHERE  `id` = 137 LIMIT 1 [ RunTime:0.000410s ]
[ sql ] [ SQL ] SHOW COLUMNS FROM `groups` [ RunTime:0.000838s ]
[ sql ] [ SQL ] SELECT * FROM `groups` [ RunTime:0.000275s ]
---------------------------------------------------------------
[ 2018-11-22T21:21:48+08:00 ] 74.120.168.12 74.120.168.12 GET /daily/admin/note
[ info ] qingrang.top/daily/admin/note [运行时间：0.066484s][吞吐率：15.04req/s] [内存消耗：2,301.92kb] [文件加载：56]
[ info ] [ LANG ] /var/www/html/daily/thinkphp/lang/zh-cn.php
[ info ] [ ROUTE ] array (
  'type' => 'module',
  'module' => 
  array (
    0 => 'admin',
    1 => 'note',
    2 => NULL,
  ),
)
[ info ] [ HEADER ] array (
  'host' => 'qingrang.top',
  'upgrade-insecure-requests' => '1',
  'user-agent' => 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/70.0.3538.102 Safari/537.36',
  'accept' => 'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8',
  'accept-encoding' => 'gzip, deflate',
  'accept-language' => 'zh-CN,zh;q=0.9,la;q=0.8,en;q=0.7,lb;q=0.6',
  'cookie' => 'Hm_lvt_1769181352e9adc950166aada465644e=1541082864,1541122974,1541171416,1542098176; PHPSESSID=cs4ll16s0kjq1pmnpkf29456n2',
  'connection' => 'close',
)
[ info ] [ PARAM ] array (
)
[ info ] [ SESSION ] INIT array (
  'id' => '',
  'var_session_id' => '',
  'prefix' => 'think',
  'type' => '',
  'auto_start' => true,
)
[ info ] [ RUN ] app\admin\controller\Note->notelst[ /var/www/html/daily/application/admin/controller/Note.php ]
[ info ] [ DB ] INIT mysql
[ info ] [ VIEW ] /var/www/html/daily/application/admin/view/note/notelst.html [ array (
  0 => 'stickList',
  1 => 'hide',
  2 => 'list',
  3 => 'list_new',
  4 => 'groups',
  5 => 'groups0',
  6 => 'groups1',
  7 => 'groups2',
  8 => 'count',
  9 => 'year',
  10 => 'default_num',
) ]
[ info ] [ LOG ] INIT File
[ sql ] [ DB ] CONNECT:[ UseTime:0.000583s ] mysql:host=74.120.168.12;dbname=diary;charset=utf8
[ sql ] [ SQL ] SHOW COLUMNS FROM `note` [ RunTime:0.001457s ]
[ sql ] [ SQL ] SELECT * FROM `note` WHERE  `groups` <> 'Personal'  AND `is_show` = 1 ORDER BY date desc,id desc [ RunTime:0.001944s ]
[ sql ] [ SQL ] SELECT * FROM `note` WHERE  `groups` <> 'Personal'  AND `is_show` <> 1 ORDER BY gmt_modified desc LIMIT 5 [ RunTime:0.002090s ]
[ sql ] [ SQL ] SHOW COLUMNS FROM `config` [ RunTime:0.000923s ]
[ sql ] [ SQL ] SELECT * FROM `config` WHERE  `name` = 'hide' LIMIT 1 [ RunTime:0.000310s ]
[ sql ] [ SQL ] SELECT * FROM `note` WHERE  `id` < 5 [ RunTime:0.000422s ]
[ sql ] [ SQL ] SHOW COLUMNS FROM `groups` [ RunTime:0.000897s ]
[ sql ] [ SQL ] SELECT * FROM `groups` [ RunTime:0.000340s ]
[ sql ] [ SQL ] SELECT * FROM `groups` WHERE  `parent_id` = 0  AND `id` <> 2 ORDER BY `groups` [ RunTime:0.000450s ]
[ sql ] [ SQL ] SELECT `groups` FROM `groups` WHERE  `parent_id` = 1 [ RunTime:0.000269s ]
[ sql ] [ SQL ] SELECT * FROM `groups` WHERE  `parent_id` = 2 ORDER BY `groups` [ RunTime:0.000482s ]
[ sql ] [ SQL ] SELECT COUNT(*) AS tp_count FROM `note` WHERE  `groups` = 'Default' LIMIT 1 [ RunTime:0.001177s ]
[ sql ] [ SQL ] SELECT COUNT(*) AS tp_count FROM `note` LIMIT 1 [ RunTime:0.000233s ]
[ sql ] [ SQL ] SHOW COLUMNS FROM `yearlist` [ RunTime:0.000948s ]
[ sql ] [ SQL ] SELECT DISTINCT  `year` FROM `yearlist` ORDER BY year desc [ RunTime:0.000600s ]
---------------------------------------------------------------
[ 2018-11-22T21:21:51+08:00 ] 74.120.168.12 74.120.168.12 GET /daily/admin/note/shownote/id/208.html
[ info ] qingrang.top/daily/admin/note/shownote/id/208.html [运行时间：0.047187s][吞吐率：21.19req/s] [内存消耗：1,983.90kb] [文件加载：55]
[ info ] [ LANG ] /var/www/html/daily/thinkphp/lang/zh-cn.php
[ info ] [ ROUTE ] array (
  'type' => 'module',
  'module' => 
  array (
    0 => 'admin',
    1 => 'note',
    2 => 'shownote',
  ),
)
[ info ] [ HEADER ] array (
  'host' => 'qingrang.top',
  'upgrade-insecure-requests' => '1',
  'user-agent' => 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/70.0.3538.102 Safari/537.36',
  'accept' => 'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8',
  'referer' => 'http://qingrang.top/daily/admin/note',
  'accept-encoding' => 'gzip, deflate',
  'accept-language' => 'zh-CN,zh;q=0.9,la;q=0.8,en;q=0.7,lb;q=0.6',
  'cookie' => 'Hm_lvt_1769181352e9adc950166aada465644e=1541082864,1541122974,1541171416,1542098176; PHPSESSID=cs4ll16s0kjq1pmnpkf29456n2',
  'connection' => 'close',
)
[ info ] [ PARAM ] array (
  'id' => '208',
)
[ info ] [ SESSION ] INIT array (
  'id' => '',
  'var_session_id' => '',
  'prefix' => 'think',
  'type' => '',
  'auto_start' => true,
)
[ info ] [ RUN ] app\admin\controller\Note->showNote[ /var/www/html/daily/application/admin/controller/Note.php ]
[ info ] [ DB ] INIT mysql
[ info ] [ VIEW ] /var/www/html/daily/application/admin/view/note/shownote.html [ array (
  0 => 'note',
  1 => 'groups',
) ]
[ info ] [ LOG ] INIT File
[ sql ] [ DB ] CONNECT:[ UseTime:0.000589s ] mysql:host=74.120.168.12;dbname=diary;charset=utf8
[ sql ] [ SQL ] SHOW COLUMNS FROM `note` [ RunTime:0.001273s ]
[ sql ] [ SQL ] SELECT * FROM `note` WHERE  `id` = 208 LIMIT 1 [ RunTime:0.000449s ]
[ sql ] [ SQL ] SHOW COLUMNS FROM `groups` [ RunTime:0.000943s ]
[ sql ] [ SQL ] SELECT * FROM `groups` [ RunTime:0.000262s ]
---------------------------------------------------------------
[ 2018-11-22T22:13:20+08:00 ] 74.120.168.12 74.120.168.12 POST /daily/admin/note/savenote.html
[ info ] qingrang.top/daily/admin/note/savenote.html [运行时间：0.056329s][吞吐率：17.75req/s] [内存消耗：2,175.50kb] [文件加载：56]
[ info ] [ LANG ] /var/www/html/daily/thinkphp/lang/zh-cn.php
[ info ] [ ROUTE ] array (
  'type' => 'module',
  'module' => 
  array (
    0 => 'admin',
    1 => 'note',
    2 => 'savenote',
  ),
)
[ info ] [ HEADER ] array (
  'host' => 'qingrang.top',
  'content-length' => '34793',
  'accept' => 'text/plain, */*; q=0.01',
  'origin' => 'http://qingrang.top',
  'x-requested-with' => 'XMLHttpRequest',
  'user-agent' => 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/70.0.3538.102 Safari/537.36',
  'content-type' => 'application/x-www-form-urlencoded; charset=UTF-8',
  'referer' => 'http://qingrang.top/daily/admin/note/editNote/id/253',
  'accept-encoding' => 'gzip, deflate',
  'accept-language' => 'zh-CN,zh;q=0.9,la;q=0.8,en;q=0.7,lb;q=0.6',
  'cookie' => 'Hm_lvt_1769181352e9adc950166aada465644e=1541082864,1541122974,1541171416,1542098176; PHPSESSID=cs4ll16s0kjq1pmnpkf29456n2',
  'connection' => 'close',
)
[ info ] [ PARAM ] array (
  'ogroup' => 'Default',
  'context' => '# Spring(三) - Spring 与 DAO
[TOC]

Spring 与 Dao 部分，是 Spring 的两大核心技术 IoC 与 AOP 的典型应用体现：
- 对于 JDBC 模板的使用，是 IoC 的应用，是将 JDBC 模板对象注入给了 Dao 层的实现类。
- 对于 Spring 的事务管理， 是 AOP 的应用，将事务作为切面织入到了 Service 层的业务方法中。

## Spring 与 JDBC 模板
*Student.java - 实体类*
```
public class Student {
	private Integer id;
	private String name;
	private int age;
	public Student() {
		super();
	}
	public Student(String name, int age) {
		super();
		this.name = name;
		this.age = age;
	}
	public Integer getId() {
		return id;
	}
	public void setId(Integer id) {
		this.id = id;
	}
	public String getName() {
		return name;
	}
	public void setName(String name) {
		this.name = name;
	}
	public int getAge() {
		return age;
	}
	public void setAge(int age) {
		this.age = age;
	}
	@Override
	public String toString() {
		return "Student [id=" + id + ", name=" + name + ", age=" + age + "]";
	}
}
```
*IStudentDao.java - 接口*
```
public interface IStudentDao {
	void insertStudent(Student student);
	void deleteById(int id);
	void updateStudent(Student student);
	
	List<String> selectAllStudentsNames();
	String selectStudentNameById(int id);
	
	List<Student> selectAllStudents();
	Student selectStudentById(int id);
}
```
*StudentDaoImpl.java - 实现类*
```
public class StudentDaoImpl extends JdbcDaoSupport implements IStudentDao {

	@Override
	public void insertStudent(Student student) {
		String sql = "insert into student(name,age) values(?,?)";
		this.getJdbcTemplate().update(sql, student.getName(), student.getAge());
	}

	@Override
	public void deleteById(int id) {
		String sql = "delete from student where id=?";
		this.getJdbcTemplate().update(sql, id);
	}

	@Override
	public void updateStudent(Student student) {
		String sql = "update student set name=?, age=? where id=?";
		this.getJdbcTemplate().update(sql, student.getName(), student.getAge(), student.getId());
	}

	@Override
	public List<String> selectAllStudentsNames() {
		String sql = "select name from student";
		return this.getJdbcTemplate().queryForList(sql, String.class);
	}

	@Override
	public String selectStudentNameById(int id) {
		String sql = "select name from student where id=?";
		return this.getJdbcTemplate().queryForObject(sql, String.class, id);
	}

	@Override
	public List<Student> selectAllStudents() {
		String sql = "select id,name,age from student";
		return this.getJdbcTemplate().query(sql, new StudentRowMapper());
	}

	@Override
	public Student selectStudentById(int id) {
		String sql = "select id,name,age from student where id=?";
		return this.getJdbcTemplate().queryForObject(sql, new StudentRowMapper(), id);
	}

}
```
*StudentRowMapper.java*
```
public class StudentRowMapper implements RowMapper<Student> {
	// rs：当查询出总的结果集后，框架会自动遍历这个结果集，每一次遍历的一行数据，都会被存放到
	//     这个方法的rs参数中。也就是说，这里的rs代表的是一行数据，并非所有查询结果。换个角度
	//     来说，只要能执行到这个方法，就说明这里的rs不会是空的
	@Override
	public Student mapRow(ResultSet rs, int rowNum) throws SQLException {
		Student student = new Student();
		student.setId(rs.getInt("id"));
		student.setName(rs.getString("name"));
		student.setAge(rs.getInt("age"));
		return student;
	}
}
```
*IStudentService.java*
```
public interface IStudentService {
	void addStudent(Student student);
	void removeById(int id);
	void modifyStudent(Student student);
	
	List<String> findAllStudentsNames();
	String findStudentNameById(int id);
	
	List<Student> findAllStudents();
	Student findStudentById(int id);
}
```
*StudentServiceImpl.java*
```
public class StudentServiceImpl implements IStudentService {
	private IStudentDao dao;
	
	public void setDao(IStudentDao dao) {
		this.dao = dao;
	}

	@Override
	public void addStudent(Student student) {
		dao.insertStudent(student);
	}

	@Override
	public void removeById(int id) {
		dao.deleteById(id);
	}

	@Override
	public void modifyStudent(Student student) {
		dao.updateStudent(student);
	}

	@Override
	public List<String> findAllStudentsNames() {
		return dao.selectAllStudentsNames();
	}

	@Override
	public String findStudentNameById(int id) {
		return dao.selectStudentNameById(id);
	}

	@Override
	public List<Student> findAllStudents() {
		return dao.selectAllStudents();
	}

	@Override
	public Student findStudentById(int id) {
		return dao.selectStudentById(id);
	}

}
```
*MyTest.java*
```
public class MyTest {
	
	private IStudentService service;

	@Before
	public void before() {
		// 创建容器对象，加载Spring配置文件
		String resource = "applicationContext.xml";
		ApplicationContext ac = new ClassPathXmlApplicationContext(resource);
		service = (IStudentService) ac.getBean("studentService");
	}
	
	@Test
	public void test01() {
		Student student = new Student("张三", 23);
		service.addStudent(student);
	}
	
	@Test
	public void test02() {
		service.removeById(2);
	}
	
	@Test
	public void test03() {
		Student student = new Student("张三", 23);
		student.setId(3);
		service.modifyStudent(student);
	}
	
	@Test
	public void test04() {
		List<String> names = service.findAllStudentsNames();
		System.out.println(names);
	}
	
	@Test
	public void test05() {
		String name = service.findStudentNameById(3);
		System.out.println(name);
	}
	
	@Test
	public void test06() {
		List<Student> students = service.findAllStudents();
		for (Student student : students) {
			System.out.println(student);
		}
	}
	
	@Test
	public void test07() {
		Student student = service.findStudentById(3);
		System.out.println(student);
	}
}
```
*applicationContext.mxl*
```
<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xmlns:context="http://www.springframework.org/schema/context" xsi:schemaLocation="
        http://www.springframework.org/schema/beans 
        http://www.springframework.org/schema/beans/spring-beans.xsd
        http://www.springframework.org/schema/context 
        http://www.springframework.org/schema/context/spring-context.xsd">

	<!-- 注册数据源：Spring内置连接池 -->
	<bean id="myDataSource" class="org.springframework.jdbc.datasource.DriverManagerDataSource">
		<property name="driverClassName" value="${jdbc.driver}"/>
		<property name="url" value="${jdbc.url}"/>
		<property name="username" value="${jdbc.user}"/>
		<property name="password" value="${jdbc.password}"/>
	</bean>

	<!-- 注册属性文件：方式一 -->
	<!-- 
	<bean class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
		<property name="location" value="classpath:jdbc.properties"/>
	</bean>
	 -->

	<!-- 注册属性文件：方式二 -->
	<context:property-placeholder location="classpath:jdbc.properties"/>
	
	<!-- 注册 Dao -->
	<bean id="studentDao" class="top.qingrang.dao.StudentDaoImpl">
		<property name="dataSource" ref="myDataSource"/>
	</bean>
	
	<!-- 注册 Service -->
	<bean id="studentService" class="top.qingrang.service.StudentServiceImpl">
		<property name="dao" ref="studentDao"/>
	</bean>

</beans>
```
## Spring 的事务管理
事务原本是数据库中的概念，在 Dao 层。但一般情况下，需要将事务提升到业务层，即 Service 层。这样做是为了能够使用事务的特性来管理具体的业务。在 Spring 中通常可以通过以下三种方式来实现对事务的管理：
- 使用 Spring 的事务代理工厂管理事务
- 使用 Spring 的事务注解管理事务
- 使用 AspectJ 的 AOP 配置管理事务

### Spring 事务管理 API
Spring 的事务管理，主要用到两个事务相关的接口。
#### 事务管理器接口
事务管理器是 PlatformTransactionManager 接口对象。其主要用于完成事务的提交、回滚，及获取事务的状态信息。
##### 常用的两个实现类
PlatformTransactionManager 接口有两个常用的实现类：
- DataSourceTransactionManager：使用 JDBC 或 iBatis 进行持久化数据时使用。
- HibernateTransactionManager：使用 Hibernate 进行持久化数据时使用。

##### Spring 的回滚方式
Spring 事务的默认回滚方式是： 发生运行时异常时回滚，发生受查异常时提交。 不过，对于受查异常，程序员也可以手工设置其回滚方式。

#### 事务定义接口
事务定义接口 TransactionDefinition 中定义了事务描述相关的三类常量：事务隔离级别、事务传播行为、事务默认超时时限， 及对它们的操作。
##### 定义了五个事务隔离级别常量
这些常量均是以 ISOLATION_开头。即形如 ISOLATION_XXX。
- DEFAULT： 采用 DB 默认的事务隔离级别。 MySql 的默认为 REPEATABLE_READ；Oracle 默认为 READ_COMMITTED。
- READ_UNCOMMITTED： 读未提交。 未解决任何并发问题。
- READ_COMMITTED： 读已提交。解决脏读，存在不可重复读与幻读。
- REPEATABLE_READ： 可重复读。解决脏读、不可重复读，存在幻读
- SERIALIZABLE： 串行化。不存在并发问题。

##### 定义了七个事务传播行为常量
所谓事务传播行为是指，处于不同事务中的方法在相互调用时，执行期间事务的维护情况。如， A 事务中的方法 doSome()调用 B 事务中的方法 doOther()，在调用执行期间事务的维护情况，就称为事务传播行为。事务传播行为是加在方法上的。事务传播行为常量都是以 PROPAGATION_ 开头，形如 PROPAGATION_XXX。
1. REQUIRED：
指定的方法必须在事务内执行。若当前存在事务，就加入到当前事务中；若当前没有事务，则创建一个新事务。这种传播行为是最常见的选择，也是 Spring 默认的事务传播行为。
如该传播行为加在 doOther()方法上。若 doSome()方法在调用 doOther()方法时就是在事务内运行的，则 doOther()方法的执行也加入到该事务内执行。若 doSome()方法在调用doOther()方法时没有在事务内执行，则 doOther()方法会创建一个事务，并在其中执行。
![mark](https://daily-1252869435.cos.ap-chengdu.myqcloud.com/2018-11-21-23-21-56.png)
1. SUPPORTS
指定的方法支持当前事务，但若当前没有事务，也可以以非事务方式执行。
![mark](https://daily-1252869435.cos.ap-chengdu.myqcloud.com/2018-11-21-23-22-13.png)
1. MANDATORY
指定的方法必须在当前事务内执行，若当前没有事务，则直接抛出异常。
![mark](https://daily-1252869435.cos.ap-chengdu.myqcloud.com/2018-11-21-23-22-40.png)
1. REQUIRES_NEW
总是新建一个事务，若当前存在事务，就将当前事务挂起，直到新事务执行完毕。
![mark](https://daily-1252869435.cos.ap-chengdu.myqcloud.com/2018-11-21-23-22-55.png)
1. NOT_SUPPORTED
指定的方法不能在事务环境中执行，若当前存在事务，就将当前事务挂起。
![mark](https://daily-1252869435.cos.ap-chengdu.myqcloud.com/2018-11-21-23-23-07.png)
1. NEVER
指定的方法不能在事务环境下执行，若当前存在事务，就直接抛出异常。
![mark](https://daily-1252869435.cos.ap-chengdu.myqcloud.com/2018-11-21-23-23-22.png)
1. NESTED
指定的方法必须在事务内执行。若当前存在事务，则在嵌套事务内执行；若当前没有事务，则创建一个新事务。
![mark](https://daily-1252869435.cos.ap-chengdu.myqcloud.com/2018-11-21-23-23-40.png)

##### 定义了默认事务超时时限
常量 TIMEOUT_DEFAULT 定义了事务底层默认的超时时限，及不支持事务超时时限设置的 none 值。

注意，事务的超时时限起作用的条件比较多，且超时的时间计算点较复杂。所以，该值一般就使用默认值即可。
## 使用 AspectJ 的 AOP 配置管理事务
>本例要实现模拟购买股票。存在两个实体：银行账户 Account 与股票账户 Stock。当要购买股票时，需要从 Account 中扣除相应金额的存款，然后在 Stock 中增加相应的股票数量。而在这个过程中，可能会抛出一个用户自定义的异常。异常的抛出，将会使两个操作回滚。

*Account.java*
```
public class Account {
	private Integer aid;
	private String aname;
	private double balance;  // 余额
	public Account() {
		super();
	}
	public Account(String aname, double balance) {
		super();
		this.aname = aname;
		this.balance = balance;
	}
	public Integer getAid() {
		return aid;
	}
	public void setAid(Integer aid) {
		this.aid = aid;
	}
	public String getAname() {
		return aname;
	}
	public void setAname(String aname) {
		this.aname = aname;
	}
	public double getBalance() {
		return balance;
	}
	public void setBalance(double balance) {
		this.balance = balance;
	}
	@Override
	public String toString() {
		return "Account [aid=" + aid + ", aname=" + aname + ", balance="
				+ balance + "]";
	}
}
```

*Stock.java*
```
public class Stock {
	private Integer sid;
	private String sname;   // 股票名称
	private int count;      // 股票数量
	public Stock() {
		super();
	}
	public Stock(String sname, int count) {
		super();
		this.sname = sname;
		this.count = count;
	}
	public Integer getSid() {
		return sid;
	}
	public void setSid(Integer sid) {
		this.sid = sid;
	}
	public String getSname() {
		return sname;
	}
	public void setSname(String sname) {
		this.sname = sname;
	}
	public int getCount() {
		return count;
	}
	public void setCount(int count) {
		this.count = count;
	}
	@Override
	public String toString() {
		return "Stock [sid=" + sid + ", sname=" + sname + ", count=" + count
				+ "]";
	}
}
```

*IAccountDao.java*
```
public interface IAccountDao {
	void insertAccount(String aname, double money);

	void updateAccount(String aname, double money, boolean isBuy);
}
```

*AccountDaoImpl.java*
```
public class AccountDaoImpl extends JdbcDaoSupport implements IAccountDao {
	@Override
	public void insertAccount(String aname, double money) {
		String sql = "insert into account(aname, balance) values(?,?)";
		this.getJdbcTemplate().update(sql, aname, money);
	}

	@Override
	public void updateAccount(String aname, double money, boolean isBuy) {
		String sql = "update account set balance=balance+? where aname=?";
		if (isBuy) {
			sql = "update account set balance=balance-? where aname=?";
		}
		this.getJdbcTemplate().update(sql, money, aname);
	}
}
```

*IStockDao.java*
```
public interface IStockDao {
	void insertStock(String sname, int amount);

	void updateStock(String sname, int amount, boolean isBuy);
}
```

*StockDaoImpl.java*
```
public class StockDaoImpl extends JdbcDaoSupport implements IStockDao {
	@Override
	public void insertStock(String sname, int amount) {
		String sql = "insert into stock(sname, count) values(?,?)";
		this.getJdbcTemplate().update(sql, sname, amount);
	}

	@Override
	public void updateStock(String sname, int amount, boolean isBuy) {
		String sql = "update stock set count=count-? where sname=?";
		if(isBuy) {
			sql = "update stock set count=count+? where sname=?";
		}
		this.getJdbcTemplate().update(sql, amount, sname);
	}
}
```

*IBuyStockService.java*
```
public interface IBuyStockService {
	void openAccount(String aname, double money);
	void openStock(String sname, int amount);
	void buyStock(String aname, double money, String sname, int amount) throws BuyStockException;
}
```

*BuyStockServiceImpl.java*
```
public class BuyStockServiceImpl implements IBuyStockService {
	private IAccountDao adao;
	private IStockDao sdao;
	
	public void setAdao(IAccountDao adao) {
		this.adao = adao;
	}

	public void setSdao(IStockDao sdao) {
		this.sdao = sdao;
	}

	@Override
	public void openAccount(String aname, double money) {
		adao.insertAccount(aname, money);
	}

	@Override
	public void openStock(String sname, int amount) {
		sdao.insertStock(sname, amount);
	}

	@Override
	public void buyStock(String aname, double money, String sname, int amount) throws BuyStockException{
		boolean isBuy = true;
		adao.updateAccount(aname, money, isBuy);
		if (1 == 1) {
			throw new BuyStockException("购买股票异常");
		}
		sdao.updateStock(sname, amount, isBuy);
	}
}
```

*BuyStockException.java*
```
public class BuyStockException extends Exception {
	public BuyStockException() {
		super();
	}

	public BuyStockException(String message) {
		super(message);
	}
}
```

*MyTest.java*
```
public class MyTest {
	private IBuyStockService service;

	@Before
	public void before() {
		// 创建容器对象，加载Spring配置文件
		String resource = "applicationContext.xml";
		ApplicationContext ac = new ClassPathXmlApplicationContext(resource);
		service = (IBuyStockService) ac.getBean("buyStockService");
	}
	
	@Test
	public void test01() {
		service.openAccount("张三", 10000);
		service.openStock("北京动力节点", 0);
	}
	
	@Test
	public void test02() throws BuyStockException {
		service.buyStock("张三", 2000, "北京动力节点", 5);
	}
}
```

*applicationContext.xml*
```
<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:aop="http://www.springframework.org/schema/aop" 
	xmlns:tx="http://www.springframework.org/schema/tx"
	xsi:schemaLocation="
        http://www.springframework.org/schema/beans 
        http://www.springframework.org/schema/beans/spring-beans.xsd
        http://www.springframework.org/schema/context 
        http://www.springframework.org/schema/context/spring-context.xsd
        http://www.springframework.org/schema/tx 
        http://www.springframework.org/schema/tx/spring-tx.xsd
        http://www.springframework.org/schema/aop 
        http://www.springframework.org/schema/aop/spring-aop.xsd">
	
	<!-- ================================= IoC ==================================== -->
	<!-- 注册数据源：Spring内置连接池 -->
	<bean id="myDataSource" class="org.springframework.jdbc.datasource.DriverManagerDataSource">
		<property name="driverClassName" value="${jdbc.driver}"/>
		<property name="url" value="${jdbc.url}"/>
		<property name="username" value="${jdbc.user}"/>
		<property name="password" value="${jdbc.password}"/>
	</bean>
	
	<!-- 注册属性文件 -->
	<context:property-placeholder location="classpath:jdbc.properties"/>
	
	<!-- 注册Dao -->
	<bean id="accountDao" class="top.qingrang.dao.AccountDaoImpl">
		<property name="dataSource" ref="myDataSource"/>
	</bean>
	<bean id="stockDao" class="top.qingrang.dao.StockDaoImpl">
		<property name="dataSource" ref="myDataSource"/>
	</bean>
	
	<!-- 注册Service -->
	<bean id="buyStockService" class="top.qingrang.service.BuyStockServiceImpl">
		<property name="adao" ref="accountDao"/>
		<property name="sdao" ref="stockDao"/>
	</bean>

	<!-- ================================= AOP ==================================== -->
	
	<!-- 注册事务管理器 -->
	<bean id="myTransactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource" ref="myDataSource"/>
	</bean>
	
	<!-- 注册事务通知 -->
	<tx:advice id="txAdvice" transaction-manager="myTransactionManager">
		<tx:attributes>
			<!-- 这里指定的是：为每一个连接点指定所要应用的事务属性 -->
			<tx:method name="open*" isolation="DEFAULT" propagation="REQUIRED"/>
			<tx:method name="buyStock" isolation="DEFAULT" propagation="REQUIRED" rollback-for="BuyStockException"/>
		</tx:attributes>
	</tx:advice>
	
	<!-- AOP配置 -->
	<aop:config>
		<!-- 这里指定的是切入点 -->
		<aop:pointcut expression="execution(* *..service.*.*(..))" id="myPointcut"/>
		<aop:advisor advice-ref="txAdvice" pointcut-ref="myPointcut"/>
	</aop:config>
</beans>
```



',
)
[ info ] [ SESSION ] INIT array (
  'id' => '',
  'var_session_id' => '',
  'prefix' => 'think',
  'type' => '',
  'auto_start' => true,
)
[ info ] [ RUN ] app\admin\controller\Note->saveNote[ /var/www/html/daily/application/admin/controller/Note.php ]
[ info ] [ DB ] INIT mysql
[ info ] [ CACHE ] INIT File
[ info ] [ LOG ] INIT File
[ sql ] [ DB ] CONNECT:[ UseTime:0.000852s ] mysql:host=74.120.168.12;dbname=diary;charset=utf8
[ sql ] [ SQL ] SHOW COLUMNS FROM `note` [ RunTime:0.001505s ]
[ sql ] [ SQL ] UPDATE `note`  SET `title`='Spring(三) - Spring 与 DAO',`content`='# Spring(三) - Spring 与 DAO\n[TOC]\n\nSpring 与 Dao 部分，是 Spring 的两大核心技术 IoC 与 AOP 的典型应用体现：\n- 对于 JDBC 模板的使用，是 IoC 的应用，是将 JDBC 模板对象注入给了 Dao 层的实现类。\n- 对于 Spring 的事务管理， 是 AOP 的应用，将事务作为切面织入到了 Service 层的业务方法中。\n\n## Spring 与 JDBC 模板\n*Student.java - 实体类*\n```\npublic class Student {\n	private Integer id;\n	private String name;\n	private int age;\n	public Student() {\n		super();\n	}\n	public Student(String name, int age) {\n		super();\n		this.name = name;\n		this.age = age;\n	}\n	public Integer getId() {\n		return id;\n	}\n	public void setId(Integer id) {\n		this.id = id;\n	}\n	public String getName() {\n		return name;\n	}\n	public void setName(String name) {\n		this.name = name;\n	}\n	public int getAge() {\n		return age;\n	}\n	public void setAge(int age) {\n		this.age = age;\n	}\n	@Override\n	public String toString() {\n		return \"Student [id=\" + id + \", name=\" + name + \", age=\" + age + \"]\";\n	}\n}\n```\n*IStudentDao.java - 接口*\n```\npublic interface IStudentDao {\n	void insertStudent(Student student);\n	void deleteById(int id);\n	void updateStudent(Student student);\n	\n	List<String> selectAllStudentsNames();\n	String selectStudentNameById(int id);\n	\n	List<Student> selectAllStudents();\n	Student selectStudentById(int id);\n}\n```\n*StudentDaoImpl.java - 实现类*\n```\npublic class StudentDaoImpl extends JdbcDaoSupport implements IStudentDao {\n\n	@Override\n	public void insertStudent(Student student) {\n		String sql = \"insert into student(name,age) values(?,?)\";\n		this.getJdbcTemplate().update(sql, student.getName(), student.getAge());\n	}\n\n	@Override\n	public void deleteById(int id) {\n		String sql = \"delete from student where id=?\";\n		this.getJdbcTemplate().update(sql, id);\n	}\n\n	@Override\n	public void updateStudent(Student student) {\n		String sql = \"update student set name=?, age=? where id=?\";\n		this.getJdbcTemplate().update(sql, student.getName(), student.getAge(), student.getId());\n	}\n\n	@Override\n	public List<String> selectAllStudentsNames() {\n		String sql = \"select name from student\";\n		return this.getJdbcTemplate().queryForList(sql, String.class);\n	}\n\n	@Override\n	public String selectStudentNameById(int id) {\n		String sql = \"select name from student where id=?\";\n		return this.getJdbcTemplate().queryForObject(sql, String.class, id);\n	}\n\n	@Override\n	public List<Student> selectAllStudents() {\n		String sql = \"select id,name,age from student\";\n		return this.getJdbcTemplate().query(sql, new StudentRowMapper());\n	}\n\n	@Override\n	public Student selectStudentById(int id) {\n		String sql = \"select id,name,age from student where id=?\";\n		return this.getJdbcTemplate().queryForObject(sql, new StudentRowMapper(), id);\n	}\n\n}\n```\n*StudentRowMapper.java*\n```\npublic class StudentRowMapper implements RowMapper<Student> {\n	// rs：当查询出总的结果集后，框架会自动遍历这个结果集，每一次遍历的一行数据，都会被存放到\n	//     这个方法的rs参数中。也就是说，这里的rs代表的是一行数据，并非所有查询结果。换个角度\n	//     来说，只要能执行到这个方法，就说明这里的rs不会是空的\n	@Override\n	public Student mapRow(ResultSet rs, int rowNum) throws SQLException {\n		Student student = new Student();\n		student.setId(rs.getInt(\"id\"));\n		student.setName(rs.getString(\"name\"));\n		student.setAge(rs.getInt(\"age\"));\n		return student;\n	}\n}\n```\n*IStudentService.java*\n```\npublic interface IStudentService {\n	void addStudent(Student student);\n	void removeById(int id);\n	void modifyStudent(Student student);\n	\n	List<String> findAllStudentsNames();\n	String findStudentNameById(int id);\n	\n	List<Student> findAllStudents();\n	Student findStudentById(int id);\n}\n```\n*StudentServiceImpl.java*\n```\npublic class StudentServiceImpl implements IStudentService {\n	private IStudentDao dao;\n	\n	public void setDao(IStudentDao dao) {\n		this.dao = dao;\n	}\n\n	@Override\n	public void addStudent(Student student) {\n		dao.insertStudent(student);\n	}\n\n	@Override\n	public void removeById(int id) {\n		dao.deleteById(id);\n	}\n\n	@Override\n	public void modifyStudent(Student student) {\n		dao.updateStudent(student);\n	}\n\n	@Override\n	public List<String> findAllStudentsNames() {\n		return dao.selectAllStudentsNames();\n	}\n\n	@Override\n	public String findStudentNameById(int id) {\n		return dao.selectStudentNameById(id);\n	}\n\n	@Override\n	public List<Student> findAllStudents() {\n		return dao.selectAllStudents();\n	}\n\n	@Override\n	public Student findStudentById(int id) {\n		return dao.selectStudentById(id);\n	}\n\n}\n```\n*MyTest.java*\n```\npublic class MyTest {\n	\n	private IStudentService service;\n\n	@Before\n	public void before() {\n		// 创建容器对象，加载Spring配置文件\n		String resource = \"applicationContext.xml\";\n		ApplicationContext ac = new ClassPathXmlApplicationContext(resource);\n		service = (IStudentService) ac.getBean(\"studentService\");\n	}\n	\n	@Test\n	public void test01() {\n		Student student = new Student(\"张三\", 23);\n		service.addStudent(student);\n	}\n	\n	@Test\n	public void test02() {\n		service.removeById(2);\n	}\n	\n	@Test\n	public void test03() {\n		Student student = new Student(\"张三\", 23);\n		student.setId(3);\n		service.modifyStudent(student);\n	}\n	\n	@Test\n	public void test04() {\n		List<String> names = service.findAllStudentsNames();\n		System.out.println(names);\n	}\n	\n	@Test\n	public void test05() {\n		String name = service.findStudentNameById(3);\n		System.out.println(name);\n	}\n	\n	@Test\n	public void test06() {\n		List<Student> students = service.findAllStudents();\n		for (Student student : students) {\n			System.out.println(student);\n		}\n	}\n	\n	@Test\n	public void test07() {\n		Student student = service.findStudentById(3);\n		System.out.println(student);\n	}\n}\n```\n*applicationContext.mxl*\n```\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<beans xmlns=\"http://www.springframework.org/schema/beans\"\n    xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n    xmlns:context=\"http://www.springframework.org/schema/context\" xsi:schemaLocation=\"\n        http://www.springframework.org/schema/beans \n        http://www.springframework.org/schema/beans/spring-beans.xsd\n        http://www.springframework.org/schema/context \n        http://www.springframework.org/schema/context/spring-context.xsd\">\n\n	<!-- 注册数据源：Spring内置连接池 -->\n	<bean id=\"myDataSource\" class=\"org.springframework.jdbc.datasource.DriverManagerDataSource\">\n		<property name=\"driverClassName\" value=\"${jdbc.driver}\"/>\n		<property name=\"url\" value=\"${jdbc.url}\"/>\n		<property name=\"username\" value=\"${jdbc.user}\"/>\n		<property name=\"password\" value=\"${jdbc.password}\"/>\n	</bean>\n\n	<!-- 注册属性文件：方式一 -->\n	<!-- \n	<bean class=\"org.springframework.beans.factory.config.PropertyPlaceholderConfigurer\">\n		<property name=\"location\" value=\"classpath:jdbc.properties\"/>\n	</bean>\n	 -->\n\n	<!-- 注册属性文件：方式二 -->\n	<context:property-placeholder location=\"classpath:jdbc.properties\"/>\n	\n	<!-- 注册 Dao -->\n	<bean id=\"studentDao\" class=\"top.qingrang.dao.StudentDaoImpl\">\n		<property name=\"dataSource\" ref=\"myDataSource\"/>\n	</bean>\n	\n	<!-- 注册 Service -->\n	<bean id=\"studentService\" class=\"top.qingrang.service.StudentServiceImpl\">\n		<property name=\"dao\" ref=\"studentDao\"/>\n	</bean>\n\n</beans>\n```\n## Spring 的事务管理\n事务原本是数据库中的概念，在 Dao 层。但一般情况下，需要将事务提升到业务层，即 Service 层。这样做是为了能够使用事务的特性来管理具体的业务。在 Spring 中通常可以通过以下三种方式来实现对事务的管理：\n- 使用 Spring 的事务代理工厂管理事务\n- 使用 Spring 的事务注解管理事务\n- 使用 AspectJ 的 AOP 配置管理事务\n\n### Spring 事务管理 API\nSpring 的事务管理，主要用到两个事务相关的接口。\n#### 事务管理器接口\n事务管理器是 PlatformTransactionManager 接口对象。其主要用于完成事务的提交、回滚，及获取事务的状态信息。\n##### 常用的两个实现类\nPlatformTransactionManager 接口有两个常用的实现类：\n- DataSourceTransactionManager：使用 JDBC 或 iBatis 进行持久化数据时使用。\n- HibernateTransactionManager：使用 Hibernate 进行持久化数据时使用。\n\n##### Spring 的回滚方式\nSpring 事务的默认回滚方式是： 发生运行时异常时回滚，发生受查异常时提交。 不过，对于受查异常，程序员也可以手工设置其回滚方式。\n\n#### 事务定义接口\n事务定义接口 TransactionDefinition 中定义了事务描述相关的三类常量：事务隔离级别、事务传播行为、事务默认超时时限， 及对它们的操作。\n##### 定义了五个事务隔离级别常量\n这些常量均是以 ISOLATION_开头。即形如 ISOLATION_XXX。\n- DEFAULT： 采用 DB 默认的事务隔离级别。 MySql 的默认为 REPEATABLE_READ；Oracle 默认为 READ_COMMITTED。\n- READ_UNCOMMITTED： 读未提交。 未解决任何并发问题。\n- READ_COMMITTED： 读已提交。解决脏读，存在不可重复读与幻读。\n- REPEATABLE_READ： 可重复读。解决脏读、不可重复读，存在幻读\n- SERIALIZABLE： 串行化。不存在并发问题。\n\n##### 定义了七个事务传播行为常量\n所谓事务传播行为是指，处于不同事务中的方法在相互调用时，执行期间事务的维护情况。如， A 事务中的方法 doSome()调用 B 事务中的方法 doOther()，在调用执行期间事务的维护情况，就称为事务传播行为。事务传播行为是加在方法上的。事务传播行为常量都是以 PROPAGATION_ 开头，形如 PROPAGATION_XXX。\n1. REQUIRED：\n指定的方法必须在事务内执行。若当前存在事务，就加入到当前事务中；若当前没有事务，则创建一个新事务。这种传播行为是最常见的选择，也是 Spring 默认的事务传播行为。\n如该传播行为加在 doOther()方法上。若 doSome()方法在调用 doOther()方法时就是在事务内运行的，则 doOther()方法的执行也加入到该事务内执行。若 doSome()方法在调用doOther()方法时没有在事务内执行，则 doOther()方法会创建一个事务，并在其中执行。\n![mark](https://daily-1252869435.cos.ap-chengdu.myqcloud.com/2018-11-21-23-21-56.png)\n1. SUPPORTS\n指定的方法支持当前事务，但若当前没有事务，也可以以非事务方式执行。\n![mark](https://daily-1252869435.cos.ap-chengdu.myqcloud.com/2018-11-21-23-22-13.png)\n1. MANDATORY\n指定的方法必须在当前事务内执行，若当前没有事务，则直接抛出异常。\n![mark](https://daily-1252869435.cos.ap-chengdu.myqcloud.com/2018-11-21-23-22-40.png)\n1. REQUIRES_NEW\n总是新建一个事务，若当前存在事务，就将当前事务挂起，直到新事务执行完毕。\n![mark](https://daily-1252869435.cos.ap-chengdu.myqcloud.com/2018-11-21-23-22-55.png)\n1. NOT_SUPPORTED\n指定的方法不能在事务环境中执行，若当前存在事务，就将当前事务挂起。\n![mark](https://daily-1252869435.cos.ap-chengdu.myqcloud.com/2018-11-21-23-23-07.png)\n1. NEVER\n指定的方法不能在事务环境下执行，若当前存在事务，就直接抛出异常。\n![mark](https://daily-1252869435.cos.ap-chengdu.myqcloud.com/2018-11-21-23-23-22.png)\n1. NESTED\n指定的方法必须在事务内执行。若当前存在事务，则在嵌套事务内执行；若当前没有事务，则创建一个新事务。\n![mark](https://daily-1252869435.cos.ap-chengdu.myqcloud.com/2018-11-21-23-23-40.png)\n\n##### 定义了默认事务超时时限\n常量 TIMEOUT_DEFAULT 定义了事务底层默认的超时时限，及不支持事务超时时限设置的 none 值。\n\n注意，事务的超时时限起作用的条件比较多，且超时的时间计算点较复杂。所以，该值一般就使用默认值即可。\n## 使用 AspectJ 的 AOP 配置管理事务\n>本例要实现模拟购买股票。存在两个实体：银行账户 Account 与股票账户 Stock。当要购买股票时，需要从 Account 中扣除相应金额的存款，然后在 Stock 中增加相应的股票数量。而在这个过程中，可能会抛出一个用户自定义的异常。异常的抛出，将会使两个操作回滚。\n\n*Account.java*\n```\npublic class Account {\n	private Integer aid;\n	private String aname;\n	private double balance;  // 余额\n	public Account() {\n		super();\n	}\n	public Account(String aname, double balance) {\n		super();\n		this.aname = aname;\n		this.balance = balance;\n	}\n	public Integer getAid() {\n		return aid;\n	}\n	public void setAid(Integer aid) {\n		this.aid = aid;\n	}\n	public String getAname() {\n		return aname;\n	}\n	public void setAname(String aname) {\n		this.aname = aname;\n	}\n	public double getBalance() {\n		return balance;\n	}\n	public void setBalance(double balance) {\n		this.balance = balance;\n	}\n	@Override\n	public String toString() {\n		return \"Account [aid=\" + aid + \", aname=\" + aname + \", balance=\"\n				+ balance + \"]\";\n	}\n}\n```\n\n*Stock.java*\n```\npublic class Stock {\n	private Integer sid;\n	private String sname;   // 股票名称\n	private int count;      // 股票数量\n	public Stock() {\n		super();\n	}\n	public Stock(String sname, int count) {\n		super();\n		this.sname = sname;\n		this.count = count;\n	}\n	public Integer getSid() {\n		return sid;\n	}\n	public void setSid(Integer sid) {\n		this.sid = sid;\n	}\n	public String getSname() {\n		return sname;\n	}\n	public void setSname(String sname) {\n		this.sname = sname;\n	}\n	public int getCount() {\n		return count;\n	}\n	public void setCount(int count) {\n		this.count = count;\n	}\n	@Override\n	public String toString() {\n		return \"Stock [sid=\" + sid + \", sname=\" + sname + \", count=\" + count\n				+ \"]\";\n	}\n}\n```\n\n*IAccountDao.java*\n```\npublic interface IAccountDao {\n	void insertAccount(String aname, double money);\n\n	void updateAccount(String aname, double money, boolean isBuy);\n}\n```\n\n*AccountDaoImpl.java*\n```\npublic class AccountDaoImpl extends JdbcDaoSupport implements IAccountDao {\n	@Override\n	public void insertAccount(String aname, double money) {\n		String sql = \"insert into account(aname, balance) values(?,?)\";\n		this.getJdbcTemplate().update(sql, aname, money);\n	}\n\n	@Override\n	public void updateAccount(String aname, double money, boolean isBuy) {\n		String sql = \"update account set balance=balance+? where aname=?\";\n		if (isBuy) {\n			sql = \"update account set balance=balance-? where aname=?\";\n		}\n		this.getJdbcTemplate().update(sql, money, aname);\n	}\n}\n```\n\n*IStockDao.java*\n```\npublic interface IStockDao {\n	void insertStock(String sname, int amount);\n\n	void updateStock(String sname, int amount, boolean isBuy);\n}\n```\n\n*StockDaoImpl.java*\n```\npublic class StockDaoImpl extends JdbcDaoSupport implements IStockDao {\n	@Override\n	public void insertStock(String sname, int amount) {\n		String sql = \"insert into stock(sname, count) values(?,?)\";\n		this.getJdbcTemplate().update(sql, sname, amount);\n	}\n\n	@Override\n	public void updateStock(String sname, int amount, boolean isBuy) {\n		String sql = \"update stock set count=count-? where sname=?\";\n		if(isBuy) {\n			sql = \"update stock set count=count+? where sname=?\";\n		}\n		this.getJdbcTemplate().update(sql, amount, sname);\n	}\n}\n```\n\n*IBuyStockService.java*\n```\npublic interface IBuyStockService {\n	void openAccount(String aname, double money);\n	void openStock(String sname, int amount);\n	void buyStock(String aname, double money, String sname, int amount) throws BuyStockException;\n}\n```\n\n*BuyStockServiceImpl.java*\n```\npublic class BuyStockServiceImpl implements IBuyStockService {\n	private IAccountDao adao;\n	private IStockDao sdao;\n	\n	public void setAdao(IAccountDao adao) {\n		this.adao = adao;\n	}\n\n	public void setSdao(IStockDao sdao) {\n		this.sdao = sdao;\n	}\n\n	@Override\n	public void openAccount(String aname, double money) {\n		adao.insertAccount(aname, money);\n	}\n\n	@Override\n	public void openStock(String sname, int amount) {\n		sdao.insertStock(sname, amount);\n	}\n\n	@Override\n	public void buyStock(String aname, double money, String sname, int amount) throws BuyStockException{\n		boolean isBuy = true;\n		adao.updateAccount(aname, money, isBuy);\n		if (1 == 1) {\n			throw new BuyStockException(\"购买股票异常\");\n		}\n		sdao.updateStock(sname, amount, isBuy);\n	}\n}\n```\n\n*BuyStockException.java*\n```\npublic class BuyStockException extends Exception {\n	public BuyStockException() {\n		super();\n	}\n\n	public BuyStockException(String message) {\n		super(message);\n	}\n}\n```\n\n*MyTest.java*\n```\npublic class MyTest {\n	private IBuyStockService service;\n\n	@Before\n	public void before() {\n		// 创建容器对象，加载Spring配置文件\n		String resource = \"applicationContext.xml\";\n		ApplicationContext ac = new ClassPathXmlApplicationContext(resource);\n		service = (IBuyStockService) ac.getBean(\"buyStockService\");\n	}\n	\n	@Test\n	public void test01() {\n		service.openAccount(\"张三\", 10000);\n		service.openStock(\"北京动力节点\", 0);\n	}\n	\n	@Test\n	public void test02() throws BuyStockException {\n		service.buyStock(\"张三\", 2000, \"北京动力节点\", 5);\n	}\n}\n```\n\n*applicationContext.xml*\n```\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<beans xmlns=\"http://www.springframework.org/schema/beans\"\n	xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" \n	xmlns:context=\"http://www.springframework.org/schema/context\"\n	xmlns:aop=\"http://www.springframework.org/schema/aop\" \n	xmlns:tx=\"http://www.springframework.org/schema/tx\"\n	xsi:schemaLocation=\"\n        http://www.springframework.org/schema/beans \n        http://www.springframework.org/schema/beans/spring-beans.xsd\n        http://www.springframework.org/schema/context \n        http://www.springframework.org/schema/context/spring-context.xsd\n        http://www.springframework.org/schema/tx \n        http://www.springframework.org/schema/tx/spring-tx.xsd\n        http://www.springframework.org/schema/aop \n        http://www.springframework.org/schema/aop/spring-aop.xsd\">\n	\n	<!-- ================================= IoC ==================================== -->\n	<!-- 注册数据源：Spring内置连接池 -->\n	<bean id=\"myDataSource\" class=\"org.springframework.jdbc.datasource.DriverManagerDataSource\">\n		<property name=\"driverClassName\" value=\"${jdbc.driver}\"/>\n		<property name=\"url\" value=\"${jdbc.url}\"/>\n		<property name=\"username\" value=\"${jdbc.user}\"/>\n		<property name=\"password\" value=\"${jdbc.password}\"/>\n	</bean>\n	\n	<!-- 注册属性文件 -->\n	<context:property-placeholder location=\"classpath:jdbc.properties\"/>\n	\n	<!-- 注册Dao -->\n	<bean id=\"accountDao\" class=\"top.qingrang.dao.AccountDaoImpl\">\n		<property name=\"dataSource\" ref=\"myDataSource\"/>\n	</bean>\n	<bean id=\"stockDao\" class=\"top.qingrang.dao.StockDaoImpl\">\n		<property name=\"dataSource\" ref=\"myDataSource\"/>\n	</bean>\n	\n	<!-- 注册Service -->\n	<bean id=\"buyStockService\" class=\"top.qingrang.service.BuyStockServiceImpl\">\n		<property name=\"adao\" ref=\"accountDao\"/>\n		<property name=\"sdao\" ref=\"stockDao\"/>\n	</bean>\n\n	<!-- ================================= AOP ==================================== -->\n	\n	<!-- 注册事务管理器 -->\n	<bean id=\"myTransactionManager\" class=\"org.springframework.jdbc.datasource.DataSourceTransactionManager\">\n		<property name=\"dataSource\" ref=\"myDataSource\"/>\n	</bean>\n	\n	<!-- 注册事务通知 -->\n	<tx:advice id=\"txAdvice\" transaction-manager=\"myTransactionManager\">\n		<tx:attributes>\n			<!-- 这里指定的是：为每一个连接点指定所要应用的事务属性 -->\n			<tx:method name=\"open*\" isolation=\"DEFAULT\" propagation=\"REQUIRED\"/>\n			<tx:method name=\"buyStock\" isolation=\"DEFAULT\" propagation=\"REQUIRED\" rollback-for=\"BuyStockException\"/>\n		</tx:attributes>\n	</tx:advice>\n	\n	<!-- AOP配置 -->\n	<aop:config>\n		<!-- 这里指定的是切入点 -->\n		<aop:pointcut expression=\"execution(* *..service.*.*(..))\" id=\"myPointcut\"/>\n		<aop:advisor advice-ref=\"txAdvice\" pointcut-ref=\"myPointcut\"/>\n	</aop:config>\n</beans>\n```\n\n\n\n',`groups`='Default',`p_id`=1  WHERE  `id` = 1 [ RunTime:0.001187s ]
---------------------------------------------------------------
[ 2018-11-22T22:15:10+08:00 ] 74.120.168.12 74.120.168.12 POST /daily/admin/note/updatenote/id/253.html
[ info ] qingrang.top/daily/admin/note/updatenote/id/253.html [运行时间：0.073854s][吞吐率：13.54req/s] [内存消耗：2,189.45kb] [文件加载：58]
[ info ] [ LANG ] /var/www/html/daily/thinkphp/lang/zh-cn.php
[ info ] [ ROUTE ] array (
  'type' => 'module',
  'module' => 
  array (
    0 => 'admin',
    1 => 'note',
    2 => 'updatenote',
  ),
)
[ info ] [ HEADER ] array (
  'host' => 'qingrang.top',
  'content-length' => '37554',
  'cache-control' => 'max-age=0',
  'origin' => 'http://qingrang.top',
  'upgrade-insecure-requests' => '1',
  'content-type' => 'application/x-www-form-urlencoded',
  'user-agent' => 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/70.0.3538.102 Safari/537.36',
  'accept' => 'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8',
  'referer' => 'http://qingrang.top/daily/admin/note/editNote/id/253',
  'accept-encoding' => 'gzip, deflate',
  'accept-language' => 'zh-CN,zh;q=0.9,la;q=0.8,en;q=0.7,lb;q=0.6',
  'cookie' => 'Hm_lvt_1769181352e9adc950166aada465644e=1541082864,1541122974,1541171416,1542098176; PHPSESSID=cs4ll16s0kjq1pmnpkf29456n2',
  'connection' => 'close',
)
[ info ] [ PARAM ] array (
  'summary' => '',
  'content' => '# Spring(三) - Spring 与 DAO
[TOC]

Spring 与 Dao 部分，是 Spring 的两大核心技术 IoC 与 AOP 的典型应用体现：
- 对于 JDBC 模板的使用，是 IoC 的应用，是将 JDBC 模板对象注入给了 Dao 层的实现类。
- 对于 Spring 的事务管理， 是 AOP 的应用，将事务作为切面织入到了 Service 层的业务方法中。

## Spring 与 JDBC 模板
*Student.java - 实体类*
```
public class Student {
	private Integer id;
	private String name;
	private int age;
	public Student() {
		super();
	}
	public Student(String name, int age) {
		super();
		this.name = name;
		this.age = age;
	}
	public Integer getId() {
		return id;
	}
	public void setId(Integer id) {
		this.id = id;
	}
	public String getName() {
		return name;
	}
	public void setName(String name) {
		this.name = name;
	}
	public int getAge() {
		return age;
	}
	public void setAge(int age) {
		this.age = age;
	}
	@Override
	public String toString() {
		return "Student [id=" + id + ", name=" + name + ", age=" + age + "]";
	}
}
```
*IStudentDao.java - 接口*
```
public interface IStudentDao {
	void insertStudent(Student student);
	void deleteById(int id);
	void updateStudent(Student student);
	
	List<String> selectAllStudentsNames();
	String selectStudentNameById(int id);
	
	List<Student> selectAllStudents();
	Student selectStudentById(int id);
}
```
*StudentDaoImpl.java - 实现类*
```
public class StudentDaoImpl extends JdbcDaoSupport implements IStudentDao {

	@Override
	public void insertStudent(Student student) {
		String sql = "insert into student(name,age) values(?,?)";
		this.getJdbcTemplate().update(sql, student.getName(), student.getAge());
	}

	@Override
	public void deleteById(int id) {
		String sql = "delete from student where id=?";
		this.getJdbcTemplate().update(sql, id);
	}

	@Override
	public void updateStudent(Student student) {
		String sql = "update student set name=?, age=? where id=?";
		this.getJdbcTemplate().update(sql, student.getName(), student.getAge(), student.getId());
	}

	@Override
	public List<String> selectAllStudentsNames() {
		String sql = "select name from student";
		return this.getJdbcTemplate().queryForList(sql, String.class);
	}

	@Override
	public String selectStudentNameById(int id) {
		String sql = "select name from student where id=?";
		return this.getJdbcTemplate().queryForObject(sql, String.class, id);
	}

	@Override
	public List<Student> selectAllStudents() {
		String sql = "select id,name,age from student";
		return this.getJdbcTemplate().query(sql, new StudentRowMapper());
	}

	@Override
	public Student selectStudentById(int id) {
		String sql = "select id,name,age from student where id=?";
		return this.getJdbcTemplate().queryForObject(sql, new StudentRowMapper(), id);
	}

}
```
*StudentRowMapper.java*
```
public class StudentRowMapper implements RowMapper<Student> {
	// rs：当查询出总的结果集后，框架会自动遍历这个结果集，每一次遍历的一行数据，都会被存放到
	//     这个方法的rs参数中。也就是说，这里的rs代表的是一行数据，并非所有查询结果。换个角度
	//     来说，只要能执行到这个方法，就说明这里的rs不会是空的
	@Override
	public Student mapRow(ResultSet rs, int rowNum) throws SQLException {
		Student student = new Student();
		student.setId(rs.getInt("id"));
		student.setName(rs.getString("name"));
		student.setAge(rs.getInt("age"));
		return student;
	}
}
```
*IStudentService.java*
```
public interface IStudentService {
	void addStudent(Student student);
	void removeById(int id);
	void modifyStudent(Student student);
	
	List<String> findAllStudentsNames();
	String findStudentNameById(int id);
	
	List<Student> findAllStudents();
	Student findStudentById(int id);
}
```
*StudentServiceImpl.java*
```
public class StudentServiceImpl implements IStudentService {
	private IStudentDao dao;
	
	public void setDao(IStudentDao dao) {
		this.dao = dao;
	}

	@Override
	public void addStudent(Student student) {
		dao.insertStudent(student);
	}

	@Override
	public void removeById(int id) {
		dao.deleteById(id);
	}

	@Override
	public void modifyStudent(Student student) {
		dao.updateStudent(student);
	}

	@Override
	public List<String> findAllStudentsNames() {
		return dao.selectAllStudentsNames();
	}

	@Override
	public String findStudentNameById(int id) {
		return dao.selectStudentNameById(id);
	}

	@Override
	public List<Student> findAllStudents() {
		return dao.selectAllStudents();
	}

	@Override
	public Student findStudentById(int id) {
		return dao.selectStudentById(id);
	}

}
```
*MyTest.java*
```
public class MyTest {
	
	private IStudentService service;

	@Before
	public void before() {
		// 创建容器对象，加载Spring配置文件
		String resource = "applicationContext.xml";
		ApplicationContext ac = new ClassPathXmlApplicationContext(resource);
		service = (IStudentService) ac.getBean("studentService");
	}
	
	@Test
	public void test01() {
		Student student = new Student("张三", 23);
		service.addStudent(student);
	}
	
	@Test
	public void test02() {
		service.removeById(2);
	}
	
	@Test
	public void test03() {
		Student student = new Student("张三", 23);
		student.setId(3);
		service.modifyStudent(student);
	}
	
	@Test
	public void test04() {
		List<String> names = service.findAllStudentsNames();
		System.out.println(names);
	}
	
	@Test
	public void test05() {
		String name = service.findStudentNameById(3);
		System.out.println(name);
	}
	
	@Test
	public void test06() {
		List<Student> students = service.findAllStudents();
		for (Student student : students) {
			System.out.println(student);
		}
	}
	
	@Test
	public void test07() {
		Student student = service.findStudentById(3);
		System.out.println(student);
	}
}
```
*applicationContext.mxl*
```
<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xmlns:context="http://www.springframework.org/schema/context" xsi:schemaLocation="
        http://www.springframework.org/schema/beans 
        http://www.springframework.org/schema/beans/spring-beans.xsd
        http://www.springframework.org/schema/context 
        http://www.springframework.org/schema/context/spring-context.xsd">

	<!-- 注册数据源：Spring内置连接池 -->
	<bean id="myDataSource" class="org.springframework.jdbc.datasource.DriverManagerDataSource">
		<property name="driverClassName" value="${jdbc.driver}"/>
		<property name="url" value="${jdbc.url}"/>
		<property name="username" value="${jdbc.user}"/>
		<property name="password" value="${jdbc.password}"/>
	</bean>

	<!-- 注册属性文件：方式一 -->
	<!-- 
	<bean class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
		<property name="location" value="classpath:jdbc.properties"/>
	</bean>
	 -->

	<!-- 注册属性文件：方式二 -->
	<context:property-placeholder location="classpath:jdbc.properties"/>
	
	<!-- 注册 Dao -->
	<bean id="studentDao" class="top.qingrang.dao.StudentDaoImpl">
		<property name="dataSource" ref="myDataSource"/>
	</bean>
	
	<!-- 注册 Service -->
	<bean id="studentService" class="top.qingrang.service.StudentServiceImpl">
		<property name="dao" ref="studentDao"/>
	</bean>

</beans>
```
## Spring 的事务管理
事务原本是数据库中的概念，在 Dao 层。但一般情况下，需要将事务提升到业务层，即 Service 层。这样做是为了能够使用事务的特性来管理具体的业务。在 Spring 中通常可以通过以下三种方式来实现对事务的管理：
- 使用 Spring 的事务代理工厂管理事务
- 使用 Spring 的事务注解管理事务
- 使用 AspectJ 的 AOP 配置管理事务

### Spring 事务管理 API
Spring 的事务管理，主要用到两个事务相关的接口。
#### 事务管理器接口
事务管理器是 PlatformTransactionManager 接口对象。其主要用于完成事务的提交、回滚，及获取事务的状态信息。
##### 常用的两个实现类
PlatformTransactionManager 接口有两个常用的实现类：
- DataSourceTransactionManager：使用 JDBC 或 iBatis 进行持久化数据时使用。
- HibernateTransactionManager：使用 Hibernate 进行持久化数据时使用。

##### Spring 的回滚方式
Spring 事务的默认回滚方式是： 发生运行时异常时回滚，发生受查异常时提交。 不过，对于受查异常，程序员也可以手工设置其回滚方式。

#### 事务定义接口
事务定义接口 TransactionDefinition 中定义了事务描述相关的三类常量：事务隔离级别、事务传播行为、事务默认超时时限， 及对它们的操作。
##### 定义了五个事务隔离级别常量
这些常量均是以 ISOLATION_开头。即形如 ISOLATION_XXX。
- DEFAULT： 采用 DB 默认的事务隔离级别。 MySql 的默认为 REPEATABLE_READ；Oracle 默认为 READ_COMMITTED。
- READ_UNCOMMITTED： 读未提交。 未解决任何并发问题。
- READ_COMMITTED： 读已提交。解决脏读，存在不可重复读与幻读。
- REPEATABLE_READ： 可重复读。解决脏读、不可重复读，存在幻读
- SERIALIZABLE： 串行化。不存在并发问题。

##### 定义了七个事务传播行为常量
所谓事务传播行为是指，处于不同事务中的方法在相互调用时，执行期间事务的维护情况。如， A 事务中的方法 doSome()调用 B 事务中的方法 doOther()，在调用执行期间事务的维护情况，就称为事务传播行为。事务传播行为是加在方法上的。事务传播行为常量都是以 PROPAGATION_ 开头，形如 PROPAGATION_XXX。
1. REQUIRED：
指定的方法必须在事务内执行。若当前存在事务，就加入到当前事务中；若当前没有事务，则创建一个新事务。这种传播行为是最常见的选择，也是 Spring 默认的事务传播行为。
如该传播行为加在 doOther()方法上。若 doSome()方法在调用 doOther()方法时就是在事务内运行的，则 doOther()方法的执行也加入到该事务内执行。若 doSome()方法在调用doOther()方法时没有在事务内执行，则 doOther()方法会创建一个事务，并在其中执行。
![mark](https://daily-1252869435.cos.ap-chengdu.myqcloud.com/2018-11-21-23-21-56.png)
1. SUPPORTS
指定的方法支持当前事务，但若当前没有事务，也可以以非事务方式执行。
![mark](https://daily-1252869435.cos.ap-chengdu.myqcloud.com/2018-11-21-23-22-13.png)
1. MANDATORY
指定的方法必须在当前事务内执行，若当前没有事务，则直接抛出异常。
![mark](https://daily-1252869435.cos.ap-chengdu.myqcloud.com/2018-11-21-23-22-40.png)
1. REQUIRES_NEW
总是新建一个事务，若当前存在事务，就将当前事务挂起，直到新事务执行完毕。
![mark](https://daily-1252869435.cos.ap-chengdu.myqcloud.com/2018-11-21-23-22-55.png)
1. NOT_SUPPORTED
指定的方法不能在事务环境中执行，若当前存在事务，就将当前事务挂起。
![mark](https://daily-1252869435.cos.ap-chengdu.myqcloud.com/2018-11-21-23-23-07.png)
1. NEVER
指定的方法不能在事务环境下执行，若当前存在事务，就直接抛出异常。
![mark](https://daily-1252869435.cos.ap-chengdu.myqcloud.com/2018-11-21-23-23-22.png)
1. NESTED
指定的方法必须在事务内执行。若当前存在事务，则在嵌套事务内执行；若当前没有事务，则创建一个新事务。
![mark](https://daily-1252869435.cos.ap-chengdu.myqcloud.com/2018-11-21-23-23-40.png)

##### 定义了默认事务超时时限
常量 TIMEOUT_DEFAULT 定义了事务底层默认的超时时限，及不支持事务超时时限设置的 none 值。

注意，事务的超时时限起作用的条件比较多，且超时的时间计算点较复杂。所以，该值一般就使用默认值即可。
## 使用 AspectJ 的 AOP 配置管理事务
>本例要实现模拟购买股票。存在两个实体：银行账户 Account 与股票账户 Stock。当要购买股票时，需要从 Account 中扣除相应金额的存款，然后在 Stock 中增加相应的股票数量。而在这个过程中，可能会抛出一个用户自定义的异常。异常的抛出，将会使两个操作回滚。

*Account.java*
```
public class Account {
	private Integer aid;
	private String aname;
	private double balance;  // 余额
	public Account() {
		super();
	}
	public Account(String aname, double balance) {
		super();
		this.aname = aname;
		this.balance = balance;
	}
	public Integer getAid() {
		return aid;
	}
	public void setAid(Integer aid) {
		this.aid = aid;
	}
	public String getAname() {
		return aname;
	}
	public void setAname(String aname) {
		this.aname = aname;
	}
	public double getBalance() {
		return balance;
	}
	public void setBalance(double balance) {
		this.balance = balance;
	}
	@Override
	public String toString() {
		return "Account [aid=" + aid + ", aname=" + aname + ", balance="
				+ balance + "]";
	}
}
```

*Stock.java*
```
public class Stock {
	private Integer sid;
	private String sname;   // 股票名称
	private int count;      // 股票数量
	public Stock() {
		super();
	}
	public Stock(String sname, int count) {
		super();
		this.sname = sname;
		this.count = count;
	}
	public Integer getSid() {
		return sid;
	}
	public void setSid(Integer sid) {
		this.sid = sid;
	}
	public String getSname() {
		return sname;
	}
	public void setSname(String sname) {
		this.sname = sname;
	}
	public int getCount() {
		return count;
	}
	public void setCount(int count) {
		this.count = count;
	}
	@Override
	public String toString() {
		return "Stock [sid=" + sid + ", sname=" + sname + ", count=" + count
				+ "]";
	}
}
```

*IAccountDao.java*
```
public interface IAccountDao {
	void insertAccount(String aname, double money);

	void updateAccount(String aname, double money, boolean isBuy);
}
```

*AccountDaoImpl.java*
```
public class AccountDaoImpl extends JdbcDaoSupport implements IAccountDao {
	@Override
	public void insertAccount(String aname, double money) {
		String sql = "insert into account(aname, balance) values(?,?)";
		this.getJdbcTemplate().update(sql, aname, money);
	}

	@Override
	public void updateAccount(String aname, double money, boolean isBuy) {
		String sql = "update account set balance=balance+? where aname=?";
		if (isBuy) {
			sql = "update account set balance=balance-? where aname=?";
		}
		this.getJdbcTemplate().update(sql, money, aname);
	}
}
```

*IStockDao.java*
```
public interface IStockDao {
	void insertStock(String sname, int amount);

	void updateStock(String sname, int amount, boolean isBuy);
}
```

*StockDaoImpl.java*
```
public class StockDaoImpl extends JdbcDaoSupport implements IStockDao {
	@Override
	public void insertStock(String sname, int amount) {
		String sql = "insert into stock(sname, count) values(?,?)";
		this.getJdbcTemplate().update(sql, sname, amount);
	}

	@Override
	public void updateStock(String sname, int amount, boolean isBuy) {
		String sql = "update stock set count=count-? where sname=?";
		if(isBuy) {
			sql = "update stock set count=count+? where sname=?";
		}
		this.getJdbcTemplate().update(sql, amount, sname);
	}
}
```

*IBuyStockService.java*
```
public interface IBuyStockService {
	void openAccount(String aname, double money);
	void openStock(String sname, int amount);
	void buyStock(String aname, double money, String sname, int amount) throws BuyStockException;
}
```

*BuyStockServiceImpl.java*
```
public class BuyStockServiceImpl implements IBuyStockService {
	private IAccountDao adao;
	private IStockDao sdao;
	
	public void setAdao(IAccountDao adao) {
		this.adao = adao;
	}

	public void setSdao(IStockDao sdao) {
		this.sdao = sdao;
	}

	@Override
	public void openAccount(String aname, double money) {
		adao.insertAccount(aname, money);
	}

	@Override
	public void openStock(String sname, int amount) {
		sdao.insertStock(sname, amount);
	}

	@Override
	public void buyStock(String aname, double money, String sname, int amount) throws BuyStockException{
		boolean isBuy = true;
		adao.updateAccount(aname, money, isBuy);
		if (1 == 1) {
			throw new BuyStockException("购买股票异常");
		}
		sdao.updateStock(sname, amount, isBuy);
	}
}
```

*BuyStockException.java*
```
public class BuyStockException extends Exception {
	public BuyStockException() {
		super();
	}

	public BuyStockException(String message) {
		super(message);
	}
}
```

*MyTest.java*
```
public class MyTest {
	private IBuyStockService service;

	@Before
	public void before() {
		// 创建容器对象，加载Spring配置文件
		String resource = "applicationContext.xml";
		ApplicationContext ac = new ClassPathXmlApplicationContext(resource);
		service = (IBuyStockService) ac.getBean("buyStockService");
	}
	
	@Test
	public void test01() {
		service.openAccount("张三", 10000);
		service.openStock("北京动力节点", 0);
	}
	
	@Test
	public void test02() throws BuyStockException {
		service.buyStock("张三", 2000, "北京动力节点", 5);
	}
}
```

*applicationContext.xml*
```
<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:aop="http://www.springframework.org/schema/aop" 
	xmlns:tx="http://www.springframework.org/schema/tx"
	xsi:schemaLocation="
        http://www.springframework.org/schema/beans 
        http://www.springframework.org/schema/beans/spring-beans.xsd
        http://www.springframework.org/schema/context 
        http://www.springframework.org/schema/context/spring-context.xsd
        http://www.springframework.org/schema/tx 
        http://www.springframework.org/schema/tx/spring-tx.xsd
        http://www.springframework.org/schema/aop 
        http://www.springframework.org/schema/aop/spring-aop.xsd">
	
	<!-- ================================= IoC ==================================== -->
	<!-- 注册数据源：Spring内置连接池 -->
	<bean id="myDataSource" class="org.springframework.jdbc.datasource.DriverManagerDataSource">
		<property name="driverClassName" value="${jdbc.driver}"/>
		<property name="url" value="${jdbc.url}"/>
		<property name="username" value="${jdbc.user}"/>
		<property name="password" value="${jdbc.password}"/>
	</bean>
	
	<!-- 注册属性文件 -->
	<context:property-placeholder location="classpath:jdbc.properties"/>
	
	<!-- 注册Dao -->
	<bean id="accountDao" class="top.qingrang.dao.AccountDaoImpl">
		<property name="dataSource" ref="myDataSource"/>
	</bean>
	<bean id="stockDao" class="top.qingrang.dao.StockDaoImpl">
		<property name="dataSource" ref="myDataSource"/>
	</bean>
	
	<!-- 注册Service -->
	<bean id="buyStockService" class="top.qingrang.service.BuyStockServiceImpl">
		<property name="adao" ref="accountDao"/>
		<property name="sdao" ref="stockDao"/>
	</bean>

	<!-- ================================= AOP ==================================== -->
	
	<!-- 注册事务管理器 -->
	<bean id="myTransactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource" ref="myDataSource"/>
	</bean>
	
	<!-- 注册事务通知 -->
	<tx:advice id="txAdvice" transaction-manager="myTransactionManager">
		<tx:attributes>
			<!-- 这里指定的是：为每一个连接点指定所要应用的事务属性 -->
			<tx:method name="open*" isolation="DEFAULT" propagation="REQUIRED"/>
			<tx:method name="buyStock" isolation="DEFAULT" propagation="REQUIRED" rollback-for="BuyStockException"/>
		</tx:attributes>
	</tx:advice>
	
	<!-- AOP配置 -->
	<aop:config>
		<!-- 这里指定的是切入点 -->
		<aop:pointcut expression="execution(* *..service.*.*(..))" id="myPointcut"/>
		<aop:advisor advice-ref="txAdvice" pointcut-ref="myPointcut"/>
	</aop:config>
</beans>
```



',
  'groups' => 'Java',
  'showsel' => '1',
  'showse2' => '1',
  'id' => '253',
)
[ info ] [ SESSION ] INIT array (
  'id' => '',
  'var_session_id' => '',
  'prefix' => 'think',
  'type' => '',
  'auto_start' => true,
)
[ info ] [ RUN ] app\admin\controller\Note->updateNote[ /var/www/html/daily/application/admin/controller/Note.php ]
[ info ] [ DB ] INIT mysql
[ info ] [ CACHE ] INIT File
[ info ] [ LOG ] INIT File
[ sql ] [ DB ] CONNECT:[ UseTime:0.000628s ] mysql:host=74.120.168.12;dbname=diary;charset=utf8
[ sql ] [ SQL ] SHOW COLUMNS FROM `note` [ RunTime:0.001569s ]
[ sql ] [ SQL ] SELECT * FROM `note` WHERE  `id` = 253 LIMIT 1 [ RunTime:0.000601s ]
[ sql ] [ SQL ] SELECT `groups` FROM `note` WHERE  `id` = 253 LIMIT 1 [ RunTime:0.000296s ]
[ sql ] [ SQL ] SHOW COLUMNS FROM `groups` [ RunTime:0.000941s ]
[ sql ] [ SQL ] SELECT `parent_id` FROM `groups` WHERE  `groups` = 'Java' LIMIT 1 [ RunTime:0.000383s ]
[ sql ] [ SQL ] SELECT `groups` FROM `groups` WHERE  `id` = 2 LIMIT 1 [ RunTime:0.000263s ]
[ sql ] [ SQL ] UPDATE `note`  SET `id`=253,`p_id`=2,`title`='Spring(三) - Spring 与 DAO\r',`content`='# Spring(三) - Spring 与 DAO\r\n[TOC]\r\n\r\nSpring 与 Dao 部分，是 Spring 的两大核心技术 IoC 与 AOP 的典型应用体现：\r\n- 对于 JDBC 模板的使用，是 IoC 的应用，是将 JDBC 模板对象注入给了 Dao 层的实现类。\r\n- 对于 Spring 的事务管理， 是 AOP 的应用，将事务作为切面织入到了 Service 层的业务方法中。\r\n\r\n## Spring 与 JDBC 模板\r\n*Student.java - 实体类*\r\n```\r\npublic class Student {\r\n	private Integer id;\r\n	private String name;\r\n	private int age;\r\n	public Student() {\r\n		super();\r\n	}\r\n	public Student(String name, int age) {\r\n		super();\r\n		this.name = name;\r\n		this.age = age;\r\n	}\r\n	public Integer getId() {\r\n		return id;\r\n	}\r\n	public void setId(Integer id) {\r\n		this.id = id;\r\n	}\r\n	public String getName() {\r\n		return name;\r\n	}\r\n	public void setName(String name) {\r\n		this.name = name;\r\n	}\r\n	public int getAge() {\r\n		return age;\r\n	}\r\n	public void setAge(int age) {\r\n		this.age = age;\r\n	}\r\n	@Override\r\n	public String toString() {\r\n		return \"Student [id=\" + id + \", name=\" + name + \", age=\" + age + \"]\";\r\n	}\r\n}\r\n```\r\n*IStudentDao.java - 接口*\r\n```\r\npublic interface IStudentDao {\r\n	void insertStudent(Student student);\r\n	void deleteById(int id);\r\n	void updateStudent(Student student);\r\n	\r\n	List<String> selectAllStudentsNames();\r\n	String selectStudentNameById(int id);\r\n	\r\n	List<Student> selectAllStudents();\r\n	Student selectStudentById(int id);\r\n}\r\n```\r\n*StudentDaoImpl.java - 实现类*\r\n```\r\npublic class StudentDaoImpl extends JdbcDaoSupport implements IStudentDao {\r\n\r\n	@Override\r\n	public void insertStudent(Student student) {\r\n		String sql = \"insert into student(name,age) values(?,?)\";\r\n		this.getJdbcTemplate().update(sql, student.getName(), student.getAge());\r\n	}\r\n\r\n	@Override\r\n	public void deleteById(int id) {\r\n		String sql = \"delete from student where id=?\";\r\n		this.getJdbcTemplate().update(sql, id);\r\n	}\r\n\r\n	@Override\r\n	public void updateStudent(Student student) {\r\n		String sql = \"update student set name=?, age=? where id=?\";\r\n		this.getJdbcTemplate().update(sql, student.getName(), student.getAge(), student.getId());\r\n	}\r\n\r\n	@Override\r\n	public List<String> selectAllStudentsNames() {\r\n		String sql = \"select name from student\";\r\n		return this.getJdbcTemplate().queryForList(sql, String.class);\r\n	}\r\n\r\n	@Override\r\n	public String selectStudentNameById(int id) {\r\n		String sql = \"select name from student where id=?\";\r\n		return this.getJdbcTemplate().queryForObject(sql, String.class, id);\r\n	}\r\n\r\n	@Override\r\n	public List<Student> selectAllStudents() {\r\n		String sql = \"select id,name,age from student\";\r\n		return this.getJdbcTemplate().query(sql, new StudentRowMapper());\r\n	}\r\n\r\n	@Override\r\n	public Student selectStudentById(int id) {\r\n		String sql = \"select id,name,age from student where id=?\";\r\n		return this.getJdbcTemplate().queryForObject(sql, new StudentRowMapper(), id);\r\n	}\r\n\r\n}\r\n```\r\n*StudentRowMapper.java*\r\n```\r\npublic class StudentRowMapper implements RowMapper<Student> {\r\n	// rs：当查询出总的结果集后，框架会自动遍历这个结果集，每一次遍历的一行数据，都会被存放到\r\n	//     这个方法的rs参数中。也就是说，这里的rs代表的是一行数据，并非所有查询结果。换个角度\r\n	//     来说，只要能执行到这个方法，就说明这里的rs不会是空的\r\n	@Override\r\n	public Student mapRow(ResultSet rs, int rowNum) throws SQLException {\r\n		Student student = new Student();\r\n		student.setId(rs.getInt(\"id\"));\r\n		student.setName(rs.getString(\"name\"));\r\n		student.setAge(rs.getInt(\"age\"));\r\n		return student;\r\n	}\r\n}\r\n```\r\n*IStudentService.java*\r\n```\r\npublic interface IStudentService {\r\n	void addStudent(Student student);\r\n	void removeById(int id);\r\n	void modifyStudent(Student student);\r\n	\r\n	List<String> findAllStudentsNames();\r\n	String findStudentNameById(int id);\r\n	\r\n	List<Student> findAllStudents();\r\n	Student findStudentById(int id);\r\n}\r\n```\r\n*StudentServiceImpl.java*\r\n```\r\npublic class StudentServiceImpl implements IStudentService {\r\n	private IStudentDao dao;\r\n	\r\n	public void setDao(IStudentDao dao) {\r\n		this.dao = dao;\r\n	}\r\n\r\n	@Override\r\n	public void addStudent(Student student) {\r\n		dao.insertStudent(student);\r\n	}\r\n\r\n	@Override\r\n	public void removeById(int id) {\r\n		dao.deleteById(id);\r\n	}\r\n\r\n	@Override\r\n	public void modifyStudent(Student student) {\r\n		dao.updateStudent(student);\r\n	}\r\n\r\n	@Override\r\n	public List<String> findAllStudentsNames() {\r\n		return dao.selectAllStudentsNames();\r\n	}\r\n\r\n	@Override\r\n	public String findStudentNameById(int id) {\r\n		return dao.selectStudentNameById(id);\r\n	}\r\n\r\n	@Override\r\n	public List<Student> findAllStudents() {\r\n		return dao.selectAllStudents();\r\n	}\r\n\r\n	@Override\r\n	public Student findStudentById(int id) {\r\n		return dao.selectStudentById(id);\r\n	}\r\n\r\n}\r\n```\r\n*MyTest.java*\r\n```\r\npublic class MyTest {\r\n	\r\n	private IStudentService service;\r\n\r\n	@Before\r\n	public void before() {\r\n		// 创建容器对象，加载Spring配置文件\r\n		String resource = \"applicationContext.xml\";\r\n		ApplicationContext ac = new ClassPathXmlApplicationContext(resource);\r\n		service = (IStudentService) ac.getBean(\"studentService\");\r\n	}\r\n	\r\n	@Test\r\n	public void test01() {\r\n		Student student = new Student(\"张三\", 23);\r\n		service.addStudent(student);\r\n	}\r\n	\r\n	@Test\r\n	public void test02() {\r\n		service.removeById(2);\r\n	}\r\n	\r\n	@Test\r\n	public void test03() {\r\n		Student student = new Student(\"张三\", 23);\r\n		student.setId(3);\r\n		service.modifyStudent(student);\r\n	}\r\n	\r\n	@Test\r\n	public void test04() {\r\n		List<String> names = service.findAllStudentsNames();\r\n		System.out.println(names);\r\n	}\r\n	\r\n	@Test\r\n	public void test05() {\r\n		String name = service.findStudentNameById(3);\r\n		System.out.println(name);\r\n	}\r\n	\r\n	@Test\r\n	public void test06() {\r\n		List<Student> students = service.findAllStudents();\r\n		for (Student student : students) {\r\n			System.out.println(student);\r\n		}\r\n	}\r\n	\r\n	@Test\r\n	public void test07() {\r\n		Student student = service.findStudentById(3);\r\n		System.out.println(student);\r\n	}\r\n}\r\n```\r\n*applicationContext.mxl*\r\n```\r\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<beans xmlns=\"http://www.springframework.org/schema/beans\"\r\n    xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\r\n    xmlns:context=\"http://www.springframework.org/schema/context\" xsi:schemaLocation=\"\r\n        http://www.springframework.org/schema/beans \r\n        http://www.springframework.org/schema/beans/spring-beans.xsd\r\n        http://www.springframework.org/schema/context \r\n        http://www.springframework.org/schema/context/spring-context.xsd\">\r\n\r\n	<!-- 注册数据源：Spring内置连接池 -->\r\n	<bean id=\"myDataSource\" class=\"org.springframework.jdbc.datasource.DriverManagerDataSource\">\r\n		<property name=\"driverClassName\" value=\"${jdbc.driver}\"/>\r\n		<property name=\"url\" value=\"${jdbc.url}\"/>\r\n		<property name=\"username\" value=\"${jdbc.user}\"/>\r\n		<property name=\"password\" value=\"${jdbc.password}\"/>\r\n	</bean>\r\n\r\n	<!-- 注册属性文件：方式一 -->\r\n	<!-- \r\n	<bean class=\"org.springframework.beans.factory.config.PropertyPlaceholderConfigurer\">\r\n		<property name=\"location\" value=\"classpath:jdbc.properties\"/>\r\n	</bean>\r\n	 -->\r\n\r\n	<!-- 注册属性文件：方式二 -->\r\n	<context:property-placeholder location=\"classpath:jdbc.properties\"/>\r\n	\r\n	<!-- 注册 Dao -->\r\n	<bean id=\"studentDao\" class=\"top.qingrang.dao.StudentDaoImpl\">\r\n		<property name=\"dataSource\" ref=\"myDataSource\"/>\r\n	</bean>\r\n	\r\n	<!-- 注册 Service -->\r\n	<bean id=\"studentService\" class=\"top.qingrang.service.StudentServiceImpl\">\r\n		<property name=\"dao\" ref=\"studentDao\"/>\r\n	</bean>\r\n\r\n</beans>\r\n```\r\n## Spring 的事务管理\r\n事务原本是数据库中的概念，在 Dao 层。但一般情况下，需要将事务提升到业务层，即 Service 层。这样做是为了能够使用事务的特性来管理具体的业务。在 Spring 中通常可以通过以下三种方式来实现对事务的管理：\r\n- 使用 Spring 的事务代理工厂管理事务\r\n- 使用 Spring 的事务注解管理事务\r\n- 使用 AspectJ 的 AOP 配置管理事务\r\n\r\n### Spring 事务管理 API\r\nSpring 的事务管理，主要用到两个事务相关的接口。\r\n#### 事务管理器接口\r\n事务管理器是 PlatformTransactionManager 接口对象。其主要用于完成事务的提交、回滚，及获取事务的状态信息。\r\n##### 常用的两个实现类\r\nPlatformTransactionManager 接口有两个常用的实现类：\r\n- DataSourceTransactionManager：使用 JDBC 或 iBatis 进行持久化数据时使用。\r\n- HibernateTransactionManager：使用 Hibernate 进行持久化数据时使用。\r\n\r\n##### Spring 的回滚方式\r\nSpring 事务的默认回滚方式是： 发生运行时异常时回滚，发生受查异常时提交。 不过，对于受查异常，程序员也可以手工设置其回滚方式。\r\n\r\n#### 事务定义接口\r\n事务定义接口 TransactionDefinition 中定义了事务描述相关的三类常量：事务隔离级别、事务传播行为、事务默认超时时限， 及对它们的操作。\r\n##### 定义了五个事务隔离级别常量\r\n这些常量均是以 ISOLATION_开头。即形如 ISOLATION_XXX。\r\n- DEFAULT： 采用 DB 默认的事务隔离级别。 MySql 的默认为 REPEATABLE_READ；Oracle 默认为 READ_COMMITTED。\r\n- READ_UNCOMMITTED： 读未提交。 未解决任何并发问题。\r\n- READ_COMMITTED： 读已提交。解决脏读，存在不可重复读与幻读。\r\n- REPEATABLE_READ： 可重复读。解决脏读、不可重复读，存在幻读\r\n- SERIALIZABLE： 串行化。不存在并发问题。\r\n\r\n##### 定义了七个事务传播行为常量\r\n所谓事务传播行为是指，处于不同事务中的方法在相互调用时，执行期间事务的维护情况。如， A 事务中的方法 doSome()调用 B 事务中的方法 doOther()，在调用执行期间事务的维护情况，就称为事务传播行为。事务传播行为是加在方法上的。事务传播行为常量都是以 PROPAGATION_ 开头，形如 PROPAGATION_XXX。\r\n1. REQUIRED：\r\n指定的方法必须在事务内执行。若当前存在事务，就加入到当前事务中；若当前没有事务，则创建一个新事务。这种传播行为是最常见的选择，也是 Spring 默认的事务传播行为。\r\n如该传播行为加在 doOther()方法上。若 doSome()方法在调用 doOther()方法时就是在事务内运行的，则 doOther()方法的执行也加入到该事务内执行。若 doSome()方法在调用doOther()方法时没有在事务内执行，则 doOther()方法会创建一个事务，并在其中执行。\r\n![mark](https://daily-1252869435.cos.ap-chengdu.myqcloud.com/2018-11-21-23-21-56.png)\r\n1. SUPPORTS\r\n指定的方法支持当前事务，但若当前没有事务，也可以以非事务方式执行。\r\n![mark](https://daily-1252869435.cos.ap-chengdu.myqcloud.com/2018-11-21-23-22-13.png)\r\n1. MANDATORY\r\n指定的方法必须在当前事务内执行，若当前没有事务，则直接抛出异常。\r\n![mark](https://daily-1252869435.cos.ap-chengdu.myqcloud.com/2018-11-21-23-22-40.png)\r\n1. REQUIRES_NEW\r\n总是新建一个事务，若当前存在事务，就将当前事务挂起，直到新事务执行完毕。\r\n![mark](https://daily-1252869435.cos.ap-chengdu.myqcloud.com/2018-11-21-23-22-55.png)\r\n1. NOT_SUPPORTED\r\n指定的方法不能在事务环境中执行，若当前存在事务，就将当前事务挂起。\r\n![mark](https://daily-1252869435.cos.ap-chengdu.myqcloud.com/2018-11-21-23-23-07.png)\r\n1. NEVER\r\n指定的方法不能在事务环境下执行，若当前存在事务，就直接抛出异常。\r\n![mark](https://daily-1252869435.cos.ap-chengdu.myqcloud.com/2018-11-21-23-23-22.png)\r\n1. NESTED\r\n指定的方法必须在事务内执行。若当前存在事务，则在嵌套事务内执行；若当前没有事务，则创建一个新事务。\r\n![mark](https://daily-1252869435.cos.ap-chengdu.myqcloud.com/2018-11-21-23-23-40.png)\r\n\r\n##### 定义了默认事务超时时限\r\n常量 TIMEOUT_DEFAULT 定义了事务底层默认的超时时限，及不支持事务超时时限设置的 none 值。\r\n\r\n注意，事务的超时时限起作用的条件比较多，且超时的时间计算点较复杂。所以，该值一般就使用默认值即可。\r\n## 使用 AspectJ 的 AOP 配置管理事务\r\n>本例要实现模拟购买股票。存在两个实体：银行账户 Account 与股票账户 Stock。当要购买股票时，需要从 Account 中扣除相应金额的存款，然后在 Stock 中增加相应的股票数量。而在这个过程中，可能会抛出一个用户自定义的异常。异常的抛出，将会使两个操作回滚。\r\n\r\n*Account.java*\r\n```\r\npublic class Account {\r\n	private Integer aid;\r\n	private String aname;\r\n	private double balance;  // 余额\r\n	public Account() {\r\n		super();\r\n	}\r\n	public Account(String aname, double balance) {\r\n		super();\r\n		this.aname = aname;\r\n		this.balance = balance;\r\n	}\r\n	public Integer getAid() {\r\n		return aid;\r\n	}\r\n	public void setAid(Integer aid) {\r\n		this.aid = aid;\r\n	}\r\n	public String getAname() {\r\n		return aname;\r\n	}\r\n	public void setAname(String aname) {\r\n		this.aname = aname;\r\n	}\r\n	public double getBalance() {\r\n		return balance;\r\n	}\r\n	public void setBalance(double balance) {\r\n		this.balance = balance;\r\n	}\r\n	@Override\r\n	public String toString() {\r\n		return \"Account [aid=\" + aid + \", aname=\" + aname + \", balance=\"\r\n				+ balance + \"]\";\r\n	}\r\n}\r\n```\r\n\r\n*Stock.java*\r\n```\r\npublic class Stock {\r\n	private Integer sid;\r\n	private String sname;   // 股票名称\r\n	private int count;      // 股票数量\r\n	public Stock() {\r\n		super();\r\n	}\r\n	public Stock(String sname, int count) {\r\n		super();\r\n		this.sname = sname;\r\n		this.count = count;\r\n	}\r\n	public Integer getSid() {\r\n		return sid;\r\n	}\r\n	public void setSid(Integer sid) {\r\n		this.sid = sid;\r\n	}\r\n	public String getSname() {\r\n		return sname;\r\n	}\r\n	public void setSname(String sname) {\r\n		this.sname = sname;\r\n	}\r\n	public int getCount() {\r\n		return count;\r\n	}\r\n	public void setCount(int count) {\r\n		this.count = count;\r\n	}\r\n	@Override\r\n	public String toString() {\r\n		return \"Stock [sid=\" + sid + \", sname=\" + sname + \", count=\" + count\r\n				+ \"]\";\r\n	}\r\n}\r\n```\r\n\r\n*IAccountDao.java*\r\n```\r\npublic interface IAccountDao {\r\n	void insertAccount(String aname, double money);\r\n\r\n	void updateAccount(String aname, double money, boolean isBuy);\r\n}\r\n```\r\n\r\n*AccountDaoImpl.java*\r\n```\r\npublic class AccountDaoImpl extends JdbcDaoSupport implements IAccountDao {\r\n	@Override\r\n	public void insertAccount(String aname, double money) {\r\n		String sql = \"insert into account(aname, balance) values(?,?)\";\r\n		this.getJdbcTemplate().update(sql, aname, money);\r\n	}\r\n\r\n	@Override\r\n	public void updateAccount(String aname, double money, boolean isBuy) {\r\n		String sql = \"update account set balance=balance+? where aname=?\";\r\n		if (isBuy) {\r\n			sql = \"update account set balance=balance-? where aname=?\";\r\n		}\r\n		this.getJdbcTemplate().update(sql, money, aname);\r\n	}\r\n}\r\n```\r\n\r\n*IStockDao.java*\r\n```\r\npublic interface IStockDao {\r\n	void insertStock(String sname, int amount);\r\n\r\n	void updateStock(String sname, int amount, boolean isBuy);\r\n}\r\n```\r\n\r\n*StockDaoImpl.java*\r\n```\r\npublic class StockDaoImpl extends JdbcDaoSupport implements IStockDao {\r\n	@Override\r\n	public void insertStock(String sname, int amount) {\r\n		String sql = \"insert into stock(sname, count) values(?,?)\";\r\n		this.getJdbcTemplate().update(sql, sname, amount);\r\n	}\r\n\r\n	@Override\r\n	public void updateStock(String sname, int amount, boolean isBuy) {\r\n		String sql = \"update stock set count=count-? where sname=?\";\r\n		if(isBuy) {\r\n			sql = \"update stock set count=count+? where sname=?\";\r\n		}\r\n		this.getJdbcTemplate().update(sql, amount, sname);\r\n	}\r\n}\r\n```\r\n\r\n*IBuyStockService.java*\r\n```\r\npublic interface IBuyStockService {\r\n	void openAccount(String aname, double money);\r\n	void openStock(String sname, int amount);\r\n	void buyStock(String aname, double money, String sname, int amount) throws BuyStockException;\r\n}\r\n```\r\n\r\n*BuyStockServiceImpl.java*\r\n```\r\npublic class BuyStockServiceImpl implements IBuyStockService {\r\n	private IAccountDao adao;\r\n	private IStockDao sdao;\r\n	\r\n	public void setAdao(IAccountDao adao) {\r\n		this.adao = adao;\r\n	}\r\n\r\n	public void setSdao(IStockDao sdao) {\r\n		this.sdao = sdao;\r\n	}\r\n\r\n	@Override\r\n	public void openAccount(String aname, double money) {\r\n		adao.insertAccount(aname, money);\r\n	}\r\n\r\n	@Override\r\n	public void openStock(String sname, int amount) {\r\n		sdao.insertStock(sname, amount);\r\n	}\r\n\r\n	@Override\r\n	public void buyStock(String aname, double money, String sname, int amount) throws BuyStockException{\r\n		boolean isBuy = true;\r\n		adao.updateAccount(aname, money, isBuy);\r\n		if (1 == 1) {\r\n			throw new BuyStockException(\"购买股票异常\");\r\n		}\r\n		sdao.updateStock(sname, amount, isBuy);\r\n	}\r\n}\r\n```\r\n\r\n*BuyStockException.java*\r\n```\r\npublic class BuyStockException extends Exception {\r\n	public BuyStockException() {\r\n		super();\r\n	}\r\n\r\n	public BuyStockException(String message) {\r\n		super(message);\r\n	}\r\n}\r\n```\r\n\r\n*MyTest.java*\r\n```\r\npublic class MyTest {\r\n	private IBuyStockService service;\r\n\r\n	@Before\r\n	public void before() {\r\n		// 创建容器对象，加载Spring配置文件\r\n		String resource = \"applicationContext.xml\";\r\n		ApplicationContext ac = new ClassPathXmlApplicationContext(resource);\r\n		service = (IBuyStockService) ac.getBean(\"buyStockService\");\r\n	}\r\n	\r\n	@Test\r\n	public void test01() {\r\n		service.openAccount(\"张三\", 10000);\r\n		service.openStock(\"北京动力节点\", 0);\r\n	}\r\n	\r\n	@Test\r\n	public void test02() throws BuyStockException {\r\n		service.buyStock(\"张三\", 2000, \"北京动力节点\", 5);\r\n	}\r\n}\r\n```\r\n\r\n*applicationContext.xml*\r\n```\r\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<beans xmlns=\"http://www.springframework.org/schema/beans\"\r\n	xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" \r\n	xmlns:context=\"http://www.springframework.org/schema/context\"\r\n	xmlns:aop=\"http://www.springframework.org/schema/aop\" \r\n	xmlns:tx=\"http://www.springframework.org/schema/tx\"\r\n	xsi:schemaLocation=\"\r\n        http://www.springframework.org/schema/beans \r\n        http://www.springframework.org/schema/beans/spring-beans.xsd\r\n        http://www.springframework.org/schema/context \r\n        http://www.springframework.org/schema/context/spring-context.xsd\r\n        http://www.springframework.org/schema/tx \r\n        http://www.springframework.org/schema/tx/spring-tx.xsd\r\n        http://www.springframework.org/schema/aop \r\n        http://www.springframework.org/schema/aop/spring-aop.xsd\">\r\n	\r\n	<!-- ================================= IoC ==================================== -->\r\n	<!-- 注册数据源：Spring内置连接池 -->\r\n	<bean id=\"myDataSource\" class=\"org.springframework.jdbc.datasource.DriverManagerDataSource\">\r\n		<property name=\"driverClassName\" value=\"${jdbc.driver}\"/>\r\n		<property name=\"url\" value=\"${jdbc.url}\"/>\r\n		<property name=\"username\" value=\"${jdbc.user}\"/>\r\n		<property name=\"password\" value=\"${jdbc.password}\"/>\r\n	</bean>\r\n	\r\n	<!-- 注册属性文件 -->\r\n	<context:property-placeholder location=\"classpath:jdbc.properties\"/>\r\n	\r\n	<!-- 注册Dao -->\r\n	<bean id=\"accountDao\" class=\"top.qingrang.dao.AccountDaoImpl\">\r\n		<property name=\"dataSource\" ref=\"myDataSource\"/>\r\n	</bean>\r\n	<bean id=\"stockDao\" class=\"top.qingrang.dao.StockDaoImpl\">\r\n		<property name=\"dataSource\" ref=\"myDataSource\"/>\r\n	</bean>\r\n	\r\n	<!-- 注册Service -->\r\n	<bean id=\"buyStockService\" class=\"top.qingrang.service.BuyStockServiceImpl\">\r\n		<property name=\"adao\" ref=\"accountDao\"/>\r\n		<property name=\"sdao\" ref=\"stockDao\"/>\r\n	</bean>\r\n\r\n	<!-- ================================= AOP ==================================== -->\r\n	\r\n	<!-- 注册事务管理器 -->\r\n	<bean id=\"myTransactionManager\" class=\"org.springframework.jdbc.datasource.DataSourceTransactionManager\">\r\n		<property name=\"dataSource\" ref=\"myDataSource\"/>\r\n	</bean>\r\n	\r\n	<!-- 注册事务通知 -->\r\n	<tx:advice id=\"txAdvice\" transaction-manager=\"myTransactionManager\">\r\n		<tx:attributes>\r\n			<!-- 这里指定的是：为每一个连接点指定所要应用的事务属性 -->\r\n			<tx:method name=\"open*\" isolation=\"DEFAULT\" propagation=\"REQUIRED\"/>\r\n			<tx:method name=\"buyStock\" isolation=\"DEFAULT\" propagation=\"REQUIRED\" rollback-for=\"BuyStockException\"/>\r\n		</tx:attributes>\r\n	</tx:advice>\r\n	\r\n	<!-- AOP配置 -->\r\n	<aop:config>\r\n		<!-- 这里指定的是切入点 -->\r\n		<aop:pointcut expression=\"execution(* *..service.*.*(..))\" id=\"myPointcut\"/>\r\n		<aop:advisor advice-ref=\"txAdvice\" pointcut-ref=\"myPointcut\"/>\r\n	</aop:config>\r\n</beans>\r\n```\r\n\r\n\r\n\r\n',`groups`='Java',`is_show`=1,`publish`=1,`summary`='',`gmt_modified`='2018-11-22'  WHERE  `id` = 253 [ RunTime:0.001141s ]
[ sql ] [ SQL ] SELECT COUNT(*) AS tp_count FROM `note` WHERE  `groups` = 'Java' LIMIT 1 [ RunTime:0.002179s ]
[ sql ] [ SQL ] UPDATE `groups`  SET `g_count`=22  WHERE  `groups` = 'Java' [ RunTime:0.000471s ]
[ sql ] [ SQL ] SELECT COUNT(*) AS tp_count FROM `note` WHERE  `groups` = 'Java' LIMIT 1 [ RunTime:0.001270s ]
[ sql ] [ SQL ] UPDATE `groups`  SET `g_count`=22  WHERE  `groups` = 'Java' [ RunTime:0.000352s ]
---------------------------------------------------------------
[ 2018-11-22T22:15:11+08:00 ] 74.120.168.12 74.120.168.12 GET /daily/admin/note/shownote/id/253.html
[ info ] qingrang.top/daily/admin/note/shownote/id/253.html [运行时间：0.055277s][吞吐率：18.09req/s] [内存消耗：2,017.09kb] [文件加载：55]
[ info ] [ LANG ] /var/www/html/daily/thinkphp/lang/zh-cn.php
[ info ] [ ROUTE ] array (
  'type' => 'module',
  'module' => 
  array (
    0 => 'admin',
    1 => 'note',
    2 => 'shownote',
  ),
)
[ info ] [ HEADER ] array (
  'host' => 'qingrang.top',
  'cache-control' => 'max-age=0',
  'upgrade-insecure-requests' => '1',
  'user-agent' => 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/70.0.3538.102 Safari/537.36',
  'accept' => 'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8',
  'referer' => 'http://qingrang.top/daily/admin/note/editNote/id/253',
  'accept-encoding' => 'gzip, deflate',
  'accept-language' => 'zh-CN,zh;q=0.9,la;q=0.8,en;q=0.7,lb;q=0.6',
  'cookie' => 'Hm_lvt_1769181352e9adc950166aada465644e=1541082864,1541122974,1541171416,1542098176; PHPSESSID=cs4ll16s0kjq1pmnpkf29456n2',
  'connection' => 'close',
)
[ info ] [ PARAM ] array (
  'id' => '253',
)
[ info ] [ SESSION ] INIT array (
  'id' => '',
  'var_session_id' => '',
  'prefix' => 'think',
  'type' => '',
  'auto_start' => true,
)
[ info ] [ RUN ] app\admin\controller\Note->showNote[ /var/www/html/daily/application/admin/controller/Note.php ]
[ info ] [ DB ] INIT mysql
[ info ] [ VIEW ] /var/www/html/daily/application/admin/view/note/shownote.html [ array (
  0 => 'note',
  1 => 'groups',
) ]
[ info ] [ LOG ] INIT File
[ sql ] [ DB ] CONNECT:[ UseTime:0.000540s ] mysql:host=74.120.168.12;dbname=diary;charset=utf8
[ sql ] [ SQL ] SHOW COLUMNS FROM `note` [ RunTime:0.001172s ]
[ sql ] [ SQL ] SELECT * FROM `note` WHERE  `id` = 253 LIMIT 1 [ RunTime:0.000459s ]
[ sql ] [ SQL ] SHOW COLUMNS FROM `groups` [ RunTime:0.000842s ]
[ sql ] [ SQL ] SELECT * FROM `groups` [ RunTime:0.000262s ]
---------------------------------------------------------------
[ 2018-11-22T22:15:11+08:00 ] 74.120.168.12 74.120.168.12 GET /daily/admin/note/newedit.html
[ info ] qingrang.top/daily/admin/note/newedit.html [运行时间：0.067983s][吞吐率：14.71req/s] [内存消耗：2,021.65kb] [文件加载：56]
[ info ] [ LANG ] /var/www/html/daily/thinkphp/lang/zh-cn.php
[ info ] [ ROUTE ] array (
  'type' => 'module',
  'module' => 
  array (
    0 => 'admin',
    1 => 'note',
    2 => 'newedit',
  ),
)
[ info ] [ HEADER ] array (
  'host' => 'qingrang.top',
  'upgrade-insecure-requests' => '1',
  'user-agent' => 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/70.0.3538.102 Safari/537.36',
  'accept' => 'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8',
  'referer' => 'http://qingrang.top/daily/admin/note',
  'accept-encoding' => 'gzip, deflate',
  'accept-language' => 'zh-CN,zh;q=0.9,la;q=0.8,en;q=0.7,lb;q=0.6',
  'cookie' => 'Hm_lvt_1769181352e9adc950166aada465644e=1541082864,1541122974,1541171416,1542098176; PHPSESSID=cs4ll16s0kjq1pmnpkf29456n2',
  'connection' => 'close',
)
[ info ] [ PARAM ] array (
)
[ info ] [ SESSION ] INIT array (
  'id' => '',
  'var_session_id' => '',
  'prefix' => 'think',
  'type' => '',
  'auto_start' => true,
)
[ info ] [ RUN ] app\admin\controller\Note->newEdit[ /var/www/html/daily/application/admin/controller/Note.php ]
[ info ] [ DB ] INIT mysql
[ info ] [ VIEW ] /var/www/html/daily/application/admin/view/note/newedit.html [ array (
  0 => 'groups',
) ]
[ info ] [ LOG ] INIT File
[ sql ] [ DB ] CONNECT:[ UseTime:0.000644s ] mysql:host=74.120.168.12;dbname=diary;charset=utf8
[ sql ] [ SQL ] SHOW COLUMNS FROM `groups` [ RunTime:0.001115s ]
[ sql ] [ SQL ] SELECT * FROM `groups` [ RunTime:0.000261s ]
---------------------------------------------------------------
[ 2018-11-22T22:15:50+08:00 ] 74.120.168.12 74.120.168.12 GET /daily/admin/note
[ info ] qingrang.top/daily/admin/note [运行时间：0.079626s][吞吐率：12.56req/s] [内存消耗：2,317.09kb] [文件加载：56]
[ info ] [ LANG ] /var/www/html/daily/thinkphp/lang/zh-cn.php
[ info ] [ ROUTE ] array (
  'type' => 'module',
  'module' => 
  array (
    0 => 'admin',
    1 => 'note',
    2 => NULL,
  ),
)
[ info ] [ HEADER ] array (
  'host' => 'qingrang.top',
  'upgrade-insecure-requests' => '1',
  'user-agent' => 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/70.0.3538.102 Safari/537.36',
  'accept' => 'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8',
  'accept-encoding' => 'gzip, deflate',
  'accept-language' => 'zh-CN,zh;q=0.9,la;q=0.8,en;q=0.7,lb;q=0.6',
  'cookie' => 'Hm_lvt_1769181352e9adc950166aada465644e=1541082864,1541122974,1541171416,1542098176; PHPSESSID=cs4ll16s0kjq1pmnpkf29456n2',
  'connection' => 'close',
)
[ info ] [ PARAM ] array (
)
[ info ] [ SESSION ] INIT array (
  'id' => '',
  'var_session_id' => '',
  'prefix' => 'think',
  'type' => '',
  'auto_start' => true,
)
[ info ] [ RUN ] app\admin\controller\Note->notelst[ /var/www/html/daily/application/admin/controller/Note.php ]
[ info ] [ DB ] INIT mysql
[ info ] [ VIEW ] /var/www/html/daily/application/admin/view/note/notelst.html [ array (
  0 => 'stickList',
  1 => 'hide',
  2 => 'list',
  3 => 'list_new',
  4 => 'groups',
  5 => 'groups0',
  6 => 'groups1',
  7 => 'groups2',
  8 => 'count',
  9 => 'year',
  10 => 'default_num',
) ]
[ info ] [ LOG ] INIT File
[ sql ] [ DB ] CONNECT:[ UseTime:0.000544s ] mysql:host=74.120.168.12;dbname=diary;charset=utf8
[ sql ] [ SQL ] SHOW COLUMNS FROM `note` [ RunTime:0.001536s ]
[ sql ] [ SQL ] SELECT * FROM `note` WHERE  `groups` <> 'Personal'  AND `is_show` = 1 ORDER BY date desc,id desc [ RunTime:0.002328s ]
[ sql ] [ SQL ] SELECT * FROM `note` WHERE  `groups` <> 'Personal'  AND `is_show` <> 1 ORDER BY gmt_modified desc LIMIT 5 [ RunTime:0.002110s ]
[ sql ] [ SQL ] SHOW COLUMNS FROM `config` [ RunTime:0.001005s ]
[ sql ] [ SQL ] SELECT * FROM `config` WHERE  `name` = 'hide' LIMIT 1 [ RunTime:0.000315s ]
[ sql ] [ SQL ] SELECT * FROM `note` WHERE  `id` < 5 [ RunTime:0.000417s ]
[ sql ] [ SQL ] SHOW COLUMNS FROM `groups` [ RunTime:0.000910s ]
[ sql ] [ SQL ] SELECT * FROM `groups` [ RunTime:0.000281s ]
[ sql ] [ SQL ] SELECT * FROM `groups` WHERE  `parent_id` = 0  AND `id` <> 2 ORDER BY `groups` [ RunTime:0.000440s ]
[ sql ] [ SQL ] SELECT `groups` FROM `groups` WHERE  `parent_id` = 1 [ RunTime:0.000336s ]
[ sql ] [ SQL ] SELECT * FROM `groups` WHERE  `parent_id` = 2 ORDER BY `groups` [ RunTime:0.000486s ]
[ sql ] [ SQL ] SELECT COUNT(*) AS tp_count FROM `note` WHERE  `groups` = 'Default' LIMIT 1 [ RunTime:0.001359s ]
[ sql ] [ SQL ] SELECT COUNT(*) AS tp_count FROM `note` LIMIT 1 [ RunTime:0.000254s ]
[ sql ] [ SQL ] SHOW COLUMNS FROM `yearlist` [ RunTime:0.001052s ]
[ sql ] [ SQL ] SELECT DISTINCT  `year` FROM `yearlist` ORDER BY year desc [ RunTime:0.000684s ]
---------------------------------------------------------------
[ 2018-11-22T22:15:53+08:00 ] 74.120.168.12 74.120.168.12 GET /daily/admin/note/editnote/id/253.html
[ info ] qingrang.top/daily/admin/note/editnote/id/253.html [运行时间：0.057850s][吞吐率：17.29req/s] [内存消耗：2,065.04kb] [文件加载：56]
[ info ] [ LANG ] /var/www/html/daily/thinkphp/lang/zh-cn.php
[ info ] [ ROUTE ] array (
  'type' => 'module',
  'module' => 
  array (
    0 => 'admin',
    1 => 'note',
    2 => 'editnote',
  ),
)
[ info ] [ HEADER ] array (
  'host' => 'qingrang.top',
  'upgrade-insecure-requests' => '1',
  'user-agent' => 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/70.0.3538.102 Safari/537.36',
  'accept' => 'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8',
  'referer' => 'http://qingrang.top/daily/admin/note',
  'accept-encoding' => 'gzip, deflate',
  'accept-language' => 'zh-CN,zh;q=0.9,la;q=0.8,en;q=0.7,lb;q=0.6',
  'cookie' => 'Hm_lvt_1769181352e9adc950166aada465644e=1541082864,1541122974,1541171416,1542098176; PHPSESSID=cs4ll16s0kjq1pmnpkf29456n2',
  'connection' => 'close',
)
[ info ] [ PARAM ] array (
  'id' => '253',
)
[ info ] [ SESSION ] INIT array (
  'id' => '',
  'var_session_id' => '',
  'prefix' => 'think',
  'type' => '',
  'auto_start' => true,
)
[ info ] [ RUN ] app\admin\controller\Note->editNote[ /var/www/html/daily/application/admin/controller/Note.php ]
[ info ] [ DB ] INIT mysql
[ info ] [ VIEW ] /var/www/html/daily/application/admin/view/note/editnote.html [ array (
  0 => 'note',
  1 => 'groups',
) ]
[ info ] [ LOG ] INIT File
[ sql ] [ DB ] CONNECT:[ UseTime:0.000552s ] mysql:host=74.120.168.12;dbname=diary;charset=utf8
[ sql ] [ SQL ] SHOW COLUMNS FROM `note` [ RunTime:0.001447s ]
[ sql ] [ SQL ] SELECT * FROM `note` WHERE  `id` = 253 LIMIT 1 [ RunTime:0.000545s ]
[ sql ] [ SQL ] SHOW COLUMNS FROM `groups` [ RunTime:0.000973s ]
[ sql ] [ SQL ] SELECT * FROM `groups` [ RunTime:0.000302s ]
---------------------------------------------------------------
[ 2018-11-22T22:16:14+08:00 ] 74.120.168.12 74.120.168.12 POST /daily/admin/note/savenote.html
[ info ] qingrang.top/daily/admin/note/savenote.html [运行时间：0.060185s][吞吐率：16.62req/s] [内存消耗：2,175.56kb] [文件加载：56]
[ info ] [ LANG ] /var/www/html/daily/thinkphp/lang/zh-cn.php
[ info ] [ ROUTE ] array (
  'type' => 'module',
  'module' => 
  array (
    0 => 'admin',
    1 => 'note',
    2 => 'savenote',
  ),
)
[ info ] [ HEADER ] array (
  'host' => 'qingrang.top',
  'content-length' => '34830',
  'accept' => 'text/plain, */*; q=0.01',
  'origin' => 'http://qingrang.top',
  'x-requested-with' => 'XMLHttpRequest',
  'user-agent' => 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/70.0.3538.102 Safari/537.36',
  'content-type' => 'application/x-www-form-urlencoded; charset=UTF-8',
  'referer' => 'http://qingrang.top/daily/admin/note/editnote/id/253.html',
  'accept-encoding' => 'gzip, deflate',
  'accept-language' => 'zh-CN,zh;q=0.9,la;q=0.8,en;q=0.7,lb;q=0.6',
  'cookie' => 'Hm_lvt_1769181352e9adc950166aada465644e=1541082864,1541122974,1541171416,1542098176; PHPSESSID=cs4ll16s0kjq1pmnpkf29456n2',
  'connection' => 'close',
)
[ info ] [ PARAM ] array (
  'ogroup' => 'Default',
  'context' => '# Spring(三) - Spring 与 DAO
[TOC]

Spring 与 Dao 部分，是 Spring 的两大核心技术 IoC 与 AOP 的典型应用体现：
- 对于 JDBC 模板的使用，是 IoC 的应用，是将 JDBC 模板对象注入给了 Dao 层的实现类。
- 对于 Spring 的事务管理， 是 AOP 的应用，将事务作为切面织入到了 Service 层的业务方法中。

## Spring 与 JDBC 模板
*Student.java - 实体类*
```
public class Student {
	private Integer id;
	private String name;
	private int age;
	public Student() {
		super();
	}
	public Student(String name, int age) {
		super();
		this.name = name;
		this.age = age;
	}
	public Integer getId() {
		return id;
	}
	public void setId(Integer id) {
		this.id = id;
	}
	public String getName() {
		return name;
	}
	public void setName(String name) {
		this.name = name;
	}
	public int getAge() {
		return age;
	}
	public void setAge(int age) {
		this.age = age;
	}
	@Override
	public String toString() {
		return "Student [id=" + id + ", name=" + name + ", age=" + age + "]";
	}
}
```
*IStudentDao.java - 接口*
```
public interface IStudentDao {
	void insertStudent(Student student);
	void deleteById(int id);
	void updateStudent(Student student);
	
	List<String> selectAllStudentsNames();
	String selectStudentNameById(int id);
	
	List<Student> selectAllStudents();
	Student selectStudentById(int id);
}
```
*StudentDaoImpl.java - 实现类*
```
public class StudentDaoImpl extends JdbcDaoSupport implements IStudentDao {

	@Override
	public void insertStudent(Student student) {
		String sql = "insert into student(name,age) values(?,?)";
		this.getJdbcTemplate().update(sql, student.getName(), student.getAge());
	}

	@Override
	public void deleteById(int id) {
		String sql = "delete from student where id=?";
		this.getJdbcTemplate().update(sql, id);
	}

	@Override
	public void updateStudent(Student student) {
		String sql = "update student set name=?, age=? where id=?";
		this.getJdbcTemplate().update(sql, student.getName(), student.getAge(), student.getId());
	}

	@Override
	public List<String> selectAllStudentsNames() {
		String sql = "select name from student";
		return this.getJdbcTemplate().queryForList(sql, String.class);
	}

	@Override
	public String selectStudentNameById(int id) {
		String sql = "select name from student where id=?";
		return this.getJdbcTemplate().queryForObject(sql, String.class, id);
	}

	@Override
	public List<Student> selectAllStudents() {
		String sql = "select id,name,age from student";
		return this.getJdbcTemplate().query(sql, new StudentRowMapper());
	}

	@Override
	public Student selectStudentById(int id) {
		String sql = "select id,name,age from student where id=?";
		return this.getJdbcTemplate().queryForObject(sql, new StudentRowMapper(), id);
	}

}
```
*StudentRowMapper.java*
```
public class StudentRowMapper implements RowMapper<Student> {
	// rs：当查询出总的结果集后，框架会自动遍历这个结果集，每一次遍历的一行数据，都会被存放到
	//     这个方法的rs参数中。也就是说，这里的rs代表的是一行数据，并非所有查询结果。换个角度
	//     来说，只要能执行到这个方法，就说明这里的rs不会是空的
	@Override
	public Student mapRow(ResultSet rs, int rowNum) throws SQLException {
		Student student = new Student();
		student.setId(rs.getInt("id"));
		student.setName(rs.getString("name"));
		student.setAge(rs.getInt("age"));
		return student;
	}
}
```
*IStudentService.java*
```
public interface IStudentService {
	void addStudent(Student student);
	void removeById(int id);
	void modifyStudent(Student student);
	
	List<String> findAllStudentsNames();
	String findStudentNameById(int id);
	
	List<Student> findAllStudents();
	Student findStudentById(int id);
}
```
*StudentServiceImpl.java*
```
public class StudentServiceImpl implements IStudentService {
	private IStudentDao dao;
	
	public void setDao(IStudentDao dao) {
		this.dao = dao;
	}

	@Override
	public void addStudent(Student student) {
		dao.insertStudent(student);
	}

	@Override
	public void removeById(int id) {
		dao.deleteById(id);
	}

	@Override
	public void modifyStudent(Student student) {
		dao.updateStudent(student);
	}

	@Override
	public List<String> findAllStudentsNames() {
		return dao.selectAllStudentsNames();
	}

	@Override
	public String findStudentNameById(int id) {
		return dao.selectStudentNameById(id);
	}

	@Override
	public List<Student> findAllStudents() {
		return dao.selectAllStudents();
	}

	@Override
	public Student findStudentById(int id) {
		return dao.selectStudentById(id);
	}

}
```
*MyTest.java*
```
public class MyTest {
	
	private IStudentService service;

	@Before
	public void before() {
		// 创建容器对象，加载Spring配置文件
		String resource = "applicationContext.xml";
		ApplicationContext ac = new ClassPathXmlApplicationContext(resource);
		service = (IStudentService) ac.getBean("studentService");
	}
	
	@Test
	public void test01() {
		Student student = new Student("张三", 23);
		service.addStudent(student);
	}
	
	@Test
	public void test02() {
		service.removeById(2);
	}
	
	@Test
	public void test03() {
		Student student = new Student("张三", 23);
		student.setId(3);
		service.modifyStudent(student);
	}
	
	@Test
	public void test04() {
		List<String> names = service.findAllStudentsNames();
		System.out.println(names);
	}
	
	@Test
	public void test05() {
		String name = service.findStudentNameById(3);
		System.out.println(name);
	}
	
	@Test
	public void test06() {
		List<Student> students = service.findAllStudents();
		for (Student student : students) {
			System.out.println(student);
		}
	}
	
	@Test
	public void test07() {
		Student student = service.findStudentById(3);
		System.out.println(student);
	}
}
```
*applicationContext.mxl*
```
<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xmlns:context="http://www.springframework.org/schema/context" xsi:schemaLocation="
        http://www.springframework.org/schema/beans 
        http://www.springframework.org/schema/beans/spring-beans.xsd
        http://www.springframework.org/schema/context 
        http://www.springframework.org/schema/context/spring-context.xsd">

	<!-- 注册数据源：Spring内置连接池 -->
	<bean id="myDataSource" class="org.springframework.jdbc.datasource.DriverManagerDataSource">
		<property name="driverClassName" value="${jdbc.driver}"/>
		<property name="url" value="${jdbc.url}"/>
		<property name="username" value="${jdbc.user}"/>
		<property name="password" value="${jdbc.password}"/>
	</bean>

	<!-- 注册属性文件：方式一 -->
	<!-- 
	<bean class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
		<property name="location" value="classpath:jdbc.properties"/>
	</bean>
	 -->

	<!-- 注册属性文件：方式二 -->
	<context:property-placeholder location="classpath:jdbc.properties"/>
	
	<!-- 注册 Dao -->
	<bean id="studentDao" class="top.qingrang.dao.StudentDaoImpl">
		<property name="dataSource" ref="myDataSource"/>
	</bean>
	
	<!-- 注册 Service -->
	<bean id="studentService" class="top.qingrang.service.StudentServiceImpl">
		<property name="dao" ref="studentDao"/>
	</bean>

</beans>
```
## Spring 的事务管理
事务原本是数据库中的概念，在 Dao 层。但一般情况下，需要将事务提升到业务层，即 Service 层。这样做是为了能够使用事务的特性来管理具体的业务。在 Spring 中通常可以通过以下三种方式来实现对事务的管理：
- 使用 Spring 的事务代理工厂管理事务
- 使用 Spring 的事务注解管理事务
- 使用 AspectJ 的 AOP 配置管理事务

### Spring 事务管理 API
Spring 的事务管理，主要用到两个事务相关的接口。
#### 事务管理器接口
事务管理器是 PlatformTransactionManager 接口对象。其主要用于完成事务的提交、回滚，及获取事务的状态信息。
##### 常用的两个实现类
PlatformTransactionManager 接口有两个常用的实现类：
- DataSourceTransactionManager：使用 JDBC 或 iBatis 进行持久化数据时使用。
- HibernateTransactionManager：使用 Hibernate 进行持久化数据时使用。

##### Spring 的回滚方式
Spring 事务的默认回滚方式是： 发生运行时异常时回滚，发生受查异常时提交。 不过，对于受查异常，程序员也可以手工设置其回滚方式。

#### 事务定义接口
事务定义接口 TransactionDefinition 中定义了事务描述相关的三类常量：事务隔离级别、事务传播行为、事务默认超时时限， 及对它们的操作。
##### 定义了五个事务隔离级别常量
这些常量均是以 ISOLATION_开头。即形如 ISOLATION_XXX。
- DEFAULT： 采用 DB 默认的事务隔离级别。 MySql 的默认为 REPEATABLE_READ；Oracle 默认为 READ_COMMITTED。
- READ_UNCOMMITTED： 读未提交。 未解决任何并发问题。
- READ_COMMITTED： 读已提交。解决脏读，存在不可重复读与幻读。
- REPEATABLE_READ： 可重复读。解决脏读、不可重复读，存在幻读
- SERIALIZABLE： 串行化。不存在并发问题。

##### 定义了七个事务传播行为常量
所谓事务传播行为是指，处于不同事务中的方法在相互调用时，执行期间事务的维护情况。如， A 事务中的方法 doSome()调用 B 事务中的方法 doOther()，在调用执行期间事务的维护情况，就称为事务传播行为。事务传播行为是加在方法上的。事务传播行为常量都是以 PROPAGATION_ 开头，形如 PROPAGATION_XXX。
1. REQUIRED：
指定的方法必须在事务内执行。若当前存在事务，就加入到当前事务中；若当前没有事务，则创建一个新事务。这种传播行为是最常见的选择，也是 Spring 默认的事务传播行为。
如该传播行为加在 doOther()方法上。若 doSome()方法在调用 doOther()方法时就是在事务内运行的，则 doOther()方法的执行也加入到该事务内执行。若 doSome()方法在调用doOther()方法时没有在事务内执行，则 doOther()方法会创建一个事务，并在其中执行。
![mark](https://daily-1252869435.cos.ap-chengdu.myqcloud.com/2018-11-21-23-21-56.png)
1. SUPPORTS
指定的方法支持当前事务，但若当前没有事务，也可以以非事务方式执行。
![mark](https://daily-1252869435.cos.ap-chengdu.myqcloud.com/2018-11-21-23-22-13.png)
1. MANDATORY
指定的方法必须在当前事务内执行，若当前没有事务，则直接抛出异常。
![mark](https://daily-1252869435.cos.ap-chengdu.myqcloud.com/2018-11-21-23-22-40.png)
1. REQUIRES_NEW
总是新建一个事务，若当前存在事务，就将当前事务挂起，直到新事务执行完毕。
![mark](https://daily-1252869435.cos.ap-chengdu.myqcloud.com/2018-11-21-23-22-55.png)
1. NOT_SUPPORTED
指定的方法不能在事务环境中执行，若当前存在事务，就将当前事务挂起。
![mark](https://daily-1252869435.cos.ap-chengdu.myqcloud.com/2018-11-21-23-23-07.png)
1. NEVER
指定的方法不能在事务环境下执行，若当前存在事务，就直接抛出异常。
![mark](https://daily-1252869435.cos.ap-chengdu.myqcloud.com/2018-11-21-23-23-22.png)
1. NESTED
指定的方法必须在事务内执行。若当前存在事务，则在嵌套事务内执行；若当前没有事务，则创建一个新事务。
![mark](https://daily-1252869435.cos.ap-chengdu.myqcloud.com/2018-11-21-23-23-40.png)

##### 定义了默认事务超时时限
常量 TIMEOUT_DEFAULT 定义了事务底层默认的超时时限，及不支持事务超时时限设置的 none 值。

注意，事务的超时时限起作用的条件比较多，且超时的时间计算点较复杂。所以，该值一般就使用默认值即可。
## 使用 AspectJ 的 AOP 配置管理事务
>本例要实现模拟购买股票。存在两个实体：银行账户 Account 与股票账户 Stock。当要购买股票时，需要从 Account 中扣除相应金额的存款，然后在 Stock 中增加相应的股票数量。而在这个过程中，可能会抛出一个用户自定义的异常。异常的抛出，将会使两个操作回滚。

*Account.java*
```
public class Account {
	private Integer aid;
	private String aname;
	private double balance;  // 余额
	public Account() {
		super();
	}
	public Account(String aname, double balance) {
		super();
		this.aname = aname;
		this.balance = balance;
	}
	public Integer getAid() {
		return aid;
	}
	public void setAid(Integer aid) {
		this.aid = aid;
	}
	public String getAname() {
		return aname;
	}
	public void setAname(String aname) {
		this.aname = aname;
	}
	public double getBalance() {
		return balance;
	}
	public void setBalance(double balance) {
		this.balance = balance;
	}
	@Override
	public String toString() {
		return "Account [aid=" + aid + ", aname=" + aname + ", balance="
				+ balance + "]";
	}
}
```

*Stock.java*
```
public class Stock {
	private Integer sid;
	private String sname;   // 股票名称
	private int count;      // 股票数量
	public Stock() {
		super();
	}
	public Stock(String sname, int count) {
		super();
		this.sname = sname;
		this.count = count;
	}
	public Integer getSid() {
		return sid;
	}
	public void setSid(Integer sid) {
		this.sid = sid;
	}
	public String getSname() {
		return sname;
	}
	public void setSname(String sname) {
		this.sname = sname;
	}
	public int getCount() {
		return count;
	}
	public void setCount(int count) {
		this.count = count;
	}
	@Override
	public String toString() {
		return "Stock [sid=" + sid + ", sname=" + sname + ", count=" + count
				+ "]";
	}
}
```

*IAccountDao.java*
```
public interface IAccountDao {
	void insertAccount(String aname, double money);

	void updateAccount(String aname, double money, boolean isBuy);
}
```

*AccountDaoImpl.java*
```
public class AccountDaoImpl extends JdbcDaoSupport implements IAccountDao {
	@Override
	public void insertAccount(String aname, double money) {
		String sql = "insert into account(aname, balance) values(?,?)";
		this.getJdbcTemplate().update(sql, aname, money);
	}

	@Override
	public void updateAccount(String aname, double money, boolean isBuy) {
		String sql = "update account set balance=balance+? where aname=?";
		if (isBuy) {
			sql = "update account set balance=balance-? where aname=?";
		}
		this.getJdbcTemplate().update(sql, money, aname);
	}
}
```

*IStockDao.java*
```
public interface IStockDao {
	void insertStock(String sname, int amount);

	void updateStock(String sname, int amount, boolean isBuy);
}
```

*StockDaoImpl.java*
```
public class StockDaoImpl extends JdbcDaoSupport implements IStockDao {
	@Override
	public void insertStock(String sname, int amount) {
		String sql = "insert into stock(sname, count) values(?,?)";
		this.getJdbcTemplate().update(sql, sname, amount);
	}

	@Override
	public void updateStock(String sname, int amount, boolean isBuy) {
		String sql = "update stock set count=count-? where sname=?";
		if(isBuy) {
			sql = "update stock set count=count+? where sname=?";
		}
		this.getJdbcTemplate().update(sql, amount, sname);
	}
}
```

*IBuyStockService.java*
```
public interface IBuyStockService {
	void openAccount(String aname, double money);
	void openStock(String sname, int amount);
	void buyStock(String aname, double money, String sname, int amount) throws BuyStockException;
}
```

*BuyStockServiceImpl.java*
```
public class BuyStockServiceImpl implements IBuyStockService {
	private IAccountDao adao;
	private IStockDao sdao;
	
	public void setAdao(IAccountDao adao) {
		this.adao = adao;
	}

	public void setSdao(IStockDao sdao) {
		this.sdao = sdao;
	}

	@Override
	public void openAccount(String aname, double money) {
		adao.insertAccount(aname, money);
	}

	@Override
	public void openStock(String sname, int amount) {
		sdao.insertStock(sname, amount);
	}

	@Override
	public void buyStock(String aname, double money, String sname, int amount) throws BuyStockException{
		boolean isBuy = true;
		adao.updateAccount(aname, money, isBuy);
		if (1 == 1) {
			throw new BuyStockException("购买股票异常");
		}
		sdao.updateStock(sname, amount, isBuy);
	}
}
```

*BuyStockException.java*
```
public class BuyStockException extends Exception {
	public BuyStockException() {
		super();
	}

	public BuyStockException(String message) {
		super(message);
	}
}
```

*MyTest.java*
```
public class MyTest {
	private IBuyStockService service;

	@Before
	public void before() {
		// 创建容器对象，加载Spring配置文件
		String resource = "applicationContext.xml";
		ApplicationContext ac = new ClassPathXmlApplicationContext(resource);
		service = (IBuyStockService) ac.getBean("buyStockService");
	}
	
	@Test
	public void test01() {
		service.openAccount("张三", 10000);
		service.openStock("北京动力节点", 0);
	}
	
	@Test
	public void test02() throws BuyStockException {
		service.buyStock("张三", 2000, "北京动力节点", 5);
	}
}
```

*applicationContext.xml*
```
<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:aop="http://www.springframework.org/schema/aop" 
	xmlns:tx="http://www.springframework.org/schema/tx"
	xsi:schemaLocation="
        http://www.springframework.org/schema/beans 
        http://www.springframework.org/schema/beans/spring-beans.xsd
        http://www.springframework.org/schema/context 
        http://www.springframework.org/schema/context/spring-context.xsd
        http://www.springframework.org/schema/tx 
        http://www.springframework.org/schema/tx/spring-tx.xsd
        http://www.springframework.org/schema/aop 
        http://www.springframework.org/schema/aop/spring-aop.xsd">
	
	<!-- ================================= IoC ==================================== -->
	<!-- 注册数据源：Spring内置连接池 -->
	<bean id="myDataSource" class="org.springframework.jdbc.datasource.DriverManagerDataSource">
		<property name="driverClassName" value="${jdbc.driver}"/>
		<property name="url" value="${jdbc.url}"/>
		<property name="username" value="${jdbc.user}"/>
		<property name="password" value="${jdbc.password}"/>
	</bean>
	
	<!-- 注册属性文件 -->
	<context:property-placeholder location="classpath:jdbc.properties"/>
	
	<!-- 注册Dao -->
	<bean id="accountDao" class="top.qingrang.dao.AccountDaoImpl">
		<property name="dataSource" ref="myDataSource"/>
	</bean>
	<bean id="stockDao" class="top.qingrang.dao.StockDaoImpl">
		<property name="dataSource" ref="myDataSource"/>
	</bean>
	
	<!-- 注册Service -->
	<bean id="buyStockService" class="top.qingrang.service.BuyStockServiceImpl">
		<property name="adao" ref="accountDao"/>
		<property name="sdao" ref="stockDao"/>
	</bean>

	<!-- ================================= AOP ==================================== -->
	
	<!-- 注册事务管理器 -->
	<bean id="myTransactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource" ref="myDataSource"/>
	</bean>
	
	<!-- 注册事务通知 -->
	<tx:advice id="txAdvice" transaction-manager="myTransactionManager">
		<tx:attributes>
			<!-- 这里指定的是：为每一个连接点指定所要应用的事务属性 -->
			<tx:method name="open*" isolation="DEFAULT" propagation="REQUIRED"/>
			<tx:method name="buyStock" isolation="DEFAULT" propagation="REQUIRED" rollback-for="BuyStockException"/>
		</tx:attributes>
	</tx:advice>
	
	<!-- AOP配置 -->
	<aop:config>
		<!-- 这里指定的是切入点 -->
		<aop:pointcut expression="execution(* *..service.*.*(..))" id="myPointcut"/>
		<aop:advisor advice-ref="txAdvice" pointcut-ref="myPointcut"/>
	</aop:config>
</beans>
```




## Spring 与 MyBatis
',
)
[ info ] [ SESSION ] INIT array (
  'id' => '',
  'var_session_id' => '',
  'prefix' => 'think',
  'type' => '',
  'auto_start' => true,
)
[ info ] [ RUN ] app\admin\controller\Note->saveNote[ /var/www/html/daily/application/admin/controller/Note.php ]
[ info ] [ DB ] INIT mysql
[ info ] [ CACHE ] INIT File
[ info ] [ LOG ] INIT File
[ sql ] [ DB ] CONNECT:[ UseTime:0.000615s ] mysql:host=74.120.168.12;dbname=diary;charset=utf8
[ sql ] [ SQL ] SHOW COLUMNS FROM `note` [ RunTime:0.001137s ]
[ sql ] [ SQL ] UPDATE `note`  SET `title`='Spring(三) - Spring 与 DAO',`content`='# Spring(三) - Spring 与 DAO\n[TOC]\n\nSpring 与 Dao 部分，是 Spring 的两大核心技术 IoC 与 AOP 的典型应用体现：\n- 对于 JDBC 模板的使用，是 IoC 的应用，是将 JDBC 模板对象注入给了 Dao 层的实现类。\n- 对于 Spring 的事务管理， 是 AOP 的应用，将事务作为切面织入到了 Service 层的业务方法中。\n\n## Spring 与 JDBC 模板\n*Student.java - 实体类*\n```\npublic class Student {\n	private Integer id;\n	private String name;\n	private int age;\n	public Student() {\n		super();\n	}\n	public Student(String name, int age) {\n		super();\n		this.name = name;\n		this.age = age;\n	}\n	public Integer getId() {\n		return id;\n	}\n	public void setId(Integer id) {\n		this.id = id;\n	}\n	public String getName() {\n		return name;\n	}\n	public void setName(String name) {\n		this.name = name;\n	}\n	public int getAge() {\n		return age;\n	}\n	public void setAge(int age) {\n		this.age = age;\n	}\n	@Override\n	public String toString() {\n		return \"Student [id=\" + id + \", name=\" + name + \", age=\" + age + \"]\";\n	}\n}\n```\n*IStudentDao.java - 接口*\n```\npublic interface IStudentDao {\n	void insertStudent(Student student);\n	void deleteById(int id);\n	void updateStudent(Student student);\n	\n	List<String> selectAllStudentsNames();\n	String selectStudentNameById(int id);\n	\n	List<Student> selectAllStudents();\n	Student selectStudentById(int id);\n}\n```\n*StudentDaoImpl.java - 实现类*\n```\npublic class StudentDaoImpl extends JdbcDaoSupport implements IStudentDao {\n\n	@Override\n	public void insertStudent(Student student) {\n		String sql = \"insert into student(name,age) values(?,?)\";\n		this.getJdbcTemplate().update(sql, student.getName(), student.getAge());\n	}\n\n	@Override\n	public void deleteById(int id) {\n		String sql = \"delete from student where id=?\";\n		this.getJdbcTemplate().update(sql, id);\n	}\n\n	@Override\n	public void updateStudent(Student student) {\n		String sql = \"update student set name=?, age=? where id=?\";\n		this.getJdbcTemplate().update(sql, student.getName(), student.getAge(), student.getId());\n	}\n\n	@Override\n	public List<String> selectAllStudentsNames() {\n		String sql = \"select name from student\";\n		return this.getJdbcTemplate().queryForList(sql, String.class);\n	}\n\n	@Override\n	public String selectStudentNameById(int id) {\n		String sql = \"select name from student where id=?\";\n		return this.getJdbcTemplate().queryForObject(sql, String.class, id);\n	}\n\n	@Override\n	public List<Student> selectAllStudents() {\n		String sql = \"select id,name,age from student\";\n		return this.getJdbcTemplate().query(sql, new StudentRowMapper());\n	}\n\n	@Override\n	public Student selectStudentById(int id) {\n		String sql = \"select id,name,age from student where id=?\";\n		return this.getJdbcTemplate().queryForObject(sql, new StudentRowMapper(), id);\n	}\n\n}\n```\n*StudentRowMapper.java*\n```\npublic class StudentRowMapper implements RowMapper<Student> {\n	// rs：当查询出总的结果集后，框架会自动遍历这个结果集，每一次遍历的一行数据，都会被存放到\n	//     这个方法的rs参数中。也就是说，这里的rs代表的是一行数据，并非所有查询结果。换个角度\n	//     来说，只要能执行到这个方法，就说明这里的rs不会是空的\n	@Override\n	public Student mapRow(ResultSet rs, int rowNum) throws SQLException {\n		Student student = new Student();\n		student.setId(rs.getInt(\"id\"));\n		student.setName(rs.getString(\"name\"));\n		student.setAge(rs.getInt(\"age\"));\n		return student;\n	}\n}\n```\n*IStudentService.java*\n```\npublic interface IStudentService {\n	void addStudent(Student student);\n	void removeById(int id);\n	void modifyStudent(Student student);\n	\n	List<String> findAllStudentsNames();\n	String findStudentNameById(int id);\n	\n	List<Student> findAllStudents();\n	Student findStudentById(int id);\n}\n```\n*StudentServiceImpl.java*\n```\npublic class StudentServiceImpl implements IStudentService {\n	private IStudentDao dao;\n	\n	public void setDao(IStudentDao dao) {\n		this.dao = dao;\n	}\n\n	@Override\n	public void addStudent(Student student) {\n		dao.insertStudent(student);\n	}\n\n	@Override\n	public void removeById(int id) {\n		dao.deleteById(id);\n	}\n\n	@Override\n	public void modifyStudent(Student student) {\n		dao.updateStudent(student);\n	}\n\n	@Override\n	public List<String> findAllStudentsNames() {\n		return dao.selectAllStudentsNames();\n	}\n\n	@Override\n	public String findStudentNameById(int id) {\n		return dao.selectStudentNameById(id);\n	}\n\n	@Override\n	public List<Student> findAllStudents() {\n		return dao.selectAllStudents();\n	}\n\n	@Override\n	public Student findStudentById(int id) {\n		return dao.selectStudentById(id);\n	}\n\n}\n```\n*MyTest.java*\n```\npublic class MyTest {\n	\n	private IStudentService service;\n\n	@Before\n	public void before() {\n		// 创建容器对象，加载Spring配置文件\n		String resource = \"applicationContext.xml\";\n		ApplicationContext ac = new ClassPathXmlApplicationContext(resource);\n		service = (IStudentService) ac.getBean(\"studentService\");\n	}\n	\n	@Test\n	public void test01() {\n		Student student = new Student(\"张三\", 23);\n		service.addStudent(student);\n	}\n	\n	@Test\n	public void test02() {\n		service.removeById(2);\n	}\n	\n	@Test\n	public void test03() {\n		Student student = new Student(\"张三\", 23);\n		student.setId(3);\n		service.modifyStudent(student);\n	}\n	\n	@Test\n	public void test04() {\n		List<String> names = service.findAllStudentsNames();\n		System.out.println(names);\n	}\n	\n	@Test\n	public void test05() {\n		String name = service.findStudentNameById(3);\n		System.out.println(name);\n	}\n	\n	@Test\n	public void test06() {\n		List<Student> students = service.findAllStudents();\n		for (Student student : students) {\n			System.out.println(student);\n		}\n	}\n	\n	@Test\n	public void test07() {\n		Student student = service.findStudentById(3);\n		System.out.println(student);\n	}\n}\n```\n*applicationContext.mxl*\n```\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<beans xmlns=\"http://www.springframework.org/schema/beans\"\n    xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n    xmlns:context=\"http://www.springframework.org/schema/context\" xsi:schemaLocation=\"\n        http://www.springframework.org/schema/beans \n        http://www.springframework.org/schema/beans/spring-beans.xsd\n        http://www.springframework.org/schema/context \n        http://www.springframework.org/schema/context/spring-context.xsd\">\n\n	<!-- 注册数据源：Spring内置连接池 -->\n	<bean id=\"myDataSource\" class=\"org.springframework.jdbc.datasource.DriverManagerDataSource\">\n		<property name=\"driverClassName\" value=\"${jdbc.driver}\"/>\n		<property name=\"url\" value=\"${jdbc.url}\"/>\n		<property name=\"username\" value=\"${jdbc.user}\"/>\n		<property name=\"password\" value=\"${jdbc.password}\"/>\n	</bean>\n\n	<!-- 注册属性文件：方式一 -->\n	<!-- \n	<bean class=\"org.springframework.beans.factory.config.PropertyPlaceholderConfigurer\">\n		<property name=\"location\" value=\"classpath:jdbc.properties\"/>\n	</bean>\n	 -->\n\n	<!-- 注册属性文件：方式二 -->\n	<context:property-placeholder location=\"classpath:jdbc.properties\"/>\n	\n	<!-- 注册 Dao -->\n	<bean id=\"studentDao\" class=\"top.qingrang.dao.StudentDaoImpl\">\n		<property name=\"dataSource\" ref=\"myDataSource\"/>\n	</bean>\n	\n	<!-- 注册 Service -->\n	<bean id=\"studentService\" class=\"top.qingrang.service.StudentServiceImpl\">\n		<property name=\"dao\" ref=\"studentDao\"/>\n	</bean>\n\n</beans>\n```\n## Spring 的事务管理\n事务原本是数据库中的概念，在 Dao 层。但一般情况下，需要将事务提升到业务层，即 Service 层。这样做是为了能够使用事务的特性来管理具体的业务。在 Spring 中通常可以通过以下三种方式来实现对事务的管理：\n- 使用 Spring 的事务代理工厂管理事务\n- 使用 Spring 的事务注解管理事务\n- 使用 AspectJ 的 AOP 配置管理事务\n\n### Spring 事务管理 API\nSpring 的事务管理，主要用到两个事务相关的接口。\n#### 事务管理器接口\n事务管理器是 PlatformTransactionManager 接口对象。其主要用于完成事务的提交、回滚，及获取事务的状态信息。\n##### 常用的两个实现类\nPlatformTransactionManager 接口有两个常用的实现类：\n- DataSourceTransactionManager：使用 JDBC 或 iBatis 进行持久化数据时使用。\n- HibernateTransactionManager：使用 Hibernate 进行持久化数据时使用。\n\n##### Spring 的回滚方式\nSpring 事务的默认回滚方式是： 发生运行时异常时回滚，发生受查异常时提交。 不过，对于受查异常，程序员也可以手工设置其回滚方式。\n\n#### 事务定义接口\n事务定义接口 TransactionDefinition 中定义了事务描述相关的三类常量：事务隔离级别、事务传播行为、事务默认超时时限， 及对它们的操作。\n##### 定义了五个事务隔离级别常量\n这些常量均是以 ISOLATION_开头。即形如 ISOLATION_XXX。\n- DEFAULT： 采用 DB 默认的事务隔离级别。 MySql 的默认为 REPEATABLE_READ；Oracle 默认为 READ_COMMITTED。\n- READ_UNCOMMITTED： 读未提交。 未解决任何并发问题。\n- READ_COMMITTED： 读已提交。解决脏读，存在不可重复读与幻读。\n- REPEATABLE_READ： 可重复读。解决脏读、不可重复读，存在幻读\n- SERIALIZABLE： 串行化。不存在并发问题。\n\n##### 定义了七个事务传播行为常量\n所谓事务传播行为是指，处于不同事务中的方法在相互调用时，执行期间事务的维护情况。如， A 事务中的方法 doSome()调用 B 事务中的方法 doOther()，在调用执行期间事务的维护情况，就称为事务传播行为。事务传播行为是加在方法上的。事务传播行为常量都是以 PROPAGATION_ 开头，形如 PROPAGATION_XXX。\n1. REQUIRED：\n指定的方法必须在事务内执行。若当前存在事务，就加入到当前事务中；若当前没有事务，则创建一个新事务。这种传播行为是最常见的选择，也是 Spring 默认的事务传播行为。\n如该传播行为加在 doOther()方法上。若 doSome()方法在调用 doOther()方法时就是在事务内运行的，则 doOther()方法的执行也加入到该事务内执行。若 doSome()方法在调用doOther()方法时没有在事务内执行，则 doOther()方法会创建一个事务，并在其中执行。\n![mark](https://daily-1252869435.cos.ap-chengdu.myqcloud.com/2018-11-21-23-21-56.png)\n1. SUPPORTS\n指定的方法支持当前事务，但若当前没有事务，也可以以非事务方式执行。\n![mark](https://daily-1252869435.cos.ap-chengdu.myqcloud.com/2018-11-21-23-22-13.png)\n1. MANDATORY\n指定的方法必须在当前事务内执行，若当前没有事务，则直接抛出异常。\n![mark](https://daily-1252869435.cos.ap-chengdu.myqcloud.com/2018-11-21-23-22-40.png)\n1. REQUIRES_NEW\n总是新建一个事务，若当前存在事务，就将当前事务挂起，直到新事务执行完毕。\n![mark](https://daily-1252869435.cos.ap-chengdu.myqcloud.com/2018-11-21-23-22-55.png)\n1. NOT_SUPPORTED\n指定的方法不能在事务环境中执行，若当前存在事务，就将当前事务挂起。\n![mark](https://daily-1252869435.cos.ap-chengdu.myqcloud.com/2018-11-21-23-23-07.png)\n1. NEVER\n指定的方法不能在事务环境下执行，若当前存在事务，就直接抛出异常。\n![mark](https://daily-1252869435.cos.ap-chengdu.myqcloud.com/2018-11-21-23-23-22.png)\n1. NESTED\n指定的方法必须在事务内执行。若当前存在事务，则在嵌套事务内执行；若当前没有事务，则创建一个新事务。\n![mark](https://daily-1252869435.cos.ap-chengdu.myqcloud.com/2018-11-21-23-23-40.png)\n\n##### 定义了默认事务超时时限\n常量 TIMEOUT_DEFAULT 定义了事务底层默认的超时时限，及不支持事务超时时限设置的 none 值。\n\n注意，事务的超时时限起作用的条件比较多，且超时的时间计算点较复杂。所以，该值一般就使用默认值即可。\n## 使用 AspectJ 的 AOP 配置管理事务\n>本例要实现模拟购买股票。存在两个实体：银行账户 Account 与股票账户 Stock。当要购买股票时，需要从 Account 中扣除相应金额的存款，然后在 Stock 中增加相应的股票数量。而在这个过程中，可能会抛出一个用户自定义的异常。异常的抛出，将会使两个操作回滚。\n\n*Account.java*\n```\npublic class Account {\n	private Integer aid;\n	private String aname;\n	private double balance;  // 余额\n	public Account() {\n		super();\n	}\n	public Account(String aname, double balance) {\n		super();\n		this.aname = aname;\n		this.balance = balance;\n	}\n	public Integer getAid() {\n		return aid;\n	}\n	public void setAid(Integer aid) {\n		this.aid = aid;\n	}\n	public String getAname() {\n		return aname;\n	}\n	public void setAname(String aname) {\n		this.aname = aname;\n	}\n	public double getBalance() {\n		return balance;\n	}\n	public void setBalance(double balance) {\n		this.balance = balance;\n	}\n	@Override\n	public String toString() {\n		return \"Account [aid=\" + aid + \", aname=\" + aname + \", balance=\"\n				+ balance + \"]\";\n	}\n}\n```\n\n*Stock.java*\n```\npublic class Stock {\n	private Integer sid;\n	private String sname;   // 股票名称\n	private int count;      // 股票数量\n	public Stock() {\n		super();\n	}\n	public Stock(String sname, int count) {\n		super();\n		this.sname = sname;\n		this.count = count;\n	}\n	public Integer getSid() {\n		return sid;\n	}\n	public void setSid(Integer sid) {\n		this.sid = sid;\n	}\n	public String getSname() {\n		return sname;\n	}\n	public void setSname(String sname) {\n		this.sname = sname;\n	}\n	public int getCount() {\n		return count;\n	}\n	public void setCount(int count) {\n		this.count = count;\n	}\n	@Override\n	public String toString() {\n		return \"Stock [sid=\" + sid + \", sname=\" + sname + \", count=\" + count\n				+ \"]\";\n	}\n}\n```\n\n*IAccountDao.java*\n```\npublic interface IAccountDao {\n	void insertAccount(String aname, double money);\n\n	void updateAccount(String aname, double money, boolean isBuy);\n}\n```\n\n*AccountDaoImpl.java*\n```\npublic class AccountDaoImpl extends JdbcDaoSupport implements IAccountDao {\n	@Override\n	public void insertAccount(String aname, double money) {\n		String sql = \"insert into account(aname, balance) values(?,?)\";\n		this.getJdbcTemplate().update(sql, aname, money);\n	}\n\n	@Override\n	public void updateAccount(String aname, double money, boolean isBuy) {\n		String sql = \"update account set balance=balance+? where aname=?\";\n		if (isBuy) {\n			sql = \"update account set balance=balance-? where aname=?\";\n		}\n		this.getJdbcTemplate().update(sql, money, aname);\n	}\n}\n```\n\n*IStockDao.java*\n```\npublic interface IStockDao {\n	void insertStock(String sname, int amount);\n\n	void updateStock(String sname, int amount, boolean isBuy);\n}\n```\n\n*StockDaoImpl.java*\n```\npublic class StockDaoImpl extends JdbcDaoSupport implements IStockDao {\n	@Override\n	public void insertStock(String sname, int amount) {\n		String sql = \"insert into stock(sname, count) values(?,?)\";\n		this.getJdbcTemplate().update(sql, sname, amount);\n	}\n\n	@Override\n	public void updateStock(String sname, int amount, boolean isBuy) {\n		String sql = \"update stock set count=count-? where sname=?\";\n		if(isBuy) {\n			sql = \"update stock set count=count+? where sname=?\";\n		}\n		this.getJdbcTemplate().update(sql, amount, sname);\n	}\n}\n```\n\n*IBuyStockService.java*\n```\npublic interface IBuyStockService {\n	void openAccount(String aname, double money);\n	void openStock(String sname, int amount);\n	void buyStock(String aname, double money, String sname, int amount) throws BuyStockException;\n}\n```\n\n*BuyStockServiceImpl.java*\n```\npublic class BuyStockServiceImpl implements IBuyStockService {\n	private IAccountDao adao;\n	private IStockDao sdao;\n	\n	public void setAdao(IAccountDao adao) {\n		this.adao = adao;\n	}\n\n	public void setSdao(IStockDao sdao) {\n		this.sdao = sdao;\n	}\n\n	@Override\n	public void openAccount(String aname, double money) {\n		adao.insertAccount(aname, money);\n	}\n\n	@Override\n	public void openStock(String sname, int amount) {\n		sdao.insertStock(sname, amount);\n	}\n\n	@Override\n	public void buyStock(String aname, double money, String sname, int amount) throws BuyStockException{\n		boolean isBuy = true;\n		adao.updateAccount(aname, money, isBuy);\n		if (1 == 1) {\n			throw new BuyStockException(\"购买股票异常\");\n		}\n		sdao.updateStock(sname, amount, isBuy);\n	}\n}\n```\n\n*BuyStockException.java*\n```\npublic class BuyStockException extends Exception {\n	public BuyStockException() {\n		super();\n	}\n\n	public BuyStockException(String message) {\n		super(message);\n	}\n}\n```\n\n*MyTest.java*\n```\npublic class MyTest {\n	private IBuyStockService service;\n\n	@Before\n	public void before() {\n		// 创建容器对象，加载Spring配置文件\n		String resource = \"applicationContext.xml\";\n		ApplicationContext ac = new ClassPathXmlApplicationContext(resource);\n		service = (IBuyStockService) ac.getBean(\"buyStockService\");\n	}\n	\n	@Test\n	public void test01() {\n		service.openAccount(\"张三\", 10000);\n		service.openStock(\"北京动力节点\", 0);\n	}\n	\n	@Test\n	public void test02() throws BuyStockException {\n		service.buyStock(\"张三\", 2000, \"北京动力节点\", 5);\n	}\n}\n```\n\n*applicationContext.xml*\n```\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<beans xmlns=\"http://www.springframework.org/schema/beans\"\n	xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" \n	xmlns:context=\"http://www.springframework.org/schema/context\"\n	xmlns:aop=\"http://www.springframework.org/schema/aop\" \n	xmlns:tx=\"http://www.springframework.org/schema/tx\"\n	xsi:schemaLocation=\"\n        http://www.springframework.org/schema/beans \n        http://www.springframework.org/schema/beans/spring-beans.xsd\n        http://www.springframework.org/schema/context \n        http://www.springframework.org/schema/context/spring-context.xsd\n        http://www.springframework.org/schema/tx \n        http://www.springframework.org/schema/tx/spring-tx.xsd\n        http://www.springframework.org/schema/aop \n        http://www.springframework.org/schema/aop/spring-aop.xsd\">\n	\n	<!-- ================================= IoC ==================================== -->\n	<!-- 注册数据源：Spring内置连接池 -->\n	<bean id=\"myDataSource\" class=\"org.springframework.jdbc.datasource.DriverManagerDataSource\">\n		<property name=\"driverClassName\" value=\"${jdbc.driver}\"/>\n		<property name=\"url\" value=\"${jdbc.url}\"/>\n		<property name=\"username\" value=\"${jdbc.user}\"/>\n		<property name=\"password\" value=\"${jdbc.password}\"/>\n	</bean>\n	\n	<!-- 注册属性文件 -->\n	<context:property-placeholder location=\"classpath:jdbc.properties\"/>\n	\n	<!-- 注册Dao -->\n	<bean id=\"accountDao\" class=\"top.qingrang.dao.AccountDaoImpl\">\n		<property name=\"dataSource\" ref=\"myDataSource\"/>\n	</bean>\n	<bean id=\"stockDao\" class=\"top.qingrang.dao.StockDaoImpl\">\n		<property name=\"dataSource\" ref=\"myDataSource\"/>\n	</bean>\n	\n	<!-- 注册Service -->\n	<bean id=\"buyStockService\" class=\"top.qingrang.service.BuyStockServiceImpl\">\n		<property name=\"adao\" ref=\"accountDao\"/>\n		<property name=\"sdao\" ref=\"stockDao\"/>\n	</bean>\n\n	<!-- ================================= AOP ==================================== -->\n	\n	<!-- 注册事务管理器 -->\n	<bean id=\"myTransactionManager\" class=\"org.springframework.jdbc.datasource.DataSourceTransactionManager\">\n		<property name=\"dataSource\" ref=\"myDataSource\"/>\n	</bean>\n	\n	<!-- 注册事务通知 -->\n	<tx:advice id=\"txAdvice\" transaction-manager=\"myTransactionManager\">\n		<tx:attributes>\n			<!-- 这里指定的是：为每一个连接点指定所要应用的事务属性 -->\n			<tx:method name=\"open*\" isolation=\"DEFAULT\" propagation=\"REQUIRED\"/>\n			<tx:method name=\"buyStock\" isolation=\"DEFAULT\" propagation=\"REQUIRED\" rollback-for=\"BuyStockException\"/>\n		</tx:attributes>\n	</tx:advice>\n	\n	<!-- AOP配置 -->\n	<aop:config>\n		<!-- 这里指定的是切入点 -->\n		<aop:pointcut expression=\"execution(* *..service.*.*(..))\" id=\"myPointcut\"/>\n		<aop:advisor advice-ref=\"txAdvice\" pointcut-ref=\"myPointcut\"/>\n	</aop:config>\n</beans>\n```\n\n\n\n\n## Spring 与 MyBatis\n',`groups`='Default',`p_id`=1  WHERE  `id` = 1 [ RunTime:0.000967s ]
---------------------------------------------------------------
[ 2018-11-22T22:50:40+08:00 ] 74.120.168.12 74.120.168.12 POST /daily/admin/note/updatenote/id/253.html
[ info ] qingrang.top/daily/admin/note/updatenote/id/253.html [运行时间：0.062722s][吞吐率：15.94req/s] [内存消耗：2,237.96kb] [文件加载：58]
[ info ] [ LANG ] /var/www/html/daily/thinkphp/lang/zh-cn.php
[ info ] [ ROUTE ] array (
  'type' => 'module',
  'module' => 
  array (
    0 => 'admin',
    1 => 'note',
    2 => 'updatenote',
  ),
)
[ info ] [ HEADER ] array (
  'host' => 'qingrang.top',
  'content-length' => '49409',
  'cache-control' => 'max-age=0',
  'origin' => 'http://qingrang.top',
  'upgrade-insecure-requests' => '1',
  'content-type' => 'application/x-www-form-urlencoded',
  'user-agent' => 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/70.0.3538.102 Safari/537.36',
  'accept' => 'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8',
  'referer' => 'http://qingrang.top/daily/admin/note/editnote/id/253.html',
  'accept-encoding' => 'gzip, deflate',
  'accept-language' => 'zh-CN,zh;q=0.9,la;q=0.8,en;q=0.7,lb;q=0.6',
  'cookie' => 'Hm_lvt_1769181352e9adc950166aada465644e=1541082864,1541122974,1541171416,1542098176; PHPSESSID=cs4ll16s0kjq1pmnpkf29456n2',
  'connection' => 'close',
)
[ info ] [ PARAM ] array (
  'summary' => '',
  'content' => '# Spring(三) - Spring 与 DAO
[TOC]

Spring 与 Dao 部分，是 Spring 的两大核心技术 IoC 与 AOP 的典型应用体现：
- 对于 JDBC 模板的使用，是 IoC 的应用，是将 JDBC 模板对象注入给了 Dao 层的实现类。
- 对于 Spring 的事务管理， 是 AOP 的应用，将事务作为切面织入到了 Service 层的业务方法中。

## Spring 与 JDBC 模板
*Student.java - 实体类*
```
public class Student {
	private Integer id;
	private String name;
	private int age;
	public Student() {
		super();
	}
	public Student(String name, int age) {
		super();
		this.name = name;
		this.age = age;
	}
	public Integer getId() {
		return id;
	}
	public void setId(Integer id) {
		this.id = id;
	}
	public String getName() {
		return name;
	}
	public void setName(String name) {
		this.name = name;
	}
	public int getAge() {
		return age;
	}
	public void setAge(int age) {
		this.age = age;
	}
	@Override
	public String toString() {
		return "Student [id=" + id + ", name=" + name + ", age=" + age + "]";
	}
}
```
*IStudentDao.java - 接口*
```
public interface IStudentDao {
	void insertStudent(Student student);
	void deleteById(int id);
	void updateStudent(Student student);
	
	List<String> selectAllStudentsNames();
	String selectStudentNameById(int id);
	
	List<Student> selectAllStudents();
	Student selectStudentById(int id);
}
```
*StudentDaoImpl.java - 实现类*
```
public class StudentDaoImpl extends JdbcDaoSupport implements IStudentDao {

	@Override
	public void insertStudent(Student student) {
		String sql = "insert into student(name,age) values(?,?)";
		this.getJdbcTemplate().update(sql, student.getName(), student.getAge());
	}

	@Override
	public void deleteById(int id) {
		String sql = "delete from student where id=?";
		this.getJdbcTemplate().update(sql, id);
	}

	@Override
	public void updateStudent(Student student) {
		String sql = "update student set name=?, age=? where id=?";
		this.getJdbcTemplate().update(sql, student.getName(), student.getAge(), student.getId());
	}

	@Override
	public List<String> selectAllStudentsNames() {
		String sql = "select name from student";
		return this.getJdbcTemplate().queryForList(sql, String.class);
	}

	@Override
	public String selectStudentNameById(int id) {
		String sql = "select name from student where id=?";
		return this.getJdbcTemplate().queryForObject(sql, String.class, id);
	}

	@Override
	public List<Student> selectAllStudents() {
		String sql = "select id,name,age from student";
		return this.getJdbcTemplate().query(sql, new StudentRowMapper());
	}

	@Override
	public Student selectStudentById(int id) {
		String sql = "select id,name,age from student where id=?";
		return this.getJdbcTemplate().queryForObject(sql, new StudentRowMapper(), id);
	}

}
```
*StudentRowMapper.java*
```
public class StudentRowMapper implements RowMapper<Student> {
	// rs：当查询出总的结果集后，框架会自动遍历这个结果集，每一次遍历的一行数据，都会被存放到
	//     这个方法的rs参数中。也就是说，这里的rs代表的是一行数据，并非所有查询结果。换个角度
	//     来说，只要能执行到这个方法，就说明这里的rs不会是空的
	@Override
	public Student mapRow(ResultSet rs, int rowNum) throws SQLException {
		Student student = new Student();
		student.setId(rs.getInt("id"));
		student.setName(rs.getString("name"));
		student.setAge(rs.getInt("age"));
		return student;
	}
}
```
*IStudentService.java*
```
public interface IStudentService {
	void addStudent(Student student);
	void removeById(int id);
	void modifyStudent(Student student);
	
	List<String> findAllStudentsNames();
	String findStudentNameById(int id);
	
	List<Student> findAllStudents();
	Student findStudentById(int id);
}
```
*StudentServiceImpl.java*
```
public class StudentServiceImpl implements IStudentService {
	private IStudentDao dao;
	
	public void setDao(IStudentDao dao) {
		this.dao = dao;
	}

	@Override
	public void addStudent(Student student) {
		dao.insertStudent(student);
	}

	@Override
	public void removeById(int id) {
		dao.deleteById(id);
	}

	@Override
	public void modifyStudent(Student student) {
		dao.updateStudent(student);
	}

	@Override
	public List<String> findAllStudentsNames() {
		return dao.selectAllStudentsNames();
	}

	@Override
	public String findStudentNameById(int id) {
		return dao.selectStudentNameById(id);
	}

	@Override
	public List<Student> findAllStudents() {
		return dao.selectAllStudents();
	}

	@Override
	public Student findStudentById(int id) {
		return dao.selectStudentById(id);
	}

}
```
*MyTest.java*
```
public class MyTest {
	
	private IStudentService service;

	@Before
	public void before() {
		// 创建容器对象，加载Spring配置文件
		String resource = "applicationContext.xml";
		ApplicationContext ac = new ClassPathXmlApplicationContext(resource);
		service = (IStudentService) ac.getBean("studentService");
	}
	
	@Test
	public void test01() {
		Student student = new Student("张三", 23);
		service.addStudent(student);
	}
	
	@Test
	public void test02() {
		service.removeById(2);
	}
	
	@Test
	public void test03() {
		Student student = new Student("张三", 23);
		student.setId(3);
		service.modifyStudent(student);
	}
	
	@Test
	public void test04() {
		List<String> names = service.findAllStudentsNames();
		System.out.println(names);
	}
	
	@Test
	public void test05() {
		String name = service.findStudentNameById(3);
		System.out.println(name);
	}
	
	@Test
	public void test06() {
		List<Student> students = service.findAllStudents();
		for (Student student : students) {
			System.out.println(student);
		}
	}
	
	@Test
	public void test07() {
		Student student = service.findStudentById(3);
		System.out.println(student);
	}
}
```
*applicationContext.mxl*
```
<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xmlns:context="http://www.springframework.org/schema/context" xsi:schemaLocation="
        http://www.springframework.org/schema/beans 
        http://www.springframework.org/schema/beans/spring-beans.xsd
        http://www.springframework.org/schema/context 
        http://www.springframework.org/schema/context/spring-context.xsd">

	<!-- 注册数据源：Spring内置连接池 -->
	<bean id="myDataSource" class="org.springframework.jdbc.datasource.DriverManagerDataSource">
		<property name="driverClassName" value="${jdbc.driver}"/>
		<property name="url" value="${jdbc.url}"/>
		<property name="username" value="${jdbc.user}"/>
		<property name="password" value="${jdbc.password}"/>
	</bean>

	<!-- 注册属性文件：方式一 -->
	<!-- 
	<bean class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
		<property name="location" value="classpath:jdbc.properties"/>
	</bean>
	 -->

	<!-- 注册属性文件：方式二 -->
	<context:property-placeholder location="classpath:jdbc.properties"/>
	
	<!-- 注册 Dao -->
	<bean id="studentDao" class="top.qingrang.dao.StudentDaoImpl">
		<property name="dataSource" ref="myDataSource"/>
	</bean>
	
	<!-- 注册 Service -->
	<bean id="studentService" class="top.qingrang.service.StudentServiceImpl">
		<property name="dao" ref="studentDao"/>
	</bean>

</beans>
```
## Spring 的事务管理
事务原本是数据库中的概念，在 Dao 层。但一般情况下，需要将事务提升到业务层，即 Service 层。这样做是为了能够使用事务的特性来管理具体的业务。在 Spring 中通常可以通过以下三种方式来实现对事务的管理：
- 使用 Spring 的事务代理工厂管理事务
- 使用 Spring 的事务注解管理事务
- 使用 AspectJ 的 AOP 配置管理事务

### Spring 事务管理 API
Spring 的事务管理，主要用到两个事务相关的接口。
#### 事务管理器接口
事务管理器是 PlatformTransactionManager 接口对象。其主要用于完成事务的提交、回滚，及获取事务的状态信息。
##### 常用的两个实现类
PlatformTransactionManager 接口有两个常用的实现类：
- DataSourceTransactionManager：使用 JDBC 或 iBatis 进行持久化数据时使用。
- HibernateTransactionManager：使用 Hibernate 进行持久化数据时使用。

##### Spring 的回滚方式
Spring 事务的默认回滚方式是： 发生运行时异常时回滚，发生受查异常时提交。 不过，对于受查异常，程序员也可以手工设置其回滚方式。

#### 事务定义接口
事务定义接口 TransactionDefinition 中定义了事务描述相关的三类常量：事务隔离级别、事务传播行为、事务默认超时时限， 及对它们的操作。
##### 定义了五个事务隔离级别常量
这些常量均是以 ISOLATION_开头。即形如 ISOLATION_XXX。
- DEFAULT： 采用 DB 默认的事务隔离级别。 MySql 的默认为 REPEATABLE_READ；Oracle 默认为 READ_COMMITTED。
- READ_UNCOMMITTED： 读未提交。 未解决任何并发问题。
- READ_COMMITTED： 读已提交。解决脏读，存在不可重复读与幻读。
- REPEATABLE_READ： 可重复读。解决脏读、不可重复读，存在幻读
- SERIALIZABLE： 串行化。不存在并发问题。

##### 定义了七个事务传播行为常量
所谓事务传播行为是指，处于不同事务中的方法在相互调用时，执行期间事务的维护情况。如， A 事务中的方法 doSome()调用 B 事务中的方法 doOther()，在调用执行期间事务的维护情况，就称为事务传播行为。事务传播行为是加在方法上的。事务传播行为常量都是以 PROPAGATION_ 开头，形如 PROPAGATION_XXX。
1. REQUIRED：
指定的方法必须在事务内执行。若当前存在事务，就加入到当前事务中；若当前没有事务，则创建一个新事务。这种传播行为是最常见的选择，也是 Spring 默认的事务传播行为。
如该传播行为加在 doOther()方法上。若 doSome()方法在调用 doOther()方法时就是在事务内运行的，则 doOther()方法的执行也加入到该事务内执行。若 doSome()方法在调用doOther()方法时没有在事务内执行，则 doOther()方法会创建一个事务，并在其中执行。
![mark](https://daily-1252869435.cos.ap-chengdu.myqcloud.com/2018-11-21-23-21-56.png)
1. SUPPORTS
指定的方法支持当前事务，但若当前没有事务，也可以以非事务方式执行。
![mark](https://daily-1252869435.cos.ap-chengdu.myqcloud.com/2018-11-21-23-22-13.png)
1. MANDATORY
指定的方法必须在当前事务内执行，若当前没有事务，则直接抛出异常。
![mark](https://daily-1252869435.cos.ap-chengdu.myqcloud.com/2018-11-21-23-22-40.png)
1. REQUIRES_NEW
总是新建一个事务，若当前存在事务，就将当前事务挂起，直到新事务执行完毕。
![mark](https://daily-1252869435.cos.ap-chengdu.myqcloud.com/2018-11-21-23-22-55.png)
1. NOT_SUPPORTED
指定的方法不能在事务环境中执行，若当前存在事务，就将当前事务挂起。
![mark](https://daily-1252869435.cos.ap-chengdu.myqcloud.com/2018-11-21-23-23-07.png)
1. NEVER
指定的方法不能在事务环境下执行，若当前存在事务，就直接抛出异常。
![mark](https://daily-1252869435.cos.ap-chengdu.myqcloud.com/2018-11-21-23-23-22.png)
1. NESTED
指定的方法必须在事务内执行。若当前存在事务，则在嵌套事务内执行；若当前没有事务，则创建一个新事务。
![mark](https://daily-1252869435.cos.ap-chengdu.myqcloud.com/2018-11-21-23-23-40.png)

##### 定义了默认事务超时时限
常量 TIMEOUT_DEFAULT 定义了事务底层默认的超时时限，及不支持事务超时时限设置的 none 值。

注意，事务的超时时限起作用的条件比较多，且超时的时间计算点较复杂。所以，该值一般就使用默认值即可。
## 使用 AspectJ 的 AOP 配置管理事务
>本例要实现模拟购买股票。存在两个实体：银行账户 Account 与股票账户 Stock。当要购买股票时，需要从 Account 中扣除相应金额的存款，然后在 Stock 中增加相应的股票数量。而在这个过程中，可能会抛出一个用户自定义的异常。异常的抛出，将会使两个操作回滚。

*Account.java*
```
public class Account {
	private Integer aid;
	private String aname;
	private double balance;  // 余额
	public Account() {
		super();
	}
	public Account(String aname, double balance) {
		super();
		this.aname = aname;
		this.balance = balance;
	}
	public Integer getAid() {
		return aid;
	}
	public void setAid(Integer aid) {
		this.aid = aid;
	}
	public String getAname() {
		return aname;
	}
	public void setAname(String aname) {
		this.aname = aname;
	}
	public double getBalance() {
		return balance;
	}
	public void setBalance(double balance) {
		this.balance = balance;
	}
	@Override
	public String toString() {
		return "Account [aid=" + aid + ", aname=" + aname + ", balance="
				+ balance + "]";
	}
}
```

*Stock.java*
```
public class Stock {
	private Integer sid;
	private String sname;   // 股票名称
	private int count;      // 股票数量
	public Stock() {
		super();
	}
	public Stock(String sname, int count) {
		super();
		this.sname = sname;
		this.count = count;
	}
	public Integer getSid() {
		return sid;
	}
	public void setSid(Integer sid) {
		this.sid = sid;
	}
	public String getSname() {
		return sname;
	}
	public void setSname(String sname) {
		this.sname = sname;
	}
	public int getCount() {
		return count;
	}
	public void setCount(int count) {
		this.count = count;
	}
	@Override
	public String toString() {
		return "Stock [sid=" + sid + ", sname=" + sname + ", count=" + count
				+ "]";
	}
}
```

*IAccountDao.java*
```
public interface IAccountDao {
	void insertAccount(String aname, double money);

	void updateAccount(String aname, double money, boolean isBuy);
}
```

*AccountDaoImpl.java*
```
public class AccountDaoImpl extends JdbcDaoSupport implements IAccountDao {
	@Override
	public void insertAccount(String aname, double money) {
		String sql = "insert into account(aname, balance) values(?,?)";
		this.getJdbcTemplate().update(sql, aname, money);
	}

	@Override
	public void updateAccount(String aname, double money, boolean isBuy) {
		String sql = "update account set balance=balance+? where aname=?";
		if (isBuy) {
			sql = "update account set balance=balance-? where aname=?";
		}
		this.getJdbcTemplate().update(sql, money, aname);
	}
}
```

*IStockDao.java*
```
public interface IStockDao {
	void insertStock(String sname, int amount);

	void updateStock(String sname, int amount, boolean isBuy);
}
```

*StockDaoImpl.java*
```
public class StockDaoImpl extends JdbcDaoSupport implements IStockDao {
	@Override
	public void insertStock(String sname, int amount) {
		String sql = "insert into stock(sname, count) values(?,?)";
		this.getJdbcTemplate().update(sql, sname, amount);
	}

	@Override
	public void updateStock(String sname, int amount, boolean isBuy) {
		String sql = "update stock set count=count-? where sname=?";
		if(isBuy) {
			sql = "update stock set count=count+? where sname=?";
		}
		this.getJdbcTemplate().update(sql, amount, sname);
	}
}
```

*IBuyStockService.java*
```
public interface IBuyStockService {
	void openAccount(String aname, double money);
	void openStock(String sname, int amount);
	void buyStock(String aname, double money, String sname, int amount) throws BuyStockException;
}
```

*BuyStockServiceImpl.java*
```
public class BuyStockServiceImpl implements IBuyStockService {
	private IAccountDao adao;
	private IStockDao sdao;
	
	public void setAdao(IAccountDao adao) {
		this.adao = adao;
	}

	public void setSdao(IStockDao sdao) {
		this.sdao = sdao;
	}

	@Override
	public void openAccount(String aname, double money) {
		adao.insertAccount(aname, money);
	}

	@Override
	public void openStock(String sname, int amount) {
		sdao.insertStock(sname, amount);
	}

	@Override
	public void buyStock(String aname, double money, String sname, int amount) throws BuyStockException{
		boolean isBuy = true;
		adao.updateAccount(aname, money, isBuy);
		if (1 == 1) {
			throw new BuyStockException("购买股票异常");
		}
		sdao.updateStock(sname, amount, isBuy);
	}
}
```

*BuyStockException.java*
```
public class BuyStockException extends Exception {
	public BuyStockException() {
		super();
	}

	public BuyStockException(String message) {
		super(message);
	}
}
```

*MyTest.java*
```
public class MyTest {
	private IBuyStockService service;

	@Before
	public void before() {
		// 创建容器对象，加载Spring配置文件
		String resource = "applicationContext.xml";
		ApplicationContext ac = new ClassPathXmlApplicationContext(resource);
		service = (IBuyStockService) ac.getBean("buyStockService");
	}
	
	@Test
	public void test01() {
		service.openAccount("张三", 10000);
		service.openStock("北京动力节点", 0);
	}
	
	@Test
	public void test02() throws BuyStockException {
		service.buyStock("张三", 2000, "北京动力节点", 5);
	}
}
```

*applicationContext.xml*
```
<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:aop="http://www.springframework.org/schema/aop" 
	xmlns:tx="http://www.springframework.org/schema/tx"
	xsi:schemaLocation="
        http://www.springframework.org/schema/beans 
        http://www.springframework.org/schema/beans/spring-beans.xsd
        http://www.springframework.org/schema/context 
        http://www.springframework.org/schema/context/spring-context.xsd
        http://www.springframework.org/schema/tx 
        http://www.springframework.org/schema/tx/spring-tx.xsd
        http://www.springframework.org/schema/aop 
        http://www.springframework.org/schema/aop/spring-aop.xsd">
	
	<!-- ================================= IoC ==================================== -->
	<!-- 注册数据源：Spring内置连接池 -->
	<bean id="myDataSource" class="org.springframework.jdbc.datasource.DriverManagerDataSource">
		<property name="driverClassName" value="${jdbc.driver}"/>
		<property name="url" value="${jdbc.url}"/>
		<property name="username" value="${jdbc.user}"/>
		<property name="password" value="${jdbc.password}"/>
	</bean>
	
	<!-- 注册属性文件 -->
	<context:property-placeholder location="classpath:jdbc.properties"/>
	
	<!-- 注册Dao -->
	<bean id="accountDao" class="top.qingrang.dao.AccountDaoImpl">
		<property name="dataSource" ref="myDataSource"/>
	</bean>
	<bean id="stockDao" class="top.qingrang.dao.StockDaoImpl">
		<property name="dataSource" ref="myDataSource"/>
	</bean>
	
	<!-- 注册Service -->
	<bean id="buyStockService" class="top.qingrang.service.BuyStockServiceImpl">
		<property name="adao" ref="accountDao"/>
		<property name="sdao" ref="stockDao"/>
	</bean>

	<!-- ================================= AOP ==================================== -->
	
	<!-- 注册事务管理器 -->
	<bean id="myTransactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource" ref="myDataSource"/>
	</bean>
	
	<!-- 注册事务通知 -->
	<tx:advice id="txAdvice" transaction-manager="myTransactionManager">
		<tx:attributes>
			<!-- 这里指定的是：为每一个连接点指定所要应用的事务属性 -->
			<tx:method name="open*" isolation="DEFAULT" propagation="REQUIRED"/>
			<tx:method name="buyStock" isolation="DEFAULT" propagation="REQUIRED" rollback-for="BuyStockException"/>
		</tx:attributes>
	</tx:advice>
	
	<!-- AOP配置 -->
	<aop:config>
		<!-- 这里指定的是切入点 -->
		<aop:pointcut expression="execution(* *..service.*.*(..))" id="myPointcut"/>
		<aop:advisor advice-ref="txAdvice" pointcut-ref="myPointcut"/>
	</aop:config>
</beans>
```




## Spring 与 MyBatis
将 MyBatis 与 Spring 进行整合，主要解决的问题就是将 SqlSessionFactory 对象交由Spring 来管理。所以，该整合，只需要将 SqlSessionFactory 的对象生成器  SqlSessionFactoryBean 注册在 Spring 容器中，再将其注入给 Dao 的实现类即可完成整合。下面以两种方式来实现 Spring 与 MyBatis 的整合：
1. Mapper 动态代理
1. 支持扫描的 Mapper 动态代理

*Student.java*
```
public class Student {
	private Integer id;
	private String name;
	private int age;
	public Student() {
		super();
		// TODO Auto-generated constructor stub
	}
	public Student(String name, int age) {
		super();
		this.name = name;
		this.age = age;
	}
	public Integer getId() {
		return id;
	}
	public void setId(Integer id) {
		this.id = id;
	}
	public String getName() {
		return name;
	}
	public void setName(String name) {
		this.name = name;
	}
	public int getAge() {
		return age;
	}
	public void setAge(int age) {
		this.age = age;
	}
	@Override
	public String toString() {
		return "Student [id=" + id + ", name=" + name + ", age=" + age + "]";
	}
}
```

*IStudentDao.java*
```
public interface IStudentDao {
	void insertStudent(Student student);
	void deleteById(int id);
	void updateStudent(Student student);
	
	List<Student> selectAllStudents();
	Student selectStudentById(int id);
}
```

*IStudentDao.xml - mapper*
```
<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
"http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="top.qingrang.dao.IStudentDao">
	<insert id="insertStudent">
		insert into student(name,age) values(#{name}, #{age})
	</insert>
	
	<delete id="deleteById">
		delete from student where id=#{xxx}
	</delete>
	
	<update id="updateStudent">
		update student set name=#{name}, age=#{age} where id=#{id}
	</update>
	
	<select id="selectAllStudents" resultType="Student">
		select id,name,age from student
	</select>
	
	<select id="selectStudentById" resultType="Student">
		select id,name,age from student where id=#{xxx}
	</select>
</mapper>
```

*IStudentService.java*
```
public interface IStudentService {
	void addStudent(Student student);
	void removeById(int id);
	void modifyStudent(Student student);
	
	List<String> findAllStudentsNames();
	String findStudentNameById(int id);
	
	List<Student> findAllStudents();
	Student findStudentById(int id);
}
```

*StudentServiceImpl.java*
```
public class StudentServiceImpl implements IStudentService {
	private IStudentDao dao;
	
	public void setDao(IStudentDao dao) {
		this.dao = dao;
	}

	@Override
	public void addStudent(Student student) {
		dao.insertStudent(student);
	}

	@Override
	public void removeById(int id) {
		dao.deleteById(id);
	}

	@Override
	public void modifyStudent(Student student) {
		dao.updateStudent(student);
	}

	@Override
	public List<String> findAllStudentsNames() {
		List<String> names = new ArrayList<>();
		List<Student> students = this.findAllStudents();
		for (Student student : students) {
			names.add(student.getName());
		}
		return names;
	}

	@Override
	public String findStudentNameById(int id) {
		Student student = this.findStudentById(id);
		return student.getName();
	}

	@Override
	public List<Student> findAllStudents() {
		return dao.selectAllStudents();
	}

	@Override
	public Student findStudentById(int id) {
		return dao.selectStudentById(id);
	}
}
```

*applicationContext.xml*
```
<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
	xmlns:context="http://www.springframework.org/schema/context"
	xsi:schemaLocation="
        http://www.springframework.org/schema/beans 
        http://www.springframework.org/schema/beans/spring-beans.xsd
        http://www.springframework.org/schema/context 
        http://www.springframework.org/schema/context/spring-context.xsd">
	
	<!-- 注册数据源：Spring内置连接池 -->
	<bean id="myDataSource" class="org.springframework.jdbc.datasource.DriverManagerDataSource">
		<property name="driverClassName" value="${jdbc.driver}"/>
		<property name="url" value="${jdbc.url}"/>
		<property name="username" value="${jdbc.user}"/>
		<property name="password" value="${jdbc.password}"/>
	</bean>

	<!-- 注册属性文件 -->
	<context:property-placeholder location="classpath:jdbc.properties"/>

	<bean id="mySqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
		<property name="configLocation" value="classpath:mybatis.xml"/>
		<property name="dataSource" ref="myDataSource"/>
	</bean>

	<!-- 生成Dao的代理对象
		当前配置会为指定的基本包中所有的接口生成代理对象
	 -->
	<bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
		<property name="sqlSessionFactoryBeanName" value="mySqlSessionFactory"/>
		<property name="basePackage" value="top.qingrang.dao"/>
	</bean>

	<!-- 注册Service -->
	<bean id="studentService" class="top.qingrang.service.StudentServiceImpl">
		<!-- 这里的Dao的注入需要使用ref属性，
			若Dao的接口名的前两个字母是大写，则这里的值为接口的简单类名
			若Dao的接口名的首字母是大写，第二个字母为小写，则这里的值为简单类名，但首字母要小写
		 -->
		<property name="dao" ref="IStudentDao"/>
	</bean>

</beans>
```

*mybatis.xml*
```
<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE configuration
PUBLIC "-//mybatis.org//DTD Config 3.0//EN"
"http://mybatis.org/dtd/mybatis-3-config.dtd">
<configuration>
	<typeAliases>
		<package name="top.qingrang.beans"/>
	</typeAliases>
	<mappers>
		<package name="top.qingrang.dao"/>
	</mappers>
</configuration>
```

*MyTest.java*
```
public class MyTest {
	private IStudentService service;

	@Before
	public void before() {
		// 创建容器对象，加载Spring配置文件
		String resource = "applicationContext.xml";
		ApplicationContext ac = new ClassPathXmlApplicationContext(resource);
		service = (IStudentService) ac.getBean("studentService");
	}
	
	@Test
	public void test01() {
		Student student = new Student("张三", 23);
		service.addStudent(student);
	}
	
	@Test
	public void test02() {
		service.removeById(2);
	}
	
	@Test
	public void test03() {
		Student student = new Student("张三", 23);
		student.setId(3);
		service.modifyStudent(student);
	}
	
	@Test
	public void test04() {
		List<String> names = service.findAllStudentsNames();
		System.out.println(names);
	}
	
	@Test
	public void test05() {
		String name = service.findStudentNameById(3);
		System.out.println(name);
	}
	
	@Test
	public void test06() {
		List<Student> students = service.findAllStudents();
		for (Student student : students) {
			System.out.println(student);
		}
	}
	
	@Test
	public void test07() {
		Student student = service.findStudentById(3);
		System.out.println(student);
	}
}
```',
  'groups' => 'Java',
  'showsel' => '1',
  'showse2' => '1',
  'id' => '253',
)
[ info ] [ SESSION ] INIT array (
  'id' => '',
  'var_session_id' => '',
  'prefix' => 'think',
  'type' => '',
  'auto_start' => true,
)
[ info ] [ RUN ] app\admin\controller\Note->updateNote[ /var/www/html/daily/application/admin/controller/Note.php ]
[ info ] [ DB ] INIT mysql
[ info ] [ CACHE ] INIT File
[ info ] [ LOG ] INIT File
[ sql ] [ DB ] CONNECT:[ UseTime:0.000514s ] mysql:host=74.120.168.12;dbname=diary;charset=utf8
[ sql ] [ SQL ] SHOW COLUMNS FROM `note` [ RunTime:0.001661s ]
[ sql ] [ SQL ] SELECT * FROM `note` WHERE  `id` = 253 LIMIT 1 [ RunTime:0.000525s ]
[ sql ] [ SQL ] SELECT `groups` FROM `note` WHERE  `id` = 253 LIMIT 1 [ RunTime:0.000299s ]
[ sql ] [ SQL ] SHOW COLUMNS FROM `groups` [ RunTime:0.000857s ]
[ sql ] [ SQL ] SELECT `parent_id` FROM `groups` WHERE  `groups` = 'Java' LIMIT 1 [ RunTime:0.000280s ]
[ sql ] [ SQL ] SELECT `groups` FROM `groups` WHERE  `id` = 2 LIMIT 1 [ RunTime:0.000306s ]
[ sql ] [ SQL ] UPDATE `note`  SET `id`=253,`p_id`=2,`title`='Spring(三) - Spring 与 DAO\r',`content`='# Spring(三) - Spring 与 DAO\r\n[TOC]\r\n\r\nSpring 与 Dao 部分，是 Spring 的两大核心技术 IoC 与 AOP 的典型应用体现：\r\n- 对于 JDBC 模板的使用，是 IoC 的应用，是将 JDBC 模板对象注入给了 Dao 层的实现类。\r\n- 对于 Spring 的事务管理， 是 AOP 的应用，将事务作为切面织入到了 Service 层的业务方法中。\r\n\r\n## Spring 与 JDBC 模板\r\n*Student.java - 实体类*\r\n```\r\npublic class Student {\r\n	private Integer id;\r\n	private String name;\r\n	private int age;\r\n	public Student() {\r\n		super();\r\n	}\r\n	public Student(String name, int age) {\r\n		super();\r\n		this.name = name;\r\n		this.age = age;\r\n	}\r\n	public Integer getId() {\r\n		return id;\r\n	}\r\n	public void setId(Integer id) {\r\n		this.id = id;\r\n	}\r\n	public String getName() {\r\n		return name;\r\n	}\r\n	public void setName(String name) {\r\n		this.name = name;\r\n	}\r\n	public int getAge() {\r\n		return age;\r\n	}\r\n	public void setAge(int age) {\r\n		this.age = age;\r\n	}\r\n	@Override\r\n	public String toString() {\r\n		return \"Student [id=\" + id + \", name=\" + name + \", age=\" + age + \"]\";\r\n	}\r\n}\r\n```\r\n*IStudentDao.java - 接口*\r\n```\r\npublic interface IStudentDao {\r\n	void insertStudent(Student student);\r\n	void deleteById(int id);\r\n	void updateStudent(Student student);\r\n	\r\n	List<String> selectAllStudentsNames();\r\n	String selectStudentNameById(int id);\r\n	\r\n	List<Student> selectAllStudents();\r\n	Student selectStudentById(int id);\r\n}\r\n```\r\n*StudentDaoImpl.java - 实现类*\r\n```\r\npublic class StudentDaoImpl extends JdbcDaoSupport implements IStudentDao {\r\n\r\n	@Override\r\n	public void insertStudent(Student student) {\r\n		String sql = \"insert into student(name,age) values(?,?)\";\r\n		this.getJdbcTemplate().update(sql, student.getName(), student.getAge());\r\n	}\r\n\r\n	@Override\r\n	public void deleteById(int id) {\r\n		String sql = \"delete from student where id=?\";\r\n		this.getJdbcTemplate().update(sql, id);\r\n	}\r\n\r\n	@Override\r\n	public void updateStudent(Student student) {\r\n		String sql = \"update student set name=?, age=? where id=?\";\r\n		this.getJdbcTemplate().update(sql, student.getName(), student.getAge(), student.getId());\r\n	}\r\n\r\n	@Override\r\n	public List<String> selectAllStudentsNames() {\r\n		String sql = \"select name from student\";\r\n		return this.getJdbcTemplate().queryForList(sql, String.class);\r\n	}\r\n\r\n	@Override\r\n	public String selectStudentNameById(int id) {\r\n		String sql = \"select name from student where id=?\";\r\n		return this.getJdbcTemplate().queryForObject(sql, String.class, id);\r\n	}\r\n\r\n	@Override\r\n	public List<Student> selectAllStudents() {\r\n		String sql = \"select id,name,age from student\";\r\n		return this.getJdbcTemplate().query(sql, new StudentRowMapper());\r\n	}\r\n\r\n	@Override\r\n	public Student selectStudentById(int id) {\r\n		String sql = \"select id,name,age from student where id=?\";\r\n		return this.getJdbcTemplate().queryForObject(sql, new StudentRowMapper(), id);\r\n	}\r\n\r\n}\r\n```\r\n*StudentRowMapper.java*\r\n```\r\npublic class StudentRowMapper implements RowMapper<Student> {\r\n	// rs：当查询出总的结果集后，框架会自动遍历这个结果集，每一次遍历的一行数据，都会被存放到\r\n	//     这个方法的rs参数中。也就是说，这里的rs代表的是一行数据，并非所有查询结果。换个角度\r\n	//     来说，只要能执行到这个方法，就说明这里的rs不会是空的\r\n	@Override\r\n	public Student mapRow(ResultSet rs, int rowNum) throws SQLException {\r\n		Student student = new Student();\r\n		student.setId(rs.getInt(\"id\"));\r\n		student.setName(rs.getString(\"name\"));\r\n		student.setAge(rs.getInt(\"age\"));\r\n		return student;\r\n	}\r\n}\r\n```\r\n*IStudentService.java*\r\n```\r\npublic interface IStudentService {\r\n	void addStudent(Student student);\r\n	void removeById(int id);\r\n	void modifyStudent(Student student);\r\n	\r\n	List<String> findAllStudentsNames();\r\n	String findStudentNameById(int id);\r\n	\r\n	List<Student> findAllStudents();\r\n	Student findStudentById(int id);\r\n}\r\n```\r\n*StudentServiceImpl.java*\r\n```\r\npublic class StudentServiceImpl implements IStudentService {\r\n	private IStudentDao dao;\r\n	\r\n	public void setDao(IStudentDao dao) {\r\n		this.dao = dao;\r\n	}\r\n\r\n	@Override\r\n	public void addStudent(Student student) {\r\n		dao.insertStudent(student);\r\n	}\r\n\r\n	@Override\r\n	public void removeById(int id) {\r\n		dao.deleteById(id);\r\n	}\r\n\r\n	@Override\r\n	public void modifyStudent(Student student) {\r\n		dao.updateStudent(student);\r\n	}\r\n\r\n	@Override\r\n	public List<String> findAllStudentsNames() {\r\n		return dao.selectAllStudentsNames();\r\n	}\r\n\r\n	@Override\r\n	public String findStudentNameById(int id) {\r\n		return dao.selectStudentNameById(id);\r\n	}\r\n\r\n	@Override\r\n	public List<Student> findAllStudents() {\r\n		return dao.selectAllStudents();\r\n	}\r\n\r\n	@Override\r\n	public Student findStudentById(int id) {\r\n		return dao.selectStudentById(id);\r\n	}\r\n\r\n}\r\n```\r\n*MyTest.java*\r\n```\r\npublic class MyTest {\r\n	\r\n	private IStudentService service;\r\n\r\n	@Before\r\n	public void before() {\r\n		// 创建容器对象，加载Spring配置文件\r\n		String resource = \"applicationContext.xml\";\r\n		ApplicationContext ac = new ClassPathXmlApplicationContext(resource);\r\n		service = (IStudentService) ac.getBean(\"studentService\");\r\n	}\r\n	\r\n	@Test\r\n	public void test01() {\r\n		Student student = new Student(\"张三\", 23);\r\n		service.addStudent(student);\r\n	}\r\n	\r\n	@Test\r\n	public void test02() {\r\n		service.removeById(2);\r\n	}\r\n	\r\n	@Test\r\n	public void test03() {\r\n		Student student = new Student(\"张三\", 23);\r\n		student.setId(3);\r\n		service.modifyStudent(student);\r\n	}\r\n	\r\n	@Test\r\n	public void test04() {\r\n		List<String> names = service.findAllStudentsNames();\r\n		System.out.println(names);\r\n	}\r\n	\r\n	@Test\r\n	public void test05() {\r\n		String name = service.findStudentNameById(3);\r\n		System.out.println(name);\r\n	}\r\n	\r\n	@Test\r\n	public void test06() {\r\n		List<Student> students = service.findAllStudents();\r\n		for (Student student : students) {\r\n			System.out.println(student);\r\n		}\r\n	}\r\n	\r\n	@Test\r\n	public void test07() {\r\n		Student student = service.findStudentById(3);\r\n		System.out.println(student);\r\n	}\r\n}\r\n```\r\n*applicationContext.mxl*\r\n```\r\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<beans xmlns=\"http://www.springframework.org/schema/beans\"\r\n    xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\r\n    xmlns:context=\"http://www.springframework.org/schema/context\" xsi:schemaLocation=\"\r\n        http://www.springframework.org/schema/beans \r\n        http://www.springframework.org/schema/beans/spring-beans.xsd\r\n        http://www.springframework.org/schema/context \r\n        http://www.springframework.org/schema/context/spring-context.xsd\">\r\n\r\n	<!-- 注册数据源：Spring内置连接池 -->\r\n	<bean id=\"myDataSource\" class=\"org.springframework.jdbc.datasource.DriverManagerDataSource\">\r\n		<property name=\"driverClassName\" value=\"${jdbc.driver}\"/>\r\n		<property name=\"url\" value=\"${jdbc.url}\"/>\r\n		<property name=\"username\" value=\"${jdbc.user}\"/>\r\n		<property name=\"password\" value=\"${jdbc.password}\"/>\r\n	</bean>\r\n\r\n	<!-- 注册属性文件：方式一 -->\r\n	<!-- \r\n	<bean class=\"org.springframework.beans.factory.config.PropertyPlaceholderConfigurer\">\r\n		<property name=\"location\" value=\"classpath:jdbc.properties\"/>\r\n	</bean>\r\n	 -->\r\n\r\n	<!-- 注册属性文件：方式二 -->\r\n	<context:property-placeholder location=\"classpath:jdbc.properties\"/>\r\n	\r\n	<!-- 注册 Dao -->\r\n	<bean id=\"studentDao\" class=\"top.qingrang.dao.StudentDaoImpl\">\r\n		<property name=\"dataSource\" ref=\"myDataSource\"/>\r\n	</bean>\r\n	\r\n	<!-- 注册 Service -->\r\n	<bean id=\"studentService\" class=\"top.qingrang.service.StudentServiceImpl\">\r\n		<property name=\"dao\" ref=\"studentDao\"/>\r\n	</bean>\r\n\r\n</beans>\r\n```\r\n## Spring 的事务管理\r\n事务原本是数据库中的概念，在 Dao 层。但一般情况下，需要将事务提升到业务层，即 Service 层。这样做是为了能够使用事务的特性来管理具体的业务。在 Spring 中通常可以通过以下三种方式来实现对事务的管理：\r\n- 使用 Spring 的事务代理工厂管理事务\r\n- 使用 Spring 的事务注解管理事务\r\n- 使用 AspectJ 的 AOP 配置管理事务\r\n\r\n### Spring 事务管理 API\r\nSpring 的事务管理，主要用到两个事务相关的接口。\r\n#### 事务管理器接口\r\n事务管理器是 PlatformTransactionManager 接口对象。其主要用于完成事务的提交、回滚，及获取事务的状态信息。\r\n##### 常用的两个实现类\r\nPlatformTransactionManager 接口有两个常用的实现类：\r\n- DataSourceTransactionManager：使用 JDBC 或 iBatis 进行持久化数据时使用。\r\n- HibernateTransactionManager：使用 Hibernate 进行持久化数据时使用。\r\n\r\n##### Spring 的回滚方式\r\nSpring 事务的默认回滚方式是： 发生运行时异常时回滚，发生受查异常时提交。 不过，对于受查异常，程序员也可以手工设置其回滚方式。\r\n\r\n#### 事务定义接口\r\n事务定义接口 TransactionDefinition 中定义了事务描述相关的三类常量：事务隔离级别、事务传播行为、事务默认超时时限， 及对它们的操作。\r\n##### 定义了五个事务隔离级别常量\r\n这些常量均是以 ISOLATION_开头。即形如 ISOLATION_XXX。\r\n- DEFAULT： 采用 DB 默认的事务隔离级别。 MySql 的默认为 REPEATABLE_READ；Oracle 默认为 READ_COMMITTED。\r\n- READ_UNCOMMITTED： 读未提交。 未解决任何并发问题。\r\n- READ_COMMITTED： 读已提交。解决脏读，存在不可重复读与幻读。\r\n- REPEATABLE_READ： 可重复读。解决脏读、不可重复读，存在幻读\r\n- SERIALIZABLE： 串行化。不存在并发问题。\r\n\r\n##### 定义了七个事务传播行为常量\r\n所谓事务传播行为是指，处于不同事务中的方法在相互调用时，执行期间事务的维护情况。如， A 事务中的方法 doSome()调用 B 事务中的方法 doOther()，在调用执行期间事务的维护情况，就称为事务传播行为。事务传播行为是加在方法上的。事务传播行为常量都是以 PROPAGATION_ 开头，形如 PROPAGATION_XXX。\r\n1. REQUIRED：\r\n指定的方法必须在事务内执行。若当前存在事务，就加入到当前事务中；若当前没有事务，则创建一个新事务。这种传播行为是最常见的选择，也是 Spring 默认的事务传播行为。\r\n如该传播行为加在 doOther()方法上。若 doSome()方法在调用 doOther()方法时就是在事务内运行的，则 doOther()方法的执行也加入到该事务内执行。若 doSome()方法在调用doOther()方法时没有在事务内执行，则 doOther()方法会创建一个事务，并在其中执行。\r\n![mark](https://daily-1252869435.cos.ap-chengdu.myqcloud.com/2018-11-21-23-21-56.png)\r\n1. SUPPORTS\r\n指定的方法支持当前事务，但若当前没有事务，也可以以非事务方式执行。\r\n![mark](https://daily-1252869435.cos.ap-chengdu.myqcloud.com/2018-11-21-23-22-13.png)\r\n1. MANDATORY\r\n指定的方法必须在当前事务内执行，若当前没有事务，则直接抛出异常。\r\n![mark](https://daily-1252869435.cos.ap-chengdu.myqcloud.com/2018-11-21-23-22-40.png)\r\n1. REQUIRES_NEW\r\n总是新建一个事务，若当前存在事务，就将当前事务挂起，直到新事务执行完毕。\r\n![mark](https://daily-1252869435.cos.ap-chengdu.myqcloud.com/2018-11-21-23-22-55.png)\r\n1. NOT_SUPPORTED\r\n指定的方法不能在事务环境中执行，若当前存在事务，就将当前事务挂起。\r\n![mark](https://daily-1252869435.cos.ap-chengdu.myqcloud.com/2018-11-21-23-23-07.png)\r\n1. NEVER\r\n指定的方法不能在事务环境下执行，若当前存在事务，就直接抛出异常。\r\n![mark](https://daily-1252869435.cos.ap-chengdu.myqcloud.com/2018-11-21-23-23-22.png)\r\n1. NESTED\r\n指定的方法必须在事务内执行。若当前存在事务，则在嵌套事务内执行；若当前没有事务，则创建一个新事务。\r\n![mark](https://daily-1252869435.cos.ap-chengdu.myqcloud.com/2018-11-21-23-23-40.png)\r\n\r\n##### 定义了默认事务超时时限\r\n常量 TIMEOUT_DEFAULT 定义了事务底层默认的超时时限，及不支持事务超时时限设置的 none 值。\r\n\r\n注意，事务的超时时限起作用的条件比较多，且超时的时间计算点较复杂。所以，该值一般就使用默认值即可。\r\n## 使用 AspectJ 的 AOP 配置管理事务\r\n>本例要实现模拟购买股票。存在两个实体：银行账户 Account 与股票账户 Stock。当要购买股票时，需要从 Account 中扣除相应金额的存款，然后在 Stock 中增加相应的股票数量。而在这个过程中，可能会抛出一个用户自定义的异常。异常的抛出，将会使两个操作回滚。\r\n\r\n*Account.java*\r\n```\r\npublic class Account {\r\n	private Integer aid;\r\n	private String aname;\r\n	private double balance;  // 余额\r\n	public Account() {\r\n		super();\r\n	}\r\n	public Account(String aname, double balance) {\r\n		super();\r\n		this.aname = aname;\r\n		this.balance = balance;\r\n	}\r\n	public Integer getAid() {\r\n		return aid;\r\n	}\r\n	public void setAid(Integer aid) {\r\n		this.aid = aid;\r\n	}\r\n	public String getAname() {\r\n		return aname;\r\n	}\r\n	public void setAname(String aname) {\r\n		this.aname = aname;\r\n	}\r\n	public double getBalance() {\r\n		return balance;\r\n	}\r\n	public void setBalance(double balance) {\r\n		this.balance = balance;\r\n	}\r\n	@Override\r\n	public String toString() {\r\n		return \"Account [aid=\" + aid + \", aname=\" + aname + \", balance=\"\r\n				+ balance + \"]\";\r\n	}\r\n}\r\n```\r\n\r\n*Stock.java*\r\n```\r\npublic class Stock {\r\n	private Integer sid;\r\n	private String sname;   // 股票名称\r\n	private int count;      // 股票数量\r\n	public Stock() {\r\n		super();\r\n	}\r\n	public Stock(String sname, int count) {\r\n		super();\r\n		this.sname = sname;\r\n		this.count = count;\r\n	}\r\n	public Integer getSid() {\r\n		return sid;\r\n	}\r\n	public void setSid(Integer sid) {\r\n		this.sid = sid;\r\n	}\r\n	public String getSname() {\r\n		return sname;\r\n	}\r\n	public void setSname(String sname) {\r\n		this.sname = sname;\r\n	}\r\n	public int getCount() {\r\n		return count;\r\n	}\r\n	public void setCount(int count) {\r\n		this.count = count;\r\n	}\r\n	@Override\r\n	public String toString() {\r\n		return \"Stock [sid=\" + sid + \", sname=\" + sname + \", count=\" + count\r\n				+ \"]\";\r\n	}\r\n}\r\n```\r\n\r\n*IAccountDao.java*\r\n```\r\npublic interface IAccountDao {\r\n	void insertAccount(String aname, double money);\r\n\r\n	void updateAccount(String aname, double money, boolean isBuy);\r\n}\r\n```\r\n\r\n*AccountDaoImpl.java*\r\n```\r\npublic class AccountDaoImpl extends JdbcDaoSupport implements IAccountDao {\r\n	@Override\r\n	public void insertAccount(String aname, double money) {\r\n		String sql = \"insert into account(aname, balance) values(?,?)\";\r\n		this.getJdbcTemplate().update(sql, aname, money);\r\n	}\r\n\r\n	@Override\r\n	public void updateAccount(String aname, double money, boolean isBuy) {\r\n		String sql = \"update account set balance=balance+? where aname=?\";\r\n		if (isBuy) {\r\n			sql = \"update account set balance=balance-? where aname=?\";\r\n		}\r\n		this.getJdbcTemplate().update(sql, money, aname);\r\n	}\r\n}\r\n```\r\n\r\n*IStockDao.java*\r\n```\r\npublic interface IStockDao {\r\n	void insertStock(String sname, int amount);\r\n\r\n	void updateStock(String sname, int amount, boolean isBuy);\r\n}\r\n```\r\n\r\n*StockDaoImpl.java*\r\n```\r\npublic class StockDaoImpl extends JdbcDaoSupport implements IStockDao {\r\n	@Override\r\n	public void insertStock(String sname, int amount) {\r\n		String sql = \"insert into stock(sname, count) values(?,?)\";\r\n		this.getJdbcTemplate().update(sql, sname, amount);\r\n	}\r\n\r\n	@Override\r\n	public void updateStock(String sname, int amount, boolean isBuy) {\r\n		String sql = \"update stock set count=count-? where sname=?\";\r\n		if(isBuy) {\r\n			sql = \"update stock set count=count+? where sname=?\";\r\n		}\r\n		this.getJdbcTemplate().update(sql, amount, sname);\r\n	}\r\n}\r\n```\r\n\r\n*IBuyStockService.java*\r\n```\r\npublic interface IBuyStockService {\r\n	void openAccount(String aname, double money);\r\n	void openStock(String sname, int amount);\r\n	void buyStock(String aname, double money, String sname, int amount) throws BuyStockException;\r\n}\r\n```\r\n\r\n*BuyStockServiceImpl.java*\r\n```\r\npublic class BuyStockServiceImpl implements IBuyStockService {\r\n	private IAccountDao adao;\r\n	private IStockDao sdao;\r\n	\r\n	public void setAdao(IAccountDao adao) {\r\n		this.adao = adao;\r\n	}\r\n\r\n	public void setSdao(IStockDao sdao) {\r\n		this.sdao = sdao;\r\n	}\r\n\r\n	@Override\r\n	public void openAccount(String aname, double money) {\r\n		adao.insertAccount(aname, money);\r\n	}\r\n\r\n	@Override\r\n	public void openStock(String sname, int amount) {\r\n		sdao.insertStock(sname, amount);\r\n	}\r\n\r\n	@Override\r\n	public void buyStock(String aname, double money, String sname, int amount) throws BuyStockException{\r\n		boolean isBuy = true;\r\n		adao.updateAccount(aname, money, isBuy);\r\n		if (1 == 1) {\r\n			throw new BuyStockException(\"购买股票异常\");\r\n		}\r\n		sdao.updateStock(sname, amount, isBuy);\r\n	}\r\n}\r\n```\r\n\r\n*BuyStockException.java*\r\n```\r\npublic class BuyStockException extends Exception {\r\n	public BuyStockException() {\r\n		super();\r\n	}\r\n\r\n	public BuyStockException(String message) {\r\n		super(message);\r\n	}\r\n}\r\n```\r\n\r\n*MyTest.java*\r\n```\r\npublic class MyTest {\r\n	private IBuyStockService service;\r\n\r\n	@Before\r\n	public void before() {\r\n		// 创建容器对象，加载Spring配置文件\r\n		String resource = \"applicationContext.xml\";\r\n		ApplicationContext ac = new ClassPathXmlApplicationContext(resource);\r\n		service = (IBuyStockService) ac.getBean(\"buyStockService\");\r\n	}\r\n	\r\n	@Test\r\n	public void test01() {\r\n		service.openAccount(\"张三\", 10000);\r\n		service.openStock(\"北京动力节点\", 0);\r\n	}\r\n	\r\n	@Test\r\n	public void test02() throws BuyStockException {\r\n		service.buyStock(\"张三\", 2000, \"北京动力节点\", 5);\r\n	}\r\n}\r\n```\r\n\r\n*applicationContext.xml*\r\n```\r\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<beans xmlns=\"http://www.springframework.org/schema/beans\"\r\n	xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" \r\n	xmlns:context=\"http://www.springframework.org/schema/context\"\r\n	xmlns:aop=\"http://www.springframework.org/schema/aop\" \r\n	xmlns:tx=\"http://www.springframework.org/schema/tx\"\r\n	xsi:schemaLocation=\"\r\n        http://www.springframework.org/schema/beans \r\n        http://www.springframework.org/schema/beans/spring-beans.xsd\r\n        http://www.springframework.org/schema/context \r\n        http://www.springframework.org/schema/context/spring-context.xsd\r\n        http://www.springframework.org/schema/tx \r\n        http://www.springframework.org/schema/tx/spring-tx.xsd\r\n        http://www.springframework.org/schema/aop \r\n        http://www.springframework.org/schema/aop/spring-aop.xsd\">\r\n	\r\n	<!-- ================================= IoC ==================================== -->\r\n	<!-- 注册数据源：Spring内置连接池 -->\r\n	<bean id=\"myDataSource\" class=\"org.springframework.jdbc.datasource.DriverManagerDataSource\">\r\n		<property name=\"driverClassName\" value=\"${jdbc.driver}\"/>\r\n		<property name=\"url\" value=\"${jdbc.url}\"/>\r\n		<property name=\"username\" value=\"${jdbc.user}\"/>\r\n		<property name=\"password\" value=\"${jdbc.password}\"/>\r\n	</bean>\r\n	\r\n	<!-- 注册属性文件 -->\r\n	<context:property-placeholder location=\"classpath:jdbc.properties\"/>\r\n	\r\n	<!-- 注册Dao -->\r\n	<bean id=\"accountDao\" class=\"top.qingrang.dao.AccountDaoImpl\">\r\n		<property name=\"dataSource\" ref=\"myDataSource\"/>\r\n	</bean>\r\n	<bean id=\"stockDao\" class=\"top.qingrang.dao.StockDaoImpl\">\r\n		<property name=\"dataSource\" ref=\"myDataSource\"/>\r\n	</bean>\r\n	\r\n	<!-- 注册Service -->\r\n	<bean id=\"buyStockService\" class=\"top.qingrang.service.BuyStockServiceImpl\">\r\n		<property name=\"adao\" ref=\"accountDao\"/>\r\n		<property name=\"sdao\" ref=\"stockDao\"/>\r\n	</bean>\r\n\r\n	<!-- ================================= AOP ==================================== -->\r\n	\r\n	<!-- 注册事务管理器 -->\r\n	<bean id=\"myTransactionManager\" class=\"org.springframework.jdbc.datasource.DataSourceTransactionManager\">\r\n		<property name=\"dataSource\" ref=\"myDataSource\"/>\r\n	</bean>\r\n	\r\n	<!-- 注册事务通知 -->\r\n	<tx:advice id=\"txAdvice\" transaction-manager=\"myTransactionManager\">\r\n		<tx:attributes>\r\n			<!-- 这里指定的是：为每一个连接点指定所要应用的事务属性 -->\r\n			<tx:method name=\"open*\" isolation=\"DEFAULT\" propagation=\"REQUIRED\"/>\r\n			<tx:method name=\"buyStock\" isolation=\"DEFAULT\" propagation=\"REQUIRED\" rollback-for=\"BuyStockException\"/>\r\n		</tx:attributes>\r\n	</tx:advice>\r\n	\r\n	<!-- AOP配置 -->\r\n	<aop:config>\r\n		<!-- 这里指定的是切入点 -->\r\n		<aop:pointcut expression=\"execution(* *..service.*.*(..))\" id=\"myPointcut\"/>\r\n		<aop:advisor advice-ref=\"txAdvice\" pointcut-ref=\"myPointcut\"/>\r\n	</aop:config>\r\n</beans>\r\n```\r\n\r\n\r\n\r\n\r\n## Spring 与 MyBatis\r\n将 MyBatis 与 Spring 进行整合，主要解决的问题就是将 SqlSessionFactory 对象交由Spring 来管理。所以，该整合，只需要将 SqlSessionFactory 的对象生成器  SqlSessionFactoryBean 注册在 Spring 容器中，再将其注入给 Dao 的实现类即可完成整合。下面以两种方式来实现 Spring 与 MyBatis 的整合：\r\n1. Mapper 动态代理\r\n1. 支持扫描的 Mapper 动态代理\r\n\r\n*Student.java*\r\n```\r\npublic class Student {\r\n	private Integer id;\r\n	private String name;\r\n	private int age;\r\n	public Student() {\r\n		super();\r\n		// TODO Auto-generated constructor stub\r\n	}\r\n	public Student(String name, int age) {\r\n		super();\r\n		this.name = name;\r\n		this.age = age;\r\n	}\r\n	public Integer getId() {\r\n		return id;\r\n	}\r\n	public void setId(Integer id) {\r\n		this.id = id;\r\n	}\r\n	public String getName() {\r\n		return name;\r\n	}\r\n	public void setName(String name) {\r\n		this.name = name;\r\n	}\r\n	public int getAge() {\r\n		return age;\r\n	}\r\n	public void setAge(int age) {\r\n		this.age = age;\r\n	}\r\n	@Override\r\n	public String toString() {\r\n		return \"Student [id=\" + id + \", name=\" + name + \", age=\" + age + \"]\";\r\n	}\r\n}\r\n```\r\n\r\n*IStudentDao.java*\r\n```\r\npublic interface IStudentDao {\r\n	void insertStudent(Student student);\r\n	void deleteById(int id);\r\n	void updateStudent(Student student);\r\n	\r\n	List<Student> selectAllStudents();\r\n	Student selectStudentById(int id);\r\n}\r\n```\r\n\r\n*IStudentDao.xml - mapper*\r\n```\r\n<?xml version=\"1.0\" encoding=\"UTF-8\" ?>\r\n<!DOCTYPE mapper\r\nPUBLIC \"-//mybatis.org//DTD Mapper 3.0//EN\"\r\n\"http://mybatis.org/dtd/mybatis-3-mapper.dtd\">\r\n<mapper namespace=\"top.qingrang.dao.IStudentDao\">\r\n	<insert id=\"insertStudent\">\r\n		insert into student(name,age) values(#{name}, #{age})\r\n	</insert>\r\n	\r\n	<delete id=\"deleteById\">\r\n		delete from student where id=#{xxx}\r\n	</delete>\r\n	\r\n	<update id=\"updateStudent\">\r\n		update student set name=#{name}, age=#{age} where id=#{id}\r\n	</update>\r\n	\r\n	<select id=\"selectAllStudents\" resultType=\"Student\">\r\n		select id,name,age from student\r\n	</select>\r\n	\r\n	<select id=\"selectStudentById\" resultType=\"Student\">\r\n		select id,name,age from student where id=#{xxx}\r\n	</select>\r\n</mapper>\r\n```\r\n\r\n*IStudentService.java*\r\n```\r\npublic interface IStudentService {\r\n	void addStudent(Student student);\r\n	void removeById(int id);\r\n	void modifyStudent(Student student);\r\n	\r\n	List<String> findAllStudentsNames();\r\n	String findStudentNameById(int id);\r\n	\r\n	List<Student> findAllStudents();\r\n	Student findStudentById(int id);\r\n}\r\n```\r\n\r\n*StudentServiceImpl.java*\r\n```\r\npublic class StudentServiceImpl implements IStudentService {\r\n	private IStudentDao dao;\r\n	\r\n	public void setDao(IStudentDao dao) {\r\n		this.dao = dao;\r\n	}\r\n\r\n	@Override\r\n	public void addStudent(Student student) {\r\n		dao.insertStudent(student);\r\n	}\r\n\r\n	@Override\r\n	public void removeById(int id) {\r\n		dao.deleteById(id);\r\n	}\r\n\r\n	@Override\r\n	public void modifyStudent(Student student) {\r\n		dao.updateStudent(student);\r\n	}\r\n\r\n	@Override\r\n	public List<String> findAllStudentsNames() {\r\n		List<String> names = new ArrayList<>();\r\n		List<Student> students = this.findAllStudents();\r\n		for (Student student : students) {\r\n			names.add(student.getName());\r\n		}\r\n		return names;\r\n	}\r\n\r\n	@Override\r\n	public String findStudentNameById(int id) {\r\n		Student student = this.findStudentById(id);\r\n		return student.getName();\r\n	}\r\n\r\n	@Override\r\n	public List<Student> findAllStudents() {\r\n		return dao.selectAllStudents();\r\n	}\r\n\r\n	@Override\r\n	public Student findStudentById(int id) {\r\n		return dao.selectStudentById(id);\r\n	}\r\n}\r\n```\r\n\r\n*applicationContext.xml*\r\n```\r\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<beans xmlns=\"http://www.springframework.org/schema/beans\"\r\n	xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" \r\n	xmlns:context=\"http://www.springframework.org/schema/context\"\r\n	xsi:schemaLocation=\"\r\n        http://www.springframework.org/schema/beans \r\n        http://www.springframework.org/schema/beans/spring-beans.xsd\r\n        http://www.springframework.org/schema/context \r\n        http://www.springframework.org/schema/context/spring-context.xsd\">\r\n	\r\n	<!-- 注册数据源：Spring内置连接池 -->\r\n	<bean id=\"myDataSource\" class=\"org.springframework.jdbc.datasource.DriverManagerDataSource\">\r\n		<property name=\"driverClassName\" value=\"${jdbc.driver}\"/>\r\n		<property name=\"url\" value=\"${jdbc.url}\"/>\r\n		<property name=\"username\" value=\"${jdbc.user}\"/>\r\n		<property name=\"password\" value=\"${jdbc.password}\"/>\r\n	</bean>\r\n\r\n	<!-- 注册属性文件 -->\r\n	<context:property-placeholder location=\"classpath:jdbc.properties\"/>\r\n\r\n	<bean id=\"mySqlSessionFactory\" class=\"org.mybatis.spring.SqlSessionFactoryBean\">\r\n		<property name=\"configLocation\" value=\"classpath:mybatis.xml\"/>\r\n		<property name=\"dataSource\" ref=\"myDataSource\"/>\r\n	</bean>\r\n\r\n	<!-- 生成Dao的代理对象\r\n		当前配置会为指定的基本包中所有的接口生成代理对象\r\n	 -->\r\n	<bean class=\"org.mybatis.spring.mapper.MapperScannerConfigurer\">\r\n		<property name=\"sqlSessionFactoryBeanName\" value=\"mySqlSessionFactory\"/>\r\n		<property name=\"basePackage\" value=\"top.qingrang.dao\"/>\r\n	</bean>\r\n\r\n	<!-- 注册Service -->\r\n	<bean id=\"studentService\" class=\"top.qingrang.service.StudentServiceImpl\">\r\n		<!-- 这里的Dao的注入需要使用ref属性，\r\n			若Dao的接口名的前两个字母是大写，则这里的值为接口的简单类名\r\n			若Dao的接口名的首字母是大写，第二个字母为小写，则这里的值为简单类名，但首字母要小写\r\n		 -->\r\n		<property name=\"dao\" ref=\"IStudentDao\"/>\r\n	</bean>\r\n\r\n</beans>\r\n```\r\n\r\n*mybatis.xml*\r\n```\r\n<?xml version=\"1.0\" encoding=\"UTF-8\" ?>\r\n<!DOCTYPE configuration\r\nPUBLIC \"-//mybatis.org//DTD Config 3.0//EN\"\r\n\"http://mybatis.org/dtd/mybatis-3-config.dtd\">\r\n<configuration>\r\n	<typeAliases>\r\n		<package name=\"top.qingrang.beans\"/>\r\n	</typeAliases>\r\n	<mappers>\r\n		<package name=\"top.qingrang.dao\"/>\r\n	</mappers>\r\n</configuration>\r\n```\r\n\r\n*MyTest.java*\r\n```\r\npublic class MyTest {\r\n	private IStudentService service;\r\n\r\n	@Before\r\n	public void before() {\r\n		// 创建容器对象，加载Spring配置文件\r\n		String resource = \"applicationContext.xml\";\r\n		ApplicationContext ac = new ClassPathXmlApplicationContext(resource);\r\n		service = (IStudentService) ac.getBean(\"studentService\");\r\n	}\r\n	\r\n	@Test\r\n	public void test01() {\r\n		Student student = new Student(\"张三\", 23);\r\n		service.addStudent(student);\r\n	}\r\n	\r\n	@Test\r\n	public void test02() {\r\n		service.removeById(2);\r\n	}\r\n	\r\n	@Test\r\n	public void test03() {\r\n		Student student = new Student(\"张三\", 23);\r\n		student.setId(3);\r\n		service.modifyStudent(student);\r\n	}\r\n	\r\n	@Test\r\n	public void test04() {\r\n		List<String> names = service.findAllStudentsNames();\r\n		System.out.println(names);\r\n	}\r\n	\r\n	@Test\r\n	public void test05() {\r\n		String name = service.findStudentNameById(3);\r\n		System.out.println(name);\r\n	}\r\n	\r\n	@Test\r\n	public void test06() {\r\n		List<Student> students = service.findAllStudents();\r\n		for (Student student : students) {\r\n			System.out.println(student);\r\n		}\r\n	}\r\n	\r\n	@Test\r\n	public void test07() {\r\n		Student student = service.findStudentById(3);\r\n		System.out.println(student);\r\n	}\r\n}\r\n```',`groups`='Java',`is_show`=1,`publish`=1,`summary`='',`gmt_modified`='2018-11-22'  WHERE  `id` = 253 [ RunTime:0.001405s ]
[ sql ] [ SQL ] SELECT COUNT(*) AS tp_count FROM `note` WHERE  `groups` = 'Java' LIMIT 1 [ RunTime:0.001404s ]
[ sql ] [ SQL ] UPDATE `groups`  SET `g_count`=22  WHERE  `groups` = 'Java' [ RunTime:0.000289s ]
[ sql ] [ SQL ] SELECT COUNT(*) AS tp_count FROM `note` WHERE  `groups` = 'Java' LIMIT 1 [ RunTime:0.001124s ]
[ sql ] [ SQL ] UPDATE `groups`  SET `g_count`=22  WHERE  `groups` = 'Java' [ RunTime:0.000275s ]
---------------------------------------------------------------
[ 2018-11-22T22:50:40+08:00 ] 74.120.168.12 74.120.168.12 GET /daily/admin/note/shownote/id/253.html
[ info ] qingrang.top/daily/admin/note/shownote/id/253.html [运行时间：0.047527s][吞吐率：21.04req/s] [内存消耗：2,023.97kb] [文件加载：55]
[ info ] [ LANG ] /var/www/html/daily/thinkphp/lang/zh-cn.php
[ info ] [ ROUTE ] array (
  'type' => 'module',
  'module' => 
  array (
    0 => 'admin',
    1 => 'note',
    2 => 'shownote',
  ),
)
[ info ] [ HEADER ] array (
  'host' => 'qingrang.top',
  'cache-control' => 'max-age=0',
  'upgrade-insecure-requests' => '1',
  'user-agent' => 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/70.0.3538.102 Safari/537.36',
  'accept' => 'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8',
  'referer' => 'http://qingrang.top/daily/admin/note/editnote/id/253.html',
  'accept-encoding' => 'gzip, deflate',
  'accept-language' => 'zh-CN,zh;q=0.9,la;q=0.8,en;q=0.7,lb;q=0.6',
  'cookie' => 'Hm_lvt_1769181352e9adc950166aada465644e=1541082864,1541122974,1541171416,1542098176; PHPSESSID=cs4ll16s0kjq1pmnpkf29456n2',
  'connection' => 'close',
)
[ info ] [ PARAM ] array (
  'id' => '253',
)
[ info ] [ SESSION ] INIT array (
  'id' => '',
  'var_session_id' => '',
  'prefix' => 'think',
  'type' => '',
  'auto_start' => true,
)
[ info ] [ RUN ] app\admin\controller\Note->showNote[ /var/www/html/daily/application/admin/controller/Note.php ]
[ info ] [ DB ] INIT mysql
[ info ] [ VIEW ] /var/www/html/daily/application/admin/view/note/shownote.html [ array (
  0 => 'note',
  1 => 'groups',
) ]
[ info ] [ LOG ] INIT File
[ sql ] [ DB ] CONNECT:[ UseTime:0.000423s ] mysql:host=74.120.168.12;dbname=diary;charset=utf8
[ sql ] [ SQL ] SHOW COLUMNS FROM `note` [ RunTime:0.001087s ]
[ sql ] [ SQL ] SELECT * FROM `note` WHERE  `id` = 253 LIMIT 1 [ RunTime:0.000462s ]
[ sql ] [ SQL ] SHOW COLUMNS FROM `groups` [ RunTime:0.000778s ]
[ sql ] [ SQL ] SELECT * FROM `groups` [ RunTime:0.000268s ]
---------------------------------------------------------------
[ 2018-11-22T22:54:59+08:00 ] 74.120.168.12 74.120.168.12 GET /daily/admin/note
[ info ] qingrang.top/daily/admin/note [运行时间：0.066882s][吞吐率：14.95req/s] [内存消耗：2,324.46kb] [文件加载：56]
[ info ] [ LANG ] /var/www/html/daily/thinkphp/lang/zh-cn.php
[ info ] [ ROUTE ] array (
  'type' => 'module',
  'module' => 
  array (
    0 => 'admin',
    1 => 'note',
    2 => NULL,
  ),
)
[ info ] [ HEADER ] array (
  'host' => 'qingrang.top',
  'cache-control' => 'max-age=0',
  'upgrade-insecure-requests' => '1',
  'user-agent' => 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/70.0.3538.102 Safari/537.36',
  'accept' => 'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8',
  'accept-encoding' => 'gzip, deflate',
  'accept-language' => 'zh-CN,zh;q=0.9,la;q=0.8,en;q=0.7,lb;q=0.6',
  'cookie' => 'Hm_lvt_1769181352e9adc950166aada465644e=1541082864,1541122974,1541171416,1542098176; PHPSESSID=cs4ll16s0kjq1pmnpkf29456n2',
  'connection' => 'close',
)
[ info ] [ PARAM ] array (
)
[ info ] [ SESSION ] INIT array (
  'id' => '',
  'var_session_id' => '',
  'prefix' => 'think',
  'type' => '',
  'auto_start' => true,
)
[ info ] [ RUN ] app\admin\controller\Note->notelst[ /var/www/html/daily/application/admin/controller/Note.php ]
[ info ] [ DB ] INIT mysql
[ info ] [ VIEW ] /var/www/html/daily/application/admin/view/note/notelst.html [ array (
  0 => 'stickList',
  1 => 'hide',
  2 => 'list',
  3 => 'list_new',
  4 => 'groups',
  5 => 'groups0',
  6 => 'groups1',
  7 => 'groups2',
  8 => 'count',
  9 => 'year',
  10 => 'default_num',
) ]
[ info ] [ LOG ] INIT File
[ sql ] [ DB ] CONNECT:[ UseTime:0.000458s ] mysql:host=74.120.168.12;dbname=diary;charset=utf8
[ sql ] [ SQL ] SHOW COLUMNS FROM `note` [ RunTime:0.001253s ]
[ sql ] [ SQL ] SELECT * FROM `note` WHERE  `groups` <> 'Personal'  AND `is_show` = 1 ORDER BY date desc,id desc [ RunTime:0.002053s ]
[ sql ] [ SQL ] SELECT * FROM `note` WHERE  `groups` <> 'Personal'  AND `is_show` <> 1 ORDER BY gmt_modified desc LIMIT 5 [ RunTime:0.002379s ]
[ sql ] [ SQL ] SHOW COLUMNS FROM `config` [ RunTime:0.000878s ]
[ sql ] [ SQL ] SELECT * FROM `config` WHERE  `name` = 'hide' LIMIT 1 [ RunTime:0.000317s ]
[ sql ] [ SQL ] SELECT * FROM `note` WHERE  `id` < 5 [ RunTime:0.000400s ]
[ sql ] [ SQL ] SHOW COLUMNS FROM `groups` [ RunTime:0.000741s ]
[ sql ] [ SQL ] SELECT * FROM `groups` [ RunTime:0.000294s ]
[ sql ] [ SQL ] SELECT * FROM `groups` WHERE  `parent_id` = 0  AND `id` <> 2 ORDER BY `groups` [ RunTime:0.000365s ]
[ sql ] [ SQL ] SELECT `groups` FROM `groups` WHERE  `parent_id` = 1 [ RunTime:0.000261s ]
[ sql ] [ SQL ] SELECT * FROM `groups` WHERE  `parent_id` = 2 ORDER BY `groups` [ RunTime:0.000370s ]
[ sql ] [ SQL ] SELECT COUNT(*) AS tp_count FROM `note` WHERE  `groups` = 'Default' LIMIT 1 [ RunTime:0.001252s ]
[ sql ] [ SQL ] SELECT COUNT(*) AS tp_count FROM `note` LIMIT 1 [ RunTime:0.000283s ]
[ sql ] [ SQL ] SHOW COLUMNS FROM `yearlist` [ RunTime:0.001101s ]
[ sql ] [ SQL ] SELECT DISTINCT  `year` FROM `yearlist` ORDER BY year desc [ RunTime:0.000551s ]
