---------------------------------------------------------------
[ 2018-11-19T08:41:40+08:00 ] 74.120.168.12 74.120.168.12 GET /daily/admin/note
[ info ] qingrang.top/daily/admin/note [运行时间：0.049539s][吞吐率：20.19req/s] [内存消耗：1,428.39kb] [文件加载：49]
[ info ] [ LANG ] /var/www/html/daily/thinkphp/lang/zh-cn.php
[ info ] [ ROUTE ] array (
  'type' => 'module',
  'module' => 
  array (
    0 => 'admin',
    1 => 'note',
    2 => NULL,
  ),
)
[ info ] [ HEADER ] array (
  'host' => 'qingrang.top',
  'upgrade-insecure-requests' => '1',
  'user-agent' => 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/70.0.3538.102 Safari/537.36',
  'accept' => 'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8',
  'accept-encoding' => 'gzip, deflate',
  'accept-language' => 'zh-CN,zh;q=0.9,la;q=0.8,en;q=0.7,lb;q=0.6',
  'cookie' => 'Hm_lvt_1769181352e9adc950166aada465644e=1541082864,1541122974,1541171416,1542098176',
  'connection' => 'close',
)
[ info ] [ PARAM ] array (
)
[ info ] [ SESSION ] INIT array (
  'id' => '',
  'var_session_id' => '',
  'prefix' => 'think',
  'type' => '',
  'auto_start' => true,
)
[ info ] [ VIEW ] /var/www/html/daily/thinkphp/tpl/dispatch_jump.tpl [ array (
  0 => 'code',
  1 => 'msg',
  2 => 'data',
  3 => 'url',
  4 => 'wait',
) ]
[ info ] [ LOG ] INIT File
---------------------------------------------------------------
[ 2018-11-19T08:41:44+08:00 ] 74.120.168.12 74.120.168.12 GET /daily/admin/login/index.html
[ info ] qingrang.top/daily/admin/login/index.html [运行时间：0.079404s][吞吐率：12.59req/s] [内存消耗：1,340.77kb] [文件加载：47]
[ info ] [ LANG ] /var/www/html/daily/thinkphp/lang/zh-cn.php
[ info ] [ ROUTE ] array (
  'type' => 'module',
  'module' => 
  array (
    0 => 'admin',
    1 => 'login',
    2 => 'index',
  ),
)
[ info ] [ HEADER ] array (
  'host' => 'qingrang.top',
  'upgrade-insecure-requests' => '1',
  'user-agent' => 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/70.0.3538.102 Safari/537.36',
  'accept' => 'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8',
  'referer' => 'http://qingrang.top/daily/admin/note',
  'accept-encoding' => 'gzip, deflate',
  'accept-language' => 'zh-CN,zh;q=0.9,la;q=0.8,en;q=0.7,lb;q=0.6',
  'cookie' => 'Hm_lvt_1769181352e9adc950166aada465644e=1541082864,1541122974,1541171416,1542098176; PHPSESSID=cvrea98moc9nvt4dg4igb1ep86',
  'connection' => 'close',
)
[ info ] [ PARAM ] array (
)
[ info ] [ RUN ] app\admin\controller\Login->index[ /var/www/html/daily/application/admin/controller/Login.php ]
[ info ] [ VIEW ] /var/www/html/daily/application/admin/view/login/index.html [ array (
) ]
[ info ] [ LOG ] INIT File
---------------------------------------------------------------
[ 2018-11-19T08:41:49+08:00 ] 74.120.168.12 74.120.168.12 POST /daily/admin/login/index.html
[ info ] qingrang.top/daily/admin/login/index.html [运行时间：0.056279s][吞吐率：17.77req/s] [内存消耗：1,922.37kb] [文件加载：54]
[ info ] [ LANG ] /var/www/html/daily/thinkphp/lang/zh-cn.php
[ info ] [ ROUTE ] array (
  'type' => 'module',
  'module' => 
  array (
    0 => 'admin',
    1 => 'login',
    2 => 'index',
  ),
)
[ info ] [ HEADER ] array (
  'host' => 'qingrang.top',
  'content-length' => '8',
  'cache-control' => 'max-age=0',
  'origin' => 'http://qingrang.top',
  'upgrade-insecure-requests' => '1',
  'content-type' => 'application/x-www-form-urlencoded',
  'user-agent' => 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/70.0.3538.102 Safari/537.36',
  'accept' => 'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8',
  'referer' => 'http://qingrang.top/daily/admin/login/index.html',
  'accept-encoding' => 'gzip, deflate',
  'accept-language' => 'zh-CN,zh;q=0.9,la;q=0.8,en;q=0.7,lb;q=0.6',
  'cookie' => 'Hm_lvt_1769181352e9adc950166aada465644e=1541082864,1541122974,1541171416,1542098176; PHPSESSID=cvrea98moc9nvt4dg4igb1ep86',
  'connection' => 'close',
)
[ info ] [ PARAM ] array (
  'pwd' => 'shao',
)
[ info ] [ RUN ] app\admin\controller\Login->index[ /var/www/html/daily/application/admin/controller/Login.php ]
[ info ] [ DB ] INIT mysql
[ info ] [ SESSION ] INIT array (
  'id' => '',
  'var_session_id' => '',
  'prefix' => 'think',
  'type' => '',
  'auto_start' => true,
)
[ info ] [ LOG ] INIT File
[ sql ] [ DB ] CONNECT:[ UseTime:0.001486s ] mysql:host=74.120.168.12;dbname=diary;charset=utf8
[ sql ] [ SQL ] SHOW COLUMNS FROM `admin` [ RunTime:0.002357s ]
[ sql ] [ SQL ] SELECT * FROM `admin` WHERE  `id` = 1 LIMIT 1 [ RunTime:0.000551s ]
---------------------------------------------------------------
[ 2018-11-19T08:41:49+08:00 ] 74.120.168.12 74.120.168.12 GET /daily/admin/note
[ info ] qingrang.top/daily/admin/note [运行时间：0.080761s][吞吐率：12.38req/s] [内存消耗：2,326.16kb] [文件加载：56]
[ info ] [ LANG ] /var/www/html/daily/thinkphp/lang/zh-cn.php
[ info ] [ ROUTE ] array (
  'type' => 'module',
  'module' => 
  array (
    0 => 'admin',
    1 => 'note',
    2 => NULL,
  ),
)
[ info ] [ HEADER ] array (
  'host' => 'qingrang.top',
  'cache-control' => 'max-age=0',
  'upgrade-insecure-requests' => '1',
  'user-agent' => 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/70.0.3538.102 Safari/537.36',
  'accept' => 'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8',
  'referer' => 'http://qingrang.top/daily/admin/login/index.html',
  'accept-encoding' => 'gzip, deflate',
  'accept-language' => 'zh-CN,zh;q=0.9,la;q=0.8,en;q=0.7,lb;q=0.6',
  'cookie' => 'Hm_lvt_1769181352e9adc950166aada465644e=1541082864,1541122974,1541171416,1542098176; PHPSESSID=cvrea98moc9nvt4dg4igb1ep86',
  'connection' => 'close',
)
[ info ] [ PARAM ] array (
)
[ info ] [ SESSION ] INIT array (
  'id' => '',
  'var_session_id' => '',
  'prefix' => 'think',
  'type' => '',
  'auto_start' => true,
)
[ info ] [ RUN ] app\admin\controller\Note->notelst[ /var/www/html/daily/application/admin/controller/Note.php ]
[ info ] [ DB ] INIT mysql
[ info ] [ VIEW ] /var/www/html/daily/application/admin/view/note/notelst.html [ array (
  0 => 'stickList',
  1 => 'hide',
  2 => 'list',
  3 => 'list_new',
  4 => 'groups',
  5 => 'groups0',
  6 => 'groups1',
  7 => 'groups2',
  8 => 'count',
  9 => 'year',
  10 => 'default_num',
) ]
[ info ] [ LOG ] INIT File
[ sql ] [ DB ] CONNECT:[ UseTime:0.000635s ] mysql:host=74.120.168.12;dbname=diary;charset=utf8
[ sql ] [ SQL ] SHOW COLUMNS FROM `note` [ RunTime:0.001391s ]
[ sql ] [ SQL ] SELECT * FROM `note` WHERE  `groups` <> 'Personal'  AND `is_show` = 1 ORDER BY date desc,id desc [ RunTime:0.003332s ]
[ sql ] [ SQL ] SELECT * FROM `note` WHERE  `groups` <> 'Personal' ORDER BY id desc LIMIT 5 [ RunTime:0.000715s ]
[ sql ] [ SQL ] SHOW COLUMNS FROM `config` [ RunTime:0.001046s ]
[ sql ] [ SQL ] SELECT * FROM `config` WHERE  `name` = 'hide' LIMIT 1 [ RunTime:0.000411s ]
[ sql ] [ SQL ] SELECT * FROM `note` WHERE  `id` < 5 [ RunTime:0.000568s ]
[ sql ] [ SQL ] SHOW COLUMNS FROM `groups` [ RunTime:0.000942s ]
[ sql ] [ SQL ] SELECT * FROM `groups` [ RunTime:0.000369s ]
[ sql ] [ SQL ] SELECT * FROM `groups` WHERE  `parent_id` = 0  AND `id` <> 2 ORDER BY `groups` [ RunTime:0.000511s ]
[ sql ] [ SQL ] SELECT `groups` FROM `groups` WHERE  `parent_id` = 1 [ RunTime:0.000439s ]
[ sql ] [ SQL ] SELECT * FROM `groups` WHERE  `parent_id` = 2 ORDER BY `groups` [ RunTime:0.000539s ]
[ sql ] [ SQL ] SELECT COUNT(*) AS tp_count FROM `note` WHERE  `groups` = 'Default' LIMIT 1 [ RunTime:0.001446s ]
[ sql ] [ SQL ] SELECT COUNT(*) AS tp_count FROM `note` LIMIT 1 [ RunTime:0.000256s ]
[ sql ] [ SQL ] SHOW COLUMNS FROM `yearlist` [ RunTime:0.001163s ]
[ sql ] [ SQL ] SELECT DISTINCT  `year` FROM `yearlist` ORDER BY year desc [ RunTime:0.000795s ]
---------------------------------------------------------------
[ 2018-11-19T08:47:20+08:00 ] 74.120.168.12 74.120.168.12 GET /daily/admin/note/editnote/id/249.html
[ info ] qingrang.top/daily/admin/note/editnote/id/249.html [运行时间：0.060055s][吞吐率：16.65req/s] [内存消耗：2,029.42kb] [文件加载：56]
[ info ] [ LANG ] /var/www/html/daily/thinkphp/lang/zh-cn.php
[ info ] [ ROUTE ] array (
  'type' => 'module',
  'module' => 
  array (
    0 => 'admin',
    1 => 'note',
    2 => 'editnote',
  ),
)
[ info ] [ HEADER ] array (
  'host' => 'qingrang.top',
  'upgrade-insecure-requests' => '1',
  'user-agent' => 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/70.0.3538.102 Safari/537.36',
  'accept' => 'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8',
  'referer' => 'http://qingrang.top/daily/admin/note',
  'accept-encoding' => 'gzip, deflate',
  'accept-language' => 'zh-CN,zh;q=0.9,la;q=0.8,en;q=0.7,lb;q=0.6',
  'cookie' => 'Hm_lvt_1769181352e9adc950166aada465644e=1541082864,1541122974,1541171416,1542098176; PHPSESSID=cvrea98moc9nvt4dg4igb1ep86',
  'connection' => 'close',
)
[ info ] [ PARAM ] array (
  'id' => '249',
)
[ info ] [ SESSION ] INIT array (
  'id' => '',
  'var_session_id' => '',
  'prefix' => 'think',
  'type' => '',
  'auto_start' => true,
)
[ info ] [ RUN ] app\admin\controller\Note->editNote[ /var/www/html/daily/application/admin/controller/Note.php ]
[ info ] [ DB ] INIT mysql
[ info ] [ VIEW ] /var/www/html/daily/application/admin/view/note/editnote.html [ array (
  0 => 'note',
  1 => 'groups',
) ]
[ info ] [ LOG ] INIT File
[ sql ] [ DB ] CONNECT:[ UseTime:0.000669s ] mysql:host=74.120.168.12;dbname=diary;charset=utf8
[ sql ] [ SQL ] SHOW COLUMNS FROM `note` [ RunTime:0.001659s ]
[ sql ] [ SQL ] SELECT * FROM `note` WHERE  `id` = 249 LIMIT 1 [ RunTime:0.000548s ]
[ sql ] [ SQL ] SHOW COLUMNS FROM `groups` [ RunTime:0.000893s ]
[ sql ] [ SQL ] SELECT * FROM `groups` [ RunTime:0.000304s ]
---------------------------------------------------------------
[ 2018-11-19T09:06:58+08:00 ] 74.120.168.12 74.120.168.12 POST /daily/admin/note/asearch.html
[ info ] qingrang.top/daily/admin/note/asearch.html [运行时间：0.067670s][吞吐率：14.78req/s] [内存消耗：2,331.04kb] [文件加载：52]
[ info ] [ LANG ] /var/www/html/daily/thinkphp/lang/zh-cn.php
[ info ] [ ROUTE ] array (
  'type' => 'module',
  'module' => 
  array (
    0 => 'admin',
    1 => 'note',
    2 => 'asearch',
  ),
)
[ info ] [ HEADER ] array (
  'host' => 'qingrang.top',
  'content-length' => '9',
  'accept' => 'application/json, text/javascript, */*; q=0.01',
  'origin' => 'http://qingrang.top',
  'x-requested-with' => 'XMLHttpRequest',
  'user-agent' => 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/70.0.3538.102 Safari/537.36',
  'content-type' => 'application/x-www-form-urlencoded',
  'referer' => 'http://qingrang.top/daily/admin/note',
  'accept-encoding' => 'gzip, deflate',
  'accept-language' => 'zh-CN,zh;q=0.9,la;q=0.8,en;q=0.7,lb;q=0.6',
  'cookie' => 'Hm_lvt_1769181352e9adc950166aada465644e=1541082864,1541122974,1541171416,1542098176; PHPSESSID=cvrea98moc9nvt4dg4igb1ep86',
  'connection' => 'close',
)
[ info ] [ PARAM ] array (
  'key' => 'mysql',
)
[ info ] [ SESSION ] INIT array (
  'id' => '',
  'var_session_id' => '',
  'prefix' => 'think',
  'type' => '',
  'auto_start' => true,
)
[ info ] [ RUN ] app\admin\controller\Note->aSearch[ /var/www/html/daily/application/admin/controller/Note.php ]
[ info ] [ DB ] INIT mysql
[ info ] [ LOG ] INIT File
[ sql ] [ DB ] CONNECT:[ UseTime:0.000658s ] mysql:host=74.120.168.12;dbname=diary;charset=utf8
[ sql ] [ SQL ] SHOW COLUMNS FROM `note` [ RunTime:0.001695s ]
[ sql ] [ SQL ] SELECT * FROM `note` WHERE  ( `title` LIKE '%mysql%' OR `content` LIKE '%mysql%' ) ORDER BY date desc [ RunTime:0.010200s ]
---------------------------------------------------------------
[ 2018-11-19T09:07:03+08:00 ] 74.120.168.12 74.120.168.12 GET /daily/admin/note/editNote/id/39
[ info ] qingrang.top/daily/admin/note/editNote/id/39 [运行时间：0.080964s][吞吐率：12.35req/s] [内存消耗：2,029.11kb] [文件加载：56]
[ info ] [ LANG ] /var/www/html/daily/thinkphp/lang/zh-cn.php
[ info ] [ ROUTE ] array (
  'type' => 'module',
  'module' => 
  array (
    0 => 'admin',
    1 => 'note',
    2 => 'editNote',
  ),
)
[ info ] [ HEADER ] array (
  'host' => 'qingrang.top',
  'upgrade-insecure-requests' => '1',
  'user-agent' => 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/70.0.3538.102 Safari/537.36',
  'accept' => 'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8',
  'referer' => 'http://qingrang.top/daily/admin/note',
  'accept-encoding' => 'gzip, deflate',
  'accept-language' => 'zh-CN,zh;q=0.9,la;q=0.8,en;q=0.7,lb;q=0.6',
  'cookie' => 'Hm_lvt_1769181352e9adc950166aada465644e=1541082864,1541122974,1541171416,1542098176; PHPSESSID=cvrea98moc9nvt4dg4igb1ep86',
  'connection' => 'close',
)
[ info ] [ PARAM ] array (
  'id' => '39',
)
[ info ] [ SESSION ] INIT array (
  'id' => '',
  'var_session_id' => '',
  'prefix' => 'think',
  'type' => '',
  'auto_start' => true,
)
[ info ] [ RUN ] app\admin\controller\Note->editNote[ /var/www/html/daily/application/admin/controller/Note.php ]
[ info ] [ DB ] INIT mysql
[ info ] [ VIEW ] /var/www/html/daily/application/admin/view/note/editnote.html [ array (
  0 => 'note',
  1 => 'groups',
) ]
[ info ] [ LOG ] INIT File
[ sql ] [ DB ] CONNECT:[ UseTime:0.000946s ] mysql:host=74.120.168.12;dbname=diary;charset=utf8
[ sql ] [ SQL ] SHOW COLUMNS FROM `note` [ RunTime:0.002731s ]
[ sql ] [ SQL ] SELECT * FROM `note` WHERE  `id` = 39 LIMIT 1 [ RunTime:0.000834s ]
[ sql ] [ SQL ] SHOW COLUMNS FROM `groups` [ RunTime:0.002355s ]
[ sql ] [ SQL ] SELECT * FROM `groups` [ RunTime:0.000544s ]
---------------------------------------------------------------
[ 2018-11-19T09:08:40+08:00 ] 74.120.168.12 74.120.168.12 POST /daily/admin/note/updatenote/id/39.html
[ info ] qingrang.top/daily/admin/note/updatenote/id/39.html [运行时间：0.087598s][吞吐率：11.42req/s] [内存消耗：2,053.88kb] [文件加载：58]
[ info ] [ LANG ] /var/www/html/daily/thinkphp/lang/zh-cn.php
[ info ] [ ROUTE ] array (
  'type' => 'module',
  'module' => 
  array (
    0 => 'admin',
    1 => 'note',
    2 => 'updatenote',
  ),
)
[ info ] [ HEADER ] array (
  'host' => 'qingrang.top',
  'content-length' => '1854',
  'cache-control' => 'max-age=0',
  'origin' => 'http://qingrang.top',
  'upgrade-insecure-requests' => '1',
  'content-type' => 'application/x-www-form-urlencoded',
  'user-agent' => 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/70.0.3538.102 Safari/537.36',
  'accept' => 'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8',
  'referer' => 'http://qingrang.top/daily/admin/note/editNote/id/39',
  'accept-encoding' => 'gzip, deflate',
  'accept-language' => 'zh-CN,zh;q=0.9,la;q=0.8,en;q=0.7,lb;q=0.6',
  'cookie' => 'Hm_lvt_1769181352e9adc950166aada465644e=1541082864,1541122974,1541171416,1542098176; PHPSESSID=cvrea98moc9nvt4dg4igb1ep86',
  'connection' => 'close',
)
[ info ] [ PARAM ] array (
  'summary' => '',
  'content' => '# MySql 常用操作

1. 修改 自增ID 起始值
```
alter table users AUTO_INCREMENT=0;
```

1. 随机取一条或多条数据
```
SELECT * FROM note AS t1 JOIN (SELECT ROUND(RAND() * ((SELECT MAX(id) FROM note)-(SELECT MIN(id) FROM note))+(SELECT MIN(id) FROM note)) AS id) AS t2 WHERE t1.id >= t2.id ORDER BY t1.id LIMIT 1;
```

## 查询记录
### 查询新插入记录的 id
```
insert into student(name,age) values(\'张三\', 56);
#以下两种方法均可
select @@identity;
#select last_insert_id();
```

## 更新记录
1. 更改指定字段
```
UPDATE note set date = \'2016-00-00\'
UPDATE note SET date = \'2017-00-00\' WHERE date = \'2016-00-00\'
```
1. 更新指定字段中的部分内容
`update table set content=REPLACE(content,\'old\',\'new\')`

1. 同一表中. 两个字段值互相复制, 从一个字段值复制到另一个字段值
`update note set date2=date;`

',
  'groups' => 'DataBase',
  'showsel' => '0',
  'showse2' => '1',
  'id' => '39',
)
[ info ] [ SESSION ] INIT array (
  'id' => '',
  'var_session_id' => '',
  'prefix' => 'think',
  'type' => '',
  'auto_start' => true,
)
[ info ] [ RUN ] app\admin\controller\Note->updateNote[ /var/www/html/daily/application/admin/controller/Note.php ]
[ info ] [ DB ] INIT mysql
[ info ] [ CACHE ] INIT File
[ info ] [ LOG ] INIT File
[ sql ] [ DB ] CONNECT:[ UseTime:0.000758s ] mysql:host=74.120.168.12;dbname=diary;charset=utf8
[ sql ] [ SQL ] SHOW COLUMNS FROM `note` [ RunTime:0.001822s ]
[ sql ] [ SQL ] SELECT * FROM `note` WHERE  `id` = 39 LIMIT 1 [ RunTime:0.000565s ]
[ sql ] [ SQL ] SELECT `groups` FROM `note` WHERE  `id` = 39 LIMIT 1 [ RunTime:0.000364s ]
[ sql ] [ SQL ] SHOW COLUMNS FROM `groups` [ RunTime:0.001232s ]
[ sql ] [ SQL ] SELECT `parent_id` FROM `groups` WHERE  `groups` = 'DataBase' LIMIT 1 [ RunTime:0.000407s ]
[ sql ] [ SQL ] SELECT `groups` FROM `groups` WHERE  `id` = 2 LIMIT 1 [ RunTime:0.000357s ]
[ sql ] [ SQL ] UPDATE `note`  SET `id`=39,`p_id`=2,`title`='MySql 常用操作\r',`content`='# MySql 常用操作\r\n\r\n1. 修改 自增ID 起始值\r\n```\r\nalter table users AUTO_INCREMENT=0;\r\n```\r\n\r\n1. 随机取一条或多条数据\r\n```\r\nSELECT * FROM note AS t1 JOIN (SELECT ROUND(RAND() * ((SELECT MAX(id) FROM note)-(SELECT MIN(id) FROM note))+(SELECT MIN(id) FROM note)) AS id) AS t2 WHERE t1.id >= t2.id ORDER BY t1.id LIMIT 1;\r\n```\r\n\r\n## 查询记录\r\n### 查询新插入记录的 id\r\n```\r\ninsert into student(name,age) values(\'张三\', 56);\r\n#以下两种方法均可\r\nselect @@identity;\r\n#select last_insert_id();\r\n```\r\n\r\n## 更新记录\r\n1. 更改指定字段\r\n```\r\nUPDATE note set date = \'2016-00-00\'\r\nUPDATE note SET date = \'2017-00-00\' WHERE date = \'2016-00-00\'\r\n```\r\n1. 更新指定字段中的部分内容\r\n`update table set content=REPLACE(content,\'old\',\'new\')`\r\n\r\n1. 同一表中. 两个字段值互相复制, 从一个字段值复制到另一个字段值\r\n`update note set date2=date;`\r\n\r\n',`groups`='DataBase',`is_show`=0,`publish`=1,`summary`=''  WHERE  `id` = 39 [ RunTime:0.000756s ]
[ sql ] [ SQL ] SELECT COUNT(*) AS tp_count FROM `note` WHERE  `groups` = 'DataBase' LIMIT 1 [ RunTime:0.001207s ]
[ sql ] [ SQL ] UPDATE `groups`  SET `g_count`=4  WHERE  `groups` = 'DataBase' [ RunTime:0.000447s ]
[ sql ] [ SQL ] SELECT COUNT(*) AS tp_count FROM `note` WHERE  `groups` = 'DataBase' LIMIT 1 [ RunTime:0.001028s ]
[ sql ] [ SQL ] UPDATE `groups`  SET `g_count`=4  WHERE  `groups` = 'DataBase' [ RunTime:0.000457s ]
---------------------------------------------------------------
[ 2018-11-19T09:08:41+08:00 ] 74.120.168.12 74.120.168.12 GET /daily/admin/note/shownote/id/39.html
[ info ] qingrang.top/daily/admin/note/shownote/id/39.html [运行时间：0.064026s][吞吐率：15.62req/s] [内存消耗：1,981.23kb] [文件加载：55]
[ info ] [ LANG ] /var/www/html/daily/thinkphp/lang/zh-cn.php
[ info ] [ ROUTE ] array (
  'type' => 'module',
  'module' => 
  array (
    0 => 'admin',
    1 => 'note',
    2 => 'shownote',
  ),
)
[ info ] [ HEADER ] array (
  'host' => 'qingrang.top',
  'cache-control' => 'max-age=0',
  'upgrade-insecure-requests' => '1',
  'user-agent' => 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/70.0.3538.102 Safari/537.36',
  'accept' => 'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8',
  'referer' => 'http://qingrang.top/daily/admin/note/editNote/id/39',
  'accept-encoding' => 'gzip, deflate',
  'accept-language' => 'zh-CN,zh;q=0.9,la;q=0.8,en;q=0.7,lb;q=0.6',
  'cookie' => 'Hm_lvt_1769181352e9adc950166aada465644e=1541082864,1541122974,1541171416,1542098176; PHPSESSID=cvrea98moc9nvt4dg4igb1ep86',
  'connection' => 'close',
)
[ info ] [ PARAM ] array (
  'id' => '39',
)
[ info ] [ SESSION ] INIT array (
  'id' => '',
  'var_session_id' => '',
  'prefix' => 'think',
  'type' => '',
  'auto_start' => true,
)
[ info ] [ RUN ] app\admin\controller\Note->showNote[ /var/www/html/daily/application/admin/controller/Note.php ]
[ info ] [ DB ] INIT mysql
[ info ] [ VIEW ] /var/www/html/daily/application/admin/view/note/shownote.html [ array (
  0 => 'note',
  1 => 'groups',
) ]
[ info ] [ LOG ] INIT File
[ sql ] [ DB ] CONNECT:[ UseTime:0.000660s ] mysql:host=74.120.168.12;dbname=diary;charset=utf8
[ sql ] [ SQL ] SHOW COLUMNS FROM `note` [ RunTime:0.001496s ]
[ sql ] [ SQL ] SELECT * FROM `note` WHERE  `id` = 39 LIMIT 1 [ RunTime:0.000517s ]
[ sql ] [ SQL ] SHOW COLUMNS FROM `groups` [ RunTime:0.001152s ]
[ sql ] [ SQL ] SELECT * FROM `groups` [ RunTime:0.000325s ]
---------------------------------------------------------------
[ 2018-11-19T09:09:06+08:00 ] 74.120.168.12 74.120.168.12 GET /daily/admin/note/shownote/id/39.html
[ info ] qingrang.top/daily/admin/note/shownote/id/39.html [运行时间：0.056316s][吞吐率：17.76req/s] [内存消耗：1,980.93kb] [文件加载：55]
[ info ] [ LANG ] /var/www/html/daily/thinkphp/lang/zh-cn.php
[ info ] [ ROUTE ] array (
  'type' => 'module',
  'module' => 
  array (
    0 => 'admin',
    1 => 'note',
    2 => 'shownote',
  ),
)
[ info ] [ HEADER ] array (
  'host' => 'qingrang.top',
  'upgrade-insecure-requests' => '1',
  'user-agent' => 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/70.0.3538.102 Safari/537.36',
  'accept' => 'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8',
  'referer' => 'http://qingrang.top/daily/admin/note/editNote/id/39',
  'accept-encoding' => 'gzip, deflate',
  'accept-language' => 'zh-CN,zh;q=0.9,la;q=0.8,en;q=0.7,lb;q=0.6',
  'cookie' => 'Hm_lvt_1769181352e9adc950166aada465644e=1541082864,1541122974,1541171416,1542098176; PHPSESSID=cvrea98moc9nvt4dg4igb1ep86',
  'connection' => 'close',
)
[ info ] [ PARAM ] array (
  'id' => '39',
)
[ info ] [ SESSION ] INIT array (
  'id' => '',
  'var_session_id' => '',
  'prefix' => 'think',
  'type' => '',
  'auto_start' => true,
)
[ info ] [ RUN ] app\admin\controller\Note->showNote[ /var/www/html/daily/application/admin/controller/Note.php ]
[ info ] [ DB ] INIT mysql
[ info ] [ VIEW ] /var/www/html/daily/application/admin/view/note/shownote.html [ array (
  0 => 'note',
  1 => 'groups',
) ]
[ info ] [ LOG ] INIT File
[ sql ] [ DB ] CONNECT:[ UseTime:0.000568s ] mysql:host=74.120.168.12;dbname=diary;charset=utf8
[ sql ] [ SQL ] SHOW COLUMNS FROM `note` [ RunTime:0.001294s ]
[ sql ] [ SQL ] SELECT * FROM `note` WHERE  `id` = 39 LIMIT 1 [ RunTime:0.000423s ]
[ sql ] [ SQL ] SHOW COLUMNS FROM `groups` [ RunTime:0.000900s ]
[ sql ] [ SQL ] SELECT * FROM `groups` [ RunTime:0.000298s ]
---------------------------------------------------------------
[ 2018-11-19T09:11:03+08:00 ] 74.120.168.12 74.120.168.12 POST /daily/admin/note/updatenote/id/249.html
[ info ] qingrang.top/daily/admin/note/updatenote/id/249.html [运行时间：0.067391s][吞吐率：14.84req/s] [内存消耗：2,066.36kb] [文件加载：58]
[ info ] [ LANG ] /var/www/html/daily/thinkphp/lang/zh-cn.php
[ info ] [ ROUTE ] array (
  'type' => 'module',
  'module' => 
  array (
    0 => 'admin',
    1 => 'note',
    2 => 'updatenote',
  ),
)
[ info ] [ HEADER ] array (
  'host' => 'qingrang.top',
  'content-length' => '6652',
  'cache-control' => 'max-age=0',
  'origin' => 'http://qingrang.top',
  'upgrade-insecure-requests' => '1',
  'content-type' => 'application/x-www-form-urlencoded',
  'user-agent' => 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/70.0.3538.102 Safari/537.36',
  'accept' => 'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8',
  'referer' => 'http://qingrang.top/daily/admin/note/editnote/id/249.html',
  'accept-encoding' => 'gzip, deflate',
  'accept-language' => 'zh-CN,zh;q=0.9,la;q=0.8,en;q=0.7,lb;q=0.6',
  'cookie' => 'Hm_lvt_1769181352e9adc950166aada465644e=1541082864,1541122974,1541171416,1542098176; PHPSESSID=cvrea98moc9nvt4dg4igb1ep86',
  'connection' => 'close',
)
[ info ] [ PARAM ] array (
  'summary' => '向大佬学习，规范代码，码出高效， 码出质量。',
  'content' => '# 读《阿里巴巴 Java 开发手册》
[TOC]
## 命名
1. 各层命名规约：
	- Service/DAO 层方法命名规约
		- 获取单个对象的方法用 get 做前缀。
		- 获取多个对象的方法用 list 做前缀。
		- 获取统计值的方法用 count 做前缀。
		- 插入的方法用 insert 做前缀。
		- 删除的方法用 delete 做前缀。
		- 修改的方法用 update 做前缀。
	- 领域模型命名规约**(??? 这是什么)**
		- 数据对象： xxxDO， xxx 即为数据表名。
		- 数据传输对象： xxxDTO， xxx 为业务领域相关的名称。
		- 展示对象： xxxVO， xxx 一般为网页名称。
		- POJO 是 DO/DTO/BO/VO 的统称，禁止命名成 xxxPOJO。
1. 抽象类：Abstract 开头
1. 异常类：Exception 结尾
1. 测试类：Test 结尾
1. 接口类：I 开头
1. POJO 类中布尔类型的变量，都不要加 is
1. 包名
包名统一使用小写，点分隔符之间有且仅有一个自然语义的英语单词。包名统一使用单数形式，但是类名如果有复数含义，类名可以使用复数形式
1. 如果模块、 接口、类、方法使用了设计模式，在命名时体现出具体模式。
eg：`public class LoginProxy;`
1. 接口类中的方法和属性不要加任何修饰符号
1. 枚举类名带上 Enum 后缀，枚举成员名称需要全大写，单词间用下划线隔开


## MySql
1. 表达是与否概念的字段，必须使用 is_xxx 的方式命名，数据类型是 unsigned tinyint（1 表示是， 0 表示否）。
1. 表名、字段名必须使用小写字母或数字，下划线分隔，不使用复数名词。
1. 主键索引名为 `pk_字段名`； 唯一索引名为 `uk_字段名`； 普通索引名则为 `idx_字段名`。
1. 小数类型为 decimal，禁止使用 float 和 double。
1. 如果存储的字符串长度几乎相等，使用 char 定长字符串类型。
1. varchar 是可变长字符串，不预先分配存储空间，长度不要超过 5000，如果存储长度大于此值，定义字段类型为 text，独立出来一张表，用主键来对应，避免影响其它字段索引效率。
1. 表必备三字段： id(主键，unsigned bigint,自增), gmt_create(现在时表示主动创建,date_time), gmt_modified(过去分词表示被动更新,date_time)。
1. 表的命名最好是加上“业务名称_表的作用”。 eg: `force_project`，`trade_config`


',
  'groups' => 'Java',
  'showsel' => '1',
  'showse2' => '1',
  'id' => '249',
)
[ info ] [ SESSION ] INIT array (
  'id' => '',
  'var_session_id' => '',
  'prefix' => 'think',
  'type' => '',
  'auto_start' => true,
)
[ info ] [ RUN ] app\admin\controller\Note->updateNote[ /var/www/html/daily/application/admin/controller/Note.php ]
[ info ] [ DB ] INIT mysql
[ info ] [ CACHE ] INIT File
[ info ] [ LOG ] INIT File
[ sql ] [ DB ] CONNECT:[ UseTime:0.000583s ] mysql:host=74.120.168.12;dbname=diary;charset=utf8
[ sql ] [ SQL ] SHOW COLUMNS FROM `note` [ RunTime:0.001488s ]
[ sql ] [ SQL ] SELECT * FROM `note` WHERE  `id` = 249 LIMIT 1 [ RunTime:0.000563s ]
[ sql ] [ SQL ] SELECT `groups` FROM `note` WHERE  `id` = 249 LIMIT 1 [ RunTime:0.000386s ]
[ sql ] [ SQL ] SHOW COLUMNS FROM `groups` [ RunTime:0.001054s ]
[ sql ] [ SQL ] SELECT `parent_id` FROM `groups` WHERE  `groups` = 'Java' LIMIT 1 [ RunTime:0.000341s ]
[ sql ] [ SQL ] SELECT `groups` FROM `groups` WHERE  `id` = 2 LIMIT 1 [ RunTime:0.000344s ]
[ sql ] [ SQL ] UPDATE `note`  SET `id`=249,`p_id`=2,`title`='读《阿里巴巴 Java 开发手册》\r',`content`='# 读《阿里巴巴 Java 开发手册》\r\n[TOC]\r\n## 命名\r\n1. 各层命名规约：\r\n	- Service/DAO 层方法命名规约\r\n		- 获取单个对象的方法用 get 做前缀。\r\n		- 获取多个对象的方法用 list 做前缀。\r\n		- 获取统计值的方法用 count 做前缀。\r\n		- 插入的方法用 insert 做前缀。\r\n		- 删除的方法用 delete 做前缀。\r\n		- 修改的方法用 update 做前缀。\r\n	- 领域模型命名规约**(??? 这是什么)**\r\n		- 数据对象： xxxDO， xxx 即为数据表名。\r\n		- 数据传输对象： xxxDTO， xxx 为业务领域相关的名称。\r\n		- 展示对象： xxxVO， xxx 一般为网页名称。\r\n		- POJO 是 DO/DTO/BO/VO 的统称，禁止命名成 xxxPOJO。\r\n1. 抽象类：Abstract 开头\r\n1. 异常类：Exception 结尾\r\n1. 测试类：Test 结尾\r\n1. 接口类：I 开头\r\n1. POJO 类中布尔类型的变量，都不要加 is\r\n1. 包名\r\n包名统一使用小写，点分隔符之间有且仅有一个自然语义的英语单词。包名统一使用单数形式，但是类名如果有复数含义，类名可以使用复数形式\r\n1. 如果模块、 接口、类、方法使用了设计模式，在命名时体现出具体模式。\r\neg：`public class LoginProxy;`\r\n1. 接口类中的方法和属性不要加任何修饰符号\r\n1. 枚举类名带上 Enum 后缀，枚举成员名称需要全大写，单词间用下划线隔开\r\n\r\n\r\n## MySql\r\n1. 表达是与否概念的字段，必须使用 is_xxx 的方式命名，数据类型是 unsigned tinyint（1 表示是， 0 表示否）。\r\n1. 表名、字段名必须使用小写字母或数字，下划线分隔，不使用复数名词。\r\n1. 主键索引名为 `pk_字段名`； 唯一索引名为 `uk_字段名`； 普通索引名则为 `idx_字段名`。\r\n1. 小数类型为 decimal，禁止使用 float 和 double。\r\n1. 如果存储的字符串长度几乎相等，使用 char 定长字符串类型。\r\n1. varchar 是可变长字符串，不预先分配存储空间，长度不要超过 5000，如果存储长度大于此值，定义字段类型为 text，独立出来一张表，用主键来对应，避免影响其它字段索引效率。\r\n1. 表必备三字段： id(主键，unsigned bigint,自增), gmt_create(现在时表示主动创建,date_time), gmt_modified(过去分词表示被动更新,date_time)。\r\n1. 表的命名最好是加上“业务名称_表的作用”。 eg: `force_project`，`trade_config`\r\n\r\n\r\n',`groups`='Java',`is_show`=1,`publish`=1,`summary`='向大佬学习，规范代码，码出高效， 码出质量。'  WHERE  `id` = 249 [ RunTime:0.000637s ]
[ sql ] [ SQL ] SELECT COUNT(*) AS tp_count FROM `note` WHERE  `groups` = 'Java' LIMIT 1 [ RunTime:0.001585s ]
[ sql ] [ SQL ] UPDATE `groups`  SET `g_count`=21  WHERE  `groups` = 'Java' [ RunTime:0.000479s ]
[ sql ] [ SQL ] SELECT COUNT(*) AS tp_count FROM `note` WHERE  `groups` = 'Java' LIMIT 1 [ RunTime:0.001317s ]
[ sql ] [ SQL ] UPDATE `groups`  SET `g_count`=21  WHERE  `groups` = 'Java' [ RunTime:0.000337s ]
---------------------------------------------------------------
[ 2018-11-19T09:11:04+08:00 ] 74.120.168.12 74.120.168.12 GET /daily/admin/note/shownote/id/249.html
[ info ] qingrang.top/daily/admin/note/shownote/id/249.html [运行时间：0.048996s][吞吐率：20.41req/s] [内存消耗：1,982.65kb] [文件加载：55]
[ info ] [ LANG ] /var/www/html/daily/thinkphp/lang/zh-cn.php
[ info ] [ ROUTE ] array (
  'type' => 'module',
  'module' => 
  array (
    0 => 'admin',
    1 => 'note',
    2 => 'shownote',
  ),
)
[ info ] [ HEADER ] array (
  'host' => 'qingrang.top',
  'cache-control' => 'max-age=0',
  'upgrade-insecure-requests' => '1',
  'user-agent' => 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/70.0.3538.102 Safari/537.36',
  'accept' => 'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8',
  'referer' => 'http://qingrang.top/daily/admin/note/editnote/id/249.html',
  'accept-encoding' => 'gzip, deflate',
  'accept-language' => 'zh-CN,zh;q=0.9,la;q=0.8,en;q=0.7,lb;q=0.6',
  'cookie' => 'Hm_lvt_1769181352e9adc950166aada465644e=1541082864,1541122974,1541171416,1542098176; PHPSESSID=cvrea98moc9nvt4dg4igb1ep86',
  'connection' => 'close',
)
[ info ] [ PARAM ] array (
  'id' => '249',
)
[ info ] [ SESSION ] INIT array (
  'id' => '',
  'var_session_id' => '',
  'prefix' => 'think',
  'type' => '',
  'auto_start' => true,
)
[ info ] [ RUN ] app\admin\controller\Note->showNote[ /var/www/html/daily/application/admin/controller/Note.php ]
[ info ] [ DB ] INIT mysql
[ info ] [ VIEW ] /var/www/html/daily/application/admin/view/note/shownote.html [ array (
  0 => 'note',
  1 => 'groups',
) ]
[ info ] [ LOG ] INIT File
[ sql ] [ DB ] CONNECT:[ UseTime:0.000443s ] mysql:host=74.120.168.12;dbname=diary;charset=utf8
[ sql ] [ SQL ] SHOW COLUMNS FROM `note` [ RunTime:0.001255s ]
[ sql ] [ SQL ] SELECT * FROM `note` WHERE  `id` = 249 LIMIT 1 [ RunTime:0.000409s ]
[ sql ] [ SQL ] SHOW COLUMNS FROM `groups` [ RunTime:0.000816s ]
[ sql ] [ SQL ] SELECT * FROM `groups` [ RunTime:0.000326s ]
---------------------------------------------------------------
[ 2018-11-19T09:11:09+08:00 ] 74.120.168.12 74.120.168.12 GET /daily/admin/note
[ info ] qingrang.top/daily/admin/note [运行时间：0.075103s][吞吐率：13.32req/s] [内存消耗：2,330.30kb] [文件加载：56]
[ info ] [ LANG ] /var/www/html/daily/thinkphp/lang/zh-cn.php
[ info ] [ ROUTE ] array (
  'type' => 'module',
  'module' => 
  array (
    0 => 'admin',
    1 => 'note',
    2 => NULL,
  ),
)
[ info ] [ HEADER ] array (
  'host' => 'qingrang.top',
  'cache-control' => 'max-age=0',
  'upgrade-insecure-requests' => '1',
  'user-agent' => 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/70.0.3538.102 Safari/537.36',
  'accept' => 'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8',
  'referer' => 'http://qingrang.top/daily/admin/login/index.html',
  'accept-encoding' => 'gzip, deflate',
  'accept-language' => 'zh-CN,zh;q=0.9,la;q=0.8,en;q=0.7,lb;q=0.6',
  'cookie' => 'Hm_lvt_1769181352e9adc950166aada465644e=1541082864,1541122974,1541171416,1542098176; PHPSESSID=cvrea98moc9nvt4dg4igb1ep86',
  'connection' => 'close',
)
[ info ] [ PARAM ] array (
)
[ info ] [ SESSION ] INIT array (
  'id' => '',
  'var_session_id' => '',
  'prefix' => 'think',
  'type' => '',
  'auto_start' => true,
)
[ info ] [ RUN ] app\admin\controller\Note->notelst[ /var/www/html/daily/application/admin/controller/Note.php ]
[ info ] [ DB ] INIT mysql
[ info ] [ VIEW ] /var/www/html/daily/application/admin/view/note/notelst.html [ array (
  0 => 'stickList',
  1 => 'hide',
  2 => 'list',
  3 => 'list_new',
  4 => 'groups',
  5 => 'groups0',
  6 => 'groups1',
  7 => 'groups2',
  8 => 'count',
  9 => 'year',
  10 => 'default_num',
) ]
[ info ] [ LOG ] INIT File
[ sql ] [ DB ] CONNECT:[ UseTime:0.000562s ] mysql:host=74.120.168.12;dbname=diary;charset=utf8
[ sql ] [ SQL ] SHOW COLUMNS FROM `note` [ RunTime:0.001335s ]
[ sql ] [ SQL ] SELECT * FROM `note` WHERE  `groups` <> 'Personal'  AND `is_show` = 1 ORDER BY date desc,id desc [ RunTime:0.001747s ]
[ sql ] [ SQL ] SELECT * FROM `note` WHERE  `groups` <> 'Personal' ORDER BY id desc LIMIT 5 [ RunTime:0.000654s ]
[ sql ] [ SQL ] SHOW COLUMNS FROM `config` [ RunTime:0.001146s ]
[ sql ] [ SQL ] SELECT * FROM `config` WHERE  `name` = 'hide' LIMIT 1 [ RunTime:0.000312s ]
[ sql ] [ SQL ] SELECT * FROM `note` WHERE  `id` < 5 [ RunTime:0.000516s ]
[ sql ] [ SQL ] SHOW COLUMNS FROM `groups` [ RunTime:0.000891s ]
[ sql ] [ SQL ] SELECT * FROM `groups` [ RunTime:0.000321s ]
[ sql ] [ SQL ] SELECT * FROM `groups` WHERE  `parent_id` = 0  AND `id` <> 2 ORDER BY `groups` [ RunTime:0.000478s ]
[ sql ] [ SQL ] SELECT `groups` FROM `groups` WHERE  `parent_id` = 1 [ RunTime:0.000411s ]
[ sql ] [ SQL ] SELECT * FROM `groups` WHERE  `parent_id` = 2 ORDER BY `groups` [ RunTime:0.000516s ]
[ sql ] [ SQL ] SELECT COUNT(*) AS tp_count FROM `note` WHERE  `groups` = 'Default' LIMIT 1 [ RunTime:0.001530s ]
[ sql ] [ SQL ] SELECT COUNT(*) AS tp_count FROM `note` LIMIT 1 [ RunTime:0.000309s ]
[ sql ] [ SQL ] SHOW COLUMNS FROM `yearlist` [ RunTime:0.001521s ]
[ sql ] [ SQL ] SELECT DISTINCT  `year` FROM `yearlist` ORDER BY year desc [ RunTime:0.000856s ]
---------------------------------------------------------------
[ 2018-11-19T09:12:56+08:00 ] 74.120.168.12 74.120.168.12 GET /daily/admin/note/shownote/id/249.html
[ info ] qingrang.top/daily/admin/note/shownote/id/249.html [运行时间：0.061430s][吞吐率：16.28req/s] [内存消耗：1,982.52kb] [文件加载：55]
[ info ] [ LANG ] /var/www/html/daily/thinkphp/lang/zh-cn.php
[ info ] [ ROUTE ] array (
  'type' => 'module',
  'module' => 
  array (
    0 => 'admin',
    1 => 'note',
    2 => 'shownote',
  ),
)
[ info ] [ HEADER ] array (
  'host' => 'qingrang.top',
  'upgrade-insecure-requests' => '1',
  'user-agent' => 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/70.0.3538.102 Safari/537.36',
  'accept' => 'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8',
  'referer' => 'http://qingrang.top/daily/admin/note',
  'accept-encoding' => 'gzip, deflate',
  'accept-language' => 'zh-CN,zh;q=0.9,la;q=0.8,en;q=0.7,lb;q=0.6',
  'cookie' => 'Hm_lvt_1769181352e9adc950166aada465644e=1541082864,1541122974,1541171416,1542098176; PHPSESSID=cvrea98moc9nvt4dg4igb1ep86',
  'connection' => 'close',
)
[ info ] [ PARAM ] array (
  'id' => '249',
)
[ info ] [ SESSION ] INIT array (
  'id' => '',
  'var_session_id' => '',
  'prefix' => 'think',
  'type' => '',
  'auto_start' => true,
)
[ info ] [ RUN ] app\admin\controller\Note->showNote[ /var/www/html/daily/application/admin/controller/Note.php ]
[ info ] [ DB ] INIT mysql
[ info ] [ VIEW ] /var/www/html/daily/application/admin/view/note/shownote.html [ array (
  0 => 'note',
  1 => 'groups',
) ]
[ info ] [ LOG ] INIT File
[ sql ] [ DB ] CONNECT:[ UseTime:0.000725s ] mysql:host=74.120.168.12;dbname=diary;charset=utf8
[ sql ] [ SQL ] SHOW COLUMNS FROM `note` [ RunTime:0.001786s ]
[ sql ] [ SQL ] SELECT * FROM `note` WHERE  `id` = 249 LIMIT 1 [ RunTime:0.000494s ]
[ sql ] [ SQL ] SHOW COLUMNS FROM `groups` [ RunTime:0.000916s ]
[ sql ] [ SQL ] SELECT * FROM `groups` [ RunTime:0.000331s ]
---------------------------------------------------------------
[ 2018-11-19T09:16:41+08:00 ] 74.120.168.12 74.120.168.12 GET /daily/admin/note
[ info ] qingrang.top/daily/admin/note [运行时间：0.073248s][吞吐率：13.65req/s] [内存消耗：2,345.22kb] [文件加载：56]
[ info ] [ LANG ] /var/www/html/daily/thinkphp/lang/zh-cn.php
[ info ] [ ROUTE ] array (
  'type' => 'module',
  'module' => 
  array (
    0 => 'admin',
    1 => 'note',
    2 => NULL,
  ),
)
[ info ] [ HEADER ] array (
  'host' => 'qingrang.top',
  'cache-control' => 'max-age=0',
  'upgrade-insecure-requests' => '1',
  'user-agent' => 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/70.0.3538.102 Safari/537.36',
  'accept' => 'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8',
  'referer' => 'http://qingrang.top/daily/admin/login/index.html',
  'accept-encoding' => 'gzip, deflate',
  'accept-language' => 'zh-CN,zh;q=0.9,la;q=0.8,en;q=0.7,lb;q=0.6',
  'cookie' => 'Hm_lvt_1769181352e9adc950166aada465644e=1541082864,1541122974,1541171416,1542098176; PHPSESSID=cvrea98moc9nvt4dg4igb1ep86',
  'connection' => 'close',
)
[ info ] [ PARAM ] array (
)
[ info ] [ SESSION ] INIT array (
  'id' => '',
  'var_session_id' => '',
  'prefix' => 'think',
  'type' => '',
  'auto_start' => true,
)
[ info ] [ RUN ] app\admin\controller\Note->notelst[ /var/www/html/daily/application/admin/controller/Note.php ]
[ info ] [ DB ] INIT mysql
[ info ] [ VIEW ] /var/www/html/daily/application/admin/view/note/notelst.html [ array (
  0 => 'stickList',
  1 => 'hide',
  2 => 'list',
  3 => 'list_new',
  4 => 'groups',
  5 => 'groups0',
  6 => 'groups1',
  7 => 'groups2',
  8 => 'count',
  9 => 'year',
  10 => 'default_num',
) ]
[ info ] [ LOG ] INIT File
[ sql ] [ DB ] CONNECT:[ UseTime:0.000568s ] mysql:host=74.120.168.12;dbname=diary;charset=utf8
[ sql ] [ SQL ] SHOW COLUMNS FROM `note` [ RunTime:0.001516s ]
[ sql ] [ SQL ] SELECT * FROM `note` WHERE  `groups` <> 'Personal'  AND `is_show` = 1 ORDER BY date desc,id desc [ RunTime:0.002107s ]
[ sql ] [ SQL ] SELECT * FROM `note` WHERE  `groups` <> 'Personal'  AND `is_show` <> 1 ORDER BY gmt_modified desc LIMIT 5 [ RunTime:0.002501s ]
[ sql ] [ SQL ] SHOW COLUMNS FROM `config` [ RunTime:0.000999s ]
[ sql ] [ SQL ] SELECT * FROM `config` WHERE  `name` = 'hide' LIMIT 1 [ RunTime:0.000346s ]
[ sql ] [ SQL ] SELECT * FROM `note` WHERE  `id` < 5 [ RunTime:0.000493s ]
[ sql ] [ SQL ] SHOW COLUMNS FROM `groups` [ RunTime:0.000815s ]
[ sql ] [ SQL ] SELECT * FROM `groups` [ RunTime:0.000287s ]
[ sql ] [ SQL ] SELECT * FROM `groups` WHERE  `parent_id` = 0  AND `id` <> 2 ORDER BY `groups` [ RunTime:0.000409s ]
[ sql ] [ SQL ] SELECT `groups` FROM `groups` WHERE  `parent_id` = 1 [ RunTime:0.000296s ]
[ sql ] [ SQL ] SELECT * FROM `groups` WHERE  `parent_id` = 2 ORDER BY `groups` [ RunTime:0.000431s ]
[ sql ] [ SQL ] SELECT COUNT(*) AS tp_count FROM `note` WHERE  `groups` = 'Default' LIMIT 1 [ RunTime:0.001331s ]
[ sql ] [ SQL ] SELECT COUNT(*) AS tp_count FROM `note` LIMIT 1 [ RunTime:0.000237s ]
[ sql ] [ SQL ] SHOW COLUMNS FROM `yearlist` [ RunTime:0.001092s ]
[ sql ] [ SQL ] SELECT DISTINCT  `year` FROM `yearlist` ORDER BY year desc [ RunTime:0.000738s ]
---------------------------------------------------------------
[ 2018-11-19T09:18:33+08:00 ] 74.120.168.12 74.120.168.12 GET /daily/admin/note
[ info ] qingrang.top/daily/admin/note [运行时间：0.125693s][吞吐率：7.96req/s] [内存消耗：2,521.30kb] [文件加载：58]
[ info ] [ LANG ] /var/www/html/daily/thinkphp/lang/zh-cn.php
[ info ] [ ROUTE ] array (
  'type' => 'module',
  'module' => 
  array (
    0 => 'admin',
    1 => 'note',
    2 => NULL,
  ),
)
[ info ] [ HEADER ] array (
  'host' => 'qingrang.top',
  'cache-control' => 'max-age=0',
  'upgrade-insecure-requests' => '1',
  'user-agent' => 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/70.0.3538.102 Safari/537.36',
  'accept' => 'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8',
  'referer' => 'http://qingrang.top/daily/admin/login/index.html',
  'accept-encoding' => 'gzip, deflate',
  'accept-language' => 'zh-CN,zh;q=0.9,la;q=0.8,en;q=0.7,lb;q=0.6',
  'cookie' => 'Hm_lvt_1769181352e9adc950166aada465644e=1541082864,1541122974,1541171416,1542098176; PHPSESSID=cvrea98moc9nvt4dg4igb1ep86',
  'connection' => 'close',
)
[ info ] [ PARAM ] array (
)
[ info ] [ SESSION ] INIT array (
  'id' => '',
  'var_session_id' => '',
  'prefix' => 'think',
  'type' => '',
  'auto_start' => true,
)
[ info ] [ RUN ] app\admin\controller\Note->notelst[ /var/www/html/daily/application/admin/controller/Note.php ]
[ info ] [ DB ] INIT mysql
[ info ] [ VIEW ] /var/www/html/daily/application/admin/view/note/notelst.html [ array (
  0 => 'stickList',
  1 => 'hide',
  2 => 'list',
  3 => 'list_new',
  4 => 'groups',
  5 => 'groups0',
  6 => 'groups1',
  7 => 'groups2',
  8 => 'count',
  9 => 'year',
  10 => 'default_num',
) ]
[ info ] [ LOG ] INIT File
[ sql ] [ DB ] CONNECT:[ UseTime:0.000969s ] mysql:host=74.120.168.12;dbname=diary;charset=utf8
[ sql ] [ SQL ] SHOW COLUMNS FROM `note` [ RunTime:0.002238s ]
[ sql ] [ SQL ] SELECT * FROM `note` WHERE  `groups` <> 'Personal'  AND `is_show` = 1 ORDER BY date desc,id desc [ RunTime:0.003744s ]
[ sql ] [ SQL ] SELECT * FROM `note` WHERE  `groups` <> 'Personal'  AND `is_show` <> 1 ORDER BY gmt_modified desc LIMIT 5 [ RunTime:0.004573s ]
[ sql ] [ SQL ] SHOW COLUMNS FROM `config` [ RunTime:0.001683s ]
[ sql ] [ SQL ] SELECT * FROM `config` WHERE  `name` = 'hide' LIMIT 1 [ RunTime:0.000500s ]
[ sql ] [ SQL ] SELECT * FROM `note` WHERE  `id` < 5 [ RunTime:0.000835s ]
[ sql ] [ SQL ] SHOW COLUMNS FROM `groups` [ RunTime:0.001569s ]
[ sql ] [ SQL ] SELECT * FROM `groups` [ RunTime:0.000491s ]
[ sql ] [ SQL ] SELECT * FROM `groups` WHERE  `parent_id` = 0  AND `id` <> 2 ORDER BY `groups` [ RunTime:0.000677s ]
[ sql ] [ SQL ] SELECT `groups` FROM `groups` WHERE  `parent_id` = 1 [ RunTime:0.000443s ]
[ sql ] [ SQL ] SELECT * FROM `groups` WHERE  `parent_id` = 2 ORDER BY `groups` [ RunTime:0.000609s ]
[ sql ] [ SQL ] SELECT COUNT(*) AS tp_count FROM `note` WHERE  `groups` = 'Default' LIMIT 1 [ RunTime:0.002391s ]
[ sql ] [ SQL ] SELECT COUNT(*) AS tp_count FROM `note` LIMIT 1 [ RunTime:0.000377s ]
[ sql ] [ SQL ] SHOW COLUMNS FROM `yearlist` [ RunTime:0.001782s ]
[ sql ] [ SQL ] SELECT DISTINCT  `year` FROM `yearlist` ORDER BY year desc [ RunTime:0.001071s ]
---------------------------------------------------------------
[ 2018-11-19T09:18:41+08:00 ] 74.120.168.12 74.120.168.12 GET /daily/admin/note
[ info ] qingrang.top/daily/admin/note [运行时间：0.075898s][吞吐率：13.18req/s] [内存消耗：2,344.41kb] [文件加载：56]
[ info ] [ LANG ] /var/www/html/daily/thinkphp/lang/zh-cn.php
[ info ] [ ROUTE ] array (
  'type' => 'module',
  'module' => 
  array (
    0 => 'admin',
    1 => 'note',
    2 => NULL,
  ),
)
[ info ] [ HEADER ] array (
  'host' => 'qingrang.top',
  'upgrade-insecure-requests' => '1',
  'user-agent' => 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/70.0.3538.102 Safari/537.36',
  'accept' => 'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8',
  'accept-encoding' => 'gzip, deflate',
  'accept-language' => 'zh-CN,zh;q=0.9,la;q=0.8,en;q=0.7,lb;q=0.6',
  'cookie' => 'Hm_lvt_1769181352e9adc950166aada465644e=1541082864,1541122974,1541171416,1542098176; PHPSESSID=cvrea98moc9nvt4dg4igb1ep86',
  'connection' => 'close',
)
[ info ] [ PARAM ] array (
)
[ info ] [ SESSION ] INIT array (
  'id' => '',
  'var_session_id' => '',
  'prefix' => 'think',
  'type' => '',
  'auto_start' => true,
)
[ info ] [ RUN ] app\admin\controller\Note->notelst[ /var/www/html/daily/application/admin/controller/Note.php ]
[ info ] [ DB ] INIT mysql
[ info ] [ VIEW ] /var/www/html/daily/application/admin/view/note/notelst.html [ array (
  0 => 'stickList',
  1 => 'hide',
  2 => 'list',
  3 => 'list_new',
  4 => 'groups',
  5 => 'groups0',
  6 => 'groups1',
  7 => 'groups2',
  8 => 'count',
  9 => 'year',
  10 => 'default_num',
) ]
[ info ] [ LOG ] INIT File
[ sql ] [ DB ] CONNECT:[ UseTime:0.000527s ] mysql:host=74.120.168.12;dbname=diary;charset=utf8
[ sql ] [ SQL ] SHOW COLUMNS FROM `note` [ RunTime:0.001342s ]
[ sql ] [ SQL ] SELECT * FROM `note` WHERE  `groups` <> 'Personal'  AND `is_show` = 1 ORDER BY date desc,id desc [ RunTime:0.001985s ]
[ sql ] [ SQL ] SELECT * FROM `note` WHERE  `groups` <> 'Personal'  AND `is_show` <> 1 ORDER BY gmt_modified desc LIMIT 5 [ RunTime:0.002459s ]
[ sql ] [ SQL ] SHOW COLUMNS FROM `config` [ RunTime:0.001159s ]
[ sql ] [ SQL ] SELECT * FROM `config` WHERE  `name` = 'hide' LIMIT 1 [ RunTime:0.000348s ]
[ sql ] [ SQL ] SELECT * FROM `note` WHERE  `id` < 5 [ RunTime:0.000530s ]
[ sql ] [ SQL ] SHOW COLUMNS FROM `groups` [ RunTime:0.001002s ]
[ sql ] [ SQL ] SELECT * FROM `groups` [ RunTime:0.000300s ]
[ sql ] [ SQL ] SELECT * FROM `groups` WHERE  `parent_id` = 0  AND `id` <> 2 ORDER BY `groups` [ RunTime:0.000543s ]
[ sql ] [ SQL ] SELECT `groups` FROM `groups` WHERE  `parent_id` = 1 [ RunTime:0.000418s ]
[ sql ] [ SQL ] SELECT * FROM `groups` WHERE  `parent_id` = 2 ORDER BY `groups` [ RunTime:0.000455s ]
[ sql ] [ SQL ] SELECT COUNT(*) AS tp_count FROM `note` WHERE  `groups` = 'Default' LIMIT 1 [ RunTime:0.001364s ]
[ sql ] [ SQL ] SELECT COUNT(*) AS tp_count FROM `note` LIMIT 1 [ RunTime:0.000256s ]
[ sql ] [ SQL ] SHOW COLUMNS FROM `yearlist` [ RunTime:0.001100s ]
[ sql ] [ SQL ] SELECT DISTINCT  `year` FROM `yearlist` ORDER BY year desc [ RunTime:0.000891s ]
---------------------------------------------------------------
[ 2018-11-19T09:19:12+08:00 ] 74.120.168.12 74.120.168.12 GET /daily/admin/note
[ info ] qingrang.top/daily/admin/note [运行时间：0.074910s][吞吐率：13.35req/s] [内存消耗：2,344.76kb] [文件加载：56]
[ info ] [ LANG ] /var/www/html/daily/thinkphp/lang/zh-cn.php
[ info ] [ ROUTE ] array (
  'type' => 'module',
  'module' => 
  array (
    0 => 'admin',
    1 => 'note',
    2 => NULL,
  ),
)
[ info ] [ HEADER ] array (
  'host' => 'qingrang.top',
  'cache-control' => 'max-age=0',
  'upgrade-insecure-requests' => '1',
  'user-agent' => 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/70.0.3538.102 Safari/537.36',
  'accept' => 'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8',
  'accept-encoding' => 'gzip, deflate',
  'accept-language' => 'zh-CN,zh;q=0.9,la;q=0.8,en;q=0.7,lb;q=0.6',
  'cookie' => 'Hm_lvt_1769181352e9adc950166aada465644e=1541082864,1541122974,1541171416,1542098176; PHPSESSID=cvrea98moc9nvt4dg4igb1ep86',
  'connection' => 'close',
)
[ info ] [ PARAM ] array (
)
[ info ] [ SESSION ] INIT array (
  'id' => '',
  'var_session_id' => '',
  'prefix' => 'think',
  'type' => '',
  'auto_start' => true,
)
[ info ] [ RUN ] app\admin\controller\Note->notelst[ /var/www/html/daily/application/admin/controller/Note.php ]
[ info ] [ DB ] INIT mysql
[ info ] [ VIEW ] /var/www/html/daily/application/admin/view/note/notelst.html [ array (
  0 => 'stickList',
  1 => 'hide',
  2 => 'list',
  3 => 'list_new',
  4 => 'groups',
  5 => 'groups0',
  6 => 'groups1',
  7 => 'groups2',
  8 => 'count',
  9 => 'year',
  10 => 'default_num',
) ]
[ info ] [ LOG ] INIT File
[ sql ] [ DB ] CONNECT:[ UseTime:0.000522s ] mysql:host=74.120.168.12;dbname=diary;charset=utf8
[ sql ] [ SQL ] SHOW COLUMNS FROM `note` [ RunTime:0.001326s ]
[ sql ] [ SQL ] SELECT * FROM `note` WHERE  `groups` <> 'Personal'  AND `is_show` = 1 ORDER BY date desc,id desc [ RunTime:0.001752s ]
[ sql ] [ SQL ] SELECT * FROM `note` WHERE  `groups` <> 'Personal'  AND `is_show` <> 1 ORDER BY gmt_modified desc LIMIT 5 [ RunTime:0.002443s ]
[ sql ] [ SQL ] SHOW COLUMNS FROM `config` [ RunTime:0.001005s ]
[ sql ] [ SQL ] SELECT * FROM `config` WHERE  `name` = 'hide' LIMIT 1 [ RunTime:0.000318s ]
[ sql ] [ SQL ] SELECT * FROM `note` WHERE  `id` < 5 [ RunTime:0.000655s ]
[ sql ] [ SQL ] SHOW COLUMNS FROM `groups` [ RunTime:0.000966s ]
[ sql ] [ SQL ] SELECT * FROM `groups` [ RunTime:0.000320s ]
[ sql ] [ SQL ] SELECT * FROM `groups` WHERE  `parent_id` = 0  AND `id` <> 2 ORDER BY `groups` [ RunTime:0.000434s ]
[ sql ] [ SQL ] SELECT `groups` FROM `groups` WHERE  `parent_id` = 1 [ RunTime:0.000357s ]
[ sql ] [ SQL ] SELECT * FROM `groups` WHERE  `parent_id` = 2 ORDER BY `groups` [ RunTime:0.000362s ]
[ sql ] [ SQL ] SELECT COUNT(*) AS tp_count FROM `note` WHERE  `groups` = 'Default' LIMIT 1 [ RunTime:0.001302s ]
[ sql ] [ SQL ] SELECT COUNT(*) AS tp_count FROM `note` LIMIT 1 [ RunTime:0.000237s ]
[ sql ] [ SQL ] SHOW COLUMNS FROM `yearlist` [ RunTime:0.001152s ]
[ sql ] [ SQL ] SELECT DISTINCT  `year` FROM `yearlist` ORDER BY year desc [ RunTime:0.000658s ]
---------------------------------------------------------------
[ 2018-11-19T09:19:16+08:00 ] 74.120.168.12 74.120.168.12 GET /daily/admin/note
[ info ] qingrang.top/daily/admin/note [运行时间：0.098283s][吞吐率：10.17req/s] [内存消耗：2,344.76kb] [文件加载：56]
[ info ] [ LANG ] /var/www/html/daily/thinkphp/lang/zh-cn.php
[ info ] [ ROUTE ] array (
  'type' => 'module',
  'module' => 
  array (
    0 => 'admin',
    1 => 'note',
    2 => NULL,
  ),
)
[ info ] [ HEADER ] array (
  'host' => 'qingrang.top',
  'cache-control' => 'max-age=0',
  'upgrade-insecure-requests' => '1',
  'user-agent' => 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/70.0.3538.102 Safari/537.36',
  'accept' => 'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8',
  'accept-encoding' => 'gzip, deflate',
  'accept-language' => 'zh-CN,zh;q=0.9,la;q=0.8,en;q=0.7,lb;q=0.6',
  'cookie' => 'Hm_lvt_1769181352e9adc950166aada465644e=1541082864,1541122974,1541171416,1542098176; PHPSESSID=cvrea98moc9nvt4dg4igb1ep86',
  'connection' => 'close',
)
[ info ] [ PARAM ] array (
)
[ info ] [ SESSION ] INIT array (
  'id' => '',
  'var_session_id' => '',
  'prefix' => 'think',
  'type' => '',
  'auto_start' => true,
)
[ info ] [ RUN ] app\admin\controller\Note->notelst[ /var/www/html/daily/application/admin/controller/Note.php ]
[ info ] [ DB ] INIT mysql
[ info ] [ VIEW ] /var/www/html/daily/application/admin/view/note/notelst.html [ array (
  0 => 'stickList',
  1 => 'hide',
  2 => 'list',
  3 => 'list_new',
  4 => 'groups',
  5 => 'groups0',
  6 => 'groups1',
  7 => 'groups2',
  8 => 'count',
  9 => 'year',
  10 => 'default_num',
) ]
[ info ] [ LOG ] INIT File
[ sql ] [ DB ] CONNECT:[ UseTime:0.000613s ] mysql:host=74.120.168.12;dbname=diary;charset=utf8
[ sql ] [ SQL ] SHOW COLUMNS FROM `note` [ RunTime:0.001619s ]
[ sql ] [ SQL ] SELECT * FROM `note` WHERE  `groups` <> 'Personal'  AND `is_show` = 1 ORDER BY date desc,id desc [ RunTime:0.001813s ]
[ sql ] [ SQL ] SELECT * FROM `note` WHERE  `groups` <> 'Personal'  AND `is_show` <> 1 ORDER BY gmt_modified desc LIMIT 5 [ RunTime:0.002589s ]
[ sql ] [ SQL ] SHOW COLUMNS FROM `config` [ RunTime:0.001211s ]
[ sql ] [ SQL ] SELECT * FROM `config` WHERE  `name` = 'hide' LIMIT 1 [ RunTime:0.000462s ]
[ sql ] [ SQL ] SELECT * FROM `note` WHERE  `id` < 5 [ RunTime:0.000525s ]
[ sql ] [ SQL ] SHOW COLUMNS FROM `groups` [ RunTime:0.001265s ]
[ sql ] [ SQL ] SELECT * FROM `groups` [ RunTime:0.000397s ]
[ sql ] [ SQL ] SELECT * FROM `groups` WHERE  `parent_id` = 0  AND `id` <> 2 ORDER BY `groups` [ RunTime:0.000501s ]
[ sql ] [ SQL ] SELECT `groups` FROM `groups` WHERE  `parent_id` = 1 [ RunTime:0.000318s ]
[ sql ] [ SQL ] SELECT * FROM `groups` WHERE  `parent_id` = 2 ORDER BY `groups` [ RunTime:0.000426s ]
[ sql ] [ SQL ] SELECT COUNT(*) AS tp_count FROM `note` WHERE  `groups` = 'Default' LIMIT 1 [ RunTime:0.001399s ]
[ sql ] [ SQL ] SELECT COUNT(*) AS tp_count FROM `note` LIMIT 1 [ RunTime:0.000307s ]
[ sql ] [ SQL ] SHOW COLUMNS FROM `yearlist` [ RunTime:0.001224s ]
[ sql ] [ SQL ] SELECT DISTINCT  `year` FROM `yearlist` ORDER BY year desc [ RunTime:0.000690s ]
---------------------------------------------------------------
[ 2018-11-19T09:19:30+08:00 ] 74.120.168.12 74.120.168.12 GET /daily/admin/note
[ info ] qingrang.top/daily/admin/note [运行时间：0.077169s][吞吐率：12.96req/s] [内存消耗：2,521.52kb] [文件加载：58]
[ info ] [ LANG ] /var/www/html/daily/thinkphp/lang/zh-cn.php
[ info ] [ ROUTE ] array (
  'type' => 'module',
  'module' => 
  array (
    0 => 'admin',
    1 => 'note',
    2 => NULL,
  ),
)
[ info ] [ HEADER ] array (
  'host' => 'qingrang.top',
  'cache-control' => 'max-age=0',
  'upgrade-insecure-requests' => '1',
  'user-agent' => 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/70.0.3538.102 Safari/537.36',
  'accept' => 'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8',
  'accept-encoding' => 'gzip, deflate',
  'accept-language' => 'zh-CN,zh;q=0.9,la;q=0.8,en;q=0.7,lb;q=0.6',
  'cookie' => 'Hm_lvt_1769181352e9adc950166aada465644e=1541082864,1541122974,1541171416,1542098176; PHPSESSID=cvrea98moc9nvt4dg4igb1ep86',
  'connection' => 'close',
)
[ info ] [ PARAM ] array (
)
[ info ] [ SESSION ] INIT array (
  'id' => '',
  'var_session_id' => '',
  'prefix' => 'think',
  'type' => '',
  'auto_start' => true,
)
[ info ] [ RUN ] app\admin\controller\Note->notelst[ /var/www/html/daily/application/admin/controller/Note.php ]
[ info ] [ DB ] INIT mysql
[ info ] [ VIEW ] /var/www/html/daily/application/admin/view/note/notelst.html [ array (
  0 => 'stickList',
  1 => 'hide',
  2 => 'list',
  3 => 'list_new',
  4 => 'groups',
  5 => 'groups0',
  6 => 'groups1',
  7 => 'groups2',
  8 => 'count',
  9 => 'year',
  10 => 'default_num',
) ]
[ info ] [ LOG ] INIT File
[ sql ] [ DB ] CONNECT:[ UseTime:0.000559s ] mysql:host=74.120.168.12;dbname=diary;charset=utf8
[ sql ] [ SQL ] SHOW COLUMNS FROM `note` [ RunTime:0.001286s ]
[ sql ] [ SQL ] SELECT * FROM `note` WHERE  `groups` <> 'Personal'  AND `is_show` = 1 ORDER BY date desc,id desc [ RunTime:0.002069s ]
[ sql ] [ SQL ] SELECT * FROM `note` WHERE  `groups` <> 'Personal'  AND `is_show` <> 1 ORDER BY gmt_modified desc LIMIT 5 [ RunTime:0.002417s ]
[ sql ] [ SQL ] SHOW COLUMNS FROM `config` [ RunTime:0.000973s ]
[ sql ] [ SQL ] SELECT * FROM `config` WHERE  `name` = 'hide' LIMIT 1 [ RunTime:0.000402s ]
[ sql ] [ SQL ] SELECT * FROM `note` WHERE  `id` < 5 [ RunTime:0.000481s ]
[ sql ] [ SQL ] SHOW COLUMNS FROM `groups` [ RunTime:0.001055s ]
[ sql ] [ SQL ] SELECT * FROM `groups` [ RunTime:0.000291s ]
[ sql ] [ SQL ] SELECT * FROM `groups` WHERE  `parent_id` = 0  AND `id` <> 2 ORDER BY `groups` [ RunTime:0.000443s ]
[ sql ] [ SQL ] SELECT `groups` FROM `groups` WHERE  `parent_id` = 1 [ RunTime:0.000319s ]
[ sql ] [ SQL ] SELECT * FROM `groups` WHERE  `parent_id` = 2 ORDER BY `groups` [ RunTime:0.000390s ]
[ sql ] [ SQL ] SELECT COUNT(*) AS tp_count FROM `note` WHERE  `groups` = 'Default' LIMIT 1 [ RunTime:0.001242s ]
[ sql ] [ SQL ] SELECT COUNT(*) AS tp_count FROM `note` LIMIT 1 [ RunTime:0.000249s ]
[ sql ] [ SQL ] SHOW COLUMNS FROM `yearlist` [ RunTime:0.001116s ]
[ sql ] [ SQL ] SELECT DISTINCT  `year` FROM `yearlist` ORDER BY year desc [ RunTime:0.000696s ]
---------------------------------------------------------------
[ 2018-11-19T09:20:34+08:00 ] 74.120.168.12 74.120.168.12 GET /daily/admin/note/editnote/id/249.html
[ info ] qingrang.top/daily/admin/note/editnote/id/249.html [运行时间：0.055904s][吞吐率：17.89req/s] [内存消耗：2,031.31kb] [文件加载：56]
[ info ] [ LANG ] /var/www/html/daily/thinkphp/lang/zh-cn.php
[ info ] [ ROUTE ] array (
  'type' => 'module',
  'module' => 
  array (
    0 => 'admin',
    1 => 'note',
    2 => 'editnote',
  ),
)
[ info ] [ HEADER ] array (
  'host' => 'qingrang.top',
  'upgrade-insecure-requests' => '1',
  'user-agent' => 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/70.0.3538.102 Safari/537.36',
  'accept' => 'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8',
  'referer' => 'http://qingrang.top/daily/admin/note',
  'accept-encoding' => 'gzip, deflate',
  'accept-language' => 'zh-CN,zh;q=0.9,la;q=0.8,en;q=0.7,lb;q=0.6',
  'cookie' => 'Hm_lvt_1769181352e9adc950166aada465644e=1541082864,1541122974,1541171416,1542098176; PHPSESSID=cvrea98moc9nvt4dg4igb1ep86',
  'connection' => 'close',
)
[ info ] [ PARAM ] array (
  'id' => '249',
)
[ info ] [ SESSION ] INIT array (
  'id' => '',
  'var_session_id' => '',
  'prefix' => 'think',
  'type' => '',
  'auto_start' => true,
)
[ info ] [ RUN ] app\admin\controller\Note->editNote[ /var/www/html/daily/application/admin/controller/Note.php ]
[ info ] [ DB ] INIT mysql
[ info ] [ VIEW ] /var/www/html/daily/application/admin/view/note/editnote.html [ array (
  0 => 'note',
  1 => 'groups',
) ]
[ info ] [ LOG ] INIT File
[ sql ] [ DB ] CONNECT:[ UseTime:0.000576s ] mysql:host=74.120.168.12;dbname=diary;charset=utf8
[ sql ] [ SQL ] SHOW COLUMNS FROM `note` [ RunTime:0.001556s ]
[ sql ] [ SQL ] SELECT * FROM `note` WHERE  `id` = 249 LIMIT 1 [ RunTime:0.000438s ]
[ sql ] [ SQL ] SHOW COLUMNS FROM `groups` [ RunTime:0.000965s ]
[ sql ] [ SQL ] SELECT * FROM `groups` [ RunTime:0.000347s ]
---------------------------------------------------------------
[ 2018-11-19T09:29:51+08:00 ] 74.120.168.12 74.120.168.12 POST /daily/admin/note/updatenote/id/249.html
[ info ] qingrang.top/daily/admin/note/updatenote/id/249.html [运行时间：0.106476s][吞吐率：9.39req/s] [内存消耗：2,076.96kb] [文件加载：58]
[ info ] [ LANG ] /var/www/html/daily/thinkphp/lang/zh-cn.php
[ info ] [ ROUTE ] array (
  'type' => 'module',
  'module' => 
  array (
    0 => 'admin',
    1 => 'note',
    2 => 'updatenote',
  ),
)
[ info ] [ HEADER ] array (
  'host' => 'qingrang.top',
  'content-length' => '10133',
  'cache-control' => 'max-age=0',
  'origin' => 'http://qingrang.top',
  'upgrade-insecure-requests' => '1',
  'content-type' => 'application/x-www-form-urlencoded',
  'user-agent' => 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/70.0.3538.102 Safari/537.36',
  'accept' => 'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8',
  'referer' => 'http://qingrang.top/daily/admin/note/editnote/id/249.html',
  'accept-encoding' => 'gzip, deflate',
  'accept-language' => 'zh-CN,zh;q=0.9,la;q=0.8,en;q=0.7,lb;q=0.6',
  'cookie' => 'Hm_lvt_1769181352e9adc950166aada465644e=1541082864,1541122974,1541171416,1542098176; PHPSESSID=cvrea98moc9nvt4dg4igb1ep86',
  'connection' => 'close',
)
[ info ] [ PARAM ] array (
  'summary' => '向大佬学习，规范代码，码出高效， 码出质量。',
  'content' => '# 读《阿里巴巴 Java 开发手册》
[TOC]
## 命名
1. 各层命名规约：
	- Service/DAO 层方法命名规约
		- 获取单个对象的方法用 get 做前缀。
		- 获取多个对象的方法用 list 做前缀。
		- 获取统计值的方法用 count 做前缀。
		- 插入的方法用 insert 做前缀。
		- 删除的方法用 delete 做前缀。
		- 修改的方法用 update 做前缀。
	- 领域模型命名规约**(??? 这是什么)**
		- 数据对象： xxxDO， xxx 即为数据表名。
		- 数据传输对象： xxxDTO， xxx 为业务领域相关的名称。
		- 展示对象： xxxVO， xxx 一般为网页名称。
		- POJO 是 DO/DTO/BO/VO 的统称，禁止命名成 xxxPOJO。
1. 抽象类：Abstract 开头
1. 异常类：Exception 结尾
1. 测试类：Test 结尾
1. 接口类：I 开头
1. POJO 类中布尔类型的变量，都不要加 is
1. 包名
包名统一使用小写，点分隔符之间有且仅有一个自然语义的英语单词。包名统一使用单数形式，但是类名如果有复数含义，类名可以使用复数形式
1. 如果模块、 接口、类、方法使用了设计模式，在命名时体现出具体模式。
eg：`public class LoginProxy;`
1. 接口类中的方法和属性不要加任何修饰符号
1. 枚举类名带上 Enum 后缀，枚举成员名称需要全大写，单词间用下划线隔开
1.  long 或者 Long 初始赋值时， 使用大写的 L，不能是小写的 l，小写容易跟数字 1 混
淆，造成误解。eg： Long a = 2L
1. 注释的双斜线与注释内容之间有且仅有一个空格。eg: `// 注释内容`
1. 方法参数在定义和传入时，多个参数逗号后边必须加空格。
1. 所有的覆写方法，必须加 `@Override` 注解。
1. 使用类名访问此类的静态变量或静态方法。
1. 构造方法里面禁止加入任何业务逻辑，如果有初始化逻辑，请放在 init 方法中。
1.  POJO 类必须写 toString 方法。
1. 当一个类有多个构造方法，或者多个同名方法，这些方法应该按顺序放置在一起，便于阅读，类内方法定义顺序依次是：公有方法或保护方法 > 私有方法 > getter/setter 方法。
1. 在 getter/setter 方法中， 不要增加业务逻辑，增加排查问题的难度。
1. 循环体内，字符串的连接方式，使用 StringBuilder 的 append 方法进行扩展。
```
//反编译出的字节码文件显示每次循环都会 new 出一个 StringBuilder 对象，然后进行append 操作，最后通过 toString 方法返回 String 对象，造成内存资源浪费。
//反例
String str = "start";
for (int i = 0; i < 100; i++) {
str = str + "hello";
}
```


## MySql
1. 表达是与否概念的字段，必须使用 is_xxx 的方式命名，数据类型是 unsigned tinyint（1 表示是， 0 表示否）。
1. 表名、字段名必须使用小写字母或数字，下划线分隔，不使用复数名词。
1. 主键索引名为 `pk_字段名`； 唯一索引名为 `uk_字段名`； 普通索引名则为 `idx_字段名`。
1. 小数类型为 decimal，禁止使用 float 和 double。
1. 如果存储的字符串长度几乎相等，使用 char 定长字符串类型。
1. varchar 是可变长字符串，不预先分配存储空间，长度不要超过 5000，如果存储长度大于此值，定义字段类型为 text，独立出来一张表，用主键来对应，避免影响其它字段索引效率。
1. 表必备三字段： id(主键，unsigned bigint,自增), gmt_create(现在时表示主动创建,date_time), gmt_modified(过去分词表示被动更新,date_time)。
1. 表的命名最好是加上“业务名称_表的作用”。 eg: `force_project`，`trade_config`


',
  'groups' => 'Java',
  'showsel' => '1',
  'showse2' => '1',
  'id' => '249',
)
[ info ] [ SESSION ] INIT array (
  'id' => '',
  'var_session_id' => '',
  'prefix' => 'think',
  'type' => '',
  'auto_start' => true,
)
[ info ] [ RUN ] app\admin\controller\Note->updateNote[ /var/www/html/daily/application/admin/controller/Note.php ]
[ info ] [ DB ] INIT mysql
[ info ] [ CACHE ] INIT File
[ info ] [ LOG ] INIT File
[ sql ] [ DB ] CONNECT:[ UseTime:0.001864s ] mysql:host=74.120.168.12;dbname=diary;charset=utf8
[ sql ] [ SQL ] SHOW COLUMNS FROM `note` [ RunTime:0.002202s ]
[ sql ] [ SQL ] SELECT * FROM `note` WHERE  `id` = 249 LIMIT 1 [ RunTime:0.000623s ]
[ sql ] [ SQL ] SELECT `groups` FROM `note` WHERE  `id` = 249 LIMIT 1 [ RunTime:0.000406s ]
[ sql ] [ SQL ] SHOW COLUMNS FROM `groups` [ RunTime:0.001308s ]
[ sql ] [ SQL ] SELECT `parent_id` FROM `groups` WHERE  `groups` = 'Java' LIMIT 1 [ RunTime:0.000383s ]
[ sql ] [ SQL ] SELECT `groups` FROM `groups` WHERE  `id` = 2 LIMIT 1 [ RunTime:0.000363s ]
[ sql ] [ SQL ] UPDATE `note`  SET `id`=249,`p_id`=2,`title`='读《阿里巴巴 Java 开发手册》\r',`content`='# 读《阿里巴巴 Java 开发手册》\r\n[TOC]\r\n## 命名\r\n1. 各层命名规约：\r\n	- Service/DAO 层方法命名规约\r\n		- 获取单个对象的方法用 get 做前缀。\r\n		- 获取多个对象的方法用 list 做前缀。\r\n		- 获取统计值的方法用 count 做前缀。\r\n		- 插入的方法用 insert 做前缀。\r\n		- 删除的方法用 delete 做前缀。\r\n		- 修改的方法用 update 做前缀。\r\n	- 领域模型命名规约**(??? 这是什么)**\r\n		- 数据对象： xxxDO， xxx 即为数据表名。\r\n		- 数据传输对象： xxxDTO， xxx 为业务领域相关的名称。\r\n		- 展示对象： xxxVO， xxx 一般为网页名称。\r\n		- POJO 是 DO/DTO/BO/VO 的统称，禁止命名成 xxxPOJO。\r\n1. 抽象类：Abstract 开头\r\n1. 异常类：Exception 结尾\r\n1. 测试类：Test 结尾\r\n1. 接口类：I 开头\r\n1. POJO 类中布尔类型的变量，都不要加 is\r\n1. 包名\r\n包名统一使用小写，点分隔符之间有且仅有一个自然语义的英语单词。包名统一使用单数形式，但是类名如果有复数含义，类名可以使用复数形式\r\n1. 如果模块、 接口、类、方法使用了设计模式，在命名时体现出具体模式。\r\neg：`public class LoginProxy;`\r\n1. 接口类中的方法和属性不要加任何修饰符号\r\n1. 枚举类名带上 Enum 后缀，枚举成员名称需要全大写，单词间用下划线隔开\r\n1.  long 或者 Long 初始赋值时， 使用大写的 L，不能是小写的 l，小写容易跟数字 1 混\r\n淆，造成误解。eg： Long a = 2L\r\n1. 注释的双斜线与注释内容之间有且仅有一个空格。eg: `// 注释内容`\r\n1. 方法参数在定义和传入时，多个参数逗号后边必须加空格。\r\n1. 所有的覆写方法，必须加 `@Override` 注解。\r\n1. 使用类名访问此类的静态变量或静态方法。\r\n1. 构造方法里面禁止加入任何业务逻辑，如果有初始化逻辑，请放在 init 方法中。\r\n1.  POJO 类必须写 toString 方法。\r\n1. 当一个类有多个构造方法，或者多个同名方法，这些方法应该按顺序放置在一起，便于阅读，类内方法定义顺序依次是：公有方法或保护方法 > 私有方法 > getter/setter 方法。\r\n1. 在 getter/setter 方法中， 不要增加业务逻辑，增加排查问题的难度。\r\n1. 循环体内，字符串的连接方式，使用 StringBuilder 的 append 方法进行扩展。\r\n```\r\n//反编译出的字节码文件显示每次循环都会 new 出一个 StringBuilder 对象，然后进行append 操作，最后通过 toString 方法返回 String 对象，造成内存资源浪费。\r\n//反例\r\nString str = \"start\";\r\nfor (int i = 0; i < 100; i++) {\r\nstr = str + \"hello\";\r\n}\r\n```\r\n\r\n\r\n## MySql\r\n1. 表达是与否概念的字段，必须使用 is_xxx 的方式命名，数据类型是 unsigned tinyint（1 表示是， 0 表示否）。\r\n1. 表名、字段名必须使用小写字母或数字，下划线分隔，不使用复数名词。\r\n1. 主键索引名为 `pk_字段名`； 唯一索引名为 `uk_字段名`； 普通索引名则为 `idx_字段名`。\r\n1. 小数类型为 decimal，禁止使用 float 和 double。\r\n1. 如果存储的字符串长度几乎相等，使用 char 定长字符串类型。\r\n1. varchar 是可变长字符串，不预先分配存储空间，长度不要超过 5000，如果存储长度大于此值，定义字段类型为 text，独立出来一张表，用主键来对应，避免影响其它字段索引效率。\r\n1. 表必备三字段： id(主键，unsigned bigint,自增), gmt_create(现在时表示主动创建,date_time), gmt_modified(过去分词表示被动更新,date_time)。\r\n1. 表的命名最好是加上“业务名称_表的作用”。 eg: `force_project`，`trade_config`\r\n\r\n\r\n',`groups`='Java',`is_show`=1,`publish`=1,`summary`='向大佬学习，规范代码，码出高效， 码出质量。',`gmt_modified`='2018-11-19'  WHERE  `id` = 249 [ RunTime:0.000911s ]
[ sql ] [ SQL ] SELECT COUNT(*) AS tp_count FROM `note` WHERE  `groups` = 'Java' LIMIT 1 [ RunTime:0.003308s ]
[ sql ] [ SQL ] UPDATE `groups`  SET `g_count`=21  WHERE  `groups` = 'Java' [ RunTime:0.000652s ]
[ sql ] [ SQL ] SELECT COUNT(*) AS tp_count FROM `note` WHERE  `groups` = 'Java' LIMIT 1 [ RunTime:0.002001s ]
[ sql ] [ SQL ] UPDATE `groups`  SET `g_count`=21  WHERE  `groups` = 'Java' [ RunTime:0.000467s ]
---------------------------------------------------------------
[ 2018-11-19T09:29:54+08:00 ] 74.120.168.12 74.120.168.12 GET /daily/admin/note/shownote/id/249.html
[ info ] qingrang.top/daily/admin/note/shownote/id/249.html [运行时间：0.063938s][吞吐率：15.64req/s] [内存消耗：1,984.41kb] [文件加载：55]
[ info ] [ LANG ] /var/www/html/daily/thinkphp/lang/zh-cn.php
[ info ] [ ROUTE ] array (
  'type' => 'module',
  'module' => 
  array (
    0 => 'admin',
    1 => 'note',
    2 => 'shownote',
  ),
)
[ info ] [ HEADER ] array (
  'host' => 'qingrang.top',
  'cache-control' => 'max-age=0',
  'upgrade-insecure-requests' => '1',
  'user-agent' => 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/70.0.3538.102 Safari/537.36',
  'accept' => 'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8',
  'referer' => 'http://qingrang.top/daily/admin/note/editnote/id/249.html',
  'accept-encoding' => 'gzip, deflate',
  'accept-language' => 'zh-CN,zh;q=0.9,la;q=0.8,en;q=0.7,lb;q=0.6',
  'cookie' => 'Hm_lvt_1769181352e9adc950166aada465644e=1541082864,1541122974,1541171416,1542098176; PHPSESSID=cvrea98moc9nvt4dg4igb1ep86',
  'connection' => 'close',
)
[ info ] [ PARAM ] array (
  'id' => '249',
)
[ info ] [ SESSION ] INIT array (
  'id' => '',
  'var_session_id' => '',
  'prefix' => 'think',
  'type' => '',
  'auto_start' => true,
)
[ info ] [ RUN ] app\admin\controller\Note->showNote[ /var/www/html/daily/application/admin/controller/Note.php ]
[ info ] [ DB ] INIT mysql
[ info ] [ VIEW ] /var/www/html/daily/application/admin/view/note/shownote.html [ array (
  0 => 'note',
  1 => 'groups',
) ]
[ info ] [ LOG ] INIT File
[ sql ] [ DB ] CONNECT:[ UseTime:0.000575s ] mysql:host=74.120.168.12;dbname=diary;charset=utf8
[ sql ] [ SQL ] SHOW COLUMNS FROM `note` [ RunTime:0.001670s ]
[ sql ] [ SQL ] SELECT * FROM `note` WHERE  `id` = 249 LIMIT 1 [ RunTime:0.000460s ]
[ sql ] [ SQL ] SHOW COLUMNS FROM `groups` [ RunTime:0.001002s ]
[ sql ] [ SQL ] SELECT * FROM `groups` [ RunTime:0.000297s ]
---------------------------------------------------------------
[ 2018-11-19T09:30:19+08:00 ] 74.120.168.12 74.120.168.12 GET /daily/admin/note
[ info ] qingrang.top/daily/admin/note [运行时间：0.080320s][吞吐率：12.45req/s] [内存消耗：2,346.06kb] [文件加载：56]
[ info ] [ LANG ] /var/www/html/daily/thinkphp/lang/zh-cn.php
[ info ] [ ROUTE ] array (
  'type' => 'module',
  'module' => 
  array (
    0 => 'admin',
    1 => 'note',
    2 => NULL,
  ),
)
[ info ] [ HEADER ] array (
  'host' => 'qingrang.top',
  'cache-control' => 'max-age=0',
  'upgrade-insecure-requests' => '1',
  'user-agent' => 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/70.0.3538.102 Safari/537.36',
  'accept' => 'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8',
  'accept-encoding' => 'gzip, deflate',
  'accept-language' => 'zh-CN,zh;q=0.9,la;q=0.8,en;q=0.7,lb;q=0.6',
  'cookie' => 'Hm_lvt_1769181352e9adc950166aada465644e=1541082864,1541122974,1541171416,1542098176; PHPSESSID=cvrea98moc9nvt4dg4igb1ep86',
  'connection' => 'close',
)
[ info ] [ PARAM ] array (
)
[ info ] [ SESSION ] INIT array (
  'id' => '',
  'var_session_id' => '',
  'prefix' => 'think',
  'type' => '',
  'auto_start' => true,
)
[ info ] [ RUN ] app\admin\controller\Note->notelst[ /var/www/html/daily/application/admin/controller/Note.php ]
[ info ] [ DB ] INIT mysql
[ info ] [ VIEW ] /var/www/html/daily/application/admin/view/note/notelst.html [ array (
  0 => 'stickList',
  1 => 'hide',
  2 => 'list',
  3 => 'list_new',
  4 => 'groups',
  5 => 'groups0',
  6 => 'groups1',
  7 => 'groups2',
  8 => 'count',
  9 => 'year',
  10 => 'default_num',
) ]
[ info ] [ LOG ] INIT File
[ sql ] [ DB ] CONNECT:[ UseTime:0.000609s ] mysql:host=74.120.168.12;dbname=diary;charset=utf8
[ sql ] [ SQL ] SHOW COLUMNS FROM `note` [ RunTime:0.001534s ]
[ sql ] [ SQL ] SELECT * FROM `note` WHERE  `groups` <> 'Personal'  AND `is_show` = 1 ORDER BY date desc,id desc [ RunTime:0.002150s ]
[ sql ] [ SQL ] SELECT * FROM `note` WHERE  `groups` <> 'Personal'  AND `is_show` <> 1 ORDER BY gmt_modified desc LIMIT 5 [ RunTime:0.002889s ]
[ sql ] [ SQL ] SHOW COLUMNS FROM `config` [ RunTime:0.001029s ]
[ sql ] [ SQL ] SELECT * FROM `config` WHERE  `name` = 'hide' LIMIT 1 [ RunTime:0.000381s ]
[ sql ] [ SQL ] SELECT * FROM `note` WHERE  `id` < 5 [ RunTime:0.000550s ]
[ sql ] [ SQL ] SHOW COLUMNS FROM `groups` [ RunTime:0.001208s ]
[ sql ] [ SQL ] SELECT * FROM `groups` [ RunTime:0.000386s ]
[ sql ] [ SQL ] SELECT * FROM `groups` WHERE  `parent_id` = 0  AND `id` <> 2 ORDER BY `groups` [ RunTime:0.000453s ]
[ sql ] [ SQL ] SELECT `groups` FROM `groups` WHERE  `parent_id` = 1 [ RunTime:0.000371s ]
[ sql ] [ SQL ] SELECT * FROM `groups` WHERE  `parent_id` = 2 ORDER BY `groups` [ RunTime:0.000360s ]
[ sql ] [ SQL ] SELECT COUNT(*) AS tp_count FROM `note` WHERE  `groups` = 'Default' LIMIT 1 [ RunTime:0.001398s ]
[ sql ] [ SQL ] SELECT COUNT(*) AS tp_count FROM `note` LIMIT 1 [ RunTime:0.000254s ]
[ sql ] [ SQL ] SHOW COLUMNS FROM `yearlist` [ RunTime:0.001095s ]
[ sql ] [ SQL ] SELECT DISTINCT  `year` FROM `yearlist` ORDER BY year desc [ RunTime:0.000623s ]
---------------------------------------------------------------
[ 2018-11-19T09:30:37+08:00 ] 74.120.168.12 74.120.168.12 POST /daily/admin/note/ashownote2.html
[ info ] qingrang.top/daily/admin/note/ashownote2.html [运行时间：0.053665s][吞吐率：18.63req/s] [内存消耗：2,162.55kb] [文件加载：52]
[ info ] [ LANG ] /var/www/html/daily/thinkphp/lang/zh-cn.php
[ info ] [ ROUTE ] array (
  'type' => 'module',
  'module' => 
  array (
    0 => 'admin',
    1 => 'note',
    2 => 'ashownote2',
  ),
)
[ info ] [ HEADER ] array (
  'host' => 'qingrang.top',
  'content-length' => '19',
  'accept' => 'application/json, text/javascript, */*; q=0.01',
  'origin' => 'http://qingrang.top',
  'x-requested-with' => 'XMLHttpRequest',
  'user-agent' => 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/70.0.3538.102 Safari/537.36',
  'content-type' => 'application/x-www-form-urlencoded',
  'referer' => 'http://qingrang.top/daily/admin/note',
  'accept-encoding' => 'gzip, deflate',
  'accept-language' => 'zh-CN,zh;q=0.9,la;q=0.8,en;q=0.7,lb;q=0.6',
  'cookie' => 'Hm_lvt_1769181352e9adc950166aada465644e=1541082864,1541122974,1541171416,1542098176; PHPSESSID=cvrea98moc9nvt4dg4igb1ep86',
  'connection' => 'close',
)
[ info ] [ PARAM ] array (
  'groupname' => 'Algorithm',
)
[ info ] [ SESSION ] INIT array (
  'id' => '',
  'var_session_id' => '',
  'prefix' => 'think',
  'type' => '',
  'auto_start' => true,
)
[ info ] [ RUN ] app\admin\controller\Note->aShowNote2[ /var/www/html/daily/application/admin/controller/Note.php ]
[ info ] [ DB ] INIT mysql
[ info ] [ LOG ] INIT File
[ sql ] [ DB ] CONNECT:[ UseTime:0.000575s ] mysql:host=74.120.168.12;dbname=diary;charset=utf8
[ sql ] [ SQL ] SHOW COLUMNS FROM `note` [ RunTime:0.001373s ]
[ sql ] [ SQL ] SELECT * FROM `note` WHERE  `groups` = 'Algorithm' ORDER BY date desc [ RunTime:0.001532s ]
---------------------------------------------------------------
[ 2018-11-19T09:32:55+08:00 ] 74.120.168.12 74.120.168.12 POST /daily/admin/note/ashownote1.html
[ info ] qingrang.top/daily/admin/note/ashownote1.html [运行时间：0.060983s][吞吐率：16.40req/s] [内存消耗：2,281.74kb] [文件加载：53]
[ info ] [ LANG ] /var/www/html/daily/thinkphp/lang/zh-cn.php
[ info ] [ ROUTE ] array (
  'type' => 'module',
  'module' => 
  array (
    0 => 'admin',
    1 => 'note',
    2 => 'ashownote1',
  ),
)
[ info ] [ HEADER ] array (
  'host' => 'qingrang.top',
  'content-length' => '10',
  'accept' => 'application/json, text/javascript, */*; q=0.01',
  'origin' => 'http://qingrang.top',
  'x-requested-with' => 'XMLHttpRequest',
  'user-agent' => 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/70.0.3538.102 Safari/537.36',
  'content-type' => 'application/x-www-form-urlencoded',
  'referer' => 'http://qingrang.top/daily/admin/note',
  'accept-encoding' => 'gzip, deflate',
  'accept-language' => 'zh-CN,zh;q=0.9,la;q=0.8,en;q=0.7,lb;q=0.6',
  'cookie' => 'Hm_lvt_1769181352e9adc950166aada465644e=1541082864,1541122974,1541171416,1542098176; PHPSESSID=cvrea98moc9nvt4dg4igb1ep86',
  'connection' => 'close',
)
[ info ] [ PARAM ] array (
  'groupsID' => '1',
)
[ info ] [ SESSION ] INIT array (
  'id' => '',
  'var_session_id' => '',
  'prefix' => 'think',
  'type' => '',
  'auto_start' => true,
)
[ info ] [ RUN ] app\admin\controller\Note->aShowNote1[ /var/www/html/daily/application/admin/controller/Note.php ]
[ info ] [ DB ] INIT mysql
[ info ] [ LOG ] INIT File
[ sql ] [ DB ] CONNECT:[ UseTime:0.000651s ] mysql:host=74.120.168.12;dbname=diary;charset=utf8
[ sql ] [ SQL ] SHOW COLUMNS FROM `note` [ RunTime:0.001580s ]
[ sql ] [ SQL ] SELECT * FROM `note` WHERE  `p_id` = 1  AND `id` > 2 ORDER BY date desc [ RunTime:0.003034s ]
---------------------------------------------------------------
[ 2018-11-19T09:32:56+08:00 ] 74.120.168.12 74.120.168.12 POST /daily/admin/note/ashownote1.html
[ info ] qingrang.top/daily/admin/note/ashownote1.html [运行时间：0.058604s][吞吐率：17.06req/s] [内存消耗：2,433.76kb] [文件加载：53]
[ info ] [ LANG ] /var/www/html/daily/thinkphp/lang/zh-cn.php
[ info ] [ ROUTE ] array (
  'type' => 'module',
  'module' => 
  array (
    0 => 'admin',
    1 => 'note',
    2 => 'ashownote1',
  ),
)
[ info ] [ HEADER ] array (
  'host' => 'qingrang.top',
  'content-length' => '11',
  'accept' => 'application/json, text/javascript, */*; q=0.01',
  'origin' => 'http://qingrang.top',
  'x-requested-with' => 'XMLHttpRequest',
  'user-agent' => 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/70.0.3538.102 Safari/537.36',
  'content-type' => 'application/x-www-form-urlencoded',
  'referer' => 'http://qingrang.top/daily/admin/note',
  'accept-encoding' => 'gzip, deflate',
  'accept-language' => 'zh-CN,zh;q=0.9,la;q=0.8,en;q=0.7,lb;q=0.6',
  'cookie' => 'Hm_lvt_1769181352e9adc950166aada465644e=1541082864,1541122974,1541171416,1542098176; PHPSESSID=cvrea98moc9nvt4dg4igb1ep86',
  'connection' => 'close',
)
[ info ] [ PARAM ] array (
  'groupsID' => '21',
)
[ info ] [ SESSION ] INIT array (
  'id' => '',
  'var_session_id' => '',
  'prefix' => 'think',
  'type' => '',
  'auto_start' => true,
)
[ info ] [ RUN ] app\admin\controller\Note->aShowNote1[ /var/www/html/daily/application/admin/controller/Note.php ]
[ info ] [ DB ] INIT mysql
[ info ] [ LOG ] INIT File
[ sql ] [ DB ] CONNECT:[ UseTime:0.000522s ] mysql:host=74.120.168.12;dbname=diary;charset=utf8
[ sql ] [ SQL ] SHOW COLUMNS FROM `note` [ RunTime:0.001325s ]
[ sql ] [ SQL ] SELECT * FROM `note` WHERE  `p_id` = 21  AND `id` > 2 ORDER BY date desc [ RunTime:0.002946s ]
---------------------------------------------------------------
[ 2018-11-19T09:32:58+08:00 ] 74.120.168.12 74.120.168.12 GET /daily/admin/note
[ info ] qingrang.top/daily/admin/note [运行时间：0.088940s][吞吐率：11.24req/s] [内存消耗：2,522.96kb] [文件加载：58]
[ info ] [ LANG ] /var/www/html/daily/thinkphp/lang/zh-cn.php
[ info ] [ ROUTE ] array (
  'type' => 'module',
  'module' => 
  array (
    0 => 'admin',
    1 => 'note',
    2 => NULL,
  ),
)
[ info ] [ HEADER ] array (
  'host' => 'qingrang.top',
  'cache-control' => 'max-age=0',
  'upgrade-insecure-requests' => '1',
  'user-agent' => 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/70.0.3538.102 Safari/537.36',
  'accept' => 'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8',
  'accept-encoding' => 'gzip, deflate',
  'accept-language' => 'zh-CN,zh;q=0.9,la;q=0.8,en;q=0.7,lb;q=0.6',
  'cookie' => 'Hm_lvt_1769181352e9adc950166aada465644e=1541082864,1541122974,1541171416,1542098176; PHPSESSID=cvrea98moc9nvt4dg4igb1ep86',
  'connection' => 'close',
)
[ info ] [ PARAM ] array (
)
[ info ] [ SESSION ] INIT array (
  'id' => '',
  'var_session_id' => '',
  'prefix' => 'think',
  'type' => '',
  'auto_start' => true,
)
[ info ] [ RUN ] app\admin\controller\Note->notelst[ /var/www/html/daily/application/admin/controller/Note.php ]
[ info ] [ DB ] INIT mysql
[ info ] [ VIEW ] /var/www/html/daily/application/admin/view/note/notelst.html [ array (
  0 => 'stickList',
  1 => 'hide',
  2 => 'list',
  3 => 'list_new',
  4 => 'groups',
  5 => 'groups0',
  6 => 'groups1',
  7 => 'groups2',
  8 => 'count',
  9 => 'year',
  10 => 'default_num',
) ]
[ info ] [ LOG ] INIT File
[ sql ] [ DB ] CONNECT:[ UseTime:0.000551s ] mysql:host=74.120.168.12;dbname=diary;charset=utf8
[ sql ] [ SQL ] SHOW COLUMNS FROM `note` [ RunTime:0.001464s ]
[ sql ] [ SQL ] SELECT * FROM `note` WHERE  `groups` <> 'Personal'  AND `is_show` = 1 ORDER BY date desc,id desc [ RunTime:0.002222s ]
[ sql ] [ SQL ] SELECT * FROM `note` WHERE  `groups` <> 'Personal'  AND `is_show` <> 1 ORDER BY gmt_modified desc LIMIT 5 [ RunTime:0.002453s ]
[ sql ] [ SQL ] SHOW COLUMNS FROM `config` [ RunTime:0.001189s ]
[ sql ] [ SQL ] SELECT * FROM `config` WHERE  `name` = 'hide' LIMIT 1 [ RunTime:0.000376s ]
[ sql ] [ SQL ] SELECT * FROM `note` WHERE  `id` < 5 [ RunTime:0.000528s ]
[ sql ] [ SQL ] SHOW COLUMNS FROM `groups` [ RunTime:0.001004s ]
[ sql ] [ SQL ] SELECT * FROM `groups` [ RunTime:0.000308s ]
[ sql ] [ SQL ] SELECT * FROM `groups` WHERE  `parent_id` = 0  AND `id` <> 2 ORDER BY `groups` [ RunTime:0.000406s ]
[ sql ] [ SQL ] SELECT `groups` FROM `groups` WHERE  `parent_id` = 1 [ RunTime:0.000366s ]
[ sql ] [ SQL ] SELECT * FROM `groups` WHERE  `parent_id` = 2 ORDER BY `groups` [ RunTime:0.000404s ]
[ sql ] [ SQL ] SELECT COUNT(*) AS tp_count FROM `note` WHERE  `groups` = 'Default' LIMIT 1 [ RunTime:0.001476s ]
[ sql ] [ SQL ] SELECT COUNT(*) AS tp_count FROM `note` LIMIT 1 [ RunTime:0.000334s ]
[ sql ] [ SQL ] SHOW COLUMNS FROM `yearlist` [ RunTime:0.001311s ]
[ sql ] [ SQL ] SELECT DISTINCT  `year` FROM `yearlist` ORDER BY year desc [ RunTime:0.000703s ]
---------------------------------------------------------------
[ 2018-11-19T09:33:00+08:00 ] 74.120.168.12 74.120.168.12 POST /daily/admin/note/ashownote1.html
[ info ] qingrang.top/daily/admin/note/ashownote1.html [运行时间：0.061862s][吞吐率：16.17req/s] [内存消耗：2,433.76kb] [文件加载：53]
[ info ] [ LANG ] /var/www/html/daily/thinkphp/lang/zh-cn.php
[ info ] [ ROUTE ] array (
  'type' => 'module',
  'module' => 
  array (
    0 => 'admin',
    1 => 'note',
    2 => 'ashownote1',
  ),
)
[ info ] [ HEADER ] array (
  'host' => 'qingrang.top',
  'content-length' => '11',
  'accept' => 'application/json, text/javascript, */*; q=0.01',
  'origin' => 'http://qingrang.top',
  'x-requested-with' => 'XMLHttpRequest',
  'user-agent' => 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/70.0.3538.102 Safari/537.36',
  'content-type' => 'application/x-www-form-urlencoded',
  'referer' => 'http://qingrang.top/daily/admin/note',
  'accept-encoding' => 'gzip, deflate',
  'accept-language' => 'zh-CN,zh;q=0.9,la;q=0.8,en;q=0.7,lb;q=0.6',
  'cookie' => 'Hm_lvt_1769181352e9adc950166aada465644e=1541082864,1541122974,1541171416,1542098176; PHPSESSID=cvrea98moc9nvt4dg4igb1ep86',
  'connection' => 'close',
)
[ info ] [ PARAM ] array (
  'groupsID' => '21',
)
[ info ] [ SESSION ] INIT array (
  'id' => '',
  'var_session_id' => '',
  'prefix' => 'think',
  'type' => '',
  'auto_start' => true,
)
[ info ] [ RUN ] app\admin\controller\Note->aShowNote1[ /var/www/html/daily/application/admin/controller/Note.php ]
[ info ] [ DB ] INIT mysql
[ info ] [ LOG ] INIT File
[ sql ] [ DB ] CONNECT:[ UseTime:0.000529s ] mysql:host=74.120.168.12;dbname=diary;charset=utf8
[ sql ] [ SQL ] SHOW COLUMNS FROM `note` [ RunTime:0.001467s ]
[ sql ] [ SQL ] SELECT * FROM `note` WHERE  `p_id` = 21  AND `id` > 2 ORDER BY date desc [ RunTime:0.003335s ]
---------------------------------------------------------------
[ 2018-11-19T09:33:08+08:00 ] 74.120.168.12 74.120.168.12 POST /daily/admin/note/ashownote2.html
[ info ] qingrang.top/daily/admin/note/ashownote2.html [运行时间：0.046987s][吞吐率：21.28req/s] [内存消耗：2,133.75kb] [文件加载：52]
[ info ] [ LANG ] /var/www/html/daily/thinkphp/lang/zh-cn.php
[ info ] [ ROUTE ] array (
  'type' => 'module',
  'module' => 
  array (
    0 => 'admin',
    1 => 'note',
    2 => 'ashownote2',
  ),
)
[ info ] [ HEADER ] array (
  'host' => 'qingrang.top',
  'content-length' => '16',
  'accept' => 'application/json, text/javascript, */*; q=0.01',
  'origin' => 'http://qingrang.top',
  'x-requested-with' => 'XMLHttpRequest',
  'user-agent' => 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/70.0.3538.102 Safari/537.36',
  'content-type' => 'application/x-www-form-urlencoded',
  'referer' => 'http://qingrang.top/daily/admin/note',
  'accept-encoding' => 'gzip, deflate',
  'accept-language' => 'zh-CN,zh;q=0.9,la;q=0.8,en;q=0.7,lb;q=0.6',
  'cookie' => 'Hm_lvt_1769181352e9adc950166aada465644e=1541082864,1541122974,1541171416,1542098176; PHPSESSID=cvrea98moc9nvt4dg4igb1ep86',
  'connection' => 'close',
)
[ info ] [ PARAM ] array (
  'groupname' => 'Python',
)
[ info ] [ SESSION ] INIT array (
  'id' => '',
  'var_session_id' => '',
  'prefix' => 'think',
  'type' => '',
  'auto_start' => true,
)
[ info ] [ RUN ] app\admin\controller\Note->aShowNote2[ /var/www/html/daily/application/admin/controller/Note.php ]
[ info ] [ DB ] INIT mysql
[ info ] [ LOG ] INIT File
[ sql ] [ DB ] CONNECT:[ UseTime:0.000554s ] mysql:host=74.120.168.12;dbname=diary;charset=utf8
[ sql ] [ SQL ] SHOW COLUMNS FROM `note` [ RunTime:0.001385s ]
[ sql ] [ SQL ] SELECT * FROM `note` WHERE  `groups` = 'Python' ORDER BY date desc [ RunTime:0.001370s ]
---------------------------------------------------------------
[ 2018-11-19T09:33:54+08:00 ] 74.120.168.12 74.120.168.12 GET /daily/admin/note
[ info ] qingrang.top/daily/admin/note [运行时间：0.074814s][吞吐率：13.37req/s] [内存消耗：2,523.25kb] [文件加载：58]
[ info ] [ LANG ] /var/www/html/daily/thinkphp/lang/zh-cn.php
[ info ] [ ROUTE ] array (
  'type' => 'module',
  'module' => 
  array (
    0 => 'admin',
    1 => 'note',
    2 => NULL,
  ),
)
[ info ] [ HEADER ] array (
  'host' => 'qingrang.top',
  'cache-control' => 'max-age=0',
  'upgrade-insecure-requests' => '1',
  'user-agent' => 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/70.0.3538.102 Safari/537.36',
  'accept' => 'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8',
  'accept-encoding' => 'gzip, deflate',
  'accept-language' => 'zh-CN,zh;q=0.9,la;q=0.8,en;q=0.7,lb;q=0.6',
  'cookie' => 'Hm_lvt_1769181352e9adc950166aada465644e=1541082864,1541122974,1541171416,1542098176; PHPSESSID=cvrea98moc9nvt4dg4igb1ep86',
  'connection' => 'close',
)
[ info ] [ PARAM ] array (
)
[ info ] [ SESSION ] INIT array (
  'id' => '',
  'var_session_id' => '',
  'prefix' => 'think',
  'type' => '',
  'auto_start' => true,
)
[ info ] [ RUN ] app\admin\controller\Note->notelst[ /var/www/html/daily/application/admin/controller/Note.php ]
[ info ] [ DB ] INIT mysql
[ info ] [ VIEW ] /var/www/html/daily/application/admin/view/note/notelst.html [ array (
  0 => 'stickList',
  1 => 'hide',
  2 => 'list',
  3 => 'list_new',
  4 => 'groups',
  5 => 'groups0',
  6 => 'groups1',
  7 => 'groups2',
  8 => 'count',
  9 => 'year',
  10 => 'default_num',
) ]
[ info ] [ LOG ] INIT File
[ sql ] [ DB ] CONNECT:[ UseTime:0.000476s ] mysql:host=74.120.168.12;dbname=diary;charset=utf8
[ sql ] [ SQL ] SHOW COLUMNS FROM `note` [ RunTime:0.001630s ]
[ sql ] [ SQL ] SELECT * FROM `note` WHERE  `groups` <> 'Personal'  AND `is_show` = 1 ORDER BY date desc,id desc [ RunTime:0.002082s ]
[ sql ] [ SQL ] SELECT * FROM `note` WHERE  `groups` <> 'Personal'  AND `is_show` <> 1 ORDER BY gmt_modified desc LIMIT 5 [ RunTime:0.002248s ]
[ sql ] [ SQL ] SHOW COLUMNS FROM `config` [ RunTime:0.000986s ]
[ sql ] [ SQL ] SELECT * FROM `config` WHERE  `name` = 'hide' LIMIT 1 [ RunTime:0.000341s ]
[ sql ] [ SQL ] SELECT * FROM `note` WHERE  `id` < 5 [ RunTime:0.000463s ]
[ sql ] [ SQL ] SHOW COLUMNS FROM `groups` [ RunTime:0.000835s ]
[ sql ] [ SQL ] SELECT * FROM `groups` [ RunTime:0.000287s ]
[ sql ] [ SQL ] SELECT * FROM `groups` WHERE  `parent_id` = 0  AND `id` <> 2 ORDER BY `groups` [ RunTime:0.000419s ]
[ sql ] [ SQL ] SELECT `groups` FROM `groups` WHERE  `parent_id` = 1 [ RunTime:0.000336s ]
[ sql ] [ SQL ] SELECT * FROM `groups` WHERE  `parent_id` = 2 ORDER BY `groups` [ RunTime:0.000358s ]
[ sql ] [ SQL ] SELECT COUNT(*) AS tp_count FROM `note` WHERE  `groups` = 'Default' LIMIT 1 [ RunTime:0.001196s ]
[ sql ] [ SQL ] SELECT COUNT(*) AS tp_count FROM `note` LIMIT 1 [ RunTime:0.000249s ]
[ sql ] [ SQL ] SHOW COLUMNS FROM `yearlist` [ RunTime:0.001007s ]
[ sql ] [ SQL ] SELECT DISTINCT  `year` FROM `yearlist` ORDER BY year desc [ RunTime:0.000637s ]
---------------------------------------------------------------
[ 2018-11-19T09:33:57+08:00 ] 74.120.168.12 74.120.168.12 POST /daily/admin/note/ashownote2.html
[ info ] qingrang.top/daily/admin/note/ashownote2.html [运行时间：0.053054s][吞吐率：18.85req/s] [内存消耗：2,174.51kb] [文件加载：52]
[ info ] [ LANG ] /var/www/html/daily/thinkphp/lang/zh-cn.php
[ info ] [ ROUTE ] array (
  'type' => 'module',
  'module' => 
  array (
    0 => 'admin',
    1 => 'note',
    2 => 'ashownote2',
  ),
)
[ info ] [ HEADER ] array (
  'host' => 'qingrang.top',
  'content-length' => '23',
  'accept' => 'application/json, text/javascript, */*; q=0.01',
  'origin' => 'http://qingrang.top',
  'x-requested-with' => 'XMLHttpRequest',
  'user-agent' => 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/70.0.3538.102 Safari/537.36',
  'content-type' => 'application/x-www-form-urlencoded',
  'referer' => 'http://qingrang.top/daily/admin/note',
  'accept-encoding' => 'gzip, deflate',
  'accept-language' => 'zh-CN,zh;q=0.9,la;q=0.8,en;q=0.7,lb;q=0.6',
  'cookie' => 'Hm_lvt_1769181352e9adc950166aada465644e=1541082864,1541122974,1541171416,1542098176; PHPSESSID=cvrea98moc9nvt4dg4igb1ep86',
  'connection' => 'close',
)
[ info ] [ PARAM ] array (
  'groupname' => 'DesignPattern',
)
[ info ] [ SESSION ] INIT array (
  'id' => '',
  'var_session_id' => '',
  'prefix' => 'think',
  'type' => '',
  'auto_start' => true,
)
[ info ] [ RUN ] app\admin\controller\Note->aShowNote2[ /var/www/html/daily/application/admin/controller/Note.php ]
[ info ] [ DB ] INIT mysql
[ info ] [ LOG ] INIT File
[ sql ] [ DB ] CONNECT:[ UseTime:0.000467s ] mysql:host=74.120.168.12;dbname=diary;charset=utf8
[ sql ] [ SQL ] SHOW COLUMNS FROM `note` [ RunTime:0.001209s ]
[ sql ] [ SQL ] SELECT * FROM `note` WHERE  `groups` = 'DesignPattern' ORDER BY date desc [ RunTime:0.001741s ]
---------------------------------------------------------------
[ 2018-11-19T09:34:00+08:00 ] 74.120.168.12 74.120.168.12 POST /daily/admin/note/ashownote2.html
[ info ] qingrang.top/daily/admin/note/ashownote2.html [运行时间：0.065732s][吞吐率：15.21req/s] [内存消耗：2,162.55kb] [文件加载：52]
[ info ] [ LANG ] /var/www/html/daily/thinkphp/lang/zh-cn.php
[ info ] [ ROUTE ] array (
  'type' => 'module',
  'module' => 
  array (
    0 => 'admin',
    1 => 'note',
    2 => 'ashownote2',
  ),
)
[ info ] [ HEADER ] array (
  'host' => 'qingrang.top',
  'content-length' => '19',
  'accept' => 'application/json, text/javascript, */*; q=0.01',
  'origin' => 'http://qingrang.top',
  'x-requested-with' => 'XMLHttpRequest',
  'user-agent' => 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/70.0.3538.102 Safari/537.36',
  'content-type' => 'application/x-www-form-urlencoded',
  'referer' => 'http://qingrang.top/daily/admin/note',
  'accept-encoding' => 'gzip, deflate',
  'accept-language' => 'zh-CN,zh;q=0.9,la;q=0.8,en;q=0.7,lb;q=0.6',
  'cookie' => 'Hm_lvt_1769181352e9adc950166aada465644e=1541082864,1541122974,1541171416,1542098176; PHPSESSID=cvrea98moc9nvt4dg4igb1ep86',
  'connection' => 'close',
)
[ info ] [ PARAM ] array (
  'groupname' => 'Algorithm',
)
[ info ] [ SESSION ] INIT array (
  'id' => '',
  'var_session_id' => '',
  'prefix' => 'think',
  'type' => '',
  'auto_start' => true,
)
[ info ] [ RUN ] app\admin\controller\Note->aShowNote2[ /var/www/html/daily/application/admin/controller/Note.php ]
[ info ] [ DB ] INIT mysql
[ info ] [ LOG ] INIT File
[ sql ] [ DB ] CONNECT:[ UseTime:0.000606s ] mysql:host=74.120.168.12;dbname=diary;charset=utf8
[ sql ] [ SQL ] SHOW COLUMNS FROM `note` [ RunTime:0.001610s ]
[ sql ] [ SQL ] SELECT * FROM `note` WHERE  `groups` = 'Algorithm' ORDER BY date desc [ RunTime:0.001712s ]
---------------------------------------------------------------
[ 2018-11-19T09:34:02+08:00 ] 74.120.168.12 74.120.168.12 POST /daily/admin/note/ashownote2.html
[ info ] qingrang.top/daily/admin/note/ashownote2.html [运行时间：0.049178s][吞吐率：20.33req/s] [内存消耗：2,135.67kb] [文件加载：52]
[ info ] [ LANG ] /var/www/html/daily/thinkphp/lang/zh-cn.php
[ info ] [ ROUTE ] array (
  'type' => 'module',
  'module' => 
  array (
    0 => 'admin',
    1 => 'note',
    2 => 'ashownote2',
  ),
)
[ info ] [ HEADER ] array (
  'host' => 'qingrang.top',
  'content-length' => '13',
  'accept' => 'application/json, text/javascript, */*; q=0.01',
  'origin' => 'http://qingrang.top',
  'x-requested-with' => 'XMLHttpRequest',
  'user-agent' => 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/70.0.3538.102 Safari/537.36',
  'content-type' => 'application/x-www-form-urlencoded',
  'referer' => 'http://qingrang.top/daily/admin/note',
  'accept-encoding' => 'gzip, deflate',
  'accept-language' => 'zh-CN,zh;q=0.9,la;q=0.8,en;q=0.7,lb;q=0.6',
  'cookie' => 'Hm_lvt_1769181352e9adc950166aada465644e=1541082864,1541122974,1541171416,1542098176; PHPSESSID=cvrea98moc9nvt4dg4igb1ep86',
  'connection' => 'close',
)
[ info ] [ PARAM ] array (
  'groupname' => 'PHP',
)
[ info ] [ SESSION ] INIT array (
  'id' => '',
  'var_session_id' => '',
  'prefix' => 'think',
  'type' => '',
  'auto_start' => true,
)
[ info ] [ RUN ] app\admin\controller\Note->aShowNote2[ /var/www/html/daily/application/admin/controller/Note.php ]
[ info ] [ DB ] INIT mysql
[ info ] [ LOG ] INIT File
[ sql ] [ DB ] CONNECT:[ UseTime:0.000481s ] mysql:host=74.120.168.12;dbname=diary;charset=utf8
[ sql ] [ SQL ] SHOW COLUMNS FROM `note` [ RunTime:0.001427s ]
[ sql ] [ SQL ] SELECT * FROM `note` WHERE  `groups` = 'PHP' ORDER BY date desc [ RunTime:0.001495s ]
---------------------------------------------------------------
[ 2018-11-19T09:34:03+08:00 ] 74.120.168.12 74.120.168.12 POST /daily/admin/note/ashownote2.html
[ info ] qingrang.top/daily/admin/note/ashownote2.html [运行时间：0.056800s][吞吐率：17.61req/s] [内存消耗：2,172.04kb] [文件加载：52]
[ info ] [ LANG ] /var/www/html/daily/thinkphp/lang/zh-cn.php
[ info ] [ ROUTE ] array (
  'type' => 'module',
  'module' => 
  array (
    0 => 'admin',
    1 => 'note',
    2 => 'ashownote2',
  ),
)
[ info ] [ HEADER ] array (
  'host' => 'qingrang.top',
  'content-length' => '22',
  'accept' => 'application/json, text/javascript, */*; q=0.01',
  'origin' => 'http://qingrang.top',
  'x-requested-with' => 'XMLHttpRequest',
  'user-agent' => 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/70.0.3538.102 Safari/537.36',
  'content-type' => 'application/x-www-form-urlencoded',
  'referer' => 'http://qingrang.top/daily/admin/note',
  'accept-encoding' => 'gzip, deflate',
  'accept-language' => 'zh-CN,zh;q=0.9,la;q=0.8,en;q=0.7,lb;q=0.6',
  'cookie' => 'Hm_lvt_1769181352e9adc950166aada465644e=1541082864,1541122974,1541171416,1542098176; PHPSESSID=cvrea98moc9nvt4dg4igb1ep86',
  'connection' => 'close',
)
[ info ] [ PARAM ] array (
  'groupname' => 'WebFront-end',
)
[ info ] [ SESSION ] INIT array (
  'id' => '',
  'var_session_id' => '',
  'prefix' => 'think',
  'type' => '',
  'auto_start' => true,
)
[ info ] [ RUN ] app\admin\controller\Note->aShowNote2[ /var/www/html/daily/application/admin/controller/Note.php ]
[ info ] [ DB ] INIT mysql
[ info ] [ LOG ] INIT File
[ sql ] [ DB ] CONNECT:[ UseTime:0.000434s ] mysql:host=74.120.168.12;dbname=diary;charset=utf8
[ sql ] [ SQL ] SHOW COLUMNS FROM `note` [ RunTime:0.001365s ]
[ sql ] [ SQL ] SELECT * FROM `note` WHERE  `groups` = 'WebFront-end' ORDER BY date desc [ RunTime:0.001614s ]
---------------------------------------------------------------
[ 2018-11-19T09:34:05+08:00 ] 74.120.168.12 74.120.168.12 POST /daily/admin/note/ashownote2.html
[ info ] qingrang.top/daily/admin/note/ashownote2.html [运行时间：0.051790s][吞吐率：19.31req/s] [内存消耗：2,162.55kb] [文件加载：52]
[ info ] [ LANG ] /var/www/html/daily/thinkphp/lang/zh-cn.php
[ info ] [ ROUTE ] array (
  'type' => 'module',
  'module' => 
  array (
    0 => 'admin',
    1 => 'note',
    2 => 'ashownote2',
  ),
)
[ info ] [ HEADER ] array (
  'host' => 'qingrang.top',
  'content-length' => '19',
  'accept' => 'application/json, text/javascript, */*; q=0.01',
  'origin' => 'http://qingrang.top',
  'x-requested-with' => 'XMLHttpRequest',
  'user-agent' => 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/70.0.3538.102 Safari/537.36',
  'content-type' => 'application/x-www-form-urlencoded',
  'referer' => 'http://qingrang.top/daily/admin/note',
  'accept-encoding' => 'gzip, deflate',
  'accept-language' => 'zh-CN,zh;q=0.9,la;q=0.8,en;q=0.7,lb;q=0.6',
  'cookie' => 'Hm_lvt_1769181352e9adc950166aada465644e=1541082864,1541122974,1541171416,1542098176; PHPSESSID=cvrea98moc9nvt4dg4igb1ep86',
  'connection' => 'close',
)
[ info ] [ PARAM ] array (
  'groupname' => 'Algorithm',
)
[ info ] [ SESSION ] INIT array (
  'id' => '',
  'var_session_id' => '',
  'prefix' => 'think',
  'type' => '',
  'auto_start' => true,
)
[ info ] [ RUN ] app\admin\controller\Note->aShowNote2[ /var/www/html/daily/application/admin/controller/Note.php ]
[ info ] [ DB ] INIT mysql
[ info ] [ LOG ] INIT File
[ sql ] [ DB ] CONNECT:[ UseTime:0.000498s ] mysql:host=74.120.168.12;dbname=diary;charset=utf8
[ sql ] [ SQL ] SHOW COLUMNS FROM `note` [ RunTime:0.002834s ]
[ sql ] [ SQL ] SELECT * FROM `note` WHERE  `groups` = 'Algorithm' ORDER BY date desc [ RunTime:0.001893s ]
---------------------------------------------------------------
[ 2018-11-19T09:34:07+08:00 ] 74.120.168.12 74.120.168.12 POST /daily/admin/note/ashownote2.html
[ info ] qingrang.top/daily/admin/note/ashownote2.html [运行时间：0.065076s][吞吐率：15.37req/s] [内存消耗：2,249.68kb] [文件加载：52]
[ info ] [ LANG ] /var/www/html/daily/thinkphp/lang/zh-cn.php
[ info ] [ ROUTE ] array (
  'type' => 'module',
  'module' => 
  array (
    0 => 'admin',
    1 => 'note',
    2 => 'ashownote2',
  ),
)
[ info ] [ HEADER ] array (
  'host' => 'qingrang.top',
  'content-length' => '16',
  'accept' => 'application/json, text/javascript, */*; q=0.01',
  'origin' => 'http://qingrang.top',
  'x-requested-with' => 'XMLHttpRequest',
  'user-agent' => 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/70.0.3538.102 Safari/537.36',
  'content-type' => 'application/x-www-form-urlencoded',
  'referer' => 'http://qingrang.top/daily/admin/note',
  'accept-encoding' => 'gzip, deflate',
  'accept-language' => 'zh-CN,zh;q=0.9,la;q=0.8,en;q=0.7,lb;q=0.6',
  'cookie' => 'Hm_lvt_1769181352e9adc950166aada465644e=1541082864,1541122974,1541171416,1542098176; PHPSESSID=cvrea98moc9nvt4dg4igb1ep86',
  'connection' => 'close',
)
[ info ] [ PARAM ] array (
  'groupname' => 'Basics',
)
[ info ] [ SESSION ] INIT array (
  'id' => '',
  'var_session_id' => '',
  'prefix' => 'think',
  'type' => '',
  'auto_start' => true,
)
[ info ] [ RUN ] app\admin\controller\Note->aShowNote2[ /var/www/html/daily/application/admin/controller/Note.php ]
[ info ] [ DB ] INIT mysql
[ info ] [ LOG ] INIT File
[ sql ] [ DB ] CONNECT:[ UseTime:0.000536s ] mysql:host=74.120.168.12;dbname=diary;charset=utf8
[ sql ] [ SQL ] SHOW COLUMNS FROM `note` [ RunTime:0.001633s ]
[ sql ] [ SQL ] SELECT * FROM `note` WHERE  `groups` = 'Basics' ORDER BY date desc [ RunTime:0.002111s ]
---------------------------------------------------------------
[ 2018-11-19T09:34:08+08:00 ] 74.120.168.12 74.120.168.12 POST /daily/admin/note/ashownote2.html
[ info ] qingrang.top/daily/admin/note/ashownote2.html [运行时间：0.064723s][吞吐率：15.45req/s] [内存消耗：2,596.34kb] [文件加载：52]
[ info ] [ LANG ] /var/www/html/daily/thinkphp/lang/zh-cn.php
[ info ] [ ROUTE ] array (
  'type' => 'module',
  'module' => 
  array (
    0 => 'admin',
    1 => 'note',
    2 => 'ashownote2',
  ),
)
[ info ] [ HEADER ] array (
  'host' => 'qingrang.top',
  'content-length' => '14',
  'accept' => 'application/json, text/javascript, */*; q=0.01',
  'origin' => 'http://qingrang.top',
  'x-requested-with' => 'XMLHttpRequest',
  'user-agent' => 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/70.0.3538.102 Safari/537.36',
  'content-type' => 'application/x-www-form-urlencoded',
  'referer' => 'http://qingrang.top/daily/admin/note',
  'accept-encoding' => 'gzip, deflate',
  'accept-language' => 'zh-CN,zh;q=0.9,la;q=0.8,en;q=0.7,lb;q=0.6',
  'cookie' => 'Hm_lvt_1769181352e9adc950166aada465644e=1541082864,1541122974,1541171416,1542098176; PHPSESSID=cvrea98moc9nvt4dg4igb1ep86',
  'connection' => 'close',
)
[ info ] [ PARAM ] array (
  'groupname' => 'Java',
)
[ info ] [ SESSION ] INIT array (
  'id' => '',
  'var_session_id' => '',
  'prefix' => 'think',
  'type' => '',
  'auto_start' => true,
)
[ info ] [ RUN ] app\admin\controller\Note->aShowNote2[ /var/www/html/daily/application/admin/controller/Note.php ]
[ info ] [ DB ] INIT mysql
[ info ] [ LOG ] INIT File
[ sql ] [ DB ] CONNECT:[ UseTime:0.000513s ] mysql:host=74.120.168.12;dbname=diary;charset=utf8
[ sql ] [ SQL ] SHOW COLUMNS FROM `note` [ RunTime:0.001398s ]
[ sql ] [ SQL ] SELECT * FROM `note` WHERE  `groups` = 'Java' ORDER BY date desc [ RunTime:0.002384s ]
---------------------------------------------------------------
[ 2018-11-19T09:34:11+08:00 ] 74.120.168.12 74.120.168.12 POST /daily/admin/note/ashownote2.html
[ info ] qingrang.top/daily/admin/note/ashownote2.html [运行时间：0.065590s][吞吐率：15.25req/s] [内存消耗：2,545.22kb] [文件加载：52]
[ info ] [ LANG ] /var/www/html/daily/thinkphp/lang/zh-cn.php
[ info ] [ ROUTE ] array (
  'type' => 'module',
  'module' => 
  array (
    0 => 'admin',
    1 => 'note',
    2 => 'ashownote2',
  ),
)
[ info ] [ HEADER ] array (
  'host' => 'qingrang.top',
  'content-length' => '17',
  'accept' => 'application/json, text/javascript, */*; q=0.01',
  'origin' => 'http://qingrang.top',
  'x-requested-with' => 'XMLHttpRequest',
  'user-agent' => 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/70.0.3538.102 Safari/537.36',
  'content-type' => 'application/x-www-form-urlencoded',
  'referer' => 'http://qingrang.top/daily/admin/note',
  'accept-encoding' => 'gzip, deflate',
  'accept-language' => 'zh-CN,zh;q=0.9,la;q=0.8,en;q=0.7,lb;q=0.6',
  'cookie' => 'Hm_lvt_1769181352e9adc950166aada465644e=1541082864,1541122974,1541171416,1542098176; PHPSESSID=cvrea98moc9nvt4dg4igb1ep86',
  'connection' => 'close',
)
[ info ] [ PARAM ] array (
  'groupname' => 'Android',
)
[ info ] [ SESSION ] INIT array (
  'id' => '',
  'var_session_id' => '',
  'prefix' => 'think',
  'type' => '',
  'auto_start' => true,
)
[ info ] [ RUN ] app\admin\controller\Note->aShowNote2[ /var/www/html/daily/application/admin/controller/Note.php ]
[ info ] [ DB ] INIT mysql
[ info ] [ LOG ] INIT File
[ sql ] [ DB ] CONNECT:[ UseTime:0.000473s ] mysql:host=74.120.168.12;dbname=diary;charset=utf8
[ sql ] [ SQL ] SHOW COLUMNS FROM `note` [ RunTime:0.001942s ]
[ sql ] [ SQL ] SELECT * FROM `note` WHERE  `groups` = 'Android' ORDER BY date desc [ RunTime:0.002418s ]
---------------------------------------------------------------
[ 2018-11-19T09:34:16+08:00 ] 74.120.168.12 74.120.168.12 POST /daily/admin/note/ashownote2.html
[ info ] qingrang.top/daily/admin/note/ashownote2.html [运行时间：0.049350s][吞吐率：20.26req/s] [内存消耗：2,162.55kb] [文件加载：52]
[ info ] [ LANG ] /var/www/html/daily/thinkphp/lang/zh-cn.php
[ info ] [ ROUTE ] array (
  'type' => 'module',
  'module' => 
  array (
    0 => 'admin',
    1 => 'note',
    2 => 'ashownote2',
  ),
)
[ info ] [ HEADER ] array (
  'host' => 'qingrang.top',
  'content-length' => '19',
  'accept' => 'application/json, text/javascript, */*; q=0.01',
  'origin' => 'http://qingrang.top',
  'x-requested-with' => 'XMLHttpRequest',
  'user-agent' => 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/70.0.3538.102 Safari/537.36',
  'content-type' => 'application/x-www-form-urlencoded',
  'referer' => 'http://qingrang.top/daily/admin/note',
  'accept-encoding' => 'gzip, deflate',
  'accept-language' => 'zh-CN,zh;q=0.9,la;q=0.8,en;q=0.7,lb;q=0.6',
  'cookie' => 'Hm_lvt_1769181352e9adc950166aada465644e=1541082864,1541122974,1541171416,1542098176; PHPSESSID=cvrea98moc9nvt4dg4igb1ep86',
  'connection' => 'close',
)
[ info ] [ PARAM ] array (
  'groupname' => 'Algorithm',
)
[ info ] [ SESSION ] INIT array (
  'id' => '',
  'var_session_id' => '',
  'prefix' => 'think',
  'type' => '',
  'auto_start' => true,
)
[ info ] [ RUN ] app\admin\controller\Note->aShowNote2[ /var/www/html/daily/application/admin/controller/Note.php ]
[ info ] [ DB ] INIT mysql
[ info ] [ LOG ] INIT File
[ sql ] [ DB ] CONNECT:[ UseTime:0.000509s ] mysql:host=74.120.168.12;dbname=diary;charset=utf8
[ sql ] [ SQL ] SHOW COLUMNS FROM `note` [ RunTime:0.001804s ]
[ sql ] [ SQL ] SELECT * FROM `note` WHERE  `groups` = 'Algorithm' ORDER BY date desc [ RunTime:0.001640s ]
---------------------------------------------------------------
[ 2018-11-19T09:34:21+08:00 ] 74.120.168.12 74.120.168.12 POST /daily/admin/note/ashownote2.html
[ info ] qingrang.top/daily/admin/note/ashownote2.html [运行时间：0.050489s][吞吐率：19.81req/s] [内存消耗：2,416.80kb] [文件加载：52]
[ info ] [ LANG ] /var/www/html/daily/thinkphp/lang/zh-cn.php
[ info ] [ ROUTE ] array (
  'type' => 'module',
  'module' => 
  array (
    0 => 'admin',
    1 => 'note',
    2 => 'ashownote2',
  ),
)
[ info ] [ HEADER ] array (
  'host' => 'qingrang.top',
  'content-length' => '15',
  'accept' => 'application/json, text/javascript, */*; q=0.01',
  'origin' => 'http://qingrang.top',
  'x-requested-with' => 'XMLHttpRequest',
  'user-agent' => 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/70.0.3538.102 Safari/537.36',
  'content-type' => 'application/x-www-form-urlencoded',
  'referer' => 'http://qingrang.top/daily/admin/note',
  'accept-encoding' => 'gzip, deflate',
  'accept-language' => 'zh-CN,zh;q=0.9,la;q=0.8,en;q=0.7,lb;q=0.6',
  'cookie' => 'Hm_lvt_1769181352e9adc950166aada465644e=1541082864,1541122974,1541171416,1542098176; PHPSESSID=cvrea98moc9nvt4dg4igb1ep86',
  'connection' => 'close',
)
[ info ] [ PARAM ] array (
  'groupname' => 'Linux',
)
[ info ] [ SESSION ] INIT array (
  'id' => '',
  'var_session_id' => '',
  'prefix' => 'think',
  'type' => '',
  'auto_start' => true,
)
[ info ] [ RUN ] app\admin\controller\Note->aShowNote2[ /var/www/html/daily/application/admin/controller/Note.php ]
[ info ] [ DB ] INIT mysql
[ info ] [ LOG ] INIT File
[ sql ] [ DB ] CONNECT:[ UseTime:0.000533s ] mysql:host=74.120.168.12;dbname=diary;charset=utf8
[ sql ] [ SQL ] SHOW COLUMNS FROM `note` [ RunTime:0.001405s ]
[ sql ] [ SQL ] SELECT * FROM `note` WHERE  `groups` = 'Linux' ORDER BY date desc [ RunTime:0.001855s ]
---------------------------------------------------------------
[ 2018-11-19T09:34:25+08:00 ] 74.120.168.12 74.120.168.12 POST /daily/admin/note/ashownote2.html
[ info ] qingrang.top/daily/admin/note/ashownote2.html [运行时间：0.069041s][吞吐率：14.48req/s] [内存消耗：2,596.34kb] [文件加载：52]
[ info ] [ LANG ] /var/www/html/daily/thinkphp/lang/zh-cn.php
[ info ] [ ROUTE ] array (
  'type' => 'module',
  'module' => 
  array (
    0 => 'admin',
    1 => 'note',
    2 => 'ashownote2',
  ),
)
[ info ] [ HEADER ] array (
  'host' => 'qingrang.top',
  'content-length' => '14',
  'accept' => 'application/json, text/javascript, */*; q=0.01',
  'origin' => 'http://qingrang.top',
  'x-requested-with' => 'XMLHttpRequest',
  'user-agent' => 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/70.0.3538.102 Safari/537.36',
  'content-type' => 'application/x-www-form-urlencoded',
  'referer' => 'http://qingrang.top/daily/admin/note',
  'accept-encoding' => 'gzip, deflate',
  'accept-language' => 'zh-CN,zh;q=0.9,la;q=0.8,en;q=0.7,lb;q=0.6',
  'cookie' => 'Hm_lvt_1769181352e9adc950166aada465644e=1541082864,1541122974,1541171416,1542098176; PHPSESSID=cvrea98moc9nvt4dg4igb1ep86',
  'connection' => 'close',
)
[ info ] [ PARAM ] array (
  'groupname' => 'Java',
)
[ info ] [ SESSION ] INIT array (
  'id' => '',
  'var_session_id' => '',
  'prefix' => 'think',
  'type' => '',
  'auto_start' => true,
)
[ info ] [ RUN ] app\admin\controller\Note->aShowNote2[ /var/www/html/daily/application/admin/controller/Note.php ]
[ info ] [ DB ] INIT mysql
[ info ] [ LOG ] INIT File
[ sql ] [ DB ] CONNECT:[ UseTime:0.000632s ] mysql:host=74.120.168.12;dbname=diary;charset=utf8
[ sql ] [ SQL ] SHOW COLUMNS FROM `note` [ RunTime:0.001458s ]
[ sql ] [ SQL ] SELECT * FROM `note` WHERE  `groups` = 'Java' ORDER BY date desc [ RunTime:0.002364s ]
---------------------------------------------------------------
[ 2018-11-19T09:34:28+08:00 ] 74.120.168.12 74.120.168.12 GET /daily/admin/note
[ info ] qingrang.top/daily/admin/note [运行时间：0.069669s][吞吐率：14.35req/s] [内存消耗：2,345.71kb] [文件加载：56]
[ info ] [ LANG ] /var/www/html/daily/thinkphp/lang/zh-cn.php
[ info ] [ ROUTE ] array (
  'type' => 'module',
  'module' => 
  array (
    0 => 'admin',
    1 => 'note',
    2 => NULL,
  ),
)
[ info ] [ HEADER ] array (
  'host' => 'qingrang.top',
  'upgrade-insecure-requests' => '1',
  'user-agent' => 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/70.0.3538.102 Safari/537.36',
  'accept' => 'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8',
  'accept-encoding' => 'gzip, deflate',
  'accept-language' => 'zh-CN,zh;q=0.9,la;q=0.8,en;q=0.7,lb;q=0.6',
  'cookie' => 'Hm_lvt_1769181352e9adc950166aada465644e=1541082864,1541122974,1541171416,1542098176; PHPSESSID=cvrea98moc9nvt4dg4igb1ep86',
  'connection' => 'close',
)
[ info ] [ PARAM ] array (
)
[ info ] [ SESSION ] INIT array (
  'id' => '',
  'var_session_id' => '',
  'prefix' => 'think',
  'type' => '',
  'auto_start' => true,
)
[ info ] [ RUN ] app\admin\controller\Note->notelst[ /var/www/html/daily/application/admin/controller/Note.php ]
[ info ] [ DB ] INIT mysql
[ info ] [ VIEW ] /var/www/html/daily/application/admin/view/note/notelst.html [ array (
  0 => 'stickList',
  1 => 'hide',
  2 => 'list',
  3 => 'list_new',
  4 => 'groups',
  5 => 'groups0',
  6 => 'groups1',
  7 => 'groups2',
  8 => 'count',
  9 => 'year',
  10 => 'default_num',
) ]
[ info ] [ LOG ] INIT File
[ sql ] [ DB ] CONNECT:[ UseTime:0.000749s ] mysql:host=74.120.168.12;dbname=diary;charset=utf8
[ sql ] [ SQL ] SHOW COLUMNS FROM `note` [ RunTime:0.001322s ]
[ sql ] [ SQL ] SELECT * FROM `note` WHERE  `groups` <> 'Personal'  AND `is_show` = 1 ORDER BY date desc,id desc [ RunTime:0.001773s ]
[ sql ] [ SQL ] SELECT * FROM `note` WHERE  `groups` <> 'Personal'  AND `is_show` <> 1 ORDER BY gmt_modified desc LIMIT 5 [ RunTime:0.002163s ]
[ sql ] [ SQL ] SHOW COLUMNS FROM `config` [ RunTime:0.000891s ]
[ sql ] [ SQL ] SELECT * FROM `config` WHERE  `name` = 'hide' LIMIT 1 [ RunTime:0.000314s ]
[ sql ] [ SQL ] SELECT * FROM `note` WHERE  `id` < 5 [ RunTime:0.000516s ]
[ sql ] [ SQL ] SHOW COLUMNS FROM `groups` [ RunTime:0.000853s ]
[ sql ] [ SQL ] SELECT * FROM `groups` [ RunTime:0.000286s ]
[ sql ] [ SQL ] SELECT * FROM `groups` WHERE  `parent_id` = 0  AND `id` <> 2 ORDER BY `groups` [ RunTime:0.000382s ]
[ sql ] [ SQL ] SELECT `groups` FROM `groups` WHERE  `parent_id` = 1 [ RunTime:0.000335s ]
[ sql ] [ SQL ] SELECT * FROM `groups` WHERE  `parent_id` = 2 ORDER BY `groups` [ RunTime:0.000363s ]
[ sql ] [ SQL ] SELECT COUNT(*) AS tp_count FROM `note` WHERE  `groups` = 'Default' LIMIT 1 [ RunTime:0.001206s ]
[ sql ] [ SQL ] SELECT COUNT(*) AS tp_count FROM `note` LIMIT 1 [ RunTime:0.000279s ]
[ sql ] [ SQL ] SHOW COLUMNS FROM `yearlist` [ RunTime:0.001566s ]
[ sql ] [ SQL ] SELECT DISTINCT  `year` FROM `yearlist` ORDER BY year desc [ RunTime:0.000648s ]
---------------------------------------------------------------
[ 2018-11-19T09:36:04+08:00 ] 74.120.168.12 74.120.168.12 GET /daily/admin/note/editnote/id/250.html
[ info ] qingrang.top/daily/admin/note/editnote/id/250.html [运行时间：0.053216s][吞吐率：18.79req/s] [内存消耗：2,029.00kb] [文件加载：56]
[ info ] [ LANG ] /var/www/html/daily/thinkphp/lang/zh-cn.php
[ info ] [ ROUTE ] array (
  'type' => 'module',
  'module' => 
  array (
    0 => 'admin',
    1 => 'note',
    2 => 'editnote',
  ),
)
[ info ] [ HEADER ] array (
  'host' => 'qingrang.top',
  'upgrade-insecure-requests' => '1',
  'user-agent' => 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/70.0.3538.102 Safari/537.36',
  'accept' => 'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8',
  'referer' => 'http://qingrang.top/daily/admin/note',
  'accept-encoding' => 'gzip, deflate',
  'accept-language' => 'zh-CN,zh;q=0.9,la;q=0.8,en;q=0.7,lb;q=0.6',
  'cookie' => 'Hm_lvt_1769181352e9adc950166aada465644e=1541082864,1541122974,1541171416,1542098176; PHPSESSID=cvrea98moc9nvt4dg4igb1ep86',
  'connection' => 'close',
)
[ info ] [ PARAM ] array (
  'id' => '250',
)
[ info ] [ SESSION ] INIT array (
  'id' => '',
  'var_session_id' => '',
  'prefix' => 'think',
  'type' => '',
  'auto_start' => true,
)
[ info ] [ RUN ] app\admin\controller\Note->editNote[ /var/www/html/daily/application/admin/controller/Note.php ]
[ info ] [ DB ] INIT mysql
[ info ] [ VIEW ] /var/www/html/daily/application/admin/view/note/editnote.html [ array (
  0 => 'note',
  1 => 'groups',
) ]
[ info ] [ LOG ] INIT File
[ sql ] [ DB ] CONNECT:[ UseTime:0.000517s ] mysql:host=74.120.168.12;dbname=diary;charset=utf8
[ sql ] [ SQL ] SHOW COLUMNS FROM `note` [ RunTime:0.001354s ]
[ sql ] [ SQL ] SELECT * FROM `note` WHERE  `id` = 250 LIMIT 1 [ RunTime:0.000427s ]
[ sql ] [ SQL ] SHOW COLUMNS FROM `groups` [ RunTime:0.000859s ]
[ sql ] [ SQL ] SELECT * FROM `groups` [ RunTime:0.000286s ]
---------------------------------------------------------------
[ 2018-11-19T09:36:23+08:00 ] 74.120.168.12 74.120.168.12 POST /daily/admin/note/ashownote2.html
[ info ] qingrang.top/daily/admin/note/ashownote2.html [运行时间：0.051456s][吞吐率：19.43req/s] [内存消耗：2,133.75kb] [文件加载：52]
[ info ] [ LANG ] /var/www/html/daily/thinkphp/lang/zh-cn.php
[ info ] [ ROUTE ] array (
  'type' => 'module',
  'module' => 
  array (
    0 => 'admin',
    1 => 'note',
    2 => 'ashownote2',
  ),
)
[ info ] [ HEADER ] array (
  'host' => 'qingrang.top',
  'content-length' => '16',
  'accept' => 'application/json, text/javascript, */*; q=0.01',
  'origin' => 'http://qingrang.top',
  'x-requested-with' => 'XMLHttpRequest',
  'user-agent' => 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/70.0.3538.102 Safari/537.36',
  'content-type' => 'application/x-www-form-urlencoded',
  'referer' => 'http://qingrang.top/daily/admin/note',
  'accept-encoding' => 'gzip, deflate',
  'accept-language' => 'zh-CN,zh;q=0.9,la;q=0.8,en;q=0.7,lb;q=0.6',
  'cookie' => 'Hm_lvt_1769181352e9adc950166aada465644e=1541082864,1541122974,1541171416,1542098176; PHPSESSID=cvrea98moc9nvt4dg4igb1ep86',
  'connection' => 'close',
)
[ info ] [ PARAM ] array (
  'groupname' => 'Python',
)
[ info ] [ SESSION ] INIT array (
  'id' => '',
  'var_session_id' => '',
  'prefix' => 'think',
  'type' => '',
  'auto_start' => true,
)
[ info ] [ RUN ] app\admin\controller\Note->aShowNote2[ /var/www/html/daily/application/admin/controller/Note.php ]
[ info ] [ DB ] INIT mysql
[ info ] [ LOG ] INIT File
[ sql ] [ DB ] CONNECT:[ UseTime:0.000509s ] mysql:host=74.120.168.12;dbname=diary;charset=utf8
[ sql ] [ SQL ] SHOW COLUMNS FROM `note` [ RunTime:0.001697s ]
[ sql ] [ SQL ] SELECT * FROM `note` WHERE  `groups` = 'Python' ORDER BY date desc [ RunTime:0.001461s ]
---------------------------------------------------------------
[ 2018-11-19T09:36:26+08:00 ] 74.120.168.12 74.120.168.12 GET /daily/admin/note/editNote/id/195
[ info ] qingrang.top/daily/admin/note/editNote/id/195 [运行时间：0.059207s][吞吐率：16.89req/s] [内存消耗：2,033.29kb] [文件加载：56]
[ info ] [ LANG ] /var/www/html/daily/thinkphp/lang/zh-cn.php
[ info ] [ ROUTE ] array (
  'type' => 'module',
  'module' => 
  array (
    0 => 'admin',
    1 => 'note',
    2 => 'editNote',
  ),
)
[ info ] [ HEADER ] array (
  'host' => 'qingrang.top',
  'upgrade-insecure-requests' => '1',
  'user-agent' => 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/70.0.3538.102 Safari/537.36',
  'accept' => 'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8',
  'referer' => 'http://qingrang.top/daily/admin/note',
  'accept-encoding' => 'gzip, deflate',
  'accept-language' => 'zh-CN,zh;q=0.9,la;q=0.8,en;q=0.7,lb;q=0.6',
  'cookie' => 'Hm_lvt_1769181352e9adc950166aada465644e=1541082864,1541122974,1541171416,1542098176; PHPSESSID=cvrea98moc9nvt4dg4igb1ep86',
  'connection' => 'close',
)
[ info ] [ PARAM ] array (
  'id' => '195',
)
[ info ] [ SESSION ] INIT array (
  'id' => '',
  'var_session_id' => '',
  'prefix' => 'think',
  'type' => '',
  'auto_start' => true,
)
[ info ] [ RUN ] app\admin\controller\Note->editNote[ /var/www/html/daily/application/admin/controller/Note.php ]
[ info ] [ DB ] INIT mysql
[ info ] [ VIEW ] /var/www/html/daily/application/admin/view/note/editnote.html [ array (
  0 => 'note',
  1 => 'groups',
) ]
[ info ] [ LOG ] INIT File
[ sql ] [ DB ] CONNECT:[ UseTime:0.000498s ] mysql:host=74.120.168.12;dbname=diary;charset=utf8
[ sql ] [ SQL ] SHOW COLUMNS FROM `note` [ RunTime:0.001490s ]
[ sql ] [ SQL ] SELECT * FROM `note` WHERE  `id` = 195 LIMIT 1 [ RunTime:0.000508s ]
[ sql ] [ SQL ] SHOW COLUMNS FROM `groups` [ RunTime:0.000953s ]
[ sql ] [ SQL ] SELECT * FROM `groups` [ RunTime:0.000366s ]
---------------------------------------------------------------
[ 2018-11-19T09:36:37+08:00 ] 74.120.168.12 74.120.168.12 POST /daily/admin/note/updatenote/id/195.html
[ info ] qingrang.top/daily/admin/note/updatenote/id/195.html [运行时间：0.066808s][吞吐率：14.97req/s] [内存消耗：2,081.70kb] [文件加载：58]
[ info ] [ LANG ] /var/www/html/daily/thinkphp/lang/zh-cn.php
[ info ] [ ROUTE ] array (
  'type' => 'module',
  'module' => 
  array (
    0 => 'admin',
    1 => 'note',
    2 => 'updatenote',
  ),
)
[ info ] [ HEADER ] array (
  'host' => 'qingrang.top',
  'content-length' => '9426',
  'cache-control' => 'max-age=0',
  'origin' => 'http://qingrang.top',
  'upgrade-insecure-requests' => '1',
  'content-type' => 'application/x-www-form-urlencoded',
  'user-agent' => 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/70.0.3538.102 Safari/537.36',
  'accept' => 'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8',
  'referer' => 'http://qingrang.top/daily/admin/note/editNote/id/195',
  'accept-encoding' => 'gzip, deflate',
  'accept-language' => 'zh-CN,zh;q=0.9,la;q=0.8,en;q=0.7,lb;q=0.6',
  'cookie' => 'Hm_lvt_1769181352e9adc950166aada465644e=1541082864,1541122974,1541171416,1542098176; PHPSESSID=cvrea98moc9nvt4dg4igb1ep86',
  'connection' => 'close',
)
[ info ] [ PARAM ] array (
  'summary' => '一些基础语法，主要是列出与 java，C# 等的差异。',
  'content' => '# Python 基础知识
`python`

[TOC]
## 声明文件编码
```
# 指定脚本调用方式
#!/usr/bin/env python

# 配置 utf-8 编码
# -*- coding: utf-8 -*-

# 配置其他编码
# -*- coding: <encoding-name> -*-

# Vim 中还可以使用如下方式
# vim:fileencoding=<encoding-name>
```
## 交互
### 输入
```
a = input(\'请输入：\')
print(a)
```
## 变量和简单数据类型
### 变量
尽量使用小写和下划线命名
```
result_msg = "Hello World!"
print(result_msg)
```
### 字符串
单双引号都行。
#### 大小写转换
```
msg = \'"hello" world!\'
print(msg.title())
------------------
"Hello" World!
------------------
# 函数
title()：以首字母大写的方式显示每个单词
upper()：全大写
lower()：全小写
```
#### 去两端的特别字符 `strip()`
>函数

strip()：去两端的字符
lstrip()：去左端的字符
rstrip()：去右端的字符
```
msg = " hel lo "
# 默认空格
print("-" + msg.strip() + "-")
--------------
-hel lo-
--------------
======================================
# 指定字符
msg = "+hello+"
print(msg.strip(\'+\'))
--------------
hello
--------------
```
### 整数
```
num1 = 3
num2 = 3
# ** 表示乘方运算
print(num1 ** num2)
------------------
27
------------------
```
### 类型转换
```
int(str)
float(str)
str(int)
str(float)
```
## if 和 while
### 条件
```
and/or
in/not in
```
### if
```
score = 65
if score > 90:
    print("A")
elif score > 60:
    print("B")
else:
    print("F")
------------------------------
lst = [1, 2, 3]
a = 2
b = 4

if a in lst:
    print("T")
if b not in lst:
    print("F")
```
### while
```
while a < 5:
    a += 1
```

## 列表
### 基础操作
```
# 创建
list1 = [\'a\', \'b\', \'c\']
list2 = list(range(1, 5))   # [1, 2, 3, 4]
list3 = [4, 1, 3, 2]

# 长度
length = len(list1)

# 负数索引
res = list1[-1]   # 返回倒数第一个元素

# 增
list1.append(\'e\')
list1.insert(3, \'d\')  # 在下标 3，插入 4

# 删
del list1[0]  # 下标
num1 = list1.pop()  # 最后一个元素
num2 = list1.pop(1)  # 有返回值，下标
list1.remove(\'a\')   # 指定值删除

# 排序
list3.sort()
list4 = sorted(list3)
list3.reverse()  # 反转

# 遍历
for s in list1:
    print(s)

# 统计
a = min(list3)
b = max(list3)
c = sum(list3)
```
### 切片
```
list1 = [\'a\', \'b\', \'c\', \'d\', \'e\']

# 利用切片复制列表
list2 = list1[:]

arr = list1[2:4]  # 下标 2 到下标 3
arr = list1[2:]  # 下标 2 到最后
arr = list1[-3:]  # 倒数第三个至最后

# 遍历
for s in list1[:3]:  # 遍历前 3 个元素
    print(s)
```
### 元组：列表中的元素不可变
```
list1 = (\'a\', \'b\', \'c\', \'d\', \'e\')
```



## 字典
```
# 创建
student = {\'name\': \'Tom\', \'age\': 18}
# 增
student[\'sex\'] = \'boy\'
# 改
student[\'age\'] = \'20\'
# 删
del student[\'age\']

# 遍历所有
for k, v in student.items():
    print(k + ":" + v)
# 遍历键
for s in student.keys():
    print(s)
# 遍历值
for s in student.values():
    print(s)
```
## 函数
```
def get_age(name):
    print(name)
    return 23

age = get_age("Tom")
print(age)
```
## 类
```
# 定义类
class Person():
    # 构造方法
    def __init__(self, name, age):
        self.name = name
        self.age = age
    def play_game(self):
        print(self.name + " play game!")
p = Person(\'Tom\', 18)
p.play_game()
# 继承
class Student(Person):
    def __init__(self, name, age, school):
        super().__init__(name, age)
        self.school = school

    @staticmethod
    def static_fun():
        print("静态方法")
stu = Student(\'Joy\', 15, \'QH\')
print(stu.school)
Student.static_fun()
```
## 文件
```
file_name = "F:\\\\1.txt"

# 读取整个文件
with open(file_name) as file:
    content = file.read()
    print(content)

# 逐行读取
with open(file_name) as file:
    for line in file:
        print(line.rstrip() + ".")

# 读取文件行转为列表
with open(file_name) as file:
    lines = file.readlines()
print(lines)

# 写入，覆盖原内容
with open(file_name, \'w\') as file:
    file.write("Hello")

# 写入，追加
with open(file_name, \'a\') as file:
    file.write(" World！")
```
## 异常
```
try:
    print(5/0)
except ZeroDivisionError:
    print("除 0 啦")
    pass    # 抛出
else:   # 仅在 try 代码块成功执行时才执行
    print("= ...")
```
',
  'groups' => 'Python',
  'showsel' => '0',
  'showse2' => '1',
  'id' => '195',
)
[ info ] [ SESSION ] INIT array (
  'id' => '',
  'var_session_id' => '',
  'prefix' => 'think',
  'type' => '',
  'auto_start' => true,
)
[ info ] [ RUN ] app\admin\controller\Note->updateNote[ /var/www/html/daily/application/admin/controller/Note.php ]
[ info ] [ DB ] INIT mysql
[ info ] [ CACHE ] INIT File
[ info ] [ LOG ] INIT File
[ sql ] [ DB ] CONNECT:[ UseTime:0.000836s ] mysql:host=74.120.168.12;dbname=diary;charset=utf8
[ sql ] [ SQL ] SHOW COLUMNS FROM `note` [ RunTime:0.001357s ]
[ sql ] [ SQL ] SELECT * FROM `note` WHERE  `id` = 195 LIMIT 1 [ RunTime:0.000446s ]
[ sql ] [ SQL ] SELECT `groups` FROM `note` WHERE  `id` = 195 LIMIT 1 [ RunTime:0.000317s ]
[ sql ] [ SQL ] SHOW COLUMNS FROM `groups` [ RunTime:0.000976s ]
[ sql ] [ SQL ] SELECT `parent_id` FROM `groups` WHERE  `groups` = 'Python' LIMIT 1 [ RunTime:0.000357s ]
[ sql ] [ SQL ] SELECT `groups` FROM `groups` WHERE  `id` = 2 LIMIT 1 [ RunTime:0.000302s ]
[ sql ] [ SQL ] UPDATE `note`  SET `id`=195,`p_id`=2,`title`='Python 基础知识\r',`content`='# Python 基础知识\r\n`python`\r\n\r\n[TOC]\r\n## 声明文件编码\r\n```\r\n# 指定脚本调用方式\r\n#!/usr/bin/env python\r\n\r\n# 配置 utf-8 编码\r\n# -*- coding: utf-8 -*-\r\n\r\n# 配置其他编码\r\n# -*- coding: <encoding-name> -*-\r\n\r\n# Vim 中还可以使用如下方式\r\n# vim:fileencoding=<encoding-name>\r\n```\r\n## 交互\r\n### 输入\r\n```\r\na = input(\'请输入：\')\r\nprint(a)\r\n```\r\n## 变量和简单数据类型\r\n### 变量\r\n尽量使用小写和下划线命名\r\n```\r\nresult_msg = \"Hello World!\"\r\nprint(result_msg)\r\n```\r\n### 字符串\r\n单双引号都行。\r\n#### 大小写转换\r\n```\r\nmsg = \'\"hello\" world!\'\r\nprint(msg.title())\r\n------------------\r\n\"Hello\" World!\r\n------------------\r\n# 函数\r\ntitle()：以首字母大写的方式显示每个单词\r\nupper()：全大写\r\nlower()：全小写\r\n```\r\n#### 去两端的特别字符 `strip()`\r\n>函数\r\n\r\nstrip()：去两端的字符\r\nlstrip()：去左端的字符\r\nrstrip()：去右端的字符\r\n```\r\nmsg = \" hel lo \"\r\n# 默认空格\r\nprint(\"-\" + msg.strip() + \"-\")\r\n--------------\r\n-hel lo-\r\n--------------\r\n======================================\r\n# 指定字符\r\nmsg = \"+hello+\"\r\nprint(msg.strip(\'+\'))\r\n--------------\r\nhello\r\n--------------\r\n```\r\n### 整数\r\n```\r\nnum1 = 3\r\nnum2 = 3\r\n# ** 表示乘方运算\r\nprint(num1 ** num2)\r\n------------------\r\n27\r\n------------------\r\n```\r\n### 类型转换\r\n```\r\nint(str)\r\nfloat(str)\r\nstr(int)\r\nstr(float)\r\n```\r\n## if 和 while\r\n### 条件\r\n```\r\nand/or\r\nin/not in\r\n```\r\n### if\r\n```\r\nscore = 65\r\nif score > 90:\r\n    print(\"A\")\r\nelif score > 60:\r\n    print(\"B\")\r\nelse:\r\n    print(\"F\")\r\n------------------------------\r\nlst = [1, 2, 3]\r\na = 2\r\nb = 4\r\n\r\nif a in lst:\r\n    print(\"T\")\r\nif b not in lst:\r\n    print(\"F\")\r\n```\r\n### while\r\n```\r\nwhile a < 5:\r\n    a += 1\r\n```\r\n\r\n## 列表\r\n### 基础操作\r\n```\r\n# 创建\r\nlist1 = [\'a\', \'b\', \'c\']\r\nlist2 = list(range(1, 5))   # [1, 2, 3, 4]\r\nlist3 = [4, 1, 3, 2]\r\n\r\n# 长度\r\nlength = len(list1)\r\n\r\n# 负数索引\r\nres = list1[-1]   # 返回倒数第一个元素\r\n\r\n# 增\r\nlist1.append(\'e\')\r\nlist1.insert(3, \'d\')  # 在下标 3，插入 4\r\n\r\n# 删\r\ndel list1[0]  # 下标\r\nnum1 = list1.pop()  # 最后一个元素\r\nnum2 = list1.pop(1)  # 有返回值，下标\r\nlist1.remove(\'a\')   # 指定值删除\r\n\r\n# 排序\r\nlist3.sort()\r\nlist4 = sorted(list3)\r\nlist3.reverse()  # 反转\r\n\r\n# 遍历\r\nfor s in list1:\r\n    print(s)\r\n\r\n# 统计\r\na = min(list3)\r\nb = max(list3)\r\nc = sum(list3)\r\n```\r\n### 切片\r\n```\r\nlist1 = [\'a\', \'b\', \'c\', \'d\', \'e\']\r\n\r\n# 利用切片复制列表\r\nlist2 = list1[:]\r\n\r\narr = list1[2:4]  # 下标 2 到下标 3\r\narr = list1[2:]  # 下标 2 到最后\r\narr = list1[-3:]  # 倒数第三个至最后\r\n\r\n# 遍历\r\nfor s in list1[:3]:  # 遍历前 3 个元素\r\n    print(s)\r\n```\r\n### 元组：列表中的元素不可变\r\n```\r\nlist1 = (\'a\', \'b\', \'c\', \'d\', \'e\')\r\n```\r\n\r\n\r\n\r\n## 字典\r\n```\r\n# 创建\r\nstudent = {\'name\': \'Tom\', \'age\': 18}\r\n# 增\r\nstudent[\'sex\'] = \'boy\'\r\n# 改\r\nstudent[\'age\'] = \'20\'\r\n# 删\r\ndel student[\'age\']\r\n\r\n# 遍历所有\r\nfor k, v in student.items():\r\n    print(k + \":\" + v)\r\n# 遍历键\r\nfor s in student.keys():\r\n    print(s)\r\n# 遍历值\r\nfor s in student.values():\r\n    print(s)\r\n```\r\n## 函数\r\n```\r\ndef get_age(name):\r\n    print(name)\r\n    return 23\r\n\r\nage = get_age(\"Tom\")\r\nprint(age)\r\n```\r\n## 类\r\n```\r\n# 定义类\r\nclass Person():\r\n    # 构造方法\r\n    def __init__(self, name, age):\r\n        self.name = name\r\n        self.age = age\r\n    def play_game(self):\r\n        print(self.name + \" play game!\")\r\np = Person(\'Tom\', 18)\r\np.play_game()\r\n# 继承\r\nclass Student(Person):\r\n    def __init__(self, name, age, school):\r\n        super().__init__(name, age)\r\n        self.school = school\r\n\r\n    @staticmethod\r\n    def static_fun():\r\n        print(\"静态方法\")\r\nstu = Student(\'Joy\', 15, \'QH\')\r\nprint(stu.school)\r\nStudent.static_fun()\r\n```\r\n## 文件\r\n```\r\nfile_name = \"F:\\\\1.txt\"\r\n\r\n# 读取整个文件\r\nwith open(file_name) as file:\r\n    content = file.read()\r\n    print(content)\r\n\r\n# 逐行读取\r\nwith open(file_name) as file:\r\n    for line in file:\r\n        print(line.rstrip() + \".\")\r\n\r\n# 读取文件行转为列表\r\nwith open(file_name) as file:\r\n    lines = file.readlines()\r\nprint(lines)\r\n\r\n# 写入，覆盖原内容\r\nwith open(file_name, \'w\') as file:\r\n    file.write(\"Hello\")\r\n\r\n# 写入，追加\r\nwith open(file_name, \'a\') as file:\r\n    file.write(\" World！\")\r\n```\r\n## 异常\r\n```\r\ntry:\r\n    print(5/0)\r\nexcept ZeroDivisionError:\r\n    print(\"除 0 啦\")\r\n    pass    # 抛出\r\nelse:   # 仅在 try 代码块成功执行时才执行\r\n    print(\"= ...\")\r\n```\r\n',`groups`='Python',`is_show`=0,`publish`=1,`summary`='一些基础语法，主要是列出与 java，C# 等的差异。',`gmt_modified`='2018-11-19'  WHERE  `id` = 195 [ RunTime:0.000574s ]
[ sql ] [ SQL ] SELECT COUNT(*) AS tp_count FROM `note` WHERE  `groups` = 'Python' LIMIT 1 [ RunTime:0.001313s ]
[ sql ] [ SQL ] UPDATE `groups`  SET `g_count`=1  WHERE  `groups` = 'Python' [ RunTime:0.000479s ]
[ sql ] [ SQL ] SELECT COUNT(*) AS tp_count FROM `note` WHERE  `groups` = 'Python' LIMIT 1 [ RunTime:0.001276s ]
[ sql ] [ SQL ] UPDATE `groups`  SET `g_count`=1  WHERE  `groups` = 'Python' [ RunTime:0.000449s ]
---------------------------------------------------------------
[ 2018-11-19T09:36:38+08:00 ] 74.120.168.12 74.120.168.12 GET /daily/admin/note/shownote/id/195.html
[ info ] qingrang.top/daily/admin/note/shownote/id/195.html [运行时间：0.052968s][吞吐率：18.88req/s] [内存消耗：1,985.34kb] [文件加载：55]
[ info ] [ LANG ] /var/www/html/daily/thinkphp/lang/zh-cn.php
[ info ] [ ROUTE ] array (
  'type' => 'module',
  'module' => 
  array (
    0 => 'admin',
    1 => 'note',
    2 => 'shownote',
  ),
)
[ info ] [ HEADER ] array (
  'host' => 'qingrang.top',
  'cache-control' => 'max-age=0',
  'upgrade-insecure-requests' => '1',
  'user-agent' => 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/70.0.3538.102 Safari/537.36',
  'accept' => 'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8',
  'referer' => 'http://qingrang.top/daily/admin/note/editNote/id/195',
  'accept-encoding' => 'gzip, deflate',
  'accept-language' => 'zh-CN,zh;q=0.9,la;q=0.8,en;q=0.7,lb;q=0.6',
  'cookie' => 'Hm_lvt_1769181352e9adc950166aada465644e=1541082864,1541122974,1541171416,1542098176; PHPSESSID=cvrea98moc9nvt4dg4igb1ep86',
  'connection' => 'close',
)
[ info ] [ PARAM ] array (
  'id' => '195',
)
[ info ] [ SESSION ] INIT array (
  'id' => '',
  'var_session_id' => '',
  'prefix' => 'think',
  'type' => '',
  'auto_start' => true,
)
[ info ] [ RUN ] app\admin\controller\Note->showNote[ /var/www/html/daily/application/admin/controller/Note.php ]
[ info ] [ DB ] INIT mysql
[ info ] [ VIEW ] /var/www/html/daily/application/admin/view/note/shownote.html [ array (
  0 => 'note',
  1 => 'groups',
) ]
[ info ] [ LOG ] INIT File
[ sql ] [ DB ] CONNECT:[ UseTime:0.000497s ] mysql:host=74.120.168.12;dbname=diary;charset=utf8
[ sql ] [ SQL ] SHOW COLUMNS FROM `note` [ RunTime:0.001382s ]
[ sql ] [ SQL ] SELECT * FROM `note` WHERE  `id` = 195 LIMIT 1 [ RunTime:0.000409s ]
[ sql ] [ SQL ] SHOW COLUMNS FROM `groups` [ RunTime:0.000885s ]
[ sql ] [ SQL ] SELECT * FROM `groups` [ RunTime:0.000322s ]
---------------------------------------------------------------
[ 2018-11-19T09:36:43+08:00 ] 74.120.168.12 74.120.168.12 GET /daily/admin/note
[ info ] qingrang.top/daily/admin/note [运行时间：0.071329s][吞吐率：14.02req/s] [内存消耗：2,348.93kb] [文件加载：56]
[ info ] [ LANG ] /var/www/html/daily/thinkphp/lang/zh-cn.php
[ info ] [ ROUTE ] array (
  'type' => 'module',
  'module' => 
  array (
    0 => 'admin',
    1 => 'note',
    2 => NULL,
  ),
)
[ info ] [ HEADER ] array (
  'host' => 'qingrang.top',
  'cache-control' => 'max-age=0',
  'upgrade-insecure-requests' => '1',
  'user-agent' => 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/70.0.3538.102 Safari/537.36',
  'accept' => 'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8',
  'accept-encoding' => 'gzip, deflate',
  'accept-language' => 'zh-CN,zh;q=0.9,la;q=0.8,en;q=0.7,lb;q=0.6',
  'cookie' => 'Hm_lvt_1769181352e9adc950166aada465644e=1541082864,1541122974,1541171416,1542098176; PHPSESSID=cvrea98moc9nvt4dg4igb1ep86',
  'connection' => 'close',
)
[ info ] [ PARAM ] array (
)
[ info ] [ SESSION ] INIT array (
  'id' => '',
  'var_session_id' => '',
  'prefix' => 'think',
  'type' => '',
  'auto_start' => true,
)
[ info ] [ RUN ] app\admin\controller\Note->notelst[ /var/www/html/daily/application/admin/controller/Note.php ]
[ info ] [ DB ] INIT mysql
[ info ] [ VIEW ] /var/www/html/daily/application/admin/view/note/notelst.html [ array (
  0 => 'stickList',
  1 => 'hide',
  2 => 'list',
  3 => 'list_new',
  4 => 'groups',
  5 => 'groups0',
  6 => 'groups1',
  7 => 'groups2',
  8 => 'count',
  9 => 'year',
  10 => 'default_num',
) ]
[ info ] [ LOG ] INIT File
[ sql ] [ DB ] CONNECT:[ UseTime:0.000476s ] mysql:host=74.120.168.12;dbname=diary;charset=utf8
[ sql ] [ SQL ] SHOW COLUMNS FROM `note` [ RunTime:0.001391s ]
[ sql ] [ SQL ] SELECT * FROM `note` WHERE  `groups` <> 'Personal'  AND `is_show` = 1 ORDER BY date desc,id desc [ RunTime:0.001701s ]
[ sql ] [ SQL ] SELECT * FROM `note` WHERE  `groups` <> 'Personal'  AND `is_show` <> 1 ORDER BY gmt_modified desc LIMIT 5 [ RunTime:0.002226s ]
[ sql ] [ SQL ] SHOW COLUMNS FROM `config` [ RunTime:0.001070s ]
[ sql ] [ SQL ] SELECT * FROM `config` WHERE  `name` = 'hide' LIMIT 1 [ RunTime:0.000401s ]
[ sql ] [ SQL ] SELECT * FROM `note` WHERE  `id` < 5 [ RunTime:0.000523s ]
[ sql ] [ SQL ] SHOW COLUMNS FROM `groups` [ RunTime:0.001117s ]
[ sql ] [ SQL ] SELECT * FROM `groups` [ RunTime:0.000288s ]
[ sql ] [ SQL ] SELECT * FROM `groups` WHERE  `parent_id` = 0  AND `id` <> 2 ORDER BY `groups` [ RunTime:0.000390s ]
[ sql ] [ SQL ] SELECT `groups` FROM `groups` WHERE  `parent_id` = 1 [ RunTime:0.000323s ]
[ sql ] [ SQL ] SELECT * FROM `groups` WHERE  `parent_id` = 2 ORDER BY `groups` [ RunTime:0.000378s ]
[ sql ] [ SQL ] SELECT COUNT(*) AS tp_count FROM `note` WHERE  `groups` = 'Default' LIMIT 1 [ RunTime:0.001576s ]
[ sql ] [ SQL ] SELECT COUNT(*) AS tp_count FROM `note` LIMIT 1 [ RunTime:0.000275s ]
[ sql ] [ SQL ] SHOW COLUMNS FROM `yearlist` [ RunTime:0.001072s ]
[ sql ] [ SQL ] SELECT DISTINCT  `year` FROM `yearlist` ORDER BY year desc [ RunTime:0.000602s ]
---------------------------------------------------------------
[ 2018-11-19T09:57:52+08:00 ] 74.120.168.12 74.120.168.12 POST /daily/admin/note/asearch.html
[ info ] qingrang.top/daily/admin/note/asearch.html [运行时间：0.068633s][吞吐率：14.57req/s] [内存消耗：2,505.59kb] [文件加载：52]
[ info ] [ LANG ] /var/www/html/daily/thinkphp/lang/zh-cn.php
[ info ] [ ROUTE ] array (
  'type' => 'module',
  'module' => 
  array (
    0 => 'admin',
    1 => 'note',
    2 => 'asearch',
  ),
)
[ info ] [ HEADER ] array (
  'host' => 'qingrang.top',
  'content-length' => '22',
  'accept' => 'application/json, text/javascript, */*; q=0.01',
  'origin' => 'http://qingrang.top',
  'x-requested-with' => 'XMLHttpRequest',
  'user-agent' => 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/70.0.3538.102 Safari/537.36',
  'content-type' => 'application/x-www-form-urlencoded',
  'referer' => 'http://qingrang.top/daily/admin/note',
  'accept-encoding' => 'gzip, deflate',
  'accept-language' => 'zh-CN,zh;q=0.9,la;q=0.8,en;q=0.7,lb;q=0.6',
  'cookie' => 'Hm_lvt_1769181352e9adc950166aada465644e=1541082864,1541122974,1541171416,1542098176; PHPSESSID=cvrea98moc9nvt4dg4igb1ep86',
  'connection' => 'close',
)
[ info ] [ PARAM ] array (
  'key' => '代理',
)
[ info ] [ SESSION ] INIT array (
  'id' => '',
  'var_session_id' => '',
  'prefix' => 'think',
  'type' => '',
  'auto_start' => true,
)
[ info ] [ RUN ] app\admin\controller\Note->aSearch[ /var/www/html/daily/application/admin/controller/Note.php ]
[ info ] [ DB ] INIT mysql
[ info ] [ LOG ] INIT File
[ sql ] [ DB ] CONNECT:[ UseTime:0.000690s ] mysql:host=74.120.168.12;dbname=diary;charset=utf8
[ sql ] [ SQL ] SHOW COLUMNS FROM `note` [ RunTime:0.001379s ]
[ sql ] [ SQL ] SELECT * FROM `note` WHERE  ( `title` LIKE '%代理%' OR `content` LIKE '%代理%' ) ORDER BY date desc [ RunTime:0.009316s ]
---------------------------------------------------------------
[ 2018-11-19T09:57:56+08:00 ] 74.120.168.12 74.120.168.12 GET /daily/admin/note/shownote/id/237
[ info ] qingrang.top/daily/admin/note/shownote/id/237 [运行时间：0.053317s][吞吐率：18.76req/s] [内存消耗：1,990.47kb] [文件加载：55]
[ info ] [ LANG ] /var/www/html/daily/thinkphp/lang/zh-cn.php
[ info ] [ ROUTE ] array (
  'type' => 'module',
  'module' => 
  array (
    0 => 'admin',
    1 => 'note',
    2 => 'shownote',
  ),
)
[ info ] [ HEADER ] array (
  'host' => 'qingrang.top',
  'upgrade-insecure-requests' => '1',
  'user-agent' => 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/70.0.3538.102 Safari/537.36',
  'accept' => 'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8',
  'referer' => 'http://qingrang.top/daily/admin/note',
  'accept-encoding' => 'gzip, deflate',
  'accept-language' => 'zh-CN,zh;q=0.9,la;q=0.8,en;q=0.7,lb;q=0.6',
  'cookie' => 'Hm_lvt_1769181352e9adc950166aada465644e=1541082864,1541122974,1541171416,1542098176; PHPSESSID=cvrea98moc9nvt4dg4igb1ep86',
  'connection' => 'close',
)
[ info ] [ PARAM ] array (
  'id' => '237',
)
[ info ] [ SESSION ] INIT array (
  'id' => '',
  'var_session_id' => '',
  'prefix' => 'think',
  'type' => '',
  'auto_start' => true,
)
[ info ] [ RUN ] app\admin\controller\Note->showNote[ /var/www/html/daily/application/admin/controller/Note.php ]
[ info ] [ DB ] INIT mysql
[ info ] [ VIEW ] /var/www/html/daily/application/admin/view/note/shownote.html [ array (
  0 => 'note',
  1 => 'groups',
) ]
[ info ] [ LOG ] INIT File
[ sql ] [ DB ] CONNECT:[ UseTime:0.000550s ] mysql:host=74.120.168.12;dbname=diary;charset=utf8
[ sql ] [ SQL ] SHOW COLUMNS FROM `note` [ RunTime:0.001325s ]
[ sql ] [ SQL ] SELECT * FROM `note` WHERE  `id` = 237 LIMIT 1 [ RunTime:0.000545s ]
[ sql ] [ SQL ] SHOW COLUMNS FROM `groups` [ RunTime:0.001027s ]
[ sql ] [ SQL ] SELECT * FROM `groups` [ RunTime:0.000345s ]
---------------------------------------------------------------
[ 2018-11-19T10:01:13+08:00 ] 74.120.168.12 74.120.168.12 GET /daily/admin/note
[ info ] qingrang.top/daily/admin/note [运行时间：0.080162s][吞吐率：12.47req/s] [内存消耗：2,348.56kb] [文件加载：56]
[ info ] [ LANG ] /var/www/html/daily/thinkphp/lang/zh-cn.php
[ info ] [ ROUTE ] array (
  'type' => 'module',
  'module' => 
  array (
    0 => 'admin',
    1 => 'note',
    2 => NULL,
  ),
)
[ info ] [ HEADER ] array (
  'host' => 'qingrang.top',
  'upgrade-insecure-requests' => '1',
  'user-agent' => 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/70.0.3538.102 Safari/537.36',
  'accept' => 'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8',
  'accept-encoding' => 'gzip, deflate',
  'accept-language' => 'zh-CN,zh;q=0.9,la;q=0.8,en;q=0.7,lb;q=0.6',
  'cookie' => 'Hm_lvt_1769181352e9adc950166aada465644e=1541082864,1541122974,1541171416,1542098176; PHPSESSID=cvrea98moc9nvt4dg4igb1ep86',
  'connection' => 'close',
)
[ info ] [ PARAM ] array (
)
[ info ] [ SESSION ] INIT array (
  'id' => '',
  'var_session_id' => '',
  'prefix' => 'think',
  'type' => '',
  'auto_start' => true,
)
[ info ] [ RUN ] app\admin\controller\Note->notelst[ /var/www/html/daily/application/admin/controller/Note.php ]
[ info ] [ DB ] INIT mysql
[ info ] [ VIEW ] /var/www/html/daily/application/admin/view/note/notelst.html [ array (
  0 => 'stickList',
  1 => 'hide',
  2 => 'list',
  3 => 'list_new',
  4 => 'groups',
  5 => 'groups0',
  6 => 'groups1',
  7 => 'groups2',
  8 => 'count',
  9 => 'year',
  10 => 'default_num',
) ]
[ info ] [ LOG ] INIT File
[ sql ] [ DB ] CONNECT:[ UseTime:0.000519s ] mysql:host=74.120.168.12;dbname=diary;charset=utf8
[ sql ] [ SQL ] SHOW COLUMNS FROM `note` [ RunTime:0.001514s ]
[ sql ] [ SQL ] SELECT * FROM `note` WHERE  `groups` <> 'Personal'  AND `is_show` = 1 ORDER BY date desc,id desc [ RunTime:0.001995s ]
[ sql ] [ SQL ] SELECT * FROM `note` WHERE  `groups` <> 'Personal'  AND `is_show` <> 1 ORDER BY gmt_modified desc LIMIT 5 [ RunTime:0.002383s ]
[ sql ] [ SQL ] SHOW COLUMNS FROM `config` [ RunTime:0.001133s ]
[ sql ] [ SQL ] SELECT * FROM `config` WHERE  `name` = 'hide' LIMIT 1 [ RunTime:0.000369s ]
[ sql ] [ SQL ] SELECT * FROM `note` WHERE  `id` < 5 [ RunTime:0.000988s ]
[ sql ] [ SQL ] SHOW COLUMNS FROM `groups` [ RunTime:0.001018s ]
[ sql ] [ SQL ] SELECT * FROM `groups` [ RunTime:0.000355s ]
[ sql ] [ SQL ] SELECT * FROM `groups` WHERE  `parent_id` = 0  AND `id` <> 2 ORDER BY `groups` [ RunTime:0.000417s ]
[ sql ] [ SQL ] SELECT `groups` FROM `groups` WHERE  `parent_id` = 1 [ RunTime:0.000291s ]
[ sql ] [ SQL ] SELECT * FROM `groups` WHERE  `parent_id` = 2 ORDER BY `groups` [ RunTime:0.000394s ]
[ sql ] [ SQL ] SELECT COUNT(*) AS tp_count FROM `note` WHERE  `groups` = 'Default' LIMIT 1 [ RunTime:0.001477s ]
[ sql ] [ SQL ] SELECT COUNT(*) AS tp_count FROM `note` LIMIT 1 [ RunTime:0.000261s ]
[ sql ] [ SQL ] SHOW COLUMNS FROM `yearlist` [ RunTime:0.001264s ]
[ sql ] [ SQL ] SELECT DISTINCT  `year` FROM `yearlist` ORDER BY year desc [ RunTime:0.000610s ]
---------------------------------------------------------------
[ 2018-11-19T10:01:15+08:00 ] 74.120.168.12 74.120.168.12 GET /daily/admin/note/shownote/id/208.html
[ info ] qingrang.top/daily/admin/note/shownote/id/208.html [运行时间：0.116994s][吞吐率：8.55req/s] [内存消耗：1,983.75kb] [文件加载：55]
[ info ] [ LANG ] /var/www/html/daily/thinkphp/lang/zh-cn.php
[ info ] [ ROUTE ] array (
  'type' => 'module',
  'module' => 
  array (
    0 => 'admin',
    1 => 'note',
    2 => 'shownote',
  ),
)
[ info ] [ HEADER ] array (
  'host' => 'qingrang.top',
  'upgrade-insecure-requests' => '1',
  'user-agent' => 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/70.0.3538.102 Safari/537.36',
  'accept' => 'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8',
  'referer' => 'http://qingrang.top/daily/admin/note',
  'accept-encoding' => 'gzip, deflate',
  'accept-language' => 'zh-CN,zh;q=0.9,la;q=0.8,en;q=0.7,lb;q=0.6',
  'cookie' => 'Hm_lvt_1769181352e9adc950166aada465644e=1541082864,1541122974,1541171416,1542098176; PHPSESSID=cvrea98moc9nvt4dg4igb1ep86',
  'connection' => 'close',
)
[ info ] [ PARAM ] array (
  'id' => '208',
)
[ info ] [ SESSION ] INIT array (
  'id' => '',
  'var_session_id' => '',
  'prefix' => 'think',
  'type' => '',
  'auto_start' => true,
)
[ info ] [ RUN ] app\admin\controller\Note->showNote[ /var/www/html/daily/application/admin/controller/Note.php ]
[ info ] [ DB ] INIT mysql
[ info ] [ VIEW ] /var/www/html/daily/application/admin/view/note/shownote.html [ array (
  0 => 'note',
  1 => 'groups',
) ]
[ info ] [ LOG ] INIT File
[ sql ] [ DB ] CONNECT:[ UseTime:0.000510s ] mysql:host=74.120.168.12;dbname=diary;charset=utf8
[ sql ] [ SQL ] SHOW COLUMNS FROM `note` [ RunTime:0.001298s ]
[ sql ] [ SQL ] SELECT * FROM `note` WHERE  `id` = 208 LIMIT 1 [ RunTime:0.000422s ]
[ sql ] [ SQL ] SHOW COLUMNS FROM `groups` [ RunTime:0.000840s ]
[ sql ] [ SQL ] SELECT * FROM `groups` [ RunTime:0.000280s ]
---------------------------------------------------------------
[ 2018-11-19T10:41:32+08:00 ] 74.120.168.12 74.120.168.12 POST /daily/admin/note/savenote.html
[ info ] qingrang.top/daily/admin/note/savenote.html [运行时间：0.077525s][吞吐率：12.90req/s] [内存消耗：2,093.78kb] [文件加载：56]
[ info ] [ LANG ] /var/www/html/daily/thinkphp/lang/zh-cn.php
[ info ] [ ROUTE ] array (
  'type' => 'module',
  'module' => 
  array (
    0 => 'admin',
    1 => 'note',
    2 => 'savenote',
  ),
)
[ info ] [ HEADER ] array (
  'host' => 'qingrang.top',
  'content-length' => '19905',
  'accept' => 'text/plain, */*; q=0.01',
  'origin' => 'http://qingrang.top',
  'x-requested-with' => 'XMLHttpRequest',
  'user-agent' => 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/70.0.3538.102 Safari/537.36',
  'content-type' => 'application/x-www-form-urlencoded; charset=UTF-8',
  'referer' => 'http://qingrang.top/daily/admin/note/editnote/id/250.html',
  'accept-encoding' => 'gzip, deflate',
  'accept-language' => 'zh-CN,zh;q=0.9,la;q=0.8,en;q=0.7,lb;q=0.6',
  'cookie' => 'Hm_lvt_1769181352e9adc950166aada465644e=1541082864,1541122974,1541171416,1542098176; PHPSESSID=cvrea98moc9nvt4dg4igb1ep86',
  'connection' => 'close',
)
[ info ] [ PARAM ] array (
  'ogroup' => 'Default',
  'context' => '# Spring(二) - AOP（面向切面）
[TOC]

Spring 是一个基于 **IOC** 和 **AOP** 的结构 J2EE 系统的框架。
## AOP 简介
### 概念
AOP（Aspect Orient Programming），面向切面编程，是面向对象编程 OOP 的一种补充。面向对象编程是从静态角度考虑程序的结构，而面向切面编程是从动态角度考虑程序运行过程。

AOP 底层，就是采用动态代理模式实现的。采用了两种代理： JDK 的动态代理，与 CGLIB 的动态代理。

面向切面编程，就是将交叉业务逻辑封装成切面，利用 AOP 容器的功能将切面织入到主业务逻辑中。所谓交叉业务逻辑是指，通用的、与主业务逻辑无关的代码，如安全检查、事务、日志等。

若不使用 AOP，则会出现代码纠缠，即交叉业务逻辑与主业务逻辑混合在一起。这样，会使主业务逻辑变的混杂不清。

例如，转账，在真正转账业务逻辑前后，需要权限控制、日志记录、加载事务、结束事务等交叉业务逻辑，而这些业务逻辑与主业务逻辑间并无直接关系。但，它们的代码量所占比重能达到总代码量的一半甚至还多。它们的存在，不仅产生了大量的“冗余”代码，还大大干扰了主业务逻辑---转账。

### 利用 JDK 动态代理实现 AOP 编程
*ISomeService.java - 主业务接口*
```
public interface ISomeService {
	// 目标方法
	void doFirst();
	// 目标方法
	void doSecond();
}
```
*SomeServiceImpl.java - 目标类*
```
public class SomeServiceImpl implements ISomeService {

	@Override
	public void doFirst() {
		System.out.println("执行doFirst()方法");
	}

	@Override
	public void doSecond() {
		System.out.println("执行doSecond()方法");
	}
}
```
*SystemService.java - 交叉业务逻辑*
```
public class SystemService {
	public static void doLog() {
		System.out.println("执行日志代码");
	}

	public static void doTx() {
		System.out.println("执行事务代码");
	}
}
```
*MyTest.java*
```
@Test
public void MyTest(){
	final ISomeService target = new SomeServiceImpl();
	// 自动生成一个动态代理对象
	ISomeService service = (ISomeService) Proxy.newProxyInstance(
			target.getClass().getClassLoader(), // 目标类的类加载器
			target.getClass().getInterfaces(),  // 目标类实现的接口数组
			new InvocationHandler() { //业务增强逻辑
				// 具体加强的代码逻辑
				@Override
				public Object invoke(Object proxy, Method method, Object[] args) throws Throwable {
					SystemService.doTx(); // 织入
					Object result = method.invoke(target, args); // 执行目标方法
					SystemService.doLog(); // 织入
					return result;
				}
			});
	service.doFirst();
	System.out.println("==============");
	service.doSecond();
}
```
*输出信息*
```
执行事务代码
执行doFirst()方法
执行日志代码
==============
执行事务代码
执行doSecond()方法
执行日志代码
```
## AOP 编程术语
### 切面（Aspect）
切面泛指交叉业务逻辑。上例中的事务处理、日志处理就可以理解为切面。常用的切面有通知与顾问。实际就是对主业务逻辑的一种增强。
### 织入（Weaving）
织入是指将切面代码插入到目标对象的过程。上例中 MyInvocationHandler 类中的 invoke() 方法完成的工作，就可以称为织入。
### 连接点（JoinPoint）
连接点指可以被切面织入的方法。通常业务接口中的方法均为连接点。
### 切入点（Pointcut）
切入点指切面具体织入的方法。在 StudentServiceImpl 类中，若 doSome()将被增强，而doOther()不被增强，则 doSome()为切入点，而 doOther()仅为连接点。被标记为 final 的方法是不能作为连接点与切入点的。因为最终的是不能被修改，不能被增强的。
### 目标对象（Target）
目标对象指将要被增强的对象。即包含主业务逻辑的类的对象。上例中的 StudentServiceImpl 的对象若被增强，则该类称为目标类，该类对象称为目标对象。当然，不被增强，也就无所谓目标不目标了。
### 通知（Advice）
通知是切面的一种实现，可以完成简单织入功能（织入功能就是在这里完成的）。换个角度来说，通知定义了增强码切入到目标代码的时间点，是目标方法执行之前执行，还是之后执行等。通知类型不同，切入时间不同。

**切入点定义切入的位置，通知定义切入的时间。**
### 顾问（Advisor）
顾问是切面的另一种实现，能够将通知以更为复杂的方式织入到目标对象中，是将通知包装为更复杂切面的装配器。






## 通知 Advice
通知（Advice），切面的一种实现，可以完成简单织入功能（织入功能就是在这里完成的）。

常用通知有：前置通知、后置通知、环绕通知、异常处理通知。
### 前置通知 MethodBeforeAdvice
定义前置通知，需要实现 MethodBeforeAdvice 接口。该接口中有一个方法 before()，会在目标方法执行之前执行。 前置通知的特点：
- 在目标方法执行之前先执行。
- 不改变目标方法的执行流程，前置通知代码不能阻止目标方法执行。
- 不改变目标方法执行的结果。

*ISomeService.java - 主业务接口*
```
public interface ISomeService {
	// 目标方法
	void doFirst();
	// 目标方法
	void doSecond();
}
```
*SomeServiceImpl.java - 目标类*
```
public class SomeServiceImpl implements ISomeService {

	@Override
	public void doFirst() {
		System.out.println("执行doFirst()方法");
	}

	@Override
	public void doSecond() {
		System.out.println("执行doSecond()方法");
	}
}
```
*MyMethodBeforeAdvice.java - 前置通知*
```
public class MyMethodBeforeAdvice implements MethodBeforeAdvice {

	// 当前方法在目标方法执行之前执行，method:目标方法，args:目标方法的参数列表，target:目标对象
	@Override
	public void before(Method method, Object[] args, Object target) throws Throwable {
		// 对于目标方法的增强代码就应该写在这里
		System.out.println("执行前置通知方法");
	}
}
```
*applicationContext.mxl*
```
<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xsi:schemaLocation="
        http://www.springframework.org/schema/beans 
        http://www.springframework.org/schema/beans/spring-beans.xsd">

    <!-- 注册目标对象 -->
    <bean id="someService" class="top.qingrang.aop01.SomeServiceImpl"/>

    <!-- 注册切面：通知 -->
    <bean id="myAdvice" class="top.qingrang.aop01.MyMethodBeforeAdvice"/>

    <!-- 生成代理对象 -->
    <bean id="serviceProxy" class="org.springframework.aop.framework.ProxyFactoryBean">
    	<!-- 指定目标对象，随便用哪个 -->
    	<!-- <property name="targetName" value="someService"/> -->
    	<property name="target" ref="someService"/>
		
    	<!-- 指定切面 -->
    	<property name="interceptorNames" value="myAdvice"/>
    </bean>
</beans>
```

### 后置通知 AfterReturningAdvice
定义后置通知，需要实现接口 AfterReturningAdvice。该接口中有一个方法 afterReturning()，会在目标方法执行之后执行。后置通知的特点：
- 在目标方法执行之后执行。
- 不改变目标方法的执行流程，后置通知代码不能阻止目标方法执行。
- 不改变目标方法执行的结果。

*SomeServiceImpl.java - 目标类*
```
public class SomeServiceImpl implements ISomeService {

	@Override
	public void doFirst() {
		System.out.println("执行doFirst()方法");
	}

	@Override
	public String doSecond() {
		System.out.println("执行doSecond()方法");
		return "abcde";
	}
}
```
*MyAfterReturningAdvice.java - 后置通知*
```
// 后置通知：可以获取到目标方法的返回结果，但无法改变目标方法的结果
public class MyAfterReturningAdvice implements AfterReturningAdvice {
	// 在目标方法执行之后执行，returnValue：目标方法的返回值
	@Override
	public void afterReturning(Object returnValue, Method method, Object[] args, Object target) throws Throwable {
		System.out.println("执行后置通知方法  returnValue = " + returnValue);
		if (returnValue != null) {
			returnValue = ((String) returnValue).toUpperCase();
			System.out.println("修改过的结果  returnValue = " + returnValue);
		}
	}
}
```
### 环绕通知 MethodInterceptor
定义环绕通知，需要实现 MethodInterceptor 接口。环绕通知，也叫方法拦截器，可以在目标方法调用之前及之后做处理，可以改变目标方法的返回值，也可以改变程序执行流程。





',
)
[ info ] [ SESSION ] INIT array (
  'id' => '',
  'var_session_id' => '',
  'prefix' => 'think',
  'type' => '',
  'auto_start' => true,
)
[ info ] [ RUN ] app\admin\controller\Note->saveNote[ /var/www/html/daily/application/admin/controller/Note.php ]
[ info ] [ DB ] INIT mysql
[ info ] [ CACHE ] INIT File
[ info ] [ LOG ] INIT File
[ sql ] [ DB ] CONNECT:[ UseTime:0.000612s ] mysql:host=74.120.168.12;dbname=diary;charset=utf8
[ sql ] [ SQL ] SHOW COLUMNS FROM `note` [ RunTime:0.001323s ]
[ sql ] [ SQL ] UPDATE `note`  SET `title`='Spring(二) - AOP（面向切面）',`content`='# Spring(二) - AOP（面向切面）\n[TOC]\n\nSpring 是一个基于 **IOC** 和 **AOP** 的结构 J2EE 系统的框架。\n## AOP 简介\n### 概念\nAOP（Aspect Orient Programming），面向切面编程，是面向对象编程 OOP 的一种补充。面向对象编程是从静态角度考虑程序的结构，而面向切面编程是从动态角度考虑程序运行过程。\n\nAOP 底层，就是采用动态代理模式实现的。采用了两种代理： JDK 的动态代理，与 CGLIB 的动态代理。\n\n面向切面编程，就是将交叉业务逻辑封装成切面，利用 AOP 容器的功能将切面织入到主业务逻辑中。所谓交叉业务逻辑是指，通用的、与主业务逻辑无关的代码，如安全检查、事务、日志等。\n\n若不使用 AOP，则会出现代码纠缠，即交叉业务逻辑与主业务逻辑混合在一起。这样，会使主业务逻辑变的混杂不清。\n\n例如，转账，在真正转账业务逻辑前后，需要权限控制、日志记录、加载事务、结束事务等交叉业务逻辑，而这些业务逻辑与主业务逻辑间并无直接关系。但，它们的代码量所占比重能达到总代码量的一半甚至还多。它们的存在，不仅产生了大量的“冗余”代码，还大大干扰了主业务逻辑---转账。\n\n### 利用 JDK 动态代理实现 AOP 编程\n*ISomeService.java - 主业务接口*\n```\npublic interface ISomeService {\n	// 目标方法\n	void doFirst();\n	// 目标方法\n	void doSecond();\n}\n```\n*SomeServiceImpl.java - 目标类*\n```\npublic class SomeServiceImpl implements ISomeService {\n\n	@Override\n	public void doFirst() {\n		System.out.println(\"执行doFirst()方法\");\n	}\n\n	@Override\n	public void doSecond() {\n		System.out.println(\"执行doSecond()方法\");\n	}\n}\n```\n*SystemService.java - 交叉业务逻辑*\n```\npublic class SystemService {\n	public static void doLog() {\n		System.out.println(\"执行日志代码\");\n	}\n\n	public static void doTx() {\n		System.out.println(\"执行事务代码\");\n	}\n}\n```\n*MyTest.java*\n```\n@Test\npublic void MyTest(){\n	final ISomeService target = new SomeServiceImpl();\n	// 自动生成一个动态代理对象\n	ISomeService service = (ISomeService) Proxy.newProxyInstance(\n			target.getClass().getClassLoader(), // 目标类的类加载器\n			target.getClass().getInterfaces(),  // 目标类实现的接口数组\n			new InvocationHandler() { //业务增强逻辑\n				// 具体加强的代码逻辑\n				@Override\n				public Object invoke(Object proxy, Method method, Object[] args) throws Throwable {\n					SystemService.doTx(); // 织入\n					Object result = method.invoke(target, args); // 执行目标方法\n					SystemService.doLog(); // 织入\n					return result;\n				}\n			});\n	service.doFirst();\n	System.out.println(\"==============\");\n	service.doSecond();\n}\n```\n*输出信息*\n```\n执行事务代码\n执行doFirst()方法\n执行日志代码\n==============\n执行事务代码\n执行doSecond()方法\n执行日志代码\n```\n## AOP 编程术语\n### 切面（Aspect）\n切面泛指交叉业务逻辑。上例中的事务处理、日志处理就可以理解为切面。常用的切面有通知与顾问。实际就是对主业务逻辑的一种增强。\n### 织入（Weaving）\n织入是指将切面代码插入到目标对象的过程。上例中 MyInvocationHandler 类中的 invoke() 方法完成的工作，就可以称为织入。\n### 连接点（JoinPoint）\n连接点指可以被切面织入的方法。通常业务接口中的方法均为连接点。\n### 切入点（Pointcut）\n切入点指切面具体织入的方法。在 StudentServiceImpl 类中，若 doSome()将被增强，而doOther()不被增强，则 doSome()为切入点，而 doOther()仅为连接点。被标记为 final 的方法是不能作为连接点与切入点的。因为最终的是不能被修改，不能被增强的。\n### 目标对象（Target）\n目标对象指将要被增强的对象。即包含主业务逻辑的类的对象。上例中的 StudentServiceImpl 的对象若被增强，则该类称为目标类，该类对象称为目标对象。当然，不被增强，也就无所谓目标不目标了。\n### 通知（Advice）\n通知是切面的一种实现，可以完成简单织入功能（织入功能就是在这里完成的）。换个角度来说，通知定义了增强码切入到目标代码的时间点，是目标方法执行之前执行，还是之后执行等。通知类型不同，切入时间不同。\n\n**切入点定义切入的位置，通知定义切入的时间。**\n### 顾问（Advisor）\n顾问是切面的另一种实现，能够将通知以更为复杂的方式织入到目标对象中，是将通知包装为更复杂切面的装配器。\n\n\n\n\n\n\n## 通知 Advice\n通知（Advice），切面的一种实现，可以完成简单织入功能（织入功能就是在这里完成的）。\n\n常用通知有：前置通知、后置通知、环绕通知、异常处理通知。\n### 前置通知 MethodBeforeAdvice\n定义前置通知，需要实现 MethodBeforeAdvice 接口。该接口中有一个方法 before()，会在目标方法执行之前执行。 前置通知的特点：\n- 在目标方法执行之前先执行。\n- 不改变目标方法的执行流程，前置通知代码不能阻止目标方法执行。\n- 不改变目标方法执行的结果。\n\n*ISomeService.java - 主业务接口*\n```\npublic interface ISomeService {\n	// 目标方法\n	void doFirst();\n	// 目标方法\n	void doSecond();\n}\n```\n*SomeServiceImpl.java - 目标类*\n```\npublic class SomeServiceImpl implements ISomeService {\n\n	@Override\n	public void doFirst() {\n		System.out.println(\"执行doFirst()方法\");\n	}\n\n	@Override\n	public void doSecond() {\n		System.out.println(\"执行doSecond()方法\");\n	}\n}\n```\n*MyMethodBeforeAdvice.java - 前置通知*\n```\npublic class MyMethodBeforeAdvice implements MethodBeforeAdvice {\n\n	// 当前方法在目标方法执行之前执行，method:目标方法，args:目标方法的参数列表，target:目标对象\n	@Override\n	public void before(Method method, Object[] args, Object target) throws Throwable {\n		// 对于目标方法的增强代码就应该写在这里\n		System.out.println(\"执行前置通知方法\");\n	}\n}\n```\n*applicationContext.mxl*\n```\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<beans xmlns=\"http://www.springframework.org/schema/beans\"\n    xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n    xsi:schemaLocation=\"\n        http://www.springframework.org/schema/beans \n        http://www.springframework.org/schema/beans/spring-beans.xsd\">\n\n    <!-- 注册目标对象 -->\n    <bean id=\"someService\" class=\"top.qingrang.aop01.SomeServiceImpl\"/>\n\n    <!-- 注册切面：通知 -->\n    <bean id=\"myAdvice\" class=\"top.qingrang.aop01.MyMethodBeforeAdvice\"/>\n\n    <!-- 生成代理对象 -->\n    <bean id=\"serviceProxy\" class=\"org.springframework.aop.framework.ProxyFactoryBean\">\n    	<!-- 指定目标对象，随便用哪个 -->\n    	<!-- <property name=\"targetName\" value=\"someService\"/> -->\n    	<property name=\"target\" ref=\"someService\"/>\n		\n    	<!-- 指定切面 -->\n    	<property name=\"interceptorNames\" value=\"myAdvice\"/>\n    </bean>\n</beans>\n```\n\n### 后置通知 AfterReturningAdvice\n定义后置通知，需要实现接口 AfterReturningAdvice。该接口中有一个方法 afterReturning()，会在目标方法执行之后执行。后置通知的特点：\n- 在目标方法执行之后执行。\n- 不改变目标方法的执行流程，后置通知代码不能阻止目标方法执行。\n- 不改变目标方法执行的结果。\n\n*SomeServiceImpl.java - 目标类*\n```\npublic class SomeServiceImpl implements ISomeService {\n\n	@Override\n	public void doFirst() {\n		System.out.println(\"执行doFirst()方法\");\n	}\n\n	@Override\n	public String doSecond() {\n		System.out.println(\"执行doSecond()方法\");\n		return \"abcde\";\n	}\n}\n```\n*MyAfterReturningAdvice.java - 后置通知*\n```\n// 后置通知：可以获取到目标方法的返回结果，但无法改变目标方法的结果\npublic class MyAfterReturningAdvice implements AfterReturningAdvice {\n	// 在目标方法执行之后执行，returnValue：目标方法的返回值\n	@Override\n	public void afterReturning(Object returnValue, Method method, Object[] args, Object target) throws Throwable {\n		System.out.println(\"执行后置通知方法  returnValue = \" + returnValue);\n		if (returnValue != null) {\n			returnValue = ((String) returnValue).toUpperCase();\n			System.out.println(\"修改过的结果  returnValue = \" + returnValue);\n		}\n	}\n}\n```\n### 环绕通知 MethodInterceptor\n定义环绕通知，需要实现 MethodInterceptor 接口。环绕通知，也叫方法拦截器，可以在目标方法调用之前及之后做处理，可以改变目标方法的返回值，也可以改变程序执行流程。\n\n\n\n\n\n',`groups`='Default',`p_id`=1  WHERE  `id` = 1 [ RunTime:0.000789s ]
---------------------------------------------------------------
[ 2018-11-19T10:46:03+08:00 ] 74.120.168.12 74.120.168.12 POST /daily/admin/note/savenote.html
[ info ] qingrang.top/daily/admin/note/savenote.html [运行时间：0.050728s][吞吐率：19.71req/s] [内存消耗：2,098.26kb] [文件加载：56]
[ info ] [ LANG ] /var/www/html/daily/thinkphp/lang/zh-cn.php
[ info ] [ ROUTE ] array (
  'type' => 'module',
  'module' => 
  array (
    0 => 'admin',
    1 => 'note',
    2 => 'savenote',
  ),
)
[ info ] [ HEADER ] array (
  'host' => 'qingrang.top',
  'content-length' => '21035',
  'accept' => 'text/plain, */*; q=0.01',
  'origin' => 'http://qingrang.top',
  'x-requested-with' => 'XMLHttpRequest',
  'user-agent' => 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/70.0.3538.102 Safari/537.36',
  'content-type' => 'application/x-www-form-urlencoded; charset=UTF-8',
  'referer' => 'http://qingrang.top/daily/admin/note/editnote/id/250.html',
  'accept-encoding' => 'gzip, deflate',
  'accept-language' => 'zh-CN,zh;q=0.9,la;q=0.8,en;q=0.7,lb;q=0.6',
  'cookie' => 'Hm_lvt_1769181352e9adc950166aada465644e=1541082864,1541122974,1541171416,1542098176; PHPSESSID=cvrea98moc9nvt4dg4igb1ep86',
  'connection' => 'close',
)
[ info ] [ PARAM ] array (
  'ogroup' => 'Default',
  'context' => '# Spring(二) - AOP（面向切面）
[TOC]

Spring 是一个基于 **IOC** 和 **AOP** 的结构 J2EE 系统的框架。
## AOP 简介
### 概念
AOP（Aspect Orient Programming），面向切面编程，是面向对象编程 OOP 的一种补充。面向对象编程是从静态角度考虑程序的结构，而面向切面编程是从动态角度考虑程序运行过程。

AOP 底层，就是采用动态代理模式实现的。采用了两种代理： JDK 的动态代理，与 CGLIB 的动态代理。

面向切面编程，就是将交叉业务逻辑封装成切面，利用 AOP 容器的功能将切面织入到主业务逻辑中。所谓交叉业务逻辑是指，通用的、与主业务逻辑无关的代码，如安全检查、事务、日志等。

若不使用 AOP，则会出现代码纠缠，即交叉业务逻辑与主业务逻辑混合在一起。这样，会使主业务逻辑变的混杂不清。

例如，转账，在真正转账业务逻辑前后，需要权限控制、日志记录、加载事务、结束事务等交叉业务逻辑，而这些业务逻辑与主业务逻辑间并无直接关系。但，它们的代码量所占比重能达到总代码量的一半甚至还多。它们的存在，不仅产生了大量的“冗余”代码，还大大干扰了主业务逻辑---转账。

### 利用 JDK 动态代理实现 AOP 编程
*ISomeService.java - 主业务接口*
```
public interface ISomeService {
	// 目标方法
	void doFirst();
	// 目标方法
	void doSecond();
}
```
*SomeServiceImpl.java - 目标类*
```
public class SomeServiceImpl implements ISomeService {

	@Override
	public void doFirst() {
		System.out.println("执行doFirst()方法");
	}

	@Override
	public void doSecond() {
		System.out.println("执行doSecond()方法");
	}
}
```
*SystemService.java - 交叉业务逻辑*
```
public class SystemService {
	public static void doLog() {
		System.out.println("执行日志代码");
	}

	public static void doTx() {
		System.out.println("执行事务代码");
	}
}
```
*MyTest.java*
```
@Test
public void MyTest(){
	final ISomeService target = new SomeServiceImpl();
	// 自动生成一个动态代理对象
	ISomeService service = (ISomeService) Proxy.newProxyInstance(
			target.getClass().getClassLoader(), // 目标类的类加载器
			target.getClass().getInterfaces(),  // 目标类实现的接口数组
			new InvocationHandler() { //业务增强逻辑
				// 具体加强的代码逻辑
				@Override
				public Object invoke(Object proxy, Method method, Object[] args) throws Throwable {
					SystemService.doTx(); // 织入
					Object result = method.invoke(target, args); // 执行目标方法
					SystemService.doLog(); // 织入
					return result;
				}
			});
	service.doFirst();
	System.out.println("==============");
	service.doSecond();
}
```
*输出信息*
```
执行事务代码
执行doFirst()方法
执行日志代码
==============
执行事务代码
执行doSecond()方法
执行日志代码
```
## AOP 编程术语
### 切面（Aspect）
切面泛指交叉业务逻辑。上例中的事务处理、日志处理就可以理解为切面。常用的切面有通知与顾问。实际就是对主业务逻辑的一种增强。
### 织入（Weaving）
织入是指将切面代码插入到目标对象的过程。上例中 MyInvocationHandler 类中的 invoke() 方法完成的工作，就可以称为织入。
### 连接点（JoinPoint）
连接点指可以被切面织入的方法。通常业务接口中的方法均为连接点。
### 切入点（Pointcut）
切入点指切面具体织入的方法。在 StudentServiceImpl 类中，若 doSome()将被增强，而doOther()不被增强，则 doSome()为切入点，而 doOther()仅为连接点。被标记为 final 的方法是不能作为连接点与切入点的。因为最终的是不能被修改，不能被增强的。
### 目标对象（Target）
目标对象指将要被增强的对象。即包含主业务逻辑的类的对象。上例中的 StudentServiceImpl 的对象若被增强，则该类称为目标类，该类对象称为目标对象。当然，不被增强，也就无所谓目标不目标了。
### 通知（Advice）
通知是切面的一种实现，可以完成简单织入功能（织入功能就是在这里完成的）。换个角度来说，通知定义了增强码切入到目标代码的时间点，是目标方法执行之前执行，还是之后执行等。通知类型不同，切入时间不同。

**切入点定义切入的位置，通知定义切入的时间。**
### 顾问（Advisor）
顾问是切面的另一种实现，能够将通知以更为复杂的方式织入到目标对象中，是将通知包装为更复杂切面的装配器。






## 通知 Advice
通知（Advice），切面的一种实现，可以完成简单织入功能（织入功能就是在这里完成的）。

常用通知有：前置通知、后置通知、环绕通知、异常处理通知。
### 前置通知 MethodBeforeAdvice
定义前置通知，需要实现 MethodBeforeAdvice 接口。该接口中有一个方法 before()，会在目标方法执行之前执行。 前置通知的特点：
- 在目标方法执行之前先执行。
- 不改变目标方法的执行流程，前置通知代码不能阻止目标方法执行。
- 不改变目标方法执行的结果。

*ISomeService.java - 主业务接口*
```
public interface ISomeService {
	// 目标方法
	void doFirst();
	// 目标方法
	void doSecond();
}
```
*SomeServiceImpl.java - 目标类*
```
public class SomeServiceImpl implements ISomeService {

	@Override
	public void doFirst() {
		System.out.println("执行doFirst()方法");
	}

	@Override
	public void doSecond() {
		System.out.println("执行doSecond()方法");
	}
}
```
*MyMethodBeforeAdvice.java - 前置通知*
```
public class MyMethodBeforeAdvice implements MethodBeforeAdvice {

	// 当前方法在目标方法执行之前执行，method:目标方法，args:目标方法的参数列表，target:目标对象
	@Override
	public void before(Method method, Object[] args, Object target) throws Throwable {
		// 对于目标方法的增强代码就应该写在这里
		System.out.println("执行前置通知方法");
	}
}
```
*applicationContext.mxl*
```
<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xsi:schemaLocation="
        http://www.springframework.org/schema/beans 
        http://www.springframework.org/schema/beans/spring-beans.xsd">

    <!-- 注册目标对象 -->
    <bean id="someService" class="top.qingrang.aop01.SomeServiceImpl"/>

    <!-- 注册切面：通知 -->
    <bean id="myAdvice" class="top.qingrang.aop01.MyMethodBeforeAdvice"/>

    <!-- 生成代理对象 -->
    <bean id="serviceProxy" class="org.springframework.aop.framework.ProxyFactoryBean">
    	<!-- 指定目标对象，随便用哪个 -->
    	<!-- <property name="targetName" value="someService"/> -->
    	<property name="target" ref="someService"/>
		
    	<!-- 指定切面 -->
    	<property name="interceptorNames" value="myAdvice"/>
    </bean>
</beans>
```

### 后置通知 AfterReturningAdvice
定义后置通知，需要实现接口 AfterReturningAdvice。该接口中有一个方法 afterReturning()，会在目标方法执行之后执行。后置通知的特点：
- 在目标方法执行之后执行。
- 不改变目标方法的执行流程，后置通知代码不能阻止目标方法执行。
- 不改变目标方法执行的结果。

*SomeServiceImpl.java - 目标类*
```
public class SomeServiceImpl implements ISomeService {

	@Override
	public void doFirst() {
		System.out.println("执行doFirst()方法");
	}

	@Override
	public String doSecond() {
		System.out.println("执行doSecond()方法");
		return "abcde";
	}
}
```
*MyAfterReturningAdvice.java - 后置通知*
```
// 后置通知：可以获取到目标方法的返回结果，但无法改变目标方法的结果
public class MyAfterReturningAdvice implements AfterReturningAdvice {
	// 在目标方法执行之后执行，returnValue：目标方法的返回值
	@Override
	public void afterReturning(Object returnValue, Method method, Object[] args, Object target) throws Throwable {
		System.out.println("执行后置通知方法  returnValue = " + returnValue);
		if (returnValue != null) {
			returnValue = ((String) returnValue).toUpperCase();
			System.out.println("修改过的结果  returnValue = " + returnValue);
		}
	}
}
```
### 环绕通知 MethodInterceptor
定义环绕通知(在目标方法执行之前之后都会执行)，需要实现 MethodInterceptor 接口。环绕通知，也叫方法拦截器，可以在目标方法调用之前及之后做处理，可以改变目标方法的返回值，也可以改变程序执行流程。

*MyMethodInterceptor.java*
```
// 环绕通知：可以修改目标方法的返回结果
public class MyMethodInterceptor implements MethodInterceptor {
	@Override
	public Object invoke(MethodInvocation invocation) throws Throwable {
		System.out.println("执行环绕通知：目标方法执行之前");
		// 执行目标方法
		Object result = invocation.proceed();
		System.out.println("执行环绕通知：目标方法执行之后");
		if(result != null) {
			result = ((String)result).toUpperCase();
		}
		return result;
	}
}
```




',
)
[ info ] [ SESSION ] INIT array (
  'id' => '',
  'var_session_id' => '',
  'prefix' => 'think',
  'type' => '',
  'auto_start' => true,
)
[ info ] [ RUN ] app\admin\controller\Note->saveNote[ /var/www/html/daily/application/admin/controller/Note.php ]
[ info ] [ DB ] INIT mysql
[ info ] [ CACHE ] INIT File
[ info ] [ LOG ] INIT File
[ sql ] [ DB ] CONNECT:[ UseTime:0.000502s ] mysql:host=74.120.168.12;dbname=diary;charset=utf8
[ sql ] [ SQL ] SHOW COLUMNS FROM `note` [ RunTime:0.001360s ]
[ sql ] [ SQL ] UPDATE `note`  SET `title`='Spring(二) - AOP（面向切面）',`content`='# Spring(二) - AOP（面向切面）\n[TOC]\n\nSpring 是一个基于 **IOC** 和 **AOP** 的结构 J2EE 系统的框架。\n## AOP 简介\n### 概念\nAOP（Aspect Orient Programming），面向切面编程，是面向对象编程 OOP 的一种补充。面向对象编程是从静态角度考虑程序的结构，而面向切面编程是从动态角度考虑程序运行过程。\n\nAOP 底层，就是采用动态代理模式实现的。采用了两种代理： JDK 的动态代理，与 CGLIB 的动态代理。\n\n面向切面编程，就是将交叉业务逻辑封装成切面，利用 AOP 容器的功能将切面织入到主业务逻辑中。所谓交叉业务逻辑是指，通用的、与主业务逻辑无关的代码，如安全检查、事务、日志等。\n\n若不使用 AOP，则会出现代码纠缠，即交叉业务逻辑与主业务逻辑混合在一起。这样，会使主业务逻辑变的混杂不清。\n\n例如，转账，在真正转账业务逻辑前后，需要权限控制、日志记录、加载事务、结束事务等交叉业务逻辑，而这些业务逻辑与主业务逻辑间并无直接关系。但，它们的代码量所占比重能达到总代码量的一半甚至还多。它们的存在，不仅产生了大量的“冗余”代码，还大大干扰了主业务逻辑---转账。\n\n### 利用 JDK 动态代理实现 AOP 编程\n*ISomeService.java - 主业务接口*\n```\npublic interface ISomeService {\n	// 目标方法\n	void doFirst();\n	// 目标方法\n	void doSecond();\n}\n```\n*SomeServiceImpl.java - 目标类*\n```\npublic class SomeServiceImpl implements ISomeService {\n\n	@Override\n	public void doFirst() {\n		System.out.println(\"执行doFirst()方法\");\n	}\n\n	@Override\n	public void doSecond() {\n		System.out.println(\"执行doSecond()方法\");\n	}\n}\n```\n*SystemService.java - 交叉业务逻辑*\n```\npublic class SystemService {\n	public static void doLog() {\n		System.out.println(\"执行日志代码\");\n	}\n\n	public static void doTx() {\n		System.out.println(\"执行事务代码\");\n	}\n}\n```\n*MyTest.java*\n```\n@Test\npublic void MyTest(){\n	final ISomeService target = new SomeServiceImpl();\n	// 自动生成一个动态代理对象\n	ISomeService service = (ISomeService) Proxy.newProxyInstance(\n			target.getClass().getClassLoader(), // 目标类的类加载器\n			target.getClass().getInterfaces(),  // 目标类实现的接口数组\n			new InvocationHandler() { //业务增强逻辑\n				// 具体加强的代码逻辑\n				@Override\n				public Object invoke(Object proxy, Method method, Object[] args) throws Throwable {\n					SystemService.doTx(); // 织入\n					Object result = method.invoke(target, args); // 执行目标方法\n					SystemService.doLog(); // 织入\n					return result;\n				}\n			});\n	service.doFirst();\n	System.out.println(\"==============\");\n	service.doSecond();\n}\n```\n*输出信息*\n```\n执行事务代码\n执行doFirst()方法\n执行日志代码\n==============\n执行事务代码\n执行doSecond()方法\n执行日志代码\n```\n## AOP 编程术语\n### 切面（Aspect）\n切面泛指交叉业务逻辑。上例中的事务处理、日志处理就可以理解为切面。常用的切面有通知与顾问。实际就是对主业务逻辑的一种增强。\n### 织入（Weaving）\n织入是指将切面代码插入到目标对象的过程。上例中 MyInvocationHandler 类中的 invoke() 方法完成的工作，就可以称为织入。\n### 连接点（JoinPoint）\n连接点指可以被切面织入的方法。通常业务接口中的方法均为连接点。\n### 切入点（Pointcut）\n切入点指切面具体织入的方法。在 StudentServiceImpl 类中，若 doSome()将被增强，而doOther()不被增强，则 doSome()为切入点，而 doOther()仅为连接点。被标记为 final 的方法是不能作为连接点与切入点的。因为最终的是不能被修改，不能被增强的。\n### 目标对象（Target）\n目标对象指将要被增强的对象。即包含主业务逻辑的类的对象。上例中的 StudentServiceImpl 的对象若被增强，则该类称为目标类，该类对象称为目标对象。当然，不被增强，也就无所谓目标不目标了。\n### 通知（Advice）\n通知是切面的一种实现，可以完成简单织入功能（织入功能就是在这里完成的）。换个角度来说，通知定义了增强码切入到目标代码的时间点，是目标方法执行之前执行，还是之后执行等。通知类型不同，切入时间不同。\n\n**切入点定义切入的位置，通知定义切入的时间。**\n### 顾问（Advisor）\n顾问是切面的另一种实现，能够将通知以更为复杂的方式织入到目标对象中，是将通知包装为更复杂切面的装配器。\n\n\n\n\n\n\n## 通知 Advice\n通知（Advice），切面的一种实现，可以完成简单织入功能（织入功能就是在这里完成的）。\n\n常用通知有：前置通知、后置通知、环绕通知、异常处理通知。\n### 前置通知 MethodBeforeAdvice\n定义前置通知，需要实现 MethodBeforeAdvice 接口。该接口中有一个方法 before()，会在目标方法执行之前执行。 前置通知的特点：\n- 在目标方法执行之前先执行。\n- 不改变目标方法的执行流程，前置通知代码不能阻止目标方法执行。\n- 不改变目标方法执行的结果。\n\n*ISomeService.java - 主业务接口*\n```\npublic interface ISomeService {\n	// 目标方法\n	void doFirst();\n	// 目标方法\n	void doSecond();\n}\n```\n*SomeServiceImpl.java - 目标类*\n```\npublic class SomeServiceImpl implements ISomeService {\n\n	@Override\n	public void doFirst() {\n		System.out.println(\"执行doFirst()方法\");\n	}\n\n	@Override\n	public void doSecond() {\n		System.out.println(\"执行doSecond()方法\");\n	}\n}\n```\n*MyMethodBeforeAdvice.java - 前置通知*\n```\npublic class MyMethodBeforeAdvice implements MethodBeforeAdvice {\n\n	// 当前方法在目标方法执行之前执行，method:目标方法，args:目标方法的参数列表，target:目标对象\n	@Override\n	public void before(Method method, Object[] args, Object target) throws Throwable {\n		// 对于目标方法的增强代码就应该写在这里\n		System.out.println(\"执行前置通知方法\");\n	}\n}\n```\n*applicationContext.mxl*\n```\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<beans xmlns=\"http://www.springframework.org/schema/beans\"\n    xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n    xsi:schemaLocation=\"\n        http://www.springframework.org/schema/beans \n        http://www.springframework.org/schema/beans/spring-beans.xsd\">\n\n    <!-- 注册目标对象 -->\n    <bean id=\"someService\" class=\"top.qingrang.aop01.SomeServiceImpl\"/>\n\n    <!-- 注册切面：通知 -->\n    <bean id=\"myAdvice\" class=\"top.qingrang.aop01.MyMethodBeforeAdvice\"/>\n\n    <!-- 生成代理对象 -->\n    <bean id=\"serviceProxy\" class=\"org.springframework.aop.framework.ProxyFactoryBean\">\n    	<!-- 指定目标对象，随便用哪个 -->\n    	<!-- <property name=\"targetName\" value=\"someService\"/> -->\n    	<property name=\"target\" ref=\"someService\"/>\n		\n    	<!-- 指定切面 -->\n    	<property name=\"interceptorNames\" value=\"myAdvice\"/>\n    </bean>\n</beans>\n```\n\n### 后置通知 AfterReturningAdvice\n定义后置通知，需要实现接口 AfterReturningAdvice。该接口中有一个方法 afterReturning()，会在目标方法执行之后执行。后置通知的特点：\n- 在目标方法执行之后执行。\n- 不改变目标方法的执行流程，后置通知代码不能阻止目标方法执行。\n- 不改变目标方法执行的结果。\n\n*SomeServiceImpl.java - 目标类*\n```\npublic class SomeServiceImpl implements ISomeService {\n\n	@Override\n	public void doFirst() {\n		System.out.println(\"执行doFirst()方法\");\n	}\n\n	@Override\n	public String doSecond() {\n		System.out.println(\"执行doSecond()方法\");\n		return \"abcde\";\n	}\n}\n```\n*MyAfterReturningAdvice.java - 后置通知*\n```\n// 后置通知：可以获取到目标方法的返回结果，但无法改变目标方法的结果\npublic class MyAfterReturningAdvice implements AfterReturningAdvice {\n	// 在目标方法执行之后执行，returnValue：目标方法的返回值\n	@Override\n	public void afterReturning(Object returnValue, Method method, Object[] args, Object target) throws Throwable {\n		System.out.println(\"执行后置通知方法  returnValue = \" + returnValue);\n		if (returnValue != null) {\n			returnValue = ((String) returnValue).toUpperCase();\n			System.out.println(\"修改过的结果  returnValue = \" + returnValue);\n		}\n	}\n}\n```\n### 环绕通知 MethodInterceptor\n定义环绕通知(在目标方法执行之前之后都会执行)，需要实现 MethodInterceptor 接口。环绕通知，也叫方法拦截器，可以在目标方法调用之前及之后做处理，可以改变目标方法的返回值，也可以改变程序执行流程。\n\n*MyMethodInterceptor.java*\n```\n// 环绕通知：可以修改目标方法的返回结果\npublic class MyMethodInterceptor implements MethodInterceptor {\n	@Override\n	public Object invoke(MethodInvocation invocation) throws Throwable {\n		System.out.println(\"执行环绕通知：目标方法执行之前\");\n		// 执行目标方法\n		Object result = invocation.proceed();\n		System.out.println(\"执行环绕通知：目标方法执行之后\");\n		if(result != null) {\n			result = ((String)result).toUpperCase();\n		}\n		return result;\n	}\n}\n```\n\n\n\n\n',`groups`='Default',`p_id`=1  WHERE  `id` = 1 [ RunTime:0.000607s ]
---------------------------------------------------------------
[ 2018-11-19T10:54:53+08:00 ] 74.120.168.12 74.120.168.12 POST /daily/admin/note/savenote.html
[ info ] qingrang.top/daily/admin/note/savenote.html [运行时间：0.051166s][吞吐率：19.54req/s] [内存消耗：2,109.81kb] [文件加载：56]
[ info ] [ LANG ] /var/www/html/daily/thinkphp/lang/zh-cn.php
[ info ] [ ROUTE ] array (
  'type' => 'module',
  'module' => 
  array (
    0 => 'admin',
    1 => 'note',
    2 => 'savenote',
  ),
)
[ info ] [ HEADER ] array (
  'host' => 'qingrang.top',
  'content-length' => '24670',
  'accept' => 'text/plain, */*; q=0.01',
  'origin' => 'http://qingrang.top',
  'x-requested-with' => 'XMLHttpRequest',
  'user-agent' => 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/70.0.3538.102 Safari/537.36',
  'content-type' => 'application/x-www-form-urlencoded; charset=UTF-8',
  'referer' => 'http://qingrang.top/daily/admin/note/editnote/id/250.html',
  'accept-encoding' => 'gzip, deflate',
  'accept-language' => 'zh-CN,zh;q=0.9,la;q=0.8,en;q=0.7,lb;q=0.6',
  'cookie' => 'Hm_lvt_1769181352e9adc950166aada465644e=1541082864,1541122974,1541171416,1542098176; PHPSESSID=cvrea98moc9nvt4dg4igb1ep86',
  'connection' => 'close',
)
[ info ] [ PARAM ] array (
  'ogroup' => 'Default',
  'context' => '# Spring(二) - AOP（面向切面）
[TOC]

Spring 是一个基于 **IOC** 和 **AOP** 的结构 J2EE 系统的框架。
## AOP 简介
### 概念
AOP（Aspect Orient Programming），面向切面编程，是面向对象编程 OOP 的一种补充。面向对象编程是从静态角度考虑程序的结构，而面向切面编程是从动态角度考虑程序运行过程。

AOP 底层，就是采用动态代理模式实现的。采用了两种代理： JDK 的动态代理，与 CGLIB 的动态代理。

面向切面编程，就是将交叉业务逻辑封装成切面，利用 AOP 容器的功能将切面织入到主业务逻辑中。所谓交叉业务逻辑是指，通用的、与主业务逻辑无关的代码，如安全检查、事务、日志等。

若不使用 AOP，则会出现代码纠缠，即交叉业务逻辑与主业务逻辑混合在一起。这样，会使主业务逻辑变的混杂不清。

例如，转账，在真正转账业务逻辑前后，需要权限控制、日志记录、加载事务、结束事务等交叉业务逻辑，而这些业务逻辑与主业务逻辑间并无直接关系。但，它们的代码量所占比重能达到总代码量的一半甚至还多。它们的存在，不仅产生了大量的“冗余”代码，还大大干扰了主业务逻辑---转账。

### 利用 JDK 动态代理实现 AOP 编程
*ISomeService.java - 主业务接口*
```
public interface ISomeService {
	// 目标方法
	void doFirst();
	// 目标方法
	void doSecond();
}
```
*SomeServiceImpl.java - 目标类*
```
public class SomeServiceImpl implements ISomeService {

	@Override
	public void doFirst() {
		System.out.println("执行doFirst()方法");
	}

	@Override
	public void doSecond() {
		System.out.println("执行doSecond()方法");
	}
}
```
*SystemService.java - 交叉业务逻辑*
```
public class SystemService {
	public static void doLog() {
		System.out.println("执行日志代码");
	}

	public static void doTx() {
		System.out.println("执行事务代码");
	}
}
```
*MyTest.java*
```
@Test
public void MyTest(){
	final ISomeService target = new SomeServiceImpl();
	// 自动生成一个动态代理对象
	ISomeService service = (ISomeService) Proxy.newProxyInstance(
			target.getClass().getClassLoader(), // 目标类的类加载器
			target.getClass().getInterfaces(),  // 目标类实现的接口数组
			new InvocationHandler() { //业务增强逻辑
				// 具体加强的代码逻辑
				@Override
				public Object invoke(Object proxy, Method method, Object[] args) throws Throwable {
					SystemService.doTx(); // 织入
					Object result = method.invoke(target, args); // 执行目标方法
					SystemService.doLog(); // 织入
					return result;
				}
			});
	service.doFirst();
	System.out.println("==============");
	service.doSecond();
}
```
*输出信息*
```
执行事务代码
执行doFirst()方法
执行日志代码
==============
执行事务代码
执行doSecond()方法
执行日志代码
```
## AOP 编程术语
### 切面（Aspect）
切面泛指交叉业务逻辑。上例中的事务处理、日志处理就可以理解为切面。常用的切面有通知与顾问。实际就是对主业务逻辑的一种增强。
### 织入（Weaving）
织入是指将切面代码插入到目标对象的过程。上例中 MyInvocationHandler 类中的 invoke() 方法完成的工作，就可以称为织入。
### 连接点（JoinPoint）
连接点指可以被切面织入的方法。通常业务接口中的方法均为连接点。
### 切入点（Pointcut）
切入点指切面具体织入的方法。在 StudentServiceImpl 类中，若 doSome()将被增强，而doOther()不被增强，则 doSome()为切入点，而 doOther()仅为连接点。被标记为 final 的方法是不能作为连接点与切入点的。因为最终的是不能被修改，不能被增强的。
### 目标对象（Target）
目标对象指将要被增强的对象。即包含主业务逻辑的类的对象。上例中的 StudentServiceImpl 的对象若被增强，则该类称为目标类，该类对象称为目标对象。当然，不被增强，也就无所谓目标不目标了。
### 通知（Advice）
通知是切面的一种实现，可以完成简单织入功能（织入功能就是在这里完成的）。换个角度来说，通知定义了增强码切入到目标代码的时间点，是目标方法执行之前执行，还是之后执行等。通知类型不同，切入时间不同。

**切入点定义切入的位置，通知定义切入的时间。**
### 顾问（Advisor）
顾问是切面的另一种实现，能够将通知以更为复杂的方式织入到目标对象中，是将通知包装为更复杂切面的装配器。






## 通知 Advice
通知（Advice），切面的一种实现，可以完成简单织入功能（织入功能就是在这里完成的）。

常用通知有：前置通知、后置通知、环绕通知、异常处理通知。
### 前置通知 MethodBeforeAdvice
定义前置通知，需要实现 MethodBeforeAdvice 接口。该接口中有一个方法 before()，会在目标方法执行之前执行。 前置通知的特点：
- 在目标方法执行之前先执行。
- 不改变目标方法的执行流程，前置通知代码不能阻止目标方法执行。
- 不改变目标方法执行的结果。

*ISomeService.java - 主业务接口*
```
public interface ISomeService {
	// 目标方法
	void doFirst();
	// 目标方法
	void doSecond();
}
```
*SomeServiceImpl.java - 目标类*
```
public class SomeServiceImpl implements ISomeService {

	@Override
	public void doFirst() {
		System.out.println("执行doFirst()方法");
	}

	@Override
	public void doSecond() {
		System.out.println("执行doSecond()方法");
	}
}
```
*MyMethodBeforeAdvice.java - 前置通知*
```
public class MyMethodBeforeAdvice implements MethodBeforeAdvice {

	// 当前方法在目标方法执行之前执行，method:目标方法，args:目标方法的参数列表，target:目标对象
	@Override
	public void before(Method method, Object[] args, Object target) throws Throwable {
		// 对于目标方法的增强代码就应该写在这里
		System.out.println("执行前置通知方法");
	}
}
```
*applicationContext.mxl*
```
<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xsi:schemaLocation="
        http://www.springframework.org/schema/beans 
        http://www.springframework.org/schema/beans/spring-beans.xsd">

    <!-- 注册目标对象 -->
    <bean id="someService" class="top.qingrang.aop01.SomeServiceImpl"/>

    <!-- 注册切面：通知 -->
    <bean id="myAdvice" class="top.qingrang.aop01.MyMethodBeforeAdvice"/>

    <!-- 生成代理对象 -->
    <bean id="serviceProxy" class="org.springframework.aop.framework.ProxyFactoryBean">
    	<!-- 指定目标对象，随便用哪个 -->
    	<!-- <property name="targetName" value="someService"/> -->
    	<property name="target" ref="someService"/>
		
    	<!-- 指定切面 -->
    	<property name="interceptorNames" value="myAdvice"/>
    </bean>
</beans>
```

### 后置通知 AfterReturningAdvice
定义后置通知，需要实现接口 AfterReturningAdvice。该接口中有一个方法 afterReturning()，会在目标方法执行之后执行。后置通知的特点：
- 在目标方法执行之后执行。
- 不改变目标方法的执行流程，后置通知代码不能阻止目标方法执行。
- 不改变目标方法执行的结果。

*SomeServiceImpl.java - 目标类*
```
public class SomeServiceImpl implements ISomeService {

	@Override
	public void doFirst() {
		System.out.println("执行doFirst()方法");
	}

	@Override
	public String doSecond() {
		System.out.println("执行doSecond()方法");
		return "abcde";
	}
}
```
*MyAfterReturningAdvice.java - 后置通知*
```
// 后置通知：可以获取到目标方法的返回结果，但无法改变目标方法的结果
public class MyAfterReturningAdvice implements AfterReturningAdvice {
	// 在目标方法执行之后执行，returnValue：目标方法的返回值
	@Override
	public void afterReturning(Object returnValue, Method method, Object[] args, Object target) throws Throwable {
		System.out.println("执行后置通知方法  returnValue = " + returnValue);
		if (returnValue != null) {
			returnValue = ((String) returnValue).toUpperCase();
			System.out.println("修改过的结果  returnValue = " + returnValue);
		}
	}
}
```
### 环绕通知 MethodInterceptor
定义环绕通知(在目标方法执行之前之后都会执行)，需要实现 MethodInterceptor 接口。环绕通知，也叫方法拦截器，可以在目标方法调用之前及之后做处理，可以改变目标方法的返回值，也可以改变程序执行流程。

*MyMethodInterceptor.java*
```
// 环绕通知：可以修改目标方法的返回结果
public class MyMethodInterceptor implements MethodInterceptor {
	@Override
	public Object invoke(MethodInvocation invocation) throws Throwable {
		System.out.println("执行环绕通知：目标方法执行之前");
		// 执行目标方法
		Object result = invocation.proceed();
		System.out.println("执行环绕通知：目标方法执行之后");
		if(result != null) {
			result = ((String)result).toUpperCase();
		}
		return result;
	}
}
```





### 异常通知 ThrowsAdvice
定义异常通知，需要实现 ThrowsAdvice 接口。该接口的主要作用是，在目标方法抛出异常后，根据异常的不同做出相应的处理。当该接口处理完异常后，会简单地将异常再次抛出给目标方法。

不过，这个接口较为特殊，从形式上看，该接口中没有必须要实现的方法。但，这个接口却确实有必须要实现的方法 `afterThrowing()`。这个方法重载了四种形式。由于使用时，一般只使用其中一种，若要都定义到接口中，则势必要使程序员在使用时必须要实现这四个方法。这是很麻烦的。所以就将该接口定义为了标识接口（没有方法的接口）。这四个方法在打开 `ThrowsAdvice` 源码后，上侧的注释部分可以看到：
![afterThrowing()](https://daily-1252869435.cos.ap-chengdu.myqcloud.com/2018-11-19-10-59-26.png)
不过，在这四种形式中，常用的形式如下： `public void afterThrowing(自定义的异常类 e)` 这里的参数 e 为，与具体业务相关的用户自定义的异常类对象。容器会根据异常类型的不同，自动选择不同的该方法执行。这些方法的执行是在目标方法执行结束后执行的。其它参数则与前面两个通知中方法的参数意义相同。




',
)
[ info ] [ SESSION ] INIT array (
  'id' => '',
  'var_session_id' => '',
  'prefix' => 'think',
  'type' => '',
  'auto_start' => true,
)
[ info ] [ RUN ] app\admin\controller\Note->saveNote[ /var/www/html/daily/application/admin/controller/Note.php ]
[ info ] [ DB ] INIT mysql
[ info ] [ CACHE ] INIT File
[ info ] [ LOG ] INIT File
[ sql ] [ DB ] CONNECT:[ UseTime:0.000588s ] mysql:host=74.120.168.12;dbname=diary;charset=utf8
[ sql ] [ SQL ] SHOW COLUMNS FROM `note` [ RunTime:0.001544s ]
[ sql ] [ SQL ] UPDATE `note`  SET `title`='Spring(二) - AOP（面向切面）',`content`='# Spring(二) - AOP（面向切面）\n[TOC]\n\nSpring 是一个基于 **IOC** 和 **AOP** 的结构 J2EE 系统的框架。\n## AOP 简介\n### 概念\nAOP（Aspect Orient Programming），面向切面编程，是面向对象编程 OOP 的一种补充。面向对象编程是从静态角度考虑程序的结构，而面向切面编程是从动态角度考虑程序运行过程。\n\nAOP 底层，就是采用动态代理模式实现的。采用了两种代理： JDK 的动态代理，与 CGLIB 的动态代理。\n\n面向切面编程，就是将交叉业务逻辑封装成切面，利用 AOP 容器的功能将切面织入到主业务逻辑中。所谓交叉业务逻辑是指，通用的、与主业务逻辑无关的代码，如安全检查、事务、日志等。\n\n若不使用 AOP，则会出现代码纠缠，即交叉业务逻辑与主业务逻辑混合在一起。这样，会使主业务逻辑变的混杂不清。\n\n例如，转账，在真正转账业务逻辑前后，需要权限控制、日志记录、加载事务、结束事务等交叉业务逻辑，而这些业务逻辑与主业务逻辑间并无直接关系。但，它们的代码量所占比重能达到总代码量的一半甚至还多。它们的存在，不仅产生了大量的“冗余”代码，还大大干扰了主业务逻辑---转账。\n\n### 利用 JDK 动态代理实现 AOP 编程\n*ISomeService.java - 主业务接口*\n```\npublic interface ISomeService {\n	// 目标方法\n	void doFirst();\n	// 目标方法\n	void doSecond();\n}\n```\n*SomeServiceImpl.java - 目标类*\n```\npublic class SomeServiceImpl implements ISomeService {\n\n	@Override\n	public void doFirst() {\n		System.out.println(\"执行doFirst()方法\");\n	}\n\n	@Override\n	public void doSecond() {\n		System.out.println(\"执行doSecond()方法\");\n	}\n}\n```\n*SystemService.java - 交叉业务逻辑*\n```\npublic class SystemService {\n	public static void doLog() {\n		System.out.println(\"执行日志代码\");\n	}\n\n	public static void doTx() {\n		System.out.println(\"执行事务代码\");\n	}\n}\n```\n*MyTest.java*\n```\n@Test\npublic void MyTest(){\n	final ISomeService target = new SomeServiceImpl();\n	// 自动生成一个动态代理对象\n	ISomeService service = (ISomeService) Proxy.newProxyInstance(\n			target.getClass().getClassLoader(), // 目标类的类加载器\n			target.getClass().getInterfaces(),  // 目标类实现的接口数组\n			new InvocationHandler() { //业务增强逻辑\n				// 具体加强的代码逻辑\n				@Override\n				public Object invoke(Object proxy, Method method, Object[] args) throws Throwable {\n					SystemService.doTx(); // 织入\n					Object result = method.invoke(target, args); // 执行目标方法\n					SystemService.doLog(); // 织入\n					return result;\n				}\n			});\n	service.doFirst();\n	System.out.println(\"==============\");\n	service.doSecond();\n}\n```\n*输出信息*\n```\n执行事务代码\n执行doFirst()方法\n执行日志代码\n==============\n执行事务代码\n执行doSecond()方法\n执行日志代码\n```\n## AOP 编程术语\n### 切面（Aspect）\n切面泛指交叉业务逻辑。上例中的事务处理、日志处理就可以理解为切面。常用的切面有通知与顾问。实际就是对主业务逻辑的一种增强。\n### 织入（Weaving）\n织入是指将切面代码插入到目标对象的过程。上例中 MyInvocationHandler 类中的 invoke() 方法完成的工作，就可以称为织入。\n### 连接点（JoinPoint）\n连接点指可以被切面织入的方法。通常业务接口中的方法均为连接点。\n### 切入点（Pointcut）\n切入点指切面具体织入的方法。在 StudentServiceImpl 类中，若 doSome()将被增强，而doOther()不被增强，则 doSome()为切入点，而 doOther()仅为连接点。被标记为 final 的方法是不能作为连接点与切入点的。因为最终的是不能被修改，不能被增强的。\n### 目标对象（Target）\n目标对象指将要被增强的对象。即包含主业务逻辑的类的对象。上例中的 StudentServiceImpl 的对象若被增强，则该类称为目标类，该类对象称为目标对象。当然，不被增强，也就无所谓目标不目标了。\n### 通知（Advice）\n通知是切面的一种实现，可以完成简单织入功能（织入功能就是在这里完成的）。换个角度来说，通知定义了增强码切入到目标代码的时间点，是目标方法执行之前执行，还是之后执行等。通知类型不同，切入时间不同。\n\n**切入点定义切入的位置，通知定义切入的时间。**\n### 顾问（Advisor）\n顾问是切面的另一种实现，能够将通知以更为复杂的方式织入到目标对象中，是将通知包装为更复杂切面的装配器。\n\n\n\n\n\n\n## 通知 Advice\n通知（Advice），切面的一种实现，可以完成简单织入功能（织入功能就是在这里完成的）。\n\n常用通知有：前置通知、后置通知、环绕通知、异常处理通知。\n### 前置通知 MethodBeforeAdvice\n定义前置通知，需要实现 MethodBeforeAdvice 接口。该接口中有一个方法 before()，会在目标方法执行之前执行。 前置通知的特点：\n- 在目标方法执行之前先执行。\n- 不改变目标方法的执行流程，前置通知代码不能阻止目标方法执行。\n- 不改变目标方法执行的结果。\n\n*ISomeService.java - 主业务接口*\n```\npublic interface ISomeService {\n	// 目标方法\n	void doFirst();\n	// 目标方法\n	void doSecond();\n}\n```\n*SomeServiceImpl.java - 目标类*\n```\npublic class SomeServiceImpl implements ISomeService {\n\n	@Override\n	public void doFirst() {\n		System.out.println(\"执行doFirst()方法\");\n	}\n\n	@Override\n	public void doSecond() {\n		System.out.println(\"执行doSecond()方法\");\n	}\n}\n```\n*MyMethodBeforeAdvice.java - 前置通知*\n```\npublic class MyMethodBeforeAdvice implements MethodBeforeAdvice {\n\n	// 当前方法在目标方法执行之前执行，method:目标方法，args:目标方法的参数列表，target:目标对象\n	@Override\n	public void before(Method method, Object[] args, Object target) throws Throwable {\n		// 对于目标方法的增强代码就应该写在这里\n		System.out.println(\"执行前置通知方法\");\n	}\n}\n```\n*applicationContext.mxl*\n```\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<beans xmlns=\"http://www.springframework.org/schema/beans\"\n    xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n    xsi:schemaLocation=\"\n        http://www.springframework.org/schema/beans \n        http://www.springframework.org/schema/beans/spring-beans.xsd\">\n\n    <!-- 注册目标对象 -->\n    <bean id=\"someService\" class=\"top.qingrang.aop01.SomeServiceImpl\"/>\n\n    <!-- 注册切面：通知 -->\n    <bean id=\"myAdvice\" class=\"top.qingrang.aop01.MyMethodBeforeAdvice\"/>\n\n    <!-- 生成代理对象 -->\n    <bean id=\"serviceProxy\" class=\"org.springframework.aop.framework.ProxyFactoryBean\">\n    	<!-- 指定目标对象，随便用哪个 -->\n    	<!-- <property name=\"targetName\" value=\"someService\"/> -->\n    	<property name=\"target\" ref=\"someService\"/>\n		\n    	<!-- 指定切面 -->\n    	<property name=\"interceptorNames\" value=\"myAdvice\"/>\n    </bean>\n</beans>\n```\n\n### 后置通知 AfterReturningAdvice\n定义后置通知，需要实现接口 AfterReturningAdvice。该接口中有一个方法 afterReturning()，会在目标方法执行之后执行。后置通知的特点：\n- 在目标方法执行之后执行。\n- 不改变目标方法的执行流程，后置通知代码不能阻止目标方法执行。\n- 不改变目标方法执行的结果。\n\n*SomeServiceImpl.java - 目标类*\n```\npublic class SomeServiceImpl implements ISomeService {\n\n	@Override\n	public void doFirst() {\n		System.out.println(\"执行doFirst()方法\");\n	}\n\n	@Override\n	public String doSecond() {\n		System.out.println(\"执行doSecond()方法\");\n		return \"abcde\";\n	}\n}\n```\n*MyAfterReturningAdvice.java - 后置通知*\n```\n// 后置通知：可以获取到目标方法的返回结果，但无法改变目标方法的结果\npublic class MyAfterReturningAdvice implements AfterReturningAdvice {\n	// 在目标方法执行之后执行，returnValue：目标方法的返回值\n	@Override\n	public void afterReturning(Object returnValue, Method method, Object[] args, Object target) throws Throwable {\n		System.out.println(\"执行后置通知方法  returnValue = \" + returnValue);\n		if (returnValue != null) {\n			returnValue = ((String) returnValue).toUpperCase();\n			System.out.println(\"修改过的结果  returnValue = \" + returnValue);\n		}\n	}\n}\n```\n### 环绕通知 MethodInterceptor\n定义环绕通知(在目标方法执行之前之后都会执行)，需要实现 MethodInterceptor 接口。环绕通知，也叫方法拦截器，可以在目标方法调用之前及之后做处理，可以改变目标方法的返回值，也可以改变程序执行流程。\n\n*MyMethodInterceptor.java*\n```\n// 环绕通知：可以修改目标方法的返回结果\npublic class MyMethodInterceptor implements MethodInterceptor {\n	@Override\n	public Object invoke(MethodInvocation invocation) throws Throwable {\n		System.out.println(\"执行环绕通知：目标方法执行之前\");\n		// 执行目标方法\n		Object result = invocation.proceed();\n		System.out.println(\"执行环绕通知：目标方法执行之后\");\n		if(result != null) {\n			result = ((String)result).toUpperCase();\n		}\n		return result;\n	}\n}\n```\n\n\n\n\n\n### 异常通知 ThrowsAdvice\n定义异常通知，需要实现 ThrowsAdvice 接口。该接口的主要作用是，在目标方法抛出异常后，根据异常的不同做出相应的处理。当该接口处理完异常后，会简单地将异常再次抛出给目标方法。\n\n不过，这个接口较为特殊，从形式上看，该接口中没有必须要实现的方法。但，这个接口却确实有必须要实现的方法 `afterThrowing()`。这个方法重载了四种形式。由于使用时，一般只使用其中一种，若要都定义到接口中，则势必要使程序员在使用时必须要实现这四个方法。这是很麻烦的。所以就将该接口定义为了标识接口（没有方法的接口）。这四个方法在打开 `ThrowsAdvice` 源码后，上侧的注释部分可以看到：\n![afterThrowing()](https://daily-1252869435.cos.ap-chengdu.myqcloud.com/2018-11-19-10-59-26.png)\n不过，在这四种形式中，常用的形式如下： `public void afterThrowing(自定义的异常类 e)` 这里的参数 e 为，与具体业务相关的用户自定义的异常类对象。容器会根据异常类型的不同，自动选择不同的该方法执行。这些方法的执行是在目标方法执行结束后执行的。其它参数则与前面两个通知中方法的参数意义相同。\n\n\n\n\n',`groups`='Default',`p_id`=1  WHERE  `id` = 1 [ RunTime:0.000714s ]
---------------------------------------------------------------
[ 2018-11-19T10:54:57+08:00 ] 74.120.168.12 74.120.168.12 POST /daily/admin/note/savenote.html
[ info ] qingrang.top/daily/admin/note/savenote.html [运行时间：0.052867s][吞吐率：18.92req/s] [内存消耗：2,109.78kb] [文件加载：56]
[ info ] [ LANG ] /var/www/html/daily/thinkphp/lang/zh-cn.php
[ info ] [ ROUTE ] array (
  'type' => 'module',
  'module' => 
  array (
    0 => 'admin',
    1 => 'note',
    2 => 'savenote',
  ),
)
[ info ] [ HEADER ] array (
  'host' => 'qingrang.top',
  'content-length' => '24670',
  'accept' => 'text/plain, */*; q=0.01',
  'origin' => 'http://qingrang.top',
  'x-requested-with' => 'XMLHttpRequest',
  'user-agent' => 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/70.0.3538.102 Safari/537.36',
  'content-type' => 'application/x-www-form-urlencoded; charset=UTF-8',
  'referer' => 'http://qingrang.top/daily/admin/note/editnote/id/250.html',
  'accept-encoding' => 'gzip, deflate',
  'accept-language' => 'zh-CN,zh;q=0.9,la;q=0.8,en;q=0.7,lb;q=0.6',
  'cookie' => 'Hm_lvt_1769181352e9adc950166aada465644e=1541082864,1541122974,1541171416,1542098176; PHPSESSID=cvrea98moc9nvt4dg4igb1ep86',
  'connection' => 'close',
)
[ info ] [ PARAM ] array (
  'ogroup' => 'Default',
  'context' => '# Spring(二) - AOP（面向切面）
[TOC]

Spring 是一个基于 **IOC** 和 **AOP** 的结构 J2EE 系统的框架。
## AOP 简介
### 概念
AOP（Aspect Orient Programming），面向切面编程，是面向对象编程 OOP 的一种补充。面向对象编程是从静态角度考虑程序的结构，而面向切面编程是从动态角度考虑程序运行过程。

AOP 底层，就是采用动态代理模式实现的。采用了两种代理： JDK 的动态代理，与 CGLIB 的动态代理。

面向切面编程，就是将交叉业务逻辑封装成切面，利用 AOP 容器的功能将切面织入到主业务逻辑中。所谓交叉业务逻辑是指，通用的、与主业务逻辑无关的代码，如安全检查、事务、日志等。

若不使用 AOP，则会出现代码纠缠，即交叉业务逻辑与主业务逻辑混合在一起。这样，会使主业务逻辑变的混杂不清。

例如，转账，在真正转账业务逻辑前后，需要权限控制、日志记录、加载事务、结束事务等交叉业务逻辑，而这些业务逻辑与主业务逻辑间并无直接关系。但，它们的代码量所占比重能达到总代码量的一半甚至还多。它们的存在，不仅产生了大量的“冗余”代码，还大大干扰了主业务逻辑---转账。

### 利用 JDK 动态代理实现 AOP 编程
*ISomeService.java - 主业务接口*
```
public interface ISomeService {
	// 目标方法
	void doFirst();
	// 目标方法
	void doSecond();
}
```
*SomeServiceImpl.java - 目标类*
```
public class SomeServiceImpl implements ISomeService {

	@Override
	public void doFirst() {
		System.out.println("执行doFirst()方法");
	}

	@Override
	public void doSecond() {
		System.out.println("执行doSecond()方法");
	}
}
```
*SystemService.java - 交叉业务逻辑*
```
public class SystemService {
	public static void doLog() {
		System.out.println("执行日志代码");
	}

	public static void doTx() {
		System.out.println("执行事务代码");
	}
}
```
*MyTest.java*
```
@Test
public void MyTest(){
	final ISomeService target = new SomeServiceImpl();
	// 自动生成一个动态代理对象
	ISomeService service = (ISomeService) Proxy.newProxyInstance(
			target.getClass().getClassLoader(), // 目标类的类加载器
			target.getClass().getInterfaces(),  // 目标类实现的接口数组
			new InvocationHandler() { //业务增强逻辑
				// 具体加强的代码逻辑
				@Override
				public Object invoke(Object proxy, Method method, Object[] args) throws Throwable {
					SystemService.doTx(); // 织入
					Object result = method.invoke(target, args); // 执行目标方法
					SystemService.doLog(); // 织入
					return result;
				}
			});
	service.doFirst();
	System.out.println("==============");
	service.doSecond();
}
```
*输出信息*
```
执行事务代码
执行doFirst()方法
执行日志代码
==============
执行事务代码
执行doSecond()方法
执行日志代码
```
## AOP 编程术语
### 切面（Aspect）
切面泛指交叉业务逻辑。上例中的事务处理、日志处理就可以理解为切面。常用的切面有通知与顾问。实际就是对主业务逻辑的一种增强。
### 织入（Weaving）
织入是指将切面代码插入到目标对象的过程。上例中 MyInvocationHandler 类中的 invoke() 方法完成的工作，就可以称为织入。
### 连接点（JoinPoint）
连接点指可以被切面织入的方法。通常业务接口中的方法均为连接点。
### 切入点（Pointcut）
切入点指切面具体织入的方法。在 StudentServiceImpl 类中，若 doSome()将被增强，而doOther()不被增强，则 doSome()为切入点，而 doOther()仅为连接点。被标记为 final 的方法是不能作为连接点与切入点的。因为最终的是不能被修改，不能被增强的。
### 目标对象（Target）
目标对象指将要被增强的对象。即包含主业务逻辑的类的对象。上例中的 StudentServiceImpl 的对象若被增强，则该类称为目标类，该类对象称为目标对象。当然，不被增强，也就无所谓目标不目标了。
### 通知（Advice）
通知是切面的一种实现，可以完成简单织入功能（织入功能就是在这里完成的）。换个角度来说，通知定义了增强码切入到目标代码的时间点，是目标方法执行之前执行，还是之后执行等。通知类型不同，切入时间不同。

**切入点定义切入的位置，通知定义切入的时间。**
### 顾问（Advisor）
顾问是切面的另一种实现，能够将通知以更为复杂的方式织入到目标对象中，是将通知包装为更复杂切面的装配器。






## 通知 Advice
通知（Advice），切面的一种实现，可以完成简单织入功能（织入功能就是在这里完成的）。

常用通知有：前置通知、后置通知、环绕通知、异常处理通知。
### 前置通知 MethodBeforeAdvice
定义前置通知，需要实现 MethodBeforeAdvice 接口。该接口中有一个方法 before()，会在目标方法执行之前执行。 前置通知的特点：
- 在目标方法执行之前先执行。
- 不改变目标方法的执行流程，前置通知代码不能阻止目标方法执行。
- 不改变目标方法执行的结果。

*ISomeService.java - 主业务接口*
```
public interface ISomeService {
	// 目标方法
	void doFirst();
	// 目标方法
	void doSecond();
}
```
*SomeServiceImpl.java - 目标类*
```
public class SomeServiceImpl implements ISomeService {

	@Override
	public void doFirst() {
		System.out.println("执行doFirst()方法");
	}

	@Override
	public void doSecond() {
		System.out.println("执行doSecond()方法");
	}
}
```
*MyMethodBeforeAdvice.java - 前置通知*
```
public class MyMethodBeforeAdvice implements MethodBeforeAdvice {

	// 当前方法在目标方法执行之前执行，method:目标方法，args:目标方法的参数列表，target:目标对象
	@Override
	public void before(Method method, Object[] args, Object target) throws Throwable {
		// 对于目标方法的增强代码就应该写在这里
		System.out.println("执行前置通知方法");
	}
}
```
*applicationContext.mxl*
```
<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xsi:schemaLocation="
        http://www.springframework.org/schema/beans 
        http://www.springframework.org/schema/beans/spring-beans.xsd">

    <!-- 注册目标对象 -->
    <bean id="someService" class="top.qingrang.aop01.SomeServiceImpl"/>

    <!-- 注册切面：通知 -->
    <bean id="myAdvice" class="top.qingrang.aop01.MyMethodBeforeAdvice"/>

    <!-- 生成代理对象 -->
    <bean id="serviceProxy" class="org.springframework.aop.framework.ProxyFactoryBean">
    	<!-- 指定目标对象，随便用哪个 -->
    	<!-- <property name="targetName" value="someService"/> -->
    	<property name="target" ref="someService"/>
		
    	<!-- 指定切面 -->
    	<property name="interceptorNames" value="myAdvice"/>
    </bean>
</beans>
```

### 后置通知 AfterReturningAdvice
定义后置通知，需要实现接口 AfterReturningAdvice。该接口中有一个方法 afterReturning()，会在目标方法执行之后执行。后置通知的特点：
- 在目标方法执行之后执行。
- 不改变目标方法的执行流程，后置通知代码不能阻止目标方法执行。
- 不改变目标方法执行的结果。

*SomeServiceImpl.java - 目标类*
```
public class SomeServiceImpl implements ISomeService {

	@Override
	public void doFirst() {
		System.out.println("执行doFirst()方法");
	}

	@Override
	public String doSecond() {
		System.out.println("执行doSecond()方法");
		return "abcde";
	}
}
```
*MyAfterReturningAdvice.java - 后置通知*
```
// 后置通知：可以获取到目标方法的返回结果，但无法改变目标方法的结果
public class MyAfterReturningAdvice implements AfterReturningAdvice {
	// 在目标方法执行之后执行，returnValue：目标方法的返回值
	@Override
	public void afterReturning(Object returnValue, Method method, Object[] args, Object target) throws Throwable {
		System.out.println("执行后置通知方法  returnValue = " + returnValue);
		if (returnValue != null) {
			returnValue = ((String) returnValue).toUpperCase();
			System.out.println("修改过的结果  returnValue = " + returnValue);
		}
	}
}
```
### 环绕通知 MethodInterceptor
定义环绕通知(在目标方法执行之前之后都会执行)，需要实现 MethodInterceptor 接口。环绕通知，也叫方法拦截器，可以在目标方法调用之前及之后做处理，可以改变目标方法的返回值，也可以改变程序执行流程。

*MyMethodInterceptor.java*
```
// 环绕通知：可以修改目标方法的返回结果
public class MyMethodInterceptor implements MethodInterceptor {
	@Override
	public Object invoke(MethodInvocation invocation) throws Throwable {
		System.out.println("执行环绕通知：目标方法执行之前");
		// 执行目标方法
		Object result = invocation.proceed();
		System.out.println("执行环绕通知：目标方法执行之后");
		if(result != null) {
			result = ((String)result).toUpperCase();
		}
		return result;
	}
}
```





### 异常通知 ThrowsAdvice
定义异常通知，需要实现 ThrowsAdvice 接口。该接口的主要作用是，在目标方法抛出异常后，根据异常的不同做出相应的处理。当该接口处理完异常后，会简单地将异常再次抛出给目标方法。

不过，这个接口较为特殊，从形式上看，该接口中没有必须要实现的方法。但，这个接口却确实有必须要实现的方法 `afterThrowing()`。这个方法重载了四种形式。由于使用时，一般只使用其中一种，若要都定义到接口中，则势必要使程序员在使用时必须要实现这四个方法。这是很麻烦的。所以就将该接口定义为了标识接口（没有方法的接口）。这四个方法在打开 `ThrowsAdvice` 源码后，上侧的注释部分可以看到：
![afterThrowing()](https://daily-1252869435.cos.ap-chengdu.myqcloud.com/2018-11-19-10-59-26.png)
不过，在这四种形式中，常用的形式如下： `public void afterThrowing(自定义的异常类 e)` 这里的参数 e 为，与具体业务相关的用户自定义的异常类对象。容器会根据异常类型的不同，自动选择不同的该方法执行。这些方法的执行是在目标方法执行结束后执行的。其它参数则与前面两个通知中方法的参数意义相同。




',
)
[ info ] [ SESSION ] INIT array (
  'id' => '',
  'var_session_id' => '',
  'prefix' => 'think',
  'type' => '',
  'auto_start' => true,
)
[ info ] [ RUN ] app\admin\controller\Note->saveNote[ /var/www/html/daily/application/admin/controller/Note.php ]
[ info ] [ DB ] INIT mysql
[ info ] [ CACHE ] INIT File
[ info ] [ LOG ] INIT File
[ sql ] [ DB ] CONNECT:[ UseTime:0.000503s ] mysql:host=74.120.168.12;dbname=diary;charset=utf8
[ sql ] [ SQL ] SHOW COLUMNS FROM `note` [ RunTime:0.001302s ]
[ sql ] [ SQL ] UPDATE `note`  SET `title`='Spring(二) - AOP（面向切面）',`content`='# Spring(二) - AOP（面向切面）\n[TOC]\n\nSpring 是一个基于 **IOC** 和 **AOP** 的结构 J2EE 系统的框架。\n## AOP 简介\n### 概念\nAOP（Aspect Orient Programming），面向切面编程，是面向对象编程 OOP 的一种补充。面向对象编程是从静态角度考虑程序的结构，而面向切面编程是从动态角度考虑程序运行过程。\n\nAOP 底层，就是采用动态代理模式实现的。采用了两种代理： JDK 的动态代理，与 CGLIB 的动态代理。\n\n面向切面编程，就是将交叉业务逻辑封装成切面，利用 AOP 容器的功能将切面织入到主业务逻辑中。所谓交叉业务逻辑是指，通用的、与主业务逻辑无关的代码，如安全检查、事务、日志等。\n\n若不使用 AOP，则会出现代码纠缠，即交叉业务逻辑与主业务逻辑混合在一起。这样，会使主业务逻辑变的混杂不清。\n\n例如，转账，在真正转账业务逻辑前后，需要权限控制、日志记录、加载事务、结束事务等交叉业务逻辑，而这些业务逻辑与主业务逻辑间并无直接关系。但，它们的代码量所占比重能达到总代码量的一半甚至还多。它们的存在，不仅产生了大量的“冗余”代码，还大大干扰了主业务逻辑---转账。\n\n### 利用 JDK 动态代理实现 AOP 编程\n*ISomeService.java - 主业务接口*\n```\npublic interface ISomeService {\n	// 目标方法\n	void doFirst();\n	// 目标方法\n	void doSecond();\n}\n```\n*SomeServiceImpl.java - 目标类*\n```\npublic class SomeServiceImpl implements ISomeService {\n\n	@Override\n	public void doFirst() {\n		System.out.println(\"执行doFirst()方法\");\n	}\n\n	@Override\n	public void doSecond() {\n		System.out.println(\"执行doSecond()方法\");\n	}\n}\n```\n*SystemService.java - 交叉业务逻辑*\n```\npublic class SystemService {\n	public static void doLog() {\n		System.out.println(\"执行日志代码\");\n	}\n\n	public static void doTx() {\n		System.out.println(\"执行事务代码\");\n	}\n}\n```\n*MyTest.java*\n```\n@Test\npublic void MyTest(){\n	final ISomeService target = new SomeServiceImpl();\n	// 自动生成一个动态代理对象\n	ISomeService service = (ISomeService) Proxy.newProxyInstance(\n			target.getClass().getClassLoader(), // 目标类的类加载器\n			target.getClass().getInterfaces(),  // 目标类实现的接口数组\n			new InvocationHandler() { //业务增强逻辑\n				// 具体加强的代码逻辑\n				@Override\n				public Object invoke(Object proxy, Method method, Object[] args) throws Throwable {\n					SystemService.doTx(); // 织入\n					Object result = method.invoke(target, args); // 执行目标方法\n					SystemService.doLog(); // 织入\n					return result;\n				}\n			});\n	service.doFirst();\n	System.out.println(\"==============\");\n	service.doSecond();\n}\n```\n*输出信息*\n```\n执行事务代码\n执行doFirst()方法\n执行日志代码\n==============\n执行事务代码\n执行doSecond()方法\n执行日志代码\n```\n## AOP 编程术语\n### 切面（Aspect）\n切面泛指交叉业务逻辑。上例中的事务处理、日志处理就可以理解为切面。常用的切面有通知与顾问。实际就是对主业务逻辑的一种增强。\n### 织入（Weaving）\n织入是指将切面代码插入到目标对象的过程。上例中 MyInvocationHandler 类中的 invoke() 方法完成的工作，就可以称为织入。\n### 连接点（JoinPoint）\n连接点指可以被切面织入的方法。通常业务接口中的方法均为连接点。\n### 切入点（Pointcut）\n切入点指切面具体织入的方法。在 StudentServiceImpl 类中，若 doSome()将被增强，而doOther()不被增强，则 doSome()为切入点，而 doOther()仅为连接点。被标记为 final 的方法是不能作为连接点与切入点的。因为最终的是不能被修改，不能被增强的。\n### 目标对象（Target）\n目标对象指将要被增强的对象。即包含主业务逻辑的类的对象。上例中的 StudentServiceImpl 的对象若被增强，则该类称为目标类，该类对象称为目标对象。当然，不被增强，也就无所谓目标不目标了。\n### 通知（Advice）\n通知是切面的一种实现，可以完成简单织入功能（织入功能就是在这里完成的）。换个角度来说，通知定义了增强码切入到目标代码的时间点，是目标方法执行之前执行，还是之后执行等。通知类型不同，切入时间不同。\n\n**切入点定义切入的位置，通知定义切入的时间。**\n### 顾问（Advisor）\n顾问是切面的另一种实现，能够将通知以更为复杂的方式织入到目标对象中，是将通知包装为更复杂切面的装配器。\n\n\n\n\n\n\n## 通知 Advice\n通知（Advice），切面的一种实现，可以完成简单织入功能（织入功能就是在这里完成的）。\n\n常用通知有：前置通知、后置通知、环绕通知、异常处理通知。\n### 前置通知 MethodBeforeAdvice\n定义前置通知，需要实现 MethodBeforeAdvice 接口。该接口中有一个方法 before()，会在目标方法执行之前执行。 前置通知的特点：\n- 在目标方法执行之前先执行。\n- 不改变目标方法的执行流程，前置通知代码不能阻止目标方法执行。\n- 不改变目标方法执行的结果。\n\n*ISomeService.java - 主业务接口*\n```\npublic interface ISomeService {\n	// 目标方法\n	void doFirst();\n	// 目标方法\n	void doSecond();\n}\n```\n*SomeServiceImpl.java - 目标类*\n```\npublic class SomeServiceImpl implements ISomeService {\n\n	@Override\n	public void doFirst() {\n		System.out.println(\"执行doFirst()方法\");\n	}\n\n	@Override\n	public void doSecond() {\n		System.out.println(\"执行doSecond()方法\");\n	}\n}\n```\n*MyMethodBeforeAdvice.java - 前置通知*\n```\npublic class MyMethodBeforeAdvice implements MethodBeforeAdvice {\n\n	// 当前方法在目标方法执行之前执行，method:目标方法，args:目标方法的参数列表，target:目标对象\n	@Override\n	public void before(Method method, Object[] args, Object target) throws Throwable {\n		// 对于目标方法的增强代码就应该写在这里\n		System.out.println(\"执行前置通知方法\");\n	}\n}\n```\n*applicationContext.mxl*\n```\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<beans xmlns=\"http://www.springframework.org/schema/beans\"\n    xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n    xsi:schemaLocation=\"\n        http://www.springframework.org/schema/beans \n        http://www.springframework.org/schema/beans/spring-beans.xsd\">\n\n    <!-- 注册目标对象 -->\n    <bean id=\"someService\" class=\"top.qingrang.aop01.SomeServiceImpl\"/>\n\n    <!-- 注册切面：通知 -->\n    <bean id=\"myAdvice\" class=\"top.qingrang.aop01.MyMethodBeforeAdvice\"/>\n\n    <!-- 生成代理对象 -->\n    <bean id=\"serviceProxy\" class=\"org.springframework.aop.framework.ProxyFactoryBean\">\n    	<!-- 指定目标对象，随便用哪个 -->\n    	<!-- <property name=\"targetName\" value=\"someService\"/> -->\n    	<property name=\"target\" ref=\"someService\"/>\n		\n    	<!-- 指定切面 -->\n    	<property name=\"interceptorNames\" value=\"myAdvice\"/>\n    </bean>\n</beans>\n```\n\n### 后置通知 AfterReturningAdvice\n定义后置通知，需要实现接口 AfterReturningAdvice。该接口中有一个方法 afterReturning()，会在目标方法执行之后执行。后置通知的特点：\n- 在目标方法执行之后执行。\n- 不改变目标方法的执行流程，后置通知代码不能阻止目标方法执行。\n- 不改变目标方法执行的结果。\n\n*SomeServiceImpl.java - 目标类*\n```\npublic class SomeServiceImpl implements ISomeService {\n\n	@Override\n	public void doFirst() {\n		System.out.println(\"执行doFirst()方法\");\n	}\n\n	@Override\n	public String doSecond() {\n		System.out.println(\"执行doSecond()方法\");\n		return \"abcde\";\n	}\n}\n```\n*MyAfterReturningAdvice.java - 后置通知*\n```\n// 后置通知：可以获取到目标方法的返回结果，但无法改变目标方法的结果\npublic class MyAfterReturningAdvice implements AfterReturningAdvice {\n	// 在目标方法执行之后执行，returnValue：目标方法的返回值\n	@Override\n	public void afterReturning(Object returnValue, Method method, Object[] args, Object target) throws Throwable {\n		System.out.println(\"执行后置通知方法  returnValue = \" + returnValue);\n		if (returnValue != null) {\n			returnValue = ((String) returnValue).toUpperCase();\n			System.out.println(\"修改过的结果  returnValue = \" + returnValue);\n		}\n	}\n}\n```\n### 环绕通知 MethodInterceptor\n定义环绕通知(在目标方法执行之前之后都会执行)，需要实现 MethodInterceptor 接口。环绕通知，也叫方法拦截器，可以在目标方法调用之前及之后做处理，可以改变目标方法的返回值，也可以改变程序执行流程。\n\n*MyMethodInterceptor.java*\n```\n// 环绕通知：可以修改目标方法的返回结果\npublic class MyMethodInterceptor implements MethodInterceptor {\n	@Override\n	public Object invoke(MethodInvocation invocation) throws Throwable {\n		System.out.println(\"执行环绕通知：目标方法执行之前\");\n		// 执行目标方法\n		Object result = invocation.proceed();\n		System.out.println(\"执行环绕通知：目标方法执行之后\");\n		if(result != null) {\n			result = ((String)result).toUpperCase();\n		}\n		return result;\n	}\n}\n```\n\n\n\n\n\n### 异常通知 ThrowsAdvice\n定义异常通知，需要实现 ThrowsAdvice 接口。该接口的主要作用是，在目标方法抛出异常后，根据异常的不同做出相应的处理。当该接口处理完异常后，会简单地将异常再次抛出给目标方法。\n\n不过，这个接口较为特殊，从形式上看，该接口中没有必须要实现的方法。但，这个接口却确实有必须要实现的方法 `afterThrowing()`。这个方法重载了四种形式。由于使用时，一般只使用其中一种，若要都定义到接口中，则势必要使程序员在使用时必须要实现这四个方法。这是很麻烦的。所以就将该接口定义为了标识接口（没有方法的接口）。这四个方法在打开 `ThrowsAdvice` 源码后，上侧的注释部分可以看到：\n![afterThrowing()](https://daily-1252869435.cos.ap-chengdu.myqcloud.com/2018-11-19-10-59-26.png)\n不过，在这四种形式中，常用的形式如下： `public void afterThrowing(自定义的异常类 e)` 这里的参数 e 为，与具体业务相关的用户自定义的异常类对象。容器会根据异常类型的不同，自动选择不同的该方法执行。这些方法的执行是在目标方法执行结束后执行的。其它参数则与前面两个通知中方法的参数意义相同。\n\n\n\n\n',`groups`='Default',`p_id`=1  WHERE  `id` = 1 [ RunTime:0.000635s ]
---------------------------------------------------------------
[ 2018-11-19T11:08:37+08:00 ] 74.120.168.12 74.120.168.12 GET /daily/admin/note/shownote/id/208.html
[ info ] qingrang.top/daily/admin/note/shownote/id/208.html [运行时间：0.081771s][吞吐率：12.23req/s] [内存消耗：1,983.75kb] [文件加载：55]
[ info ] [ LANG ] /var/www/html/daily/thinkphp/lang/zh-cn.php
[ info ] [ ROUTE ] array (
  'type' => 'module',
  'module' => 
  array (
    0 => 'admin',
    1 => 'note',
    2 => 'shownote',
  ),
)
[ info ] [ HEADER ] array (
  'host' => 'qingrang.top',
  'upgrade-insecure-requests' => '1',
  'user-agent' => 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/70.0.3538.102 Safari/537.36',
  'accept' => 'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8',
  'referer' => 'http://qingrang.top/daily/admin/note',
  'accept-encoding' => 'gzip, deflate',
  'accept-language' => 'zh-CN,zh;q=0.9,la;q=0.8,en;q=0.7,lb;q=0.6',
  'cookie' => 'Hm_lvt_1769181352e9adc950166aada465644e=1541082864,1541122974,1541171416,1542098176; PHPSESSID=cvrea98moc9nvt4dg4igb1ep86',
  'connection' => 'close',
)
[ info ] [ PARAM ] array (
  'id' => '208',
)
[ info ] [ SESSION ] INIT array (
  'id' => '',
  'var_session_id' => '',
  'prefix' => 'think',
  'type' => '',
  'auto_start' => true,
)
[ info ] [ RUN ] app\admin\controller\Note->showNote[ /var/www/html/daily/application/admin/controller/Note.php ]
[ info ] [ DB ] INIT mysql
[ info ] [ VIEW ] /var/www/html/daily/application/admin/view/note/shownote.html [ array (
  0 => 'note',
  1 => 'groups',
) ]
[ info ] [ LOG ] INIT File
[ sql ] [ DB ] CONNECT:[ UseTime:0.001706s ] mysql:host=74.120.168.12;dbname=diary;charset=utf8
[ sql ] [ SQL ] SHOW COLUMNS FROM `note` [ RunTime:0.003510s ]
[ sql ] [ SQL ] SELECT * FROM `note` WHERE  `id` = 208 LIMIT 1 [ RunTime:0.001004s ]
[ sql ] [ SQL ] SHOW COLUMNS FROM `groups` [ RunTime:0.001613s ]
[ sql ] [ SQL ] SELECT * FROM `groups` [ RunTime:0.000340s ]
---------------------------------------------------------------
[ 2018-11-19T11:13:41+08:00 ] 74.120.168.12 74.120.168.12 POST /daily/admin/note/savenote.html
[ info ] qingrang.top/daily/admin/note/savenote.html [运行时间：0.060104s][吞吐率：16.64req/s] [内存消耗：2,128.64kb] [文件加载：56]
[ info ] [ LANG ] /var/www/html/daily/thinkphp/lang/zh-cn.php
[ info ] [ ROUTE ] array (
  'type' => 'module',
  'module' => 
  array (
    0 => 'admin',
    1 => 'note',
    2 => 'savenote',
  ),
)
[ info ] [ HEADER ] array (
  'host' => 'qingrang.top',
  'content-length' => '29090',
  'accept' => 'text/plain, */*; q=0.01',
  'origin' => 'http://qingrang.top',
  'x-requested-with' => 'XMLHttpRequest',
  'user-agent' => 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/70.0.3538.102 Safari/537.36',
  'content-type' => 'application/x-www-form-urlencoded; charset=UTF-8',
  'referer' => 'http://qingrang.top/daily/admin/note/editnote/id/250.html',
  'accept-encoding' => 'gzip, deflate',
  'accept-language' => 'zh-CN,zh;q=0.9,la;q=0.8,en;q=0.7,lb;q=0.6',
  'cookie' => 'Hm_lvt_1769181352e9adc950166aada465644e=1541082864,1541122974,1541171416,1542098176; PHPSESSID=cvrea98moc9nvt4dg4igb1ep86',
  'connection' => 'close',
)
[ info ] [ PARAM ] array (
  'ogroup' => 'Default',
  'context' => '# Spring(二) - AOP（面向切面）
[TOC]

Spring 是一个基于 **IOC** 和 **AOP** 的结构 J2EE 系统的框架。
## AOP 简介
### 概念
AOP（Aspect Orient Programming），面向切面编程，是面向对象编程 OOP 的一种补充。面向对象编程是从静态角度考虑程序的结构，而面向切面编程是从动态角度考虑程序运行过程。

AOP 底层，就是采用动态代理模式实现的。采用了两种代理： JDK 的动态代理，与 CGLIB 的动态代理。

面向切面编程，就是将交叉业务逻辑封装成切面，利用 AOP 容器的功能将切面织入到主业务逻辑中。所谓交叉业务逻辑是指，通用的、与主业务逻辑无关的代码，如安全检查、事务、日志等。

若不使用 AOP，则会出现代码纠缠，即交叉业务逻辑与主业务逻辑混合在一起。这样，会使主业务逻辑变的混杂不清。

例如，转账，在真正转账业务逻辑前后，需要权限控制、日志记录、加载事务、结束事务等交叉业务逻辑，而这些业务逻辑与主业务逻辑间并无直接关系。但，它们的代码量所占比重能达到总代码量的一半甚至还多。它们的存在，不仅产生了大量的“冗余”代码，还大大干扰了主业务逻辑---转账。

### 利用 JDK 动态代理实现 AOP 编程
*ISomeService.java - 主业务接口*
```
public interface ISomeService {
	// 目标方法
	void doFirst();
	// 目标方法
	void doSecond();
}
```
*SomeServiceImpl.java - 目标类*
```
public class SomeServiceImpl implements ISomeService {

	@Override
	public void doFirst() {
		System.out.println("执行doFirst()方法");
	}

	@Override
	public void doSecond() {
		System.out.println("执行doSecond()方法");
	}
}
```
*SystemService.java - 交叉业务逻辑*
```
public class SystemService {
	public static void doLog() {
		System.out.println("执行日志代码");
	}

	public static void doTx() {
		System.out.println("执行事务代码");
	}
}
```
*MyTest.java*
```
@Test
public void MyTest(){
	final ISomeService target = new SomeServiceImpl();
	// 自动生成一个动态代理对象
	ISomeService service = (ISomeService) Proxy.newProxyInstance(
			target.getClass().getClassLoader(), // 目标类的类加载器
			target.getClass().getInterfaces(),  // 目标类实现的接口数组
			new InvocationHandler() { //业务增强逻辑
				// 具体加强的代码逻辑
				@Override
				public Object invoke(Object proxy, Method method, Object[] args) throws Throwable {
					SystemService.doTx(); // 织入
					Object result = method.invoke(target, args); // 执行目标方法
					SystemService.doLog(); // 织入
					return result;
				}
			});
	service.doFirst();
	System.out.println("==============");
	service.doSecond();
}
```
*输出信息*
```
执行事务代码
执行doFirst()方法
执行日志代码
==============
执行事务代码
执行doSecond()方法
执行日志代码
```
## AOP 编程术语
### 切面（Aspect）
切面泛指交叉业务逻辑。上例中的事务处理、日志处理就可以理解为切面。常用的切面有通知与顾问。实际就是对主业务逻辑的一种增强。
### 织入（Weaving）
织入是指将切面代码插入到目标对象的过程。上例中 MyInvocationHandler 类中的 invoke() 方法完成的工作，就可以称为织入。
### 连接点（JoinPoint）
连接点指可以被切面织入的方法。通常业务接口中的方法均为连接点。
### 切入点（Pointcut）
切入点指切面具体织入的方法。在 StudentServiceImpl 类中，若 doSome()将被增强，而doOther()不被增强，则 doSome()为切入点，而 doOther()仅为连接点。被标记为 final 的方法是不能作为连接点与切入点的。因为最终的是不能被修改，不能被增强的。
### 目标对象（Target）
目标对象指将要被增强的对象。即包含主业务逻辑的类的对象。上例中的 StudentServiceImpl 的对象若被增强，则该类称为目标类，该类对象称为目标对象。当然，不被增强，也就无所谓目标不目标了。
### 通知（Advice）
通知是切面的一种实现，可以完成简单织入功能（织入功能就是在这里完成的）。换个角度来说，通知定义了增强码切入到目标代码的时间点，是目标方法执行之前执行，还是之后执行等。通知类型不同，切入时间不同。

**切入点定义切入的位置，通知定义切入的时间。**
### 顾问（Advisor）
顾问是切面的另一种实现，能够将通知以更为复杂的方式织入到目标对象中，是将通知包装为更复杂切面的装配器。






## 通知 Advice
通知（Advice），切面的一种实现，可以完成简单织入功能（织入功能就是在这里完成的）。

常用通知有：前置通知、后置通知、环绕通知、异常处理通知。
### 前置通知 MethodBeforeAdvice
定义前置通知，需要实现 MethodBeforeAdvice 接口。该接口中有一个方法 before()，会在目标方法执行之前执行。 前置通知的特点：
- 在目标方法执行之前先执行。
- 不改变目标方法的执行流程，前置通知代码不能阻止目标方法执行。
- 不改变目标方法执行的结果。

*ISomeService.java - 主业务接口*
```
public interface ISomeService {
	// 目标方法
	void doFirst();
	// 目标方法
	void doSecond();
}
```
*SomeServiceImpl.java - 目标类*
```
public class SomeServiceImpl implements ISomeService {

	@Override
	public void doFirst() {
		System.out.println("执行doFirst()方法");
	}

	@Override
	public void doSecond() {
		System.out.println("执行doSecond()方法");
	}
}
```
*MyMethodBeforeAdvice.java - 前置通知*
```
public class MyMethodBeforeAdvice implements MethodBeforeAdvice {

	// 当前方法在目标方法执行之前执行，method:目标方法，args:目标方法的参数列表，target:目标对象
	@Override
	public void before(Method method, Object[] args, Object target) throws Throwable {
		// 对于目标方法的增强代码就应该写在这里
		System.out.println("执行前置通知方法");
	}
}
```
*applicationContext.mxl*
```
<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xsi:schemaLocation="
        http://www.springframework.org/schema/beans 
        http://www.springframework.org/schema/beans/spring-beans.xsd">

    <!-- 注册目标对象 -->
    <bean id="someService" class="top.qingrang.aop01.SomeServiceImpl"/>

    <!-- 注册切面：通知 -->
    <bean id="myAdvice" class="top.qingrang.aop01.MyMethodBeforeAdvice"/>

    <!-- 生成代理对象 -->
    <bean id="serviceProxy" class="org.springframework.aop.framework.ProxyFactoryBean">
    	<!-- 指定目标对象，随便用哪个 -->
    	<!-- <property name="targetName" value="someService"/> -->
    	<property name="target" ref="someService"/>
		
    	<!-- 指定切面 -->
    	<property name="interceptorNames" value="myAdvice"/>
    </bean>
</beans>
```

### 后置通知 AfterReturningAdvice
定义后置通知，需要实现接口 AfterReturningAdvice。该接口中有一个方法 afterReturning()，会在目标方法执行之后执行。后置通知的特点：
- 在目标方法执行之后执行。
- 不改变目标方法的执行流程，后置通知代码不能阻止目标方法执行。
- 不改变目标方法执行的结果。

*SomeServiceImpl.java - 目标类*
```
public class SomeServiceImpl implements ISomeService {

	@Override
	public void doFirst() {
		System.out.println("执行doFirst()方法");
	}

	@Override
	public String doSecond() {
		System.out.println("执行doSecond()方法");
		return "abcde";
	}
}
```
*MyAfterReturningAdvice.java - 后置通知*
```
// 后置通知：可以获取到目标方法的返回结果，但无法改变目标方法的结果
public class MyAfterReturningAdvice implements AfterReturningAdvice {
	// 在目标方法执行之后执行，returnValue：目标方法的返回值
	@Override
	public void afterReturning(Object returnValue, Method method, Object[] args, Object target) throws Throwable {
		System.out.println("执行后置通知方法  returnValue = " + returnValue);
		if (returnValue != null) {
			returnValue = ((String) returnValue).toUpperCase();
			System.out.println("修改过的结果  returnValue = " + returnValue);
		}
	}
}
```
### 环绕通知 MethodInterceptor
定义环绕通知(在目标方法执行之前之后都会执行)，需要实现 MethodInterceptor 接口。环绕通知，也叫方法拦截器，可以在目标方法调用之前及之后做处理，可以改变目标方法的返回值，也可以改变程序执行流程。

*MyMethodInterceptor.java*
```
// 环绕通知：可以修改目标方法的返回结果
public class MyMethodInterceptor implements MethodInterceptor {
	@Override
	public Object invoke(MethodInvocation invocation) throws Throwable {
		System.out.println("执行环绕通知：目标方法执行之前");
		// 执行目标方法
		Object result = invocation.proceed();
		System.out.println("执行环绕通知：目标方法执行之后");
		if(result != null) {
			result = ((String)result).toUpperCase();
		}
		return result;
	}
}
```





### 异常通知 ThrowsAdvice
定义异常通知，需要实现 ThrowsAdvice 接口。该接口的主要作用是，在目标方法抛出异常后，根据异常的不同做出相应的处理。当该接口处理完异常后，会简单地将异常再次抛出给目标方法。

不过，这个接口较为特殊，从形式上看，该接口中没有必须要实现的方法。但，这个接口却确实有必须要实现的方法 `afterThrowing()`。这个方法重载了四种形式。由于使用时，一般只使用其中一种，若要都定义到接口中，则势必要使程序员在使用时必须要实现这四个方法。这是很麻烦的。所以就将该接口定义为了标识接口（没有方法的接口）。这四个方法在打开 `ThrowsAdvice` 源码后，上侧的注释部分可以看到：
![afterThrowing()](https://daily-1252869435.cos.ap-chengdu.myqcloud.com/2018-11-19-10-59-26.png)
不过，在这四种形式中，常用的形式如下： `public void afterThrowing(自定义的异常类 e)` 这里的参数 e 为，与具体业务相关的用户自定义的异常类对象。容器会根据异常类型的不同，自动选择不同的该方法执行。这些方法的执行是在目标方法执行结束后执行的。其它参数则与前面两个通知中方法的参数意义相同。
#### 普通异常
*SomeServiceImpl.java - 目标类*
```
@Override
public void doFirst() {
	System.out.println("执行doFirst()方法" + 3 / 0);
}
```
*MyThrowsAdvice.java - 异常通知*
```
public class MyThrowsAdvice implements ThrowsAdvice {
	// 当目标方法抛出与指定类型的异常具有 is-a 关系的异常时，执行当前方法
	public void afterThrowing(Exception ex) {
		System.out.println("执行异常通知方法");
	}
}
```
*输出信息*
```
执行异常通知方法
java.lang.ArithmeticException: / by zero
	...
```
#### 自定义异常
异常分两种：
- 运行时异常，不进行处理，也可以通过编译。
若一个类继承自 RunTimeException，则该异常就是运行时异常
- 编译时异常(受查异常,Checked Exception)，不进行处理，将无法通过编译。
若一个类继承自 Exception，则该异常就是受查异常

*UserException.java*
```
public class UserException extends Exception {
	public UserException() {
		super();
	}

	public UserException(String message) {
		super(message);
	}
}
```
*UsernameException.java*
```
public class UsernameException extends UserException {
	public UsernameException() {
		super();
	}

	public UsernameException(String message) {
		super(message);
	}
}
```
*PasswordException.java*
```
public class PasswordException extends UserException {
	public PasswordException() {
		super();
	}

	public PasswordException(String message) {
		super(message);
	}
}
```
*MyThrowsAdvice.java - 异常通知*
```
public class MyThrowsAdvice implements ThrowsAdvice {
	// 当目标方法抛出 UsernameException 异常时，执行当前方法
	public void afterThrowing(UsernameException ex) {
		System.out.println("发生用户名异常 ex = " + ex.getMessage());
	}
	
	// 当目标方法抛出 PasswordException 异常时，执行当前方法
	public void afterThrowing(PasswordException ex) {
		System.out.println("发生密码异常 ex = " + ex.getMessage());
	}
	
	// 当目标方法抛出其它异常时，执行当前方法
	public void afterThrowing(Exception ex) {
		System.out.println("发生异常 ex = " + ex.getMessage());
	}
}
```
*MyTest.java*
```
@Test
public void test01() throws UserException {
	String resource = "top/qingrang/aop05/applicationContext.xml";
	ApplicationContext ac = new ClassPathXmlApplicationContext(resource);
	ISomeService service = (ISomeService) ac.getBean("serviceProxy");
	service.login("beijing", "111");
}
```


',
)
[ info ] [ SESSION ] INIT array (
  'id' => '',
  'var_session_id' => '',
  'prefix' => 'think',
  'type' => '',
  'auto_start' => true,
)
[ info ] [ RUN ] app\admin\controller\Note->saveNote[ /var/www/html/daily/application/admin/controller/Note.php ]
[ info ] [ DB ] INIT mysql
[ info ] [ CACHE ] INIT File
[ info ] [ LOG ] INIT File
[ sql ] [ DB ] CONNECT:[ UseTime:0.000580s ] mysql:host=74.120.168.12;dbname=diary;charset=utf8
[ sql ] [ SQL ] SHOW COLUMNS FROM `note` [ RunTime:0.001394s ]
[ sql ] [ SQL ] UPDATE `note`  SET `title`='Spring(二) - AOP（面向切面）',`content`='# Spring(二) - AOP（面向切面）\n[TOC]\n\nSpring 是一个基于 **IOC** 和 **AOP** 的结构 J2EE 系统的框架。\n## AOP 简介\n### 概念\nAOP（Aspect Orient Programming），面向切面编程，是面向对象编程 OOP 的一种补充。面向对象编程是从静态角度考虑程序的结构，而面向切面编程是从动态角度考虑程序运行过程。\n\nAOP 底层，就是采用动态代理模式实现的。采用了两种代理： JDK 的动态代理，与 CGLIB 的动态代理。\n\n面向切面编程，就是将交叉业务逻辑封装成切面，利用 AOP 容器的功能将切面织入到主业务逻辑中。所谓交叉业务逻辑是指，通用的、与主业务逻辑无关的代码，如安全检查、事务、日志等。\n\n若不使用 AOP，则会出现代码纠缠，即交叉业务逻辑与主业务逻辑混合在一起。这样，会使主业务逻辑变的混杂不清。\n\n例如，转账，在真正转账业务逻辑前后，需要权限控制、日志记录、加载事务、结束事务等交叉业务逻辑，而这些业务逻辑与主业务逻辑间并无直接关系。但，它们的代码量所占比重能达到总代码量的一半甚至还多。它们的存在，不仅产生了大量的“冗余”代码，还大大干扰了主业务逻辑---转账。\n\n### 利用 JDK 动态代理实现 AOP 编程\n*ISomeService.java - 主业务接口*\n```\npublic interface ISomeService {\n	// 目标方法\n	void doFirst();\n	// 目标方法\n	void doSecond();\n}\n```\n*SomeServiceImpl.java - 目标类*\n```\npublic class SomeServiceImpl implements ISomeService {\n\n	@Override\n	public void doFirst() {\n		System.out.println(\"执行doFirst()方法\");\n	}\n\n	@Override\n	public void doSecond() {\n		System.out.println(\"执行doSecond()方法\");\n	}\n}\n```\n*SystemService.java - 交叉业务逻辑*\n```\npublic class SystemService {\n	public static void doLog() {\n		System.out.println(\"执行日志代码\");\n	}\n\n	public static void doTx() {\n		System.out.println(\"执行事务代码\");\n	}\n}\n```\n*MyTest.java*\n```\n@Test\npublic void MyTest(){\n	final ISomeService target = new SomeServiceImpl();\n	// 自动生成一个动态代理对象\n	ISomeService service = (ISomeService) Proxy.newProxyInstance(\n			target.getClass().getClassLoader(), // 目标类的类加载器\n			target.getClass().getInterfaces(),  // 目标类实现的接口数组\n			new InvocationHandler() { //业务增强逻辑\n				// 具体加强的代码逻辑\n				@Override\n				public Object invoke(Object proxy, Method method, Object[] args) throws Throwable {\n					SystemService.doTx(); // 织入\n					Object result = method.invoke(target, args); // 执行目标方法\n					SystemService.doLog(); // 织入\n					return result;\n				}\n			});\n	service.doFirst();\n	System.out.println(\"==============\");\n	service.doSecond();\n}\n```\n*输出信息*\n```\n执行事务代码\n执行doFirst()方法\n执行日志代码\n==============\n执行事务代码\n执行doSecond()方法\n执行日志代码\n```\n## AOP 编程术语\n### 切面（Aspect）\n切面泛指交叉业务逻辑。上例中的事务处理、日志处理就可以理解为切面。常用的切面有通知与顾问。实际就是对主业务逻辑的一种增强。\n### 织入（Weaving）\n织入是指将切面代码插入到目标对象的过程。上例中 MyInvocationHandler 类中的 invoke() 方法完成的工作，就可以称为织入。\n### 连接点（JoinPoint）\n连接点指可以被切面织入的方法。通常业务接口中的方法均为连接点。\n### 切入点（Pointcut）\n切入点指切面具体织入的方法。在 StudentServiceImpl 类中，若 doSome()将被增强，而doOther()不被增强，则 doSome()为切入点，而 doOther()仅为连接点。被标记为 final 的方法是不能作为连接点与切入点的。因为最终的是不能被修改，不能被增强的。\n### 目标对象（Target）\n目标对象指将要被增强的对象。即包含主业务逻辑的类的对象。上例中的 StudentServiceImpl 的对象若被增强，则该类称为目标类，该类对象称为目标对象。当然，不被增强，也就无所谓目标不目标了。\n### 通知（Advice）\n通知是切面的一种实现，可以完成简单织入功能（织入功能就是在这里完成的）。换个角度来说，通知定义了增强码切入到目标代码的时间点，是目标方法执行之前执行，还是之后执行等。通知类型不同，切入时间不同。\n\n**切入点定义切入的位置，通知定义切入的时间。**\n### 顾问（Advisor）\n顾问是切面的另一种实现，能够将通知以更为复杂的方式织入到目标对象中，是将通知包装为更复杂切面的装配器。\n\n\n\n\n\n\n## 通知 Advice\n通知（Advice），切面的一种实现，可以完成简单织入功能（织入功能就是在这里完成的）。\n\n常用通知有：前置通知、后置通知、环绕通知、异常处理通知。\n### 前置通知 MethodBeforeAdvice\n定义前置通知，需要实现 MethodBeforeAdvice 接口。该接口中有一个方法 before()，会在目标方法执行之前执行。 前置通知的特点：\n- 在目标方法执行之前先执行。\n- 不改变目标方法的执行流程，前置通知代码不能阻止目标方法执行。\n- 不改变目标方法执行的结果。\n\n*ISomeService.java - 主业务接口*\n```\npublic interface ISomeService {\n	// 目标方法\n	void doFirst();\n	// 目标方法\n	void doSecond();\n}\n```\n*SomeServiceImpl.java - 目标类*\n```\npublic class SomeServiceImpl implements ISomeService {\n\n	@Override\n	public void doFirst() {\n		System.out.println(\"执行doFirst()方法\");\n	}\n\n	@Override\n	public void doSecond() {\n		System.out.println(\"执行doSecond()方法\");\n	}\n}\n```\n*MyMethodBeforeAdvice.java - 前置通知*\n```\npublic class MyMethodBeforeAdvice implements MethodBeforeAdvice {\n\n	// 当前方法在目标方法执行之前执行，method:目标方法，args:目标方法的参数列表，target:目标对象\n	@Override\n	public void before(Method method, Object[] args, Object target) throws Throwable {\n		// 对于目标方法的增强代码就应该写在这里\n		System.out.println(\"执行前置通知方法\");\n	}\n}\n```\n*applicationContext.mxl*\n```\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<beans xmlns=\"http://www.springframework.org/schema/beans\"\n    xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n    xsi:schemaLocation=\"\n        http://www.springframework.org/schema/beans \n        http://www.springframework.org/schema/beans/spring-beans.xsd\">\n\n    <!-- 注册目标对象 -->\n    <bean id=\"someService\" class=\"top.qingrang.aop01.SomeServiceImpl\"/>\n\n    <!-- 注册切面：通知 -->\n    <bean id=\"myAdvice\" class=\"top.qingrang.aop01.MyMethodBeforeAdvice\"/>\n\n    <!-- 生成代理对象 -->\n    <bean id=\"serviceProxy\" class=\"org.springframework.aop.framework.ProxyFactoryBean\">\n    	<!-- 指定目标对象，随便用哪个 -->\n    	<!-- <property name=\"targetName\" value=\"someService\"/> -->\n    	<property name=\"target\" ref=\"someService\"/>\n		\n    	<!-- 指定切面 -->\n    	<property name=\"interceptorNames\" value=\"myAdvice\"/>\n    </bean>\n</beans>\n```\n\n### 后置通知 AfterReturningAdvice\n定义后置通知，需要实现接口 AfterReturningAdvice。该接口中有一个方法 afterReturning()，会在目标方法执行之后执行。后置通知的特点：\n- 在目标方法执行之后执行。\n- 不改变目标方法的执行流程，后置通知代码不能阻止目标方法执行。\n- 不改变目标方法执行的结果。\n\n*SomeServiceImpl.java - 目标类*\n```\npublic class SomeServiceImpl implements ISomeService {\n\n	@Override\n	public void doFirst() {\n		System.out.println(\"执行doFirst()方法\");\n	}\n\n	@Override\n	public String doSecond() {\n		System.out.println(\"执行doSecond()方法\");\n		return \"abcde\";\n	}\n}\n```\n*MyAfterReturningAdvice.java - 后置通知*\n```\n// 后置通知：可以获取到目标方法的返回结果，但无法改变目标方法的结果\npublic class MyAfterReturningAdvice implements AfterReturningAdvice {\n	// 在目标方法执行之后执行，returnValue：目标方法的返回值\n	@Override\n	public void afterReturning(Object returnValue, Method method, Object[] args, Object target) throws Throwable {\n		System.out.println(\"执行后置通知方法  returnValue = \" + returnValue);\n		if (returnValue != null) {\n			returnValue = ((String) returnValue).toUpperCase();\n			System.out.println(\"修改过的结果  returnValue = \" + returnValue);\n		}\n	}\n}\n```\n### 环绕通知 MethodInterceptor\n定义环绕通知(在目标方法执行之前之后都会执行)，需要实现 MethodInterceptor 接口。环绕通知，也叫方法拦截器，可以在目标方法调用之前及之后做处理，可以改变目标方法的返回值，也可以改变程序执行流程。\n\n*MyMethodInterceptor.java*\n```\n// 环绕通知：可以修改目标方法的返回结果\npublic class MyMethodInterceptor implements MethodInterceptor {\n	@Override\n	public Object invoke(MethodInvocation invocation) throws Throwable {\n		System.out.println(\"执行环绕通知：目标方法执行之前\");\n		// 执行目标方法\n		Object result = invocation.proceed();\n		System.out.println(\"执行环绕通知：目标方法执行之后\");\n		if(result != null) {\n			result = ((String)result).toUpperCase();\n		}\n		return result;\n	}\n}\n```\n\n\n\n\n\n### 异常通知 ThrowsAdvice\n定义异常通知，需要实现 ThrowsAdvice 接口。该接口的主要作用是，在目标方法抛出异常后，根据异常的不同做出相应的处理。当该接口处理完异常后，会简单地将异常再次抛出给目标方法。\n\n不过，这个接口较为特殊，从形式上看，该接口中没有必须要实现的方法。但，这个接口却确实有必须要实现的方法 `afterThrowing()`。这个方法重载了四种形式。由于使用时，一般只使用其中一种，若要都定义到接口中，则势必要使程序员在使用时必须要实现这四个方法。这是很麻烦的。所以就将该接口定义为了标识接口（没有方法的接口）。这四个方法在打开 `ThrowsAdvice` 源码后，上侧的注释部分可以看到：\n![afterThrowing()](https://daily-1252869435.cos.ap-chengdu.myqcloud.com/2018-11-19-10-59-26.png)\n不过，在这四种形式中，常用的形式如下： `public void afterThrowing(自定义的异常类 e)` 这里的参数 e 为，与具体业务相关的用户自定义的异常类对象。容器会根据异常类型的不同，自动选择不同的该方法执行。这些方法的执行是在目标方法执行结束后执行的。其它参数则与前面两个通知中方法的参数意义相同。\n#### 普通异常\n*SomeServiceImpl.java - 目标类*\n```\n@Override\npublic void doFirst() {\n	System.out.println(\"执行doFirst()方法\" + 3 / 0);\n}\n```\n*MyThrowsAdvice.java - 异常通知*\n```\npublic class MyThrowsAdvice implements ThrowsAdvice {\n	// 当目标方法抛出与指定类型的异常具有 is-a 关系的异常时，执行当前方法\n	public void afterThrowing(Exception ex) {\n		System.out.println(\"执行异常通知方法\");\n	}\n}\n```\n*输出信息*\n```\n执行异常通知方法\njava.lang.ArithmeticException: / by zero\n	...\n```\n#### 自定义异常\n异常分两种：\n- 运行时异常，不进行处理，也可以通过编译。\n若一个类继承自 RunTimeException，则该异常就是运行时异常\n- 编译时异常(受查异常,Checked Exception)，不进行处理，将无法通过编译。\n若一个类继承自 Exception，则该异常就是受查异常\n\n*UserException.java*\n```\npublic class UserException extends Exception {\n	public UserException() {\n		super();\n	}\n\n	public UserException(String message) {\n		super(message);\n	}\n}\n```\n*UsernameException.java*\n```\npublic class UsernameException extends UserException {\n	public UsernameException() {\n		super();\n	}\n\n	public UsernameException(String message) {\n		super(message);\n	}\n}\n```\n*PasswordException.java*\n```\npublic class PasswordException extends UserException {\n	public PasswordException() {\n		super();\n	}\n\n	public PasswordException(String message) {\n		super(message);\n	}\n}\n```\n*MyThrowsAdvice.java - 异常通知*\n```\npublic class MyThrowsAdvice implements ThrowsAdvice {\n	// 当目标方法抛出 UsernameException 异常时，执行当前方法\n	public void afterThrowing(UsernameException ex) {\n		System.out.println(\"发生用户名异常 ex = \" + ex.getMessage());\n	}\n	\n	// 当目标方法抛出 PasswordException 异常时，执行当前方法\n	public void afterThrowing(PasswordException ex) {\n		System.out.println(\"发生密码异常 ex = \" + ex.getMessage());\n	}\n	\n	// 当目标方法抛出其它异常时，执行当前方法\n	public void afterThrowing(Exception ex) {\n		System.out.println(\"发生异常 ex = \" + ex.getMessage());\n	}\n}\n```\n*MyTest.java*\n```\n@Test\npublic void test01() throws UserException {\n	String resource = \"top/qingrang/aop05/applicationContext.xml\";\n	ApplicationContext ac = new ClassPathXmlApplicationContext(resource);\n	ISomeService service = (ISomeService) ac.getBean(\"serviceProxy\");\n	service.login(\"beijing\", \"111\");\n}\n```\n\n\n',`groups`='Default',`p_id`=1  WHERE  `id` = 1 [ RunTime:0.000944s ]
---------------------------------------------------------------
[ 2018-11-19T11:14:09+08:00 ] 74.120.168.12 74.120.168.12 POST /daily/admin/note/savenote.html
[ info ] qingrang.top/daily/admin/note/savenote.html [运行时间：0.059391s][吞吐率：16.84req/s] [内存消耗：2,128.57kb] [文件加载：56]
[ info ] [ LANG ] /var/www/html/daily/thinkphp/lang/zh-cn.php
[ info ] [ ROUTE ] array (
  'type' => 'module',
  'module' => 
  array (
    0 => 'admin',
    1 => 'note',
    2 => 'savenote',
  ),
)
[ info ] [ HEADER ] array (
  'host' => 'qingrang.top',
  'content-length' => '29096',
  'accept' => 'text/plain, */*; q=0.01',
  'origin' => 'http://qingrang.top',
  'x-requested-with' => 'XMLHttpRequest',
  'user-agent' => 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/70.0.3538.102 Safari/537.36',
  'content-type' => 'application/x-www-form-urlencoded; charset=UTF-8',
  'referer' => 'http://qingrang.top/daily/admin/note/editnote/id/250.html',
  'accept-encoding' => 'gzip, deflate',
  'accept-language' => 'zh-CN,zh;q=0.9,la;q=0.8,en;q=0.7,lb;q=0.6',
  'cookie' => 'Hm_lvt_1769181352e9adc950166aada465644e=1541082864,1541122974,1541171416,1542098176; PHPSESSID=cvrea98moc9nvt4dg4igb1ep86',
  'connection' => 'close',
)
[ info ] [ PARAM ] array (
  'ogroup' => 'Default',
  'context' => '# Spring(二) - AOP（面向切面）
[TOC]

Spring 是一个基于 **IOC** 和 **AOP** 的结构 J2EE 系统的框架。
## AOP 简介
### 概念
AOP（Aspect Orient Programming），面向切面编程，是面向对象编程 OOP 的一种补充。面向对象编程是从静态角度考虑程序的结构，而面向切面编程是从动态角度考虑程序运行过程。

AOP 底层，就是采用动态代理模式实现的。采用了两种代理： JDK 的动态代理，与 CGLIB 的动态代理。

面向切面编程，就是将交叉业务逻辑封装成切面，利用 AOP 容器的功能将切面织入到主业务逻辑中。所谓交叉业务逻辑是指，通用的、与主业务逻辑无关的代码，如安全检查、事务、日志等。

若不使用 AOP，则会出现代码纠缠，即交叉业务逻辑与主业务逻辑混合在一起。这样，会使主业务逻辑变的混杂不清。

例如，转账，在真正转账业务逻辑前后，需要权限控制、日志记录、加载事务、结束事务等交叉业务逻辑，而这些业务逻辑与主业务逻辑间并无直接关系。但，它们的代码量所占比重能达到总代码量的一半甚至还多。它们的存在，不仅产生了大量的“冗余”代码，还大大干扰了主业务逻辑---转账。

### 利用 JDK 动态代理实现 AOP 编程
*ISomeService.java - 主业务接口*
```
public interface ISomeService {
	// 目标方法
	void doFirst();
	// 目标方法
	void doSecond();
}
```
*SomeServiceImpl.java - 目标类*
```
public class SomeServiceImpl implements ISomeService {

	@Override
	public void doFirst() {
		System.out.println("执行doFirst()方法");
	}

	@Override
	public void doSecond() {
		System.out.println("执行doSecond()方法");
	}
}
```
*SystemService.java - 交叉业务逻辑*
```
public class SystemService {
	public static void doLog() {
		System.out.println("执行日志代码");
	}

	public static void doTx() {
		System.out.println("执行事务代码");
	}
}
```
*MyTest.java*
```
@Test
public void MyTest(){
	final ISomeService target = new SomeServiceImpl();
	// 自动生成一个动态代理对象
	ISomeService service = (ISomeService) Proxy.newProxyInstance(
			target.getClass().getClassLoader(), // 目标类的类加载器
			target.getClass().getInterfaces(),  // 目标类实现的接口数组
			new InvocationHandler() { //业务增强逻辑
				// 具体加强的代码逻辑
				@Override
				public Object invoke(Object proxy, Method method, Object[] args) throws Throwable {
					SystemService.doTx(); // 织入
					Object result = method.invoke(target, args); // 执行目标方法
					SystemService.doLog(); // 织入
					return result;
				}
			});
	service.doFirst();
	System.out.println("==============");
	service.doSecond();
}
```
*输出信息*
```
执行事务代码
执行doFirst()方法
执行日志代码
==============
执行事务代码
执行doSecond()方法
执行日志代码
```
## AOP 编程术语
### 切面（Aspect）
切面泛指交叉业务逻辑。上例中的事务处理、日志处理就可以理解为切面。常用的切面有通知与顾问。实际就是对主业务逻辑的一种增强。
### 织入（Weaving）
织入是指将切面代码插入到目标对象的过程。上例中 MyInvocationHandler 类中的 invoke() 方法完成的工作，就可以称为织入。
### 连接点（JoinPoint）
连接点指可以被切面织入的方法。通常业务接口中的方法均为连接点。
### 切入点（Pointcut）
切入点指切面具体织入的方法。在 StudentServiceImpl 类中，若 doSome()将被增强，而doOther()不被增强，则 doSome()为切入点，而 doOther()仅为连接点。被标记为 final 的方法是不能作为连接点与切入点的。因为最终的是不能被修改，不能被增强的。
### 目标对象（Target）
目标对象指将要被增强的对象。即包含主业务逻辑的类的对象。上例中的 StudentServiceImpl 的对象若被增强，则该类称为目标类，该类对象称为目标对象。当然，不被增强，也就无所谓目标不目标了。
### 通知（Advice）
通知是切面的一种实现，可以完成简单织入功能（织入功能就是在这里完成的）。换个角度来说，通知定义了增强码切入到目标代码的时间点，是目标方法执行之前执行，还是之后执行等。通知类型不同，切入时间不同。

**切入点定义切入的位置，通知定义切入的时间。**
### 顾问（Advisor）
顾问是切面的另一种实现，能够将通知以更为复杂的方式织入到目标对象中，是将通知包装为更复杂切面的装配器。






## 通知 Advice
通知（Advice），切面的一种实现，可以完成简单织入功能（织入功能就是在这里完成的）。

常用通知有：前置通知、后置通知、环绕通知、异常处理通知。
### 前置通知 MethodBeforeAdvice
定义前置通知，需要实现 MethodBeforeAdvice 接口。该接口中有一个方法 before()，会在目标方法执行之前执行。 前置通知的特点：
- 在目标方法执行之前先执行。
- 不改变目标方法的执行流程，前置通知代码不能阻止目标方法执行。
- 不改变目标方法执行的结果。

*ISomeService.java - 主业务接口*
```
public interface ISomeService {
	// 目标方法
	void doFirst();
	// 目标方法
	void doSecond();
}
```
*SomeServiceImpl.java - 目标类*
```
public class SomeServiceImpl implements ISomeService {

	@Override
	public void doFirst() {
		System.out.println("执行doFirst()方法");
	}

	@Override
	public void doSecond() {
		System.out.println("执行doSecond()方法");
	}
}
```
*MyMethodBeforeAdvice.java - 前置通知*
```
public class MyMethodBeforeAdvice implements MethodBeforeAdvice {

	// 当前方法在目标方法执行之前执行，method:目标方法，args:目标方法的参数列表，target:目标对象
	@Override
	public void before(Method method, Object[] args, Object target) throws Throwable {
		// 对于目标方法的增强代码就应该写在这里
		System.out.println("执行前置通知方法");
	}
}
```
*applicationContext.mxl*
```
<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xsi:schemaLocation="
        http://www.springframework.org/schema/beans 
        http://www.springframework.org/schema/beans/spring-beans.xsd">

    <!-- 注册目标对象 -->
    <bean id="someService" class="top.qingrang.aop01.SomeServiceImpl"/>

    <!-- 注册切面：通知 -->
    <bean id="myAdvice" class="top.qingrang.aop01.MyMethodBeforeAdvice"/>

    <!-- 生成代理对象 -->
    <bean id="serviceProxy" class="org.springframework.aop.framework.ProxyFactoryBean">
    	<!-- 指定目标对象，随便用哪个 -->
    	<!-- <property name="targetName" value="someService"/> -->
    	<property name="target" ref="someService"/>
		
    	<!-- 指定切面 -->
    	<property name="interceptorNames" value="myAdvice"/>
    </bean>
</beans>
```

### 后置通知 AfterReturningAdvice
定义后置通知，需要实现接口 AfterReturningAdvice。该接口中有一个方法 afterReturning()，会在目标方法执行之后执行。后置通知的特点：
- 在目标方法执行之后执行。
- 不改变目标方法的执行流程，后置通知代码不能阻止目标方法执行。
- 不改变目标方法执行的结果。

*SomeServiceImpl.java - 目标类*
```
public class SomeServiceImpl implements ISomeService {

	@Override
	public void doFirst() {
		System.out.println("执行doFirst()方法");
	}

	@Override
	public String doSecond() {
		System.out.println("执行doSecond()方法");
		return "abcde";
	}
}
```
*MyAfterReturningAdvice.java - 后置通知*
```
// 后置通知：可以获取到目标方法的返回结果，但无法改变目标方法的结果
public class MyAfterReturningAdvice implements AfterReturningAdvice {
	// 在目标方法执行之后执行，returnValue：目标方法的返回值
	@Override
	public void afterReturning(Object returnValue, Method method, Object[] args, Object target) throws Throwable {
		System.out.println("执行后置通知方法  returnValue = " + returnValue);
		if (returnValue != null) {
			returnValue = ((String) returnValue).toUpperCase();
			System.out.println("修改过的结果  returnValue = " + returnValue);
		}
	}
}
```
### 环绕通知 MethodInterceptor
定义环绕通知(在目标方法执行之前之后都会执行)，需要实现 MethodInterceptor 接口。环绕通知，也叫方法拦截器，可以在目标方法调用之前及之后做处理，可以改变目标方法的返回值，也可以改变程序执行流程。

*MyMethodInterceptor.java*
```
// 环绕通知：可以修改目标方法的返回结果
public class MyMethodInterceptor implements MethodInterceptor {
	@Override
	public Object invoke(MethodInvocation invocation) throws Throwable {
		System.out.println("执行环绕通知：目标方法执行之前");
		// 执行目标方法
		Object result = invocation.proceed();
		System.out.println("执行环绕通知：目标方法执行之后");
		if(result != null) {
			result = ((String)result).toUpperCase();
		}
		return result;
	}
}
```





### 异常通知 ThrowsAdvice
定义异常通知，需要实现 ThrowsAdvice 接口。该接口的主要作用是，在目标方法抛出异常后，根据异常的不同做出相应的处理。当该接口处理完异常后，会简单地将异常再次抛出给目标方法。

不过，这个接口较为特殊，从形式上看，该接口中没有必须要实现的方法。但，这个接口却确实有必须要实现的方法 `afterThrowing()`。这个方法重载了四种形式。由于使用时，一般只使用其中一种，若要都定义到接口中，则势必要使程序员在使用时必须要实现这四个方法。这是很麻烦的。所以就将该接口定义为了标识接口（没有方法的接口）。这四个方法在打开 `ThrowsAdvice` 源码后，上侧的注释部分可以看到：
![afterThrowing()](https://daily-1252869435.cos.ap-chengdu.myqcloud.com/2018-11-19-10-59-26.png)
不过，在这四种形式中，常用的形式如下： `public void afterThrowing(自定义的异常类 e)` 这里的参数 e 为，与具体业务相关的用户自定义的异常类对象。容器会根据异常类型的不同，自动选择不同的该方法执行。这些方法的执行是在目标方法执行结束后执行的。其它参数则与前面两个通知中方法的参数意义相同。
#### 普通异常
*SomeServiceImpl.java - 目标类*
```
@Override
public void doFirst() {
	System.out.println("执行doFirst()方法" + 3 / 0);
}
```
*MyThrowsAdvice.java - 异常通知*
```
public class MyThrowsAdvice implements ThrowsAdvice {
	// 当目标方法抛出与指定类型的异常具有 is-a 关系的异常时，执行当前方法
	public void afterThrowing(Exception ex) {
		System.out.println("执行异常通知方法");
	}
}
```
*输出信息*
```
执行异常通知方法
java.lang.ArithmeticException: / by zero
	...
```
#### 自定义异常
异常分两种：
- 运行时异常，不进行处理，也可以通过编译。
若一个类继承自 RunTimeException，则该异常就是运行时异常
- 编译时异常(受查异常,Checked Exception)，不进行处理，将无法通过编译。
若一个类继承自 Exception，则该异常就是受查异常

*UserException.java*
```
public class UserException extends Exception {
	public UserException() {
		super();
	}

	public UserException(String message) {
		super(message);
	}
}
```
*UsernameException.java*
```
public class UsernameException extends UserException {
	public UsernameException() {
		super();
	}

	public UsernameException(String message) {
		super(message);
	}
}
```
*PasswordException.java*
```
public class PasswordException extends UserException {
	public PasswordException() {
		super();
	}

	public PasswordException(String message) {
		super(message);
	}
}
```
*MyThrowsAdvice.java - 异常通知*
```
public class MyThrowsAdvice implements ThrowsAdvice {
	// 当目标方法抛出 UsernameException 异常时，执行当前方法
	public void afterThrowing(UsernameException ex) {
		System.out.println("发生用户名异常 ex = " + ex.getMessage());
	}
	
	// 当目标方法抛出 PasswordException 异常时，执行当前方法
	public void afterThrowing(PasswordException ex) {
		System.out.println("发生密码异常 ex = " + ex.getMessage());
	}
	
	// 当目标方法抛出其它异常时，执行当前方法
	public void afterThrowing(Exception ex) {
		System.out.println("发生异常 ex = " + ex.getMessage());
	}
}
```
*MyTest.java*
```
@Test
public void test01() throws UserException {
	String resource = "top/qingrang/aop05/applicationContext.xml";
	ApplicationContext ac = new ClassPathXmlApplicationContext(resource);
	ISomeService service = (ISomeService) ac.getBean("serviceProxy");
	service.login("beijing", "222");
}
```




',
)
[ info ] [ SESSION ] INIT array (
  'id' => '',
  'var_session_id' => '',
  'prefix' => 'think',
  'type' => '',
  'auto_start' => true,
)
[ info ] [ RUN ] app\admin\controller\Note->saveNote[ /var/www/html/daily/application/admin/controller/Note.php ]
[ info ] [ DB ] INIT mysql
[ info ] [ CACHE ] INIT File
[ info ] [ LOG ] INIT File
[ sql ] [ DB ] CONNECT:[ UseTime:0.000615s ] mysql:host=74.120.168.12;dbname=diary;charset=utf8
[ sql ] [ SQL ] SHOW COLUMNS FROM `note` [ RunTime:0.001416s ]
[ sql ] [ SQL ] UPDATE `note`  SET `title`='Spring(二) - AOP（面向切面）',`content`='# Spring(二) - AOP（面向切面）\n[TOC]\n\nSpring 是一个基于 **IOC** 和 **AOP** 的结构 J2EE 系统的框架。\n## AOP 简介\n### 概念\nAOP（Aspect Orient Programming），面向切面编程，是面向对象编程 OOP 的一种补充。面向对象编程是从静态角度考虑程序的结构，而面向切面编程是从动态角度考虑程序运行过程。\n\nAOP 底层，就是采用动态代理模式实现的。采用了两种代理： JDK 的动态代理，与 CGLIB 的动态代理。\n\n面向切面编程，就是将交叉业务逻辑封装成切面，利用 AOP 容器的功能将切面织入到主业务逻辑中。所谓交叉业务逻辑是指，通用的、与主业务逻辑无关的代码，如安全检查、事务、日志等。\n\n若不使用 AOP，则会出现代码纠缠，即交叉业务逻辑与主业务逻辑混合在一起。这样，会使主业务逻辑变的混杂不清。\n\n例如，转账，在真正转账业务逻辑前后，需要权限控制、日志记录、加载事务、结束事务等交叉业务逻辑，而这些业务逻辑与主业务逻辑间并无直接关系。但，它们的代码量所占比重能达到总代码量的一半甚至还多。它们的存在，不仅产生了大量的“冗余”代码，还大大干扰了主业务逻辑---转账。\n\n### 利用 JDK 动态代理实现 AOP 编程\n*ISomeService.java - 主业务接口*\n```\npublic interface ISomeService {\n	// 目标方法\n	void doFirst();\n	// 目标方法\n	void doSecond();\n}\n```\n*SomeServiceImpl.java - 目标类*\n```\npublic class SomeServiceImpl implements ISomeService {\n\n	@Override\n	public void doFirst() {\n		System.out.println(\"执行doFirst()方法\");\n	}\n\n	@Override\n	public void doSecond() {\n		System.out.println(\"执行doSecond()方法\");\n	}\n}\n```\n*SystemService.java - 交叉业务逻辑*\n```\npublic class SystemService {\n	public static void doLog() {\n		System.out.println(\"执行日志代码\");\n	}\n\n	public static void doTx() {\n		System.out.println(\"执行事务代码\");\n	}\n}\n```\n*MyTest.java*\n```\n@Test\npublic void MyTest(){\n	final ISomeService target = new SomeServiceImpl();\n	// 自动生成一个动态代理对象\n	ISomeService service = (ISomeService) Proxy.newProxyInstance(\n			target.getClass().getClassLoader(), // 目标类的类加载器\n			target.getClass().getInterfaces(),  // 目标类实现的接口数组\n			new InvocationHandler() { //业务增强逻辑\n				// 具体加强的代码逻辑\n				@Override\n				public Object invoke(Object proxy, Method method, Object[] args) throws Throwable {\n					SystemService.doTx(); // 织入\n					Object result = method.invoke(target, args); // 执行目标方法\n					SystemService.doLog(); // 织入\n					return result;\n				}\n			});\n	service.doFirst();\n	System.out.println(\"==============\");\n	service.doSecond();\n}\n```\n*输出信息*\n```\n执行事务代码\n执行doFirst()方法\n执行日志代码\n==============\n执行事务代码\n执行doSecond()方法\n执行日志代码\n```\n## AOP 编程术语\n### 切面（Aspect）\n切面泛指交叉业务逻辑。上例中的事务处理、日志处理就可以理解为切面。常用的切面有通知与顾问。实际就是对主业务逻辑的一种增强。\n### 织入（Weaving）\n织入是指将切面代码插入到目标对象的过程。上例中 MyInvocationHandler 类中的 invoke() 方法完成的工作，就可以称为织入。\n### 连接点（JoinPoint）\n连接点指可以被切面织入的方法。通常业务接口中的方法均为连接点。\n### 切入点（Pointcut）\n切入点指切面具体织入的方法。在 StudentServiceImpl 类中，若 doSome()将被增强，而doOther()不被增强，则 doSome()为切入点，而 doOther()仅为连接点。被标记为 final 的方法是不能作为连接点与切入点的。因为最终的是不能被修改，不能被增强的。\n### 目标对象（Target）\n目标对象指将要被增强的对象。即包含主业务逻辑的类的对象。上例中的 StudentServiceImpl 的对象若被增强，则该类称为目标类，该类对象称为目标对象。当然，不被增强，也就无所谓目标不目标了。\n### 通知（Advice）\n通知是切面的一种实现，可以完成简单织入功能（织入功能就是在这里完成的）。换个角度来说，通知定义了增强码切入到目标代码的时间点，是目标方法执行之前执行，还是之后执行等。通知类型不同，切入时间不同。\n\n**切入点定义切入的位置，通知定义切入的时间。**\n### 顾问（Advisor）\n顾问是切面的另一种实现，能够将通知以更为复杂的方式织入到目标对象中，是将通知包装为更复杂切面的装配器。\n\n\n\n\n\n\n## 通知 Advice\n通知（Advice），切面的一种实现，可以完成简单织入功能（织入功能就是在这里完成的）。\n\n常用通知有：前置通知、后置通知、环绕通知、异常处理通知。\n### 前置通知 MethodBeforeAdvice\n定义前置通知，需要实现 MethodBeforeAdvice 接口。该接口中有一个方法 before()，会在目标方法执行之前执行。 前置通知的特点：\n- 在目标方法执行之前先执行。\n- 不改变目标方法的执行流程，前置通知代码不能阻止目标方法执行。\n- 不改变目标方法执行的结果。\n\n*ISomeService.java - 主业务接口*\n```\npublic interface ISomeService {\n	// 目标方法\n	void doFirst();\n	// 目标方法\n	void doSecond();\n}\n```\n*SomeServiceImpl.java - 目标类*\n```\npublic class SomeServiceImpl implements ISomeService {\n\n	@Override\n	public void doFirst() {\n		System.out.println(\"执行doFirst()方法\");\n	}\n\n	@Override\n	public void doSecond() {\n		System.out.println(\"执行doSecond()方法\");\n	}\n}\n```\n*MyMethodBeforeAdvice.java - 前置通知*\n```\npublic class MyMethodBeforeAdvice implements MethodBeforeAdvice {\n\n	// 当前方法在目标方法执行之前执行，method:目标方法，args:目标方法的参数列表，target:目标对象\n	@Override\n	public void before(Method method, Object[] args, Object target) throws Throwable {\n		// 对于目标方法的增强代码就应该写在这里\n		System.out.println(\"执行前置通知方法\");\n	}\n}\n```\n*applicationContext.mxl*\n```\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<beans xmlns=\"http://www.springframework.org/schema/beans\"\n    xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n    xsi:schemaLocation=\"\n        http://www.springframework.org/schema/beans \n        http://www.springframework.org/schema/beans/spring-beans.xsd\">\n\n    <!-- 注册目标对象 -->\n    <bean id=\"someService\" class=\"top.qingrang.aop01.SomeServiceImpl\"/>\n\n    <!-- 注册切面：通知 -->\n    <bean id=\"myAdvice\" class=\"top.qingrang.aop01.MyMethodBeforeAdvice\"/>\n\n    <!-- 生成代理对象 -->\n    <bean id=\"serviceProxy\" class=\"org.springframework.aop.framework.ProxyFactoryBean\">\n    	<!-- 指定目标对象，随便用哪个 -->\n    	<!-- <property name=\"targetName\" value=\"someService\"/> -->\n    	<property name=\"target\" ref=\"someService\"/>\n		\n    	<!-- 指定切面 -->\n    	<property name=\"interceptorNames\" value=\"myAdvice\"/>\n    </bean>\n</beans>\n```\n\n### 后置通知 AfterReturningAdvice\n定义后置通知，需要实现接口 AfterReturningAdvice。该接口中有一个方法 afterReturning()，会在目标方法执行之后执行。后置通知的特点：\n- 在目标方法执行之后执行。\n- 不改变目标方法的执行流程，后置通知代码不能阻止目标方法执行。\n- 不改变目标方法执行的结果。\n\n*SomeServiceImpl.java - 目标类*\n```\npublic class SomeServiceImpl implements ISomeService {\n\n	@Override\n	public void doFirst() {\n		System.out.println(\"执行doFirst()方法\");\n	}\n\n	@Override\n	public String doSecond() {\n		System.out.println(\"执行doSecond()方法\");\n		return \"abcde\";\n	}\n}\n```\n*MyAfterReturningAdvice.java - 后置通知*\n```\n// 后置通知：可以获取到目标方法的返回结果，但无法改变目标方法的结果\npublic class MyAfterReturningAdvice implements AfterReturningAdvice {\n	// 在目标方法执行之后执行，returnValue：目标方法的返回值\n	@Override\n	public void afterReturning(Object returnValue, Method method, Object[] args, Object target) throws Throwable {\n		System.out.println(\"执行后置通知方法  returnValue = \" + returnValue);\n		if (returnValue != null) {\n			returnValue = ((String) returnValue).toUpperCase();\n			System.out.println(\"修改过的结果  returnValue = \" + returnValue);\n		}\n	}\n}\n```\n### 环绕通知 MethodInterceptor\n定义环绕通知(在目标方法执行之前之后都会执行)，需要实现 MethodInterceptor 接口。环绕通知，也叫方法拦截器，可以在目标方法调用之前及之后做处理，可以改变目标方法的返回值，也可以改变程序执行流程。\n\n*MyMethodInterceptor.java*\n```\n// 环绕通知：可以修改目标方法的返回结果\npublic class MyMethodInterceptor implements MethodInterceptor {\n	@Override\n	public Object invoke(MethodInvocation invocation) throws Throwable {\n		System.out.println(\"执行环绕通知：目标方法执行之前\");\n		// 执行目标方法\n		Object result = invocation.proceed();\n		System.out.println(\"执行环绕通知：目标方法执行之后\");\n		if(result != null) {\n			result = ((String)result).toUpperCase();\n		}\n		return result;\n	}\n}\n```\n\n\n\n\n\n### 异常通知 ThrowsAdvice\n定义异常通知，需要实现 ThrowsAdvice 接口。该接口的主要作用是，在目标方法抛出异常后，根据异常的不同做出相应的处理。当该接口处理完异常后，会简单地将异常再次抛出给目标方法。\n\n不过，这个接口较为特殊，从形式上看，该接口中没有必须要实现的方法。但，这个接口却确实有必须要实现的方法 `afterThrowing()`。这个方法重载了四种形式。由于使用时，一般只使用其中一种，若要都定义到接口中，则势必要使程序员在使用时必须要实现这四个方法。这是很麻烦的。所以就将该接口定义为了标识接口（没有方法的接口）。这四个方法在打开 `ThrowsAdvice` 源码后，上侧的注释部分可以看到：\n![afterThrowing()](https://daily-1252869435.cos.ap-chengdu.myqcloud.com/2018-11-19-10-59-26.png)\n不过，在这四种形式中，常用的形式如下： `public void afterThrowing(自定义的异常类 e)` 这里的参数 e 为，与具体业务相关的用户自定义的异常类对象。容器会根据异常类型的不同，自动选择不同的该方法执行。这些方法的执行是在目标方法执行结束后执行的。其它参数则与前面两个通知中方法的参数意义相同。\n#### 普通异常\n*SomeServiceImpl.java - 目标类*\n```\n@Override\npublic void doFirst() {\n	System.out.println(\"执行doFirst()方法\" + 3 / 0);\n}\n```\n*MyThrowsAdvice.java - 异常通知*\n```\npublic class MyThrowsAdvice implements ThrowsAdvice {\n	// 当目标方法抛出与指定类型的异常具有 is-a 关系的异常时，执行当前方法\n	public void afterThrowing(Exception ex) {\n		System.out.println(\"执行异常通知方法\");\n	}\n}\n```\n*输出信息*\n```\n执行异常通知方法\njava.lang.ArithmeticException: / by zero\n	...\n```\n#### 自定义异常\n异常分两种：\n- 运行时异常，不进行处理，也可以通过编译。\n若一个类继承自 RunTimeException，则该异常就是运行时异常\n- 编译时异常(受查异常,Checked Exception)，不进行处理，将无法通过编译。\n若一个类继承自 Exception，则该异常就是受查异常\n\n*UserException.java*\n```\npublic class UserException extends Exception {\n	public UserException() {\n		super();\n	}\n\n	public UserException(String message) {\n		super(message);\n	}\n}\n```\n*UsernameException.java*\n```\npublic class UsernameException extends UserException {\n	public UsernameException() {\n		super();\n	}\n\n	public UsernameException(String message) {\n		super(message);\n	}\n}\n```\n*PasswordException.java*\n```\npublic class PasswordException extends UserException {\n	public PasswordException() {\n		super();\n	}\n\n	public PasswordException(String message) {\n		super(message);\n	}\n}\n```\n*MyThrowsAdvice.java - 异常通知*\n```\npublic class MyThrowsAdvice implements ThrowsAdvice {\n	// 当目标方法抛出 UsernameException 异常时，执行当前方法\n	public void afterThrowing(UsernameException ex) {\n		System.out.println(\"发生用户名异常 ex = \" + ex.getMessage());\n	}\n	\n	// 当目标方法抛出 PasswordException 异常时，执行当前方法\n	public void afterThrowing(PasswordException ex) {\n		System.out.println(\"发生密码异常 ex = \" + ex.getMessage());\n	}\n	\n	// 当目标方法抛出其它异常时，执行当前方法\n	public void afterThrowing(Exception ex) {\n		System.out.println(\"发生异常 ex = \" + ex.getMessage());\n	}\n}\n```\n*MyTest.java*\n```\n@Test\npublic void test01() throws UserException {\n	String resource = \"top/qingrang/aop05/applicationContext.xml\";\n	ApplicationContext ac = new ClassPathXmlApplicationContext(resource);\n	ISomeService service = (ISomeService) ac.getBean(\"serviceProxy\");\n	service.login(\"beijing\", \"222\");\n}\n```\n\n\n\n\n',`groups`='Default',`p_id`=1  WHERE  `id` = 1 [ RunTime:0.000794s ]
---------------------------------------------------------------
[ 2018-11-19T11:16:03+08:00 ] 74.120.168.12 74.120.168.12 POST /daily/admin/note/savenote.html
[ info ] qingrang.top/daily/admin/note/savenote.html [运行时间：0.059946s][吞吐率：16.68req/s] [内存消耗：2,128.92kb] [文件加载：56]
[ info ] [ LANG ] /var/www/html/daily/thinkphp/lang/zh-cn.php
[ info ] [ ROUTE ] array (
  'type' => 'module',
  'module' => 
  array (
    0 => 'admin',
    1 => 'note',
    2 => 'savenote',
  ),
)
[ info ] [ HEADER ] array (
  'host' => 'qingrang.top',
  'content-length' => '29187',
  'accept' => 'text/plain, */*; q=0.01',
  'origin' => 'http://qingrang.top',
  'x-requested-with' => 'XMLHttpRequest',
  'user-agent' => 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/70.0.3538.102 Safari/537.36',
  'content-type' => 'application/x-www-form-urlencoded; charset=UTF-8',
  'referer' => 'http://qingrang.top/daily/admin/note/editnote/id/250.html',
  'accept-encoding' => 'gzip, deflate',
  'accept-language' => 'zh-CN,zh;q=0.9,la;q=0.8,en;q=0.7,lb;q=0.6',
  'cookie' => 'Hm_lvt_1769181352e9adc950166aada465644e=1541082864,1541122974,1541171416,1542098176; PHPSESSID=cvrea98moc9nvt4dg4igb1ep86',
  'connection' => 'close',
)
[ info ] [ PARAM ] array (
  'ogroup' => 'Default',
  'context' => '# Spring(二) - AOP（面向切面）
[TOC]

Spring 是一个基于 **IOC** 和 **AOP** 的结构 J2EE 系统的框架。
## AOP 简介
### 概念
AOP（Aspect Orient Programming），面向切面编程，是面向对象编程 OOP 的一种补充。面向对象编程是从静态角度考虑程序的结构，而面向切面编程是从动态角度考虑程序运行过程。

AOP 底层，就是采用动态代理模式实现的。采用了两种代理： JDK 的动态代理，与 CGLIB 的动态代理。

面向切面编程，就是将交叉业务逻辑封装成切面，利用 AOP 容器的功能将切面织入到主业务逻辑中。所谓交叉业务逻辑是指，通用的、与主业务逻辑无关的代码，如安全检查、事务、日志等。

若不使用 AOP，则会出现代码纠缠，即交叉业务逻辑与主业务逻辑混合在一起。这样，会使主业务逻辑变的混杂不清。

例如，转账，在真正转账业务逻辑前后，需要权限控制、日志记录、加载事务、结束事务等交叉业务逻辑，而这些业务逻辑与主业务逻辑间并无直接关系。但，它们的代码量所占比重能达到总代码量的一半甚至还多。它们的存在，不仅产生了大量的“冗余”代码，还大大干扰了主业务逻辑---转账。

### 利用 JDK 动态代理实现 AOP 编程
*ISomeService.java - 主业务接口*
```
public interface ISomeService {
	// 目标方法
	void doFirst();
	// 目标方法
	void doSecond();
}
```
*SomeServiceImpl.java - 目标类*
```
public class SomeServiceImpl implements ISomeService {

	@Override
	public void doFirst() {
		System.out.println("执行doFirst()方法");
	}

	@Override
	public void doSecond() {
		System.out.println("执行doSecond()方法");
	}
}
```
*SystemService.java - 交叉业务逻辑*
```
public class SystemService {
	public static void doLog() {
		System.out.println("执行日志代码");
	}

	public static void doTx() {
		System.out.println("执行事务代码");
	}
}
```
*MyTest.java*
```
@Test
public void MyTest(){
	final ISomeService target = new SomeServiceImpl();
	// 自动生成一个动态代理对象
	ISomeService service = (ISomeService) Proxy.newProxyInstance(
			target.getClass().getClassLoader(), // 目标类的类加载器
			target.getClass().getInterfaces(),  // 目标类实现的接口数组
			new InvocationHandler() { //业务增强逻辑
				// 具体加强的代码逻辑
				@Override
				public Object invoke(Object proxy, Method method, Object[] args) throws Throwable {
					SystemService.doTx(); // 织入
					Object result = method.invoke(target, args); // 执行目标方法
					SystemService.doLog(); // 织入
					return result;
				}
			});
	service.doFirst();
	System.out.println("==============");
	service.doSecond();
}
```
*输出信息*
```
执行事务代码
执行doFirst()方法
执行日志代码
==============
执行事务代码
执行doSecond()方法
执行日志代码
```
## AOP 编程术语
### 切面（Aspect）
切面泛指交叉业务逻辑。上例中的事务处理、日志处理就可以理解为切面。常用的切面有通知与顾问。实际就是对主业务逻辑的一种增强。
### 织入（Weaving）
织入是指将切面代码插入到目标对象的过程。上例中 MyInvocationHandler 类中的 invoke() 方法完成的工作，就可以称为织入。
### 连接点（JoinPoint）
连接点指可以被切面织入的方法。通常业务接口中的方法均为连接点。
### 切入点（Pointcut）
切入点指切面具体织入的方法。在 StudentServiceImpl 类中，若 doSome()将被增强，而doOther()不被增强，则 doSome()为切入点，而 doOther()仅为连接点。被标记为 final 的方法是不能作为连接点与切入点的。因为最终的是不能被修改，不能被增强的。
### 目标对象（Target）
目标对象指将要被增强的对象。即包含主业务逻辑的类的对象。上例中的 StudentServiceImpl 的对象若被增强，则该类称为目标类，该类对象称为目标对象。当然，不被增强，也就无所谓目标不目标了。
### 通知（Advice）
通知是切面的一种实现，可以完成简单织入功能（织入功能就是在这里完成的）。换个角度来说，通知定义了增强码切入到目标代码的时间点，是目标方法执行之前执行，还是之后执行等。通知类型不同，切入时间不同。

**切入点定义切入的位置，通知定义切入的时间。**
### 顾问（Advisor）
顾问是切面的另一种实现，能够将通知以更为复杂的方式织入到目标对象中，是将通知包装为更复杂切面的装配器。






## 通知 Advice
通知（Advice），切面的一种实现，可以完成简单织入功能（织入功能就是在这里完成的）。

常用通知有：前置通知、后置通知、环绕通知、异常处理通知。
### 前置通知 MethodBeforeAdvice
定义前置通知，需要实现 MethodBeforeAdvice 接口。该接口中有一个方法 before()，会在目标方法执行之前执行。 前置通知的特点：
- 在目标方法执行之前先执行。
- 不改变目标方法的执行流程，前置通知代码不能阻止目标方法执行。
- 不改变目标方法执行的结果。

*ISomeService.java - 主业务接口*
```
public interface ISomeService {
	// 目标方法
	void doFirst();
	// 目标方法
	void doSecond();
}
```
*SomeServiceImpl.java - 目标类*
```
public class SomeServiceImpl implements ISomeService {

	@Override
	public void doFirst() {
		System.out.println("执行doFirst()方法");
	}

	@Override
	public void doSecond() {
		System.out.println("执行doSecond()方法");
	}
}
```
*MyMethodBeforeAdvice.java - 前置通知*
```
public class MyMethodBeforeAdvice implements MethodBeforeAdvice {

	// 当前方法在目标方法执行之前执行，method:目标方法，args:目标方法的参数列表，target:目标对象
	@Override
	public void before(Method method, Object[] args, Object target) throws Throwable {
		// 对于目标方法的增强代码就应该写在这里
		System.out.println("执行前置通知方法");
	}
}
```
*applicationContext.mxl*
```
<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xsi:schemaLocation="
        http://www.springframework.org/schema/beans 
        http://www.springframework.org/schema/beans/spring-beans.xsd">

    <!-- 注册目标对象 -->
    <bean id="someService" class="top.qingrang.aop01.SomeServiceImpl"/>

    <!-- 注册切面：通知 -->
    <bean id="myAdvice" class="top.qingrang.aop01.MyMethodBeforeAdvice"/>

    <!-- 生成代理对象 -->
    <bean id="serviceProxy" class="org.springframework.aop.framework.ProxyFactoryBean">
    	<!-- 指定目标对象，随便用哪个 -->
    	<!-- <property name="targetName" value="someService"/> -->
    	<property name="target" ref="someService"/>
		
    	<!-- 指定切面 -->
    	<property name="interceptorNames" value="myAdvice"/>
    </bean>
</beans>
```

### 后置通知 AfterReturningAdvice
定义后置通知，需要实现接口 AfterReturningAdvice。该接口中有一个方法 afterReturning()，会在目标方法执行之后执行。后置通知的特点：
- 在目标方法执行之后执行。
- 不改变目标方法的执行流程，后置通知代码不能阻止目标方法执行。
- 不改变目标方法执行的结果。

*SomeServiceImpl.java - 目标类*
```
public class SomeServiceImpl implements ISomeService {

	@Override
	public void doFirst() {
		System.out.println("执行doFirst()方法");
	}

	@Override
	public String doSecond() {
		System.out.println("执行doSecond()方法");
		return "abcde";
	}
}
```
*MyAfterReturningAdvice.java - 后置通知*
```
// 后置通知：可以获取到目标方法的返回结果，但无法改变目标方法的结果
public class MyAfterReturningAdvice implements AfterReturningAdvice {
	// 在目标方法执行之后执行，returnValue：目标方法的返回值
	@Override
	public void afterReturning(Object returnValue, Method method, Object[] args, Object target) throws Throwable {
		System.out.println("执行后置通知方法  returnValue = " + returnValue);
		if (returnValue != null) {
			returnValue = ((String) returnValue).toUpperCase();
			System.out.println("修改过的结果  returnValue = " + returnValue);
		}
	}
}
```
### 环绕通知 MethodInterceptor
定义环绕通知(在目标方法执行之前之后都会执行)，需要实现 MethodInterceptor 接口。环绕通知，也叫方法拦截器，可以在目标方法调用之前及之后做处理，可以改变目标方法的返回值，也可以改变程序执行流程。

*MyMethodInterceptor.java*
```
// 环绕通知：可以修改目标方法的返回结果
public class MyMethodInterceptor implements MethodInterceptor {
	@Override
	public Object invoke(MethodInvocation invocation) throws Throwable {
		System.out.println("执行环绕通知：目标方法执行之前");
		// 执行目标方法
		Object result = invocation.proceed();
		System.out.println("执行环绕通知：目标方法执行之后");
		if(result != null) {
			result = ((String)result).toUpperCase();
		}
		return result;
	}
}
```





### 异常通知 ThrowsAdvice
定义异常通知，需要实现 ThrowsAdvice 接口。该接口的主要作用是，在目标方法抛出异常后，根据异常的不同做出相应的处理。当该接口处理完异常后，会简单地将异常再次抛出给目标方法。

不过，这个接口较为特殊，从形式上看，该接口中没有必须要实现的方法。但，这个接口却确实有必须要实现的方法 `afterThrowing()`。这个方法重载了四种形式。由于使用时，一般只使用其中一种，若要都定义到接口中，则势必要使程序员在使用时必须要实现这四个方法。这是很麻烦的。所以就将该接口定义为了标识接口（没有方法的接口）。这四个方法在打开 `ThrowsAdvice` 源码后，上侧的注释部分可以看到：
![afterThrowing()](https://daily-1252869435.cos.ap-chengdu.myqcloud.com/2018-11-19-10-59-26.png)
不过，在这四种形式中，常用的形式如下： `public void afterThrowing(自定义的异常类 e)` 这里的参数 e 为，与具体业务相关的用户自定义的异常类对象。容器会根据异常类型的不同，自动选择不同的该方法执行。这些方法的执行是在目标方法执行结束后执行的。其它参数则与前面两个通知中方法的参数意义相同。
#### 普通异常
*SomeServiceImpl.java - 目标类*
```
@Override
public void doFirst() {
	System.out.println("执行doFirst()方法" + 3 / 0);
}
```
*MyThrowsAdvice.java - 异常通知*
```
public class MyThrowsAdvice implements ThrowsAdvice {
	// 当目标方法抛出与指定类型的异常具有 is-a 关系的异常时，执行当前方法
	public void afterThrowing(Exception ex) {
		System.out.println("执行异常通知方法");
	}
}
```
*输出信息*
```
执行异常通知方法
java.lang.ArithmeticException: / by zero
	...
```
#### 自定义异常
异常分两种：
- 运行时异常，不进行处理，也可以通过编译。
若一个类继承自 RunTimeException，则该异常就是运行时异常
- 编译时异常(受查异常,Checked Exception)，不进行处理，将无法通过编译。
若一个类继承自 Exception，则该异常就是受查异常

*UserException.java*
```
public class UserException extends Exception {
	public UserException() {
		super();
	}

	public UserException(String message) {
		super(message);
	}
}
```
*UsernameException.java*
```
public class UsernameException extends UserException {
	public UsernameException() {
		super();
	}

	public UsernameException(String message) {
		super(message);
	}
}
```
*PasswordException.java*
```
public class PasswordException extends UserException {
	public PasswordException() {
		super();
	}

	public PasswordException(String message) {
		super(message);
	}
}
```
*MyThrowsAdvice.java - 异常通知*
```
public class MyThrowsAdvice implements ThrowsAdvice {
	// 当目标方法抛出 UsernameException 异常时，执行当前方法
	public void afterThrowing(UsernameException ex) {
		System.out.println("发生用户名异常 ex = " + ex.getMessage());
	}
	
	// 当目标方法抛出 PasswordException 异常时，执行当前方法
	public void afterThrowing(PasswordException ex) {
		System.out.println("发生密码异常 ex = " + ex.getMessage());
	}
	
	// 当目标方法抛出其它异常时，执行当前方法
	public void afterThrowing(Exception ex) {
		System.out.println("发生异常 ex = " + ex.getMessage());
	}
}
```
*MyTest.java*
```
@Test
public void test01() throws UserException {
	String resource = "top/qingrang/aop05/applicationContext.xml";
	ApplicationContext ac = new ClassPathXmlApplicationContext(resource);
	ISomeService service = (ISomeService) ac.getBean("serviceProxy");
	service.login("beijing", "222");
}
```





### 同时使用多种通知

',
)
[ info ] [ SESSION ] INIT array (
  'id' => '',
  'var_session_id' => '',
  'prefix' => 'think',
  'type' => '',
  'auto_start' => true,
)
[ info ] [ RUN ] app\admin\controller\Note->saveNote[ /var/www/html/daily/application/admin/controller/Note.php ]
[ info ] [ DB ] INIT mysql
[ info ] [ CACHE ] INIT File
[ info ] [ LOG ] INIT File
[ sql ] [ DB ] CONNECT:[ UseTime:0.000561s ] mysql:host=74.120.168.12;dbname=diary;charset=utf8
[ sql ] [ SQL ] SHOW COLUMNS FROM `note` [ RunTime:0.001356s ]
[ sql ] [ SQL ] UPDATE `note`  SET `title`='Spring(二) - AOP（面向切面）',`content`='# Spring(二) - AOP（面向切面）\n[TOC]\n\nSpring 是一个基于 **IOC** 和 **AOP** 的结构 J2EE 系统的框架。\n## AOP 简介\n### 概念\nAOP（Aspect Orient Programming），面向切面编程，是面向对象编程 OOP 的一种补充。面向对象编程是从静态角度考虑程序的结构，而面向切面编程是从动态角度考虑程序运行过程。\n\nAOP 底层，就是采用动态代理模式实现的。采用了两种代理： JDK 的动态代理，与 CGLIB 的动态代理。\n\n面向切面编程，就是将交叉业务逻辑封装成切面，利用 AOP 容器的功能将切面织入到主业务逻辑中。所谓交叉业务逻辑是指，通用的、与主业务逻辑无关的代码，如安全检查、事务、日志等。\n\n若不使用 AOP，则会出现代码纠缠，即交叉业务逻辑与主业务逻辑混合在一起。这样，会使主业务逻辑变的混杂不清。\n\n例如，转账，在真正转账业务逻辑前后，需要权限控制、日志记录、加载事务、结束事务等交叉业务逻辑，而这些业务逻辑与主业务逻辑间并无直接关系。但，它们的代码量所占比重能达到总代码量的一半甚至还多。它们的存在，不仅产生了大量的“冗余”代码，还大大干扰了主业务逻辑---转账。\n\n### 利用 JDK 动态代理实现 AOP 编程\n*ISomeService.java - 主业务接口*\n```\npublic interface ISomeService {\n	// 目标方法\n	void doFirst();\n	// 目标方法\n	void doSecond();\n}\n```\n*SomeServiceImpl.java - 目标类*\n```\npublic class SomeServiceImpl implements ISomeService {\n\n	@Override\n	public void doFirst() {\n		System.out.println(\"执行doFirst()方法\");\n	}\n\n	@Override\n	public void doSecond() {\n		System.out.println(\"执行doSecond()方法\");\n	}\n}\n```\n*SystemService.java - 交叉业务逻辑*\n```\npublic class SystemService {\n	public static void doLog() {\n		System.out.println(\"执行日志代码\");\n	}\n\n	public static void doTx() {\n		System.out.println(\"执行事务代码\");\n	}\n}\n```\n*MyTest.java*\n```\n@Test\npublic void MyTest(){\n	final ISomeService target = new SomeServiceImpl();\n	// 自动生成一个动态代理对象\n	ISomeService service = (ISomeService) Proxy.newProxyInstance(\n			target.getClass().getClassLoader(), // 目标类的类加载器\n			target.getClass().getInterfaces(),  // 目标类实现的接口数组\n			new InvocationHandler() { //业务增强逻辑\n				// 具体加强的代码逻辑\n				@Override\n				public Object invoke(Object proxy, Method method, Object[] args) throws Throwable {\n					SystemService.doTx(); // 织入\n					Object result = method.invoke(target, args); // 执行目标方法\n					SystemService.doLog(); // 织入\n					return result;\n				}\n			});\n	service.doFirst();\n	System.out.println(\"==============\");\n	service.doSecond();\n}\n```\n*输出信息*\n```\n执行事务代码\n执行doFirst()方法\n执行日志代码\n==============\n执行事务代码\n执行doSecond()方法\n执行日志代码\n```\n## AOP 编程术语\n### 切面（Aspect）\n切面泛指交叉业务逻辑。上例中的事务处理、日志处理就可以理解为切面。常用的切面有通知与顾问。实际就是对主业务逻辑的一种增强。\n### 织入（Weaving）\n织入是指将切面代码插入到目标对象的过程。上例中 MyInvocationHandler 类中的 invoke() 方法完成的工作，就可以称为织入。\n### 连接点（JoinPoint）\n连接点指可以被切面织入的方法。通常业务接口中的方法均为连接点。\n### 切入点（Pointcut）\n切入点指切面具体织入的方法。在 StudentServiceImpl 类中，若 doSome()将被增强，而doOther()不被增强，则 doSome()为切入点，而 doOther()仅为连接点。被标记为 final 的方法是不能作为连接点与切入点的。因为最终的是不能被修改，不能被增强的。\n### 目标对象（Target）\n目标对象指将要被增强的对象。即包含主业务逻辑的类的对象。上例中的 StudentServiceImpl 的对象若被增强，则该类称为目标类，该类对象称为目标对象。当然，不被增强，也就无所谓目标不目标了。\n### 通知（Advice）\n通知是切面的一种实现，可以完成简单织入功能（织入功能就是在这里完成的）。换个角度来说，通知定义了增强码切入到目标代码的时间点，是目标方法执行之前执行，还是之后执行等。通知类型不同，切入时间不同。\n\n**切入点定义切入的位置，通知定义切入的时间。**\n### 顾问（Advisor）\n顾问是切面的另一种实现，能够将通知以更为复杂的方式织入到目标对象中，是将通知包装为更复杂切面的装配器。\n\n\n\n\n\n\n## 通知 Advice\n通知（Advice），切面的一种实现，可以完成简单织入功能（织入功能就是在这里完成的）。\n\n常用通知有：前置通知、后置通知、环绕通知、异常处理通知。\n### 前置通知 MethodBeforeAdvice\n定义前置通知，需要实现 MethodBeforeAdvice 接口。该接口中有一个方法 before()，会在目标方法执行之前执行。 前置通知的特点：\n- 在目标方法执行之前先执行。\n- 不改变目标方法的执行流程，前置通知代码不能阻止目标方法执行。\n- 不改变目标方法执行的结果。\n\n*ISomeService.java - 主业务接口*\n```\npublic interface ISomeService {\n	// 目标方法\n	void doFirst();\n	// 目标方法\n	void doSecond();\n}\n```\n*SomeServiceImpl.java - 目标类*\n```\npublic class SomeServiceImpl implements ISomeService {\n\n	@Override\n	public void doFirst() {\n		System.out.println(\"执行doFirst()方法\");\n	}\n\n	@Override\n	public void doSecond() {\n		System.out.println(\"执行doSecond()方法\");\n	}\n}\n```\n*MyMethodBeforeAdvice.java - 前置通知*\n```\npublic class MyMethodBeforeAdvice implements MethodBeforeAdvice {\n\n	// 当前方法在目标方法执行之前执行，method:目标方法，args:目标方法的参数列表，target:目标对象\n	@Override\n	public void before(Method method, Object[] args, Object target) throws Throwable {\n		// 对于目标方法的增强代码就应该写在这里\n		System.out.println(\"执行前置通知方法\");\n	}\n}\n```\n*applicationContext.mxl*\n```\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<beans xmlns=\"http://www.springframework.org/schema/beans\"\n    xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n    xsi:schemaLocation=\"\n        http://www.springframework.org/schema/beans \n        http://www.springframework.org/schema/beans/spring-beans.xsd\">\n\n    <!-- 注册目标对象 -->\n    <bean id=\"someService\" class=\"top.qingrang.aop01.SomeServiceImpl\"/>\n\n    <!-- 注册切面：通知 -->\n    <bean id=\"myAdvice\" class=\"top.qingrang.aop01.MyMethodBeforeAdvice\"/>\n\n    <!-- 生成代理对象 -->\n    <bean id=\"serviceProxy\" class=\"org.springframework.aop.framework.ProxyFactoryBean\">\n    	<!-- 指定目标对象，随便用哪个 -->\n    	<!-- <property name=\"targetName\" value=\"someService\"/> -->\n    	<property name=\"target\" ref=\"someService\"/>\n		\n    	<!-- 指定切面 -->\n    	<property name=\"interceptorNames\" value=\"myAdvice\"/>\n    </bean>\n</beans>\n```\n\n### 后置通知 AfterReturningAdvice\n定义后置通知，需要实现接口 AfterReturningAdvice。该接口中有一个方法 afterReturning()，会在目标方法执行之后执行。后置通知的特点：\n- 在目标方法执行之后执行。\n- 不改变目标方法的执行流程，后置通知代码不能阻止目标方法执行。\n- 不改变目标方法执行的结果。\n\n*SomeServiceImpl.java - 目标类*\n```\npublic class SomeServiceImpl implements ISomeService {\n\n	@Override\n	public void doFirst() {\n		System.out.println(\"执行doFirst()方法\");\n	}\n\n	@Override\n	public String doSecond() {\n		System.out.println(\"执行doSecond()方法\");\n		return \"abcde\";\n	}\n}\n```\n*MyAfterReturningAdvice.java - 后置通知*\n```\n// 后置通知：可以获取到目标方法的返回结果，但无法改变目标方法的结果\npublic class MyAfterReturningAdvice implements AfterReturningAdvice {\n	// 在目标方法执行之后执行，returnValue：目标方法的返回值\n	@Override\n	public void afterReturning(Object returnValue, Method method, Object[] args, Object target) throws Throwable {\n		System.out.println(\"执行后置通知方法  returnValue = \" + returnValue);\n		if (returnValue != null) {\n			returnValue = ((String) returnValue).toUpperCase();\n			System.out.println(\"修改过的结果  returnValue = \" + returnValue);\n		}\n	}\n}\n```\n### 环绕通知 MethodInterceptor\n定义环绕通知(在目标方法执行之前之后都会执行)，需要实现 MethodInterceptor 接口。环绕通知，也叫方法拦截器，可以在目标方法调用之前及之后做处理，可以改变目标方法的返回值，也可以改变程序执行流程。\n\n*MyMethodInterceptor.java*\n```\n// 环绕通知：可以修改目标方法的返回结果\npublic class MyMethodInterceptor implements MethodInterceptor {\n	@Override\n	public Object invoke(MethodInvocation invocation) throws Throwable {\n		System.out.println(\"执行环绕通知：目标方法执行之前\");\n		// 执行目标方法\n		Object result = invocation.proceed();\n		System.out.println(\"执行环绕通知：目标方法执行之后\");\n		if(result != null) {\n			result = ((String)result).toUpperCase();\n		}\n		return result;\n	}\n}\n```\n\n\n\n\n\n### 异常通知 ThrowsAdvice\n定义异常通知，需要实现 ThrowsAdvice 接口。该接口的主要作用是，在目标方法抛出异常后，根据异常的不同做出相应的处理。当该接口处理完异常后，会简单地将异常再次抛出给目标方法。\n\n不过，这个接口较为特殊，从形式上看，该接口中没有必须要实现的方法。但，这个接口却确实有必须要实现的方法 `afterThrowing()`。这个方法重载了四种形式。由于使用时，一般只使用其中一种，若要都定义到接口中，则势必要使程序员在使用时必须要实现这四个方法。这是很麻烦的。所以就将该接口定义为了标识接口（没有方法的接口）。这四个方法在打开 `ThrowsAdvice` 源码后，上侧的注释部分可以看到：\n![afterThrowing()](https://daily-1252869435.cos.ap-chengdu.myqcloud.com/2018-11-19-10-59-26.png)\n不过，在这四种形式中，常用的形式如下： `public void afterThrowing(自定义的异常类 e)` 这里的参数 e 为，与具体业务相关的用户自定义的异常类对象。容器会根据异常类型的不同，自动选择不同的该方法执行。这些方法的执行是在目标方法执行结束后执行的。其它参数则与前面两个通知中方法的参数意义相同。\n#### 普通异常\n*SomeServiceImpl.java - 目标类*\n```\n@Override\npublic void doFirst() {\n	System.out.println(\"执行doFirst()方法\" + 3 / 0);\n}\n```\n*MyThrowsAdvice.java - 异常通知*\n```\npublic class MyThrowsAdvice implements ThrowsAdvice {\n	// 当目标方法抛出与指定类型的异常具有 is-a 关系的异常时，执行当前方法\n	public void afterThrowing(Exception ex) {\n		System.out.println(\"执行异常通知方法\");\n	}\n}\n```\n*输出信息*\n```\n执行异常通知方法\njava.lang.ArithmeticException: / by zero\n	...\n```\n#### 自定义异常\n异常分两种：\n- 运行时异常，不进行处理，也可以通过编译。\n若一个类继承自 RunTimeException，则该异常就是运行时异常\n- 编译时异常(受查异常,Checked Exception)，不进行处理，将无法通过编译。\n若一个类继承自 Exception，则该异常就是受查异常\n\n*UserException.java*\n```\npublic class UserException extends Exception {\n	public UserException() {\n		super();\n	}\n\n	public UserException(String message) {\n		super(message);\n	}\n}\n```\n*UsernameException.java*\n```\npublic class UsernameException extends UserException {\n	public UsernameException() {\n		super();\n	}\n\n	public UsernameException(String message) {\n		super(message);\n	}\n}\n```\n*PasswordException.java*\n```\npublic class PasswordException extends UserException {\n	public PasswordException() {\n		super();\n	}\n\n	public PasswordException(String message) {\n		super(message);\n	}\n}\n```\n*MyThrowsAdvice.java - 异常通知*\n```\npublic class MyThrowsAdvice implements ThrowsAdvice {\n	// 当目标方法抛出 UsernameException 异常时，执行当前方法\n	public void afterThrowing(UsernameException ex) {\n		System.out.println(\"发生用户名异常 ex = \" + ex.getMessage());\n	}\n	\n	// 当目标方法抛出 PasswordException 异常时，执行当前方法\n	public void afterThrowing(PasswordException ex) {\n		System.out.println(\"发生密码异常 ex = \" + ex.getMessage());\n	}\n	\n	// 当目标方法抛出其它异常时，执行当前方法\n	public void afterThrowing(Exception ex) {\n		System.out.println(\"发生异常 ex = \" + ex.getMessage());\n	}\n}\n```\n*MyTest.java*\n```\n@Test\npublic void test01() throws UserException {\n	String resource = \"top/qingrang/aop05/applicationContext.xml\";\n	ApplicationContext ac = new ClassPathXmlApplicationContext(resource);\n	ISomeService service = (ISomeService) ac.getBean(\"serviceProxy\");\n	service.login(\"beijing\", \"222\");\n}\n```\n\n\n\n\n\n### 同时使用多种通知\n\n',`groups`='Default',`p_id`=1  WHERE  `id` = 1 [ RunTime:0.000898s ]
---------------------------------------------------------------
[ 2018-11-19T12:40:27+08:00 ] 74.120.168.12 74.120.168.12 POST /daily/admin/note/updatenote/id/250.html
[ info ] qingrang.top/daily/admin/note/updatenote/id/250.html [运行时间：0.070343s][吞吐率：14.22req/s] [内存消耗：2,173.87kb] [文件加载：58]
[ info ] [ LANG ] /var/www/html/daily/thinkphp/lang/zh-cn.php
[ info ] [ ROUTE ] array (
  'type' => 'module',
  'module' => 
  array (
    0 => 'admin',
    1 => 'note',
    2 => 'updatenote',
  ),
)
[ info ] [ HEADER ] array (
  'host' => 'qingrang.top',
  'content-length' => '37696',
  'cache-control' => 'max-age=0',
  'origin' => 'http://qingrang.top',
  'upgrade-insecure-requests' => '1',
  'content-type' => 'application/x-www-form-urlencoded',
  'user-agent' => 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/70.0.3538.102 Safari/537.36',
  'accept' => 'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8',
  'referer' => 'http://qingrang.top/daily/admin/note/editnote/id/250.html',
  'accept-encoding' => 'gzip, deflate',
  'accept-language' => 'zh-CN,zh;q=0.9,la;q=0.8,en;q=0.7,lb;q=0.6',
  'cookie' => 'Hm_lvt_1769181352e9adc950166aada465644e=1541082864,1541122974,1541171416,1542098176; PHPSESSID=cvrea98moc9nvt4dg4igb1ep86',
  'connection' => 'close',
)
[ info ] [ PARAM ] array (
  'summary' => '',
  'content' => '# Spring(二) - AOP（面向切面）
[TOC]

Spring 是一个基于 **IOC** 和 **AOP** 的结构 J2EE 系统的框架。
## AOP 简介
### 概念
AOP（Aspect Orient Programming），面向切面编程，是面向对象编程 OOP 的一种补充。面向对象编程是从静态角度考虑程序的结构，而面向切面编程是从动态角度考虑程序运行过程。

AOP 底层，就是采用动态代理模式实现的。采用了两种代理： JDK 的动态代理，与 CGLIB 的动态代理。

面向切面编程，就是将交叉业务逻辑封装成切面，利用 AOP 容器的功能将切面织入到主业务逻辑中。所谓交叉业务逻辑是指，通用的、与主业务逻辑无关的代码，如安全检查、事务、日志等。

若不使用 AOP，则会出现代码纠缠，即交叉业务逻辑与主业务逻辑混合在一起。这样，会使主业务逻辑变的混杂不清。

例如，转账，在真正转账业务逻辑前后，需要权限控制、日志记录、加载事务、结束事务等交叉业务逻辑，而这些业务逻辑与主业务逻辑间并无直接关系。但，它们的代码量所占比重能达到总代码量的一半甚至还多。它们的存在，不仅产生了大量的“冗余”代码，还大大干扰了主业务逻辑---转账。

### 利用 JDK 动态代理实现 AOP 编程
*ISomeService.java - 主业务接口*
```
public interface ISomeService {
	// 目标方法
	void doFirst();
	// 目标方法
	void doSecond();
}
```
*SomeServiceImpl.java - 目标类*
```
public class SomeServiceImpl implements ISomeService {

	@Override
	public void doFirst() {
		System.out.println("执行doFirst()方法");
	}

	@Override
	public void doSecond() {
		System.out.println("执行doSecond()方法");
	}
}
```
*SystemService.java - 交叉业务逻辑*
```
public class SystemService {
	public static void doLog() {
		System.out.println("执行日志代码");
	}

	public static void doTx() {
		System.out.println("执行事务代码");
	}
}
```
*MyTest.java*
```
@Test
public void MyTest(){
	final ISomeService target = new SomeServiceImpl();
	// 自动生成一个动态代理对象
	ISomeService service = (ISomeService) Proxy.newProxyInstance(
			target.getClass().getClassLoader(), // 目标类的类加载器
			target.getClass().getInterfaces(),  // 目标类实现的接口数组
			new InvocationHandler() { //业务增强逻辑
				// 具体加强的代码逻辑
				@Override
				public Object invoke(Object proxy, Method method, Object[] args) throws Throwable {
					SystemService.doTx(); // 织入
					Object result = method.invoke(target, args); // 执行目标方法
					SystemService.doLog(); // 织入
					return result;
				}
			});
	service.doFirst();
	System.out.println("==============");
	service.doSecond();
}
```
*输出信息*
```
执行事务代码
执行doFirst()方法
执行日志代码
==============
执行事务代码
执行doSecond()方法
执行日志代码
```
## AOP 编程术语
### 切面（Aspect）
切面泛指交叉业务逻辑。上例中的事务处理、日志处理就可以理解为切面。常用的切面有通知与顾问。实际就是对主业务逻辑的一种增强。
### 织入（Weaving）
织入是指将切面代码插入到目标对象的过程。上例中 MyInvocationHandler 类中的 invoke() 方法完成的工作，就可以称为织入。
### 连接点（JoinPoint）
连接点指可以被切面织入的方法。通常业务接口中的方法均为连接点。
### 切入点（Pointcut）
切入点指切面具体织入的方法。在 StudentServiceImpl 类中，若 doSome()将被增强，而doOther()不被增强，则 doSome()为切入点，而 doOther()仅为连接点。被标记为 final 的方法是不能作为连接点与切入点的。因为最终的是不能被修改，不能被增强的。
### 目标对象（Target）
目标对象指将要被增强的对象。即包含主业务逻辑的类的对象。上例中的 StudentServiceImpl 的对象若被增强，则该类称为目标类，该类对象称为目标对象。当然，不被增强，也就无所谓目标不目标了。
### 通知（Advice）
通知是切面的一种实现，可以完成简单织入功能（织入功能就是在这里完成的）。换个角度来说，通知定义了增强码切入到目标代码的时间点，是目标方法执行之前执行，还是之后执行等。通知类型不同，切入时间不同。

**切入点定义切入的位置，通知定义切入的时间。**
### 顾问（Advisor）
顾问是切面的另一种实现，能够将通知以更为复杂的方式织入到目标对象中，是将通知包装为更复杂切面的装配器。






## 通知 Advice
通知（Advice），切面的一种实现，可以完成简单织入功能（织入功能就是在这里完成的）。

常用通知有：前置通知、后置通知、环绕通知、异常处理通知。
### 前置通知 MethodBeforeAdvice
定义前置通知，需要实现 MethodBeforeAdvice 接口。该接口中有一个方法 before()，会在目标方法执行之前执行。 前置通知的特点：
- 在目标方法执行之前先执行。
- 不改变目标方法的执行流程，前置通知代码不能阻止目标方法执行。
- 不改变目标方法执行的结果。

*ISomeService.java - 主业务接口*
```
public interface ISomeService {
	// 目标方法
	void doFirst();
	// 目标方法
	void doSecond();
}
```
*SomeServiceImpl.java - 目标类*
```
public class SomeServiceImpl implements ISomeService {

	@Override
	public void doFirst() {
		System.out.println("执行doFirst()方法");
	}

	@Override
	public void doSecond() {
		System.out.println("执行doSecond()方法");
	}
}
```
*MyMethodBeforeAdvice.java - 前置通知*
```
public class MyMethodBeforeAdvice implements MethodBeforeAdvice {

	// 当前方法在目标方法执行之前执行，method:目标方法，args:目标方法的参数列表，target:目标对象
	@Override
	public void before(Method method, Object[] args, Object target) throws Throwable {
		// 对于目标方法的增强代码就应该写在这里
		System.out.println("执行前置通知方法");
	}
}
```
*applicationContext.mxl*
```
<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xsi:schemaLocation="
        http://www.springframework.org/schema/beans 
        http://www.springframework.org/schema/beans/spring-beans.xsd">

    <!-- 注册目标对象 -->
    <bean id="someService" class="top.qingrang.aop01.SomeServiceImpl"/>

    <!-- 注册切面：通知 -->
    <bean id="myAdvice" class="top.qingrang.aop01.MyMethodBeforeAdvice"/>

    <!-- 生成代理对象 -->
    <bean id="serviceProxy" class="org.springframework.aop.framework.ProxyFactoryBean">
    	<!-- 指定目标对象，随便用哪个 -->
    	<!-- <property name="targetName" value="someService"/> -->
    	<property name="target" ref="someService"/>
		
    	<!-- 指定切面 -->
    	<property name="interceptorNames" value="myAdvice"/>
    </bean>
</beans>
```

### 后置通知 AfterReturningAdvice
定义后置通知，需要实现接口 AfterReturningAdvice。该接口中有一个方法 afterReturning()，会在目标方法执行之后执行。后置通知的特点：
- 在目标方法执行之后执行。
- 不改变目标方法的执行流程，后置通知代码不能阻止目标方法执行。
- 不改变目标方法执行的结果。

*SomeServiceImpl.java - 目标类*
```
public class SomeServiceImpl implements ISomeService {

	@Override
	public void doFirst() {
		System.out.println("执行doFirst()方法");
	}

	@Override
	public String doSecond() {
		System.out.println("执行doSecond()方法");
		return "abcde";
	}
}
```
*MyAfterReturningAdvice.java - 后置通知*
```
// 后置通知：可以获取到目标方法的返回结果，但无法改变目标方法的结果
public class MyAfterReturningAdvice implements AfterReturningAdvice {
	// 在目标方法执行之后执行，returnValue：目标方法的返回值
	@Override
	public void afterReturning(Object returnValue, Method method, Object[] args, Object target) throws Throwable {
		System.out.println("执行后置通知方法  returnValue = " + returnValue);
		if (returnValue != null) {
			returnValue = ((String) returnValue).toUpperCase();
			System.out.println("修改过的结果  returnValue = " + returnValue);
		}
	}
}
```
### 环绕通知 MethodInterceptor
定义环绕通知(在目标方法执行之前之后都会执行)，需要实现 MethodInterceptor 接口。环绕通知，也叫方法拦截器，可以在目标方法调用之前及之后做处理，可以改变目标方法的返回值，也可以改变程序执行流程。

*MyMethodInterceptor.java*
```
// 环绕通知：可以修改目标方法的返回结果
public class MyMethodInterceptor implements MethodInterceptor {
	@Override
	public Object invoke(MethodInvocation invocation) throws Throwable {
		System.out.println("执行环绕通知：目标方法执行之前");
		// 执行目标方法
		Object result = invocation.proceed();
		System.out.println("执行环绕通知：目标方法执行之后");
		if(result != null) {
			result = ((String)result).toUpperCase();
		}
		return result;
	}
}
```





### 异常通知 ThrowsAdvice
定义异常通知，需要实现 ThrowsAdvice 接口。该接口的主要作用是，在目标方法抛出异常后，根据异常的不同做出相应的处理。当该接口处理完异常后，会简单地将异常再次抛出给目标方法。

不过，这个接口较为特殊，从形式上看，该接口中没有必须要实现的方法。但，这个接口却确实有必须要实现的方法 `afterThrowing()`。这个方法重载了四种形式。由于使用时，一般只使用其中一种，若要都定义到接口中，则势必要使程序员在使用时必须要实现这四个方法。这是很麻烦的。所以就将该接口定义为了标识接口（没有方法的接口）。这四个方法在打开 `ThrowsAdvice` 源码后，上侧的注释部分可以看到：
![afterThrowing()](https://daily-1252869435.cos.ap-chengdu.myqcloud.com/2018-11-19-10-59-26.png)
不过，在这四种形式中，常用的形式如下： `public void afterThrowing(自定义的异常类 e)` 这里的参数 e 为，与具体业务相关的用户自定义的异常类对象。容器会根据异常类型的不同，自动选择不同的该方法执行。这些方法的执行是在目标方法执行结束后执行的。其它参数则与前面两个通知中方法的参数意义相同。
#### 普通异常
*SomeServiceImpl.java - 目标类*
```
@Override
public void doFirst() {
	System.out.println("执行doFirst()方法" + 3 / 0);
}
```
*MyThrowsAdvice.java - 异常通知*
```
public class MyThrowsAdvice implements ThrowsAdvice {
	// 当目标方法抛出与指定类型的异常具有 is-a 关系的异常时，执行当前方法
	public void afterThrowing(Exception ex) {
		System.out.println("执行异常通知方法");
	}
}
```
*输出信息*
```
执行异常通知方法
java.lang.ArithmeticException: / by zero
	...
```
#### 自定义异常
异常分两种：
- 运行时异常，不进行处理，也可以通过编译。
若一个类继承自 RunTimeException，则该异常就是运行时异常
- 编译时异常(受查异常,Checked Exception)，不进行处理，将无法通过编译。
若一个类继承自 Exception，则该异常就是受查异常

*UserException.java*
```
public class UserException extends Exception {
	public UserException() {
		super();
	}

	public UserException(String message) {
		super(message);
	}
}
```
*UsernameException.java*
```
public class UsernameException extends UserException {
	public UsernameException() {
		super();
	}

	public UsernameException(String message) {
		super(message);
	}
}
```
*PasswordException.java*
```
public class PasswordException extends UserException {
	public PasswordException() {
		super();
	}

	public PasswordException(String message) {
		super(message);
	}
}
```
*MyThrowsAdvice.java - 异常通知*
```
public class MyThrowsAdvice implements ThrowsAdvice {
	// 当目标方法抛出 UsernameException 异常时，执行当前方法
	public void afterThrowing(UsernameException ex) {
		System.out.println("发生用户名异常 ex = " + ex.getMessage());
	}
	
	// 当目标方法抛出 PasswordException 异常时，执行当前方法
	public void afterThrowing(PasswordException ex) {
		System.out.println("发生密码异常 ex = " + ex.getMessage());
	}
	
	// 当目标方法抛出其它异常时，执行当前方法
	public void afterThrowing(Exception ex) {
		System.out.println("发生异常 ex = " + ex.getMessage());
	}
}
```
*MyTest.java*
```
@Test
public void test01() throws UserException {
	String resource = "top/qingrang/aop05/applicationContext.xml";
	ApplicationContext ac = new ClassPathXmlApplicationContext(resource);
	ISomeService service = (ISomeService) ac.getBean("serviceProxy");
	service.login("beijing", "222");
}
```





### 同时使用多种通知
*applicationContext.mxl*
```
<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xsi:schemaLocation="
        http://www.springframework.org/schema/beans 
        http://www.springframework.org/schema/beans/spring-beans.xsd">

    <!-- 注册目标对象 -->
    <bean id="someService" class="top.qingrang.aop06.SomeServiceImpl"/>

    <!-- 注册切面：通知 -->
    <bean id="myBeforeAdvice" class="top.qingrang.aop06.MyMethodBeforeAdvice"/>
    <bean id="myAfterAdvice" class="top.qingrang.aop06.MyAfterReturningAdvice"/>

    <!-- 生成代理对象 -->
    <bean id="serviceProxy" class="org.springframework.aop.framework.ProxyFactoryBean">
    	<property name="target" ref="someService"/>
        <!-- 注入多种通知 -->
    	<property name="interceptorNames" value="myBeforeAdvice,myAfterAdvice"/>
    	<!-- <property name="interceptorNames">
    		<array>
    			<value>myBeforeAdvice</value>
    			<value>myAfterAdvice</value>
    		</array>
    	</property> -->
    </bean>

</beans>
```


### 无接口的 CGLIB 代理生成
若不存在接口，则 ProxyFactoryBean 会自动采用 CGLIB 方式生成动态代理。
*SomeService.java - 目标类*
```
public class SomeService {
	public void doFirst() {
		System.out.println("执行doFirst()方法");
	}

	public String doSecond() {
		System.out.println("执行doSecond()方法");
		return "abcde";
	}
}
```
*MyAfterReturningAdvice.java - 后置通知*
```
public class MyAfterReturningAdvice implements AfterReturningAdvice {
	// 在目标方法执行之后执行，returnValue：目标方法的返回值
	@Override
	public void afterReturning(Object returnValue, Method method, Object[] args, Object target) throws Throwable {
		System.out.println("执行后置通知方法  returnValue = " + returnValue);
		if (returnValue != null) {
			returnValue = ((String) returnValue).toUpperCase();
			System.out.println("修改过的结果  returnValue = " + returnValue);
		}
	}
}
```
*applicationContext.mxl*
```
<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xsi:schemaLocation="
        http://www.springframework.org/schema/beans 
        http://www.springframework.org/schema/beans/spring-beans.xsd">

    <!-- 注册目标对象 -->
    <bean id="someService" class="top.qingrang.aop07.SomeService"/>
    
    <!-- 注册切面：通知 -->
    <bean id="myAdvice" class="top.qingrang.aop07.MyAfterReturningAdvice"/>
    
    <!-- 生成代理对象 -->
    <bean id="serviceProxy" class="org.springframework.aop.framework.ProxyFactoryBean">
    	<property name="target" ref="someService"/>
    	<property name="interceptorNames" value="myAdvice"/>
    </bean>

</beans>
```
*MyTest.java*
```
@Test
public void test01() {
	String resource = "top/qingrang/aop07/applicationContext.xml";
	ApplicationContext ac = new ClassPathXmlApplicationContext(resource);
	SomeService service = (SomeService) ac.getBean("serviceProxy");
	service.doFirst();
	System.out.println("==================");
	String result = service.doSecond();
	System.out.println(result);
}
```
### 有接口的 CGLIB 代理生成 - proxyTargetClass 属性
若存在接口，但又需要使用 CGLIB 生成代理对象，此时，只需要在配置文件中增加一个 proxyTargetClass 属性设置，用于指定强制使用 CGLIB 代理机制。

![CGLIB 代理](https://daily-1252869435.cos.ap-chengdu.myqcloud.com/2018-11-19-12-44-48.png)
也可指定 optimize（优化）的值为 true，强制使用 CGLIB 代理机制。
![optimize（优化）](https://daily-1252869435.cos.ap-chengdu.myqcloud.com/2018-11-19-12-45-22.png)
查看后台运行情况，可以看到代理生成使用的是 CGLIB 代理机制。
![后台运行情况](https://daily-1252869435.cos.ap-chengdu.myqcloud.com/2018-11-19-12-45-57.png)


## 顾问 Advisor',
  'groups' => 'Java',
  'showsel' => '1',
  'showse2' => '1',
  'id' => '250',
)
[ info ] [ SESSION ] INIT array (
  'id' => '',
  'var_session_id' => '',
  'prefix' => 'think',
  'type' => '',
  'auto_start' => true,
)
[ info ] [ RUN ] app\admin\controller\Note->updateNote[ /var/www/html/daily/application/admin/controller/Note.php ]
[ info ] [ DB ] INIT mysql
[ info ] [ CACHE ] INIT File
[ info ] [ LOG ] INIT File
[ sql ] [ DB ] CONNECT:[ UseTime:0.000834s ] mysql:host=74.120.168.12;dbname=diary;charset=utf8
[ sql ] [ SQL ] SHOW COLUMNS FROM `note` [ RunTime:0.001541s ]
[ sql ] [ SQL ] SELECT * FROM `note` WHERE  `id` = 250 LIMIT 1 [ RunTime:0.000439s ]
[ sql ] [ SQL ] SELECT `groups` FROM `note` WHERE  `id` = 250 LIMIT 1 [ RunTime:0.000340s ]
[ sql ] [ SQL ] SHOW COLUMNS FROM `groups` [ RunTime:0.001044s ]
[ sql ] [ SQL ] SELECT `parent_id` FROM `groups` WHERE  `groups` = 'Java' LIMIT 1 [ RunTime:0.000469s ]
[ sql ] [ SQL ] SELECT `groups` FROM `groups` WHERE  `id` = 2 LIMIT 1 [ RunTime:0.000498s ]
[ sql ] [ SQL ] UPDATE `note`  SET `id`=250,`p_id`=2,`title`='Spring(二) - AOP（面向切面）\r',`content`='# Spring(二) - AOP（面向切面）\r\n[TOC]\r\n\r\nSpring 是一个基于 **IOC** 和 **AOP** 的结构 J2EE 系统的框架。\r\n## AOP 简介\r\n### 概念\r\nAOP（Aspect Orient Programming），面向切面编程，是面向对象编程 OOP 的一种补充。面向对象编程是从静态角度考虑程序的结构，而面向切面编程是从动态角度考虑程序运行过程。\r\n\r\nAOP 底层，就是采用动态代理模式实现的。采用了两种代理： JDK 的动态代理，与 CGLIB 的动态代理。\r\n\r\n面向切面编程，就是将交叉业务逻辑封装成切面，利用 AOP 容器的功能将切面织入到主业务逻辑中。所谓交叉业务逻辑是指，通用的、与主业务逻辑无关的代码，如安全检查、事务、日志等。\r\n\r\n若不使用 AOP，则会出现代码纠缠，即交叉业务逻辑与主业务逻辑混合在一起。这样，会使主业务逻辑变的混杂不清。\r\n\r\n例如，转账，在真正转账业务逻辑前后，需要权限控制、日志记录、加载事务、结束事务等交叉业务逻辑，而这些业务逻辑与主业务逻辑间并无直接关系。但，它们的代码量所占比重能达到总代码量的一半甚至还多。它们的存在，不仅产生了大量的“冗余”代码，还大大干扰了主业务逻辑---转账。\r\n\r\n### 利用 JDK 动态代理实现 AOP 编程\r\n*ISomeService.java - 主业务接口*\r\n```\r\npublic interface ISomeService {\r\n	// 目标方法\r\n	void doFirst();\r\n	// 目标方法\r\n	void doSecond();\r\n}\r\n```\r\n*SomeServiceImpl.java - 目标类*\r\n```\r\npublic class SomeServiceImpl implements ISomeService {\r\n\r\n	@Override\r\n	public void doFirst() {\r\n		System.out.println(\"执行doFirst()方法\");\r\n	}\r\n\r\n	@Override\r\n	public void doSecond() {\r\n		System.out.println(\"执行doSecond()方法\");\r\n	}\r\n}\r\n```\r\n*SystemService.java - 交叉业务逻辑*\r\n```\r\npublic class SystemService {\r\n	public static void doLog() {\r\n		System.out.println(\"执行日志代码\");\r\n	}\r\n\r\n	public static void doTx() {\r\n		System.out.println(\"执行事务代码\");\r\n	}\r\n}\r\n```\r\n*MyTest.java*\r\n```\r\n@Test\r\npublic void MyTest(){\r\n	final ISomeService target = new SomeServiceImpl();\r\n	// 自动生成一个动态代理对象\r\n	ISomeService service = (ISomeService) Proxy.newProxyInstance(\r\n			target.getClass().getClassLoader(), // 目标类的类加载器\r\n			target.getClass().getInterfaces(),  // 目标类实现的接口数组\r\n			new InvocationHandler() { //业务增强逻辑\r\n				// 具体加强的代码逻辑\r\n				@Override\r\n				public Object invoke(Object proxy, Method method, Object[] args) throws Throwable {\r\n					SystemService.doTx(); // 织入\r\n					Object result = method.invoke(target, args); // 执行目标方法\r\n					SystemService.doLog(); // 织入\r\n					return result;\r\n				}\r\n			});\r\n	service.doFirst();\r\n	System.out.println(\"==============\");\r\n	service.doSecond();\r\n}\r\n```\r\n*输出信息*\r\n```\r\n执行事务代码\r\n执行doFirst()方法\r\n执行日志代码\r\n==============\r\n执行事务代码\r\n执行doSecond()方法\r\n执行日志代码\r\n```\r\n## AOP 编程术语\r\n### 切面（Aspect）\r\n切面泛指交叉业务逻辑。上例中的事务处理、日志处理就可以理解为切面。常用的切面有通知与顾问。实际就是对主业务逻辑的一种增强。\r\n### 织入（Weaving）\r\n织入是指将切面代码插入到目标对象的过程。上例中 MyInvocationHandler 类中的 invoke() 方法完成的工作，就可以称为织入。\r\n### 连接点（JoinPoint）\r\n连接点指可以被切面织入的方法。通常业务接口中的方法均为连接点。\r\n### 切入点（Pointcut）\r\n切入点指切面具体织入的方法。在 StudentServiceImpl 类中，若 doSome()将被增强，而doOther()不被增强，则 doSome()为切入点，而 doOther()仅为连接点。被标记为 final 的方法是不能作为连接点与切入点的。因为最终的是不能被修改，不能被增强的。\r\n### 目标对象（Target）\r\n目标对象指将要被增强的对象。即包含主业务逻辑的类的对象。上例中的 StudentServiceImpl 的对象若被增强，则该类称为目标类，该类对象称为目标对象。当然，不被增强，也就无所谓目标不目标了。\r\n### 通知（Advice）\r\n通知是切面的一种实现，可以完成简单织入功能（织入功能就是在这里完成的）。换个角度来说，通知定义了增强码切入到目标代码的时间点，是目标方法执行之前执行，还是之后执行等。通知类型不同，切入时间不同。\r\n\r\n**切入点定义切入的位置，通知定义切入的时间。**\r\n### 顾问（Advisor）\r\n顾问是切面的另一种实现，能够将通知以更为复杂的方式织入到目标对象中，是将通知包装为更复杂切面的装配器。\r\n\r\n\r\n\r\n\r\n\r\n\r\n## 通知 Advice\r\n通知（Advice），切面的一种实现，可以完成简单织入功能（织入功能就是在这里完成的）。\r\n\r\n常用通知有：前置通知、后置通知、环绕通知、异常处理通知。\r\n### 前置通知 MethodBeforeAdvice\r\n定义前置通知，需要实现 MethodBeforeAdvice 接口。该接口中有一个方法 before()，会在目标方法执行之前执行。 前置通知的特点：\r\n- 在目标方法执行之前先执行。\r\n- 不改变目标方法的执行流程，前置通知代码不能阻止目标方法执行。\r\n- 不改变目标方法执行的结果。\r\n\r\n*ISomeService.java - 主业务接口*\r\n```\r\npublic interface ISomeService {\r\n	// 目标方法\r\n	void doFirst();\r\n	// 目标方法\r\n	void doSecond();\r\n}\r\n```\r\n*SomeServiceImpl.java - 目标类*\r\n```\r\npublic class SomeServiceImpl implements ISomeService {\r\n\r\n	@Override\r\n	public void doFirst() {\r\n		System.out.println(\"执行doFirst()方法\");\r\n	}\r\n\r\n	@Override\r\n	public void doSecond() {\r\n		System.out.println(\"执行doSecond()方法\");\r\n	}\r\n}\r\n```\r\n*MyMethodBeforeAdvice.java - 前置通知*\r\n```\r\npublic class MyMethodBeforeAdvice implements MethodBeforeAdvice {\r\n\r\n	// 当前方法在目标方法执行之前执行，method:目标方法，args:目标方法的参数列表，target:目标对象\r\n	@Override\r\n	public void before(Method method, Object[] args, Object target) throws Throwable {\r\n		// 对于目标方法的增强代码就应该写在这里\r\n		System.out.println(\"执行前置通知方法\");\r\n	}\r\n}\r\n```\r\n*applicationContext.mxl*\r\n```\r\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<beans xmlns=\"http://www.springframework.org/schema/beans\"\r\n    xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\r\n    xsi:schemaLocation=\"\r\n        http://www.springframework.org/schema/beans \r\n        http://www.springframework.org/schema/beans/spring-beans.xsd\">\r\n\r\n    <!-- 注册目标对象 -->\r\n    <bean id=\"someService\" class=\"top.qingrang.aop01.SomeServiceImpl\"/>\r\n\r\n    <!-- 注册切面：通知 -->\r\n    <bean id=\"myAdvice\" class=\"top.qingrang.aop01.MyMethodBeforeAdvice\"/>\r\n\r\n    <!-- 生成代理对象 -->\r\n    <bean id=\"serviceProxy\" class=\"org.springframework.aop.framework.ProxyFactoryBean\">\r\n    	<!-- 指定目标对象，随便用哪个 -->\r\n    	<!-- <property name=\"targetName\" value=\"someService\"/> -->\r\n    	<property name=\"target\" ref=\"someService\"/>\r\n		\r\n    	<!-- 指定切面 -->\r\n    	<property name=\"interceptorNames\" value=\"myAdvice\"/>\r\n    </bean>\r\n</beans>\r\n```\r\n\r\n### 后置通知 AfterReturningAdvice\r\n定义后置通知，需要实现接口 AfterReturningAdvice。该接口中有一个方法 afterReturning()，会在目标方法执行之后执行。后置通知的特点：\r\n- 在目标方法执行之后执行。\r\n- 不改变目标方法的执行流程，后置通知代码不能阻止目标方法执行。\r\n- 不改变目标方法执行的结果。\r\n\r\n*SomeServiceImpl.java - 目标类*\r\n```\r\npublic class SomeServiceImpl implements ISomeService {\r\n\r\n	@Override\r\n	public void doFirst() {\r\n		System.out.println(\"执行doFirst()方法\");\r\n	}\r\n\r\n	@Override\r\n	public String doSecond() {\r\n		System.out.println(\"执行doSecond()方法\");\r\n		return \"abcde\";\r\n	}\r\n}\r\n```\r\n*MyAfterReturningAdvice.java - 后置通知*\r\n```\r\n// 后置通知：可以获取到目标方法的返回结果，但无法改变目标方法的结果\r\npublic class MyAfterReturningAdvice implements AfterReturningAdvice {\r\n	// 在目标方法执行之后执行，returnValue：目标方法的返回值\r\n	@Override\r\n	public void afterReturning(Object returnValue, Method method, Object[] args, Object target) throws Throwable {\r\n		System.out.println(\"执行后置通知方法  returnValue = \" + returnValue);\r\n		if (returnValue != null) {\r\n			returnValue = ((String) returnValue).toUpperCase();\r\n			System.out.println(\"修改过的结果  returnValue = \" + returnValue);\r\n		}\r\n	}\r\n}\r\n```\r\n### 环绕通知 MethodInterceptor\r\n定义环绕通知(在目标方法执行之前之后都会执行)，需要实现 MethodInterceptor 接口。环绕通知，也叫方法拦截器，可以在目标方法调用之前及之后做处理，可以改变目标方法的返回值，也可以改变程序执行流程。\r\n\r\n*MyMethodInterceptor.java*\r\n```\r\n// 环绕通知：可以修改目标方法的返回结果\r\npublic class MyMethodInterceptor implements MethodInterceptor {\r\n	@Override\r\n	public Object invoke(MethodInvocation invocation) throws Throwable {\r\n		System.out.println(\"执行环绕通知：目标方法执行之前\");\r\n		// 执行目标方法\r\n		Object result = invocation.proceed();\r\n		System.out.println(\"执行环绕通知：目标方法执行之后\");\r\n		if(result != null) {\r\n			result = ((String)result).toUpperCase();\r\n		}\r\n		return result;\r\n	}\r\n}\r\n```\r\n\r\n\r\n\r\n\r\n\r\n### 异常通知 ThrowsAdvice\r\n定义异常通知，需要实现 ThrowsAdvice 接口。该接口的主要作用是，在目标方法抛出异常后，根据异常的不同做出相应的处理。当该接口处理完异常后，会简单地将异常再次抛出给目标方法。\r\n\r\n不过，这个接口较为特殊，从形式上看，该接口中没有必须要实现的方法。但，这个接口却确实有必须要实现的方法 `afterThrowing()`。这个方法重载了四种形式。由于使用时，一般只使用其中一种，若要都定义到接口中，则势必要使程序员在使用时必须要实现这四个方法。这是很麻烦的。所以就将该接口定义为了标识接口（没有方法的接口）。这四个方法在打开 `ThrowsAdvice` 源码后，上侧的注释部分可以看到：\r\n![afterThrowing()](https://daily-1252869435.cos.ap-chengdu.myqcloud.com/2018-11-19-10-59-26.png)\r\n不过，在这四种形式中，常用的形式如下： `public void afterThrowing(自定义的异常类 e)` 这里的参数 e 为，与具体业务相关的用户自定义的异常类对象。容器会根据异常类型的不同，自动选择不同的该方法执行。这些方法的执行是在目标方法执行结束后执行的。其它参数则与前面两个通知中方法的参数意义相同。\r\n#### 普通异常\r\n*SomeServiceImpl.java - 目标类*\r\n```\r\n@Override\r\npublic void doFirst() {\r\n	System.out.println(\"执行doFirst()方法\" + 3 / 0);\r\n}\r\n```\r\n*MyThrowsAdvice.java - 异常通知*\r\n```\r\npublic class MyThrowsAdvice implements ThrowsAdvice {\r\n	// 当目标方法抛出与指定类型的异常具有 is-a 关系的异常时，执行当前方法\r\n	public void afterThrowing(Exception ex) {\r\n		System.out.println(\"执行异常通知方法\");\r\n	}\r\n}\r\n```\r\n*输出信息*\r\n```\r\n执行异常通知方法\r\njava.lang.ArithmeticException: / by zero\r\n	...\r\n```\r\n#### 自定义异常\r\n异常分两种：\r\n- 运行时异常，不进行处理，也可以通过编译。\r\n若一个类继承自 RunTimeException，则该异常就是运行时异常\r\n- 编译时异常(受查异常,Checked Exception)，不进行处理，将无法通过编译。\r\n若一个类继承自 Exception，则该异常就是受查异常\r\n\r\n*UserException.java*\r\n```\r\npublic class UserException extends Exception {\r\n	public UserException() {\r\n		super();\r\n	}\r\n\r\n	public UserException(String message) {\r\n		super(message);\r\n	}\r\n}\r\n```\r\n*UsernameException.java*\r\n```\r\npublic class UsernameException extends UserException {\r\n	public UsernameException() {\r\n		super();\r\n	}\r\n\r\n	public UsernameException(String message) {\r\n		super(message);\r\n	}\r\n}\r\n```\r\n*PasswordException.java*\r\n```\r\npublic class PasswordException extends UserException {\r\n	public PasswordException() {\r\n		super();\r\n	}\r\n\r\n	public PasswordException(String message) {\r\n		super(message);\r\n	}\r\n}\r\n```\r\n*MyThrowsAdvice.java - 异常通知*\r\n```\r\npublic class MyThrowsAdvice implements ThrowsAdvice {\r\n	// 当目标方法抛出 UsernameException 异常时，执行当前方法\r\n	public void afterThrowing(UsernameException ex) {\r\n		System.out.println(\"发生用户名异常 ex = \" + ex.getMessage());\r\n	}\r\n	\r\n	// 当目标方法抛出 PasswordException 异常时，执行当前方法\r\n	public void afterThrowing(PasswordException ex) {\r\n		System.out.println(\"发生密码异常 ex = \" + ex.getMessage());\r\n	}\r\n	\r\n	// 当目标方法抛出其它异常时，执行当前方法\r\n	public void afterThrowing(Exception ex) {\r\n		System.out.println(\"发生异常 ex = \" + ex.getMessage());\r\n	}\r\n}\r\n```\r\n*MyTest.java*\r\n```\r\n@Test\r\npublic void test01() throws UserException {\r\n	String resource = \"top/qingrang/aop05/applicationContext.xml\";\r\n	ApplicationContext ac = new ClassPathXmlApplicationContext(resource);\r\n	ISomeService service = (ISomeService) ac.getBean(\"serviceProxy\");\r\n	service.login(\"beijing\", \"222\");\r\n}\r\n```\r\n\r\n\r\n\r\n\r\n\r\n### 同时使用多种通知\r\n*applicationContext.mxl*\r\n```\r\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<beans xmlns=\"http://www.springframework.org/schema/beans\"\r\n    xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\r\n    xsi:schemaLocation=\"\r\n        http://www.springframework.org/schema/beans \r\n        http://www.springframework.org/schema/beans/spring-beans.xsd\">\r\n\r\n    <!-- 注册目标对象 -->\r\n    <bean id=\"someService\" class=\"top.qingrang.aop06.SomeServiceImpl\"/>\r\n\r\n    <!-- 注册切面：通知 -->\r\n    <bean id=\"myBeforeAdvice\" class=\"top.qingrang.aop06.MyMethodBeforeAdvice\"/>\r\n    <bean id=\"myAfterAdvice\" class=\"top.qingrang.aop06.MyAfterReturningAdvice\"/>\r\n\r\n    <!-- 生成代理对象 -->\r\n    <bean id=\"serviceProxy\" class=\"org.springframework.aop.framework.ProxyFactoryBean\">\r\n    	<property name=\"target\" ref=\"someService\"/>\r\n        <!-- 注入多种通知 -->\r\n    	<property name=\"interceptorNames\" value=\"myBeforeAdvice,myAfterAdvice\"/>\r\n    	<!-- <property name=\"interceptorNames\">\r\n    		<array>\r\n    			<value>myBeforeAdvice</value>\r\n    			<value>myAfterAdvice</value>\r\n    		</array>\r\n    	</property> -->\r\n    </bean>\r\n\r\n</beans>\r\n```\r\n\r\n\r\n### 无接口的 CGLIB 代理生成\r\n若不存在接口，则 ProxyFactoryBean 会自动采用 CGLIB 方式生成动态代理。\r\n*SomeService.java - 目标类*\r\n```\r\npublic class SomeService {\r\n	public void doFirst() {\r\n		System.out.println(\"执行doFirst()方法\");\r\n	}\r\n\r\n	public String doSecond() {\r\n		System.out.println(\"执行doSecond()方法\");\r\n		return \"abcde\";\r\n	}\r\n}\r\n```\r\n*MyAfterReturningAdvice.java - 后置通知*\r\n```\r\npublic class MyAfterReturningAdvice implements AfterReturningAdvice {\r\n	// 在目标方法执行之后执行，returnValue：目标方法的返回值\r\n	@Override\r\n	public void afterReturning(Object returnValue, Method method, Object[] args, Object target) throws Throwable {\r\n		System.out.println(\"执行后置通知方法  returnValue = \" + returnValue);\r\n		if (returnValue != null) {\r\n			returnValue = ((String) returnValue).toUpperCase();\r\n			System.out.println(\"修改过的结果  returnValue = \" + returnValue);\r\n		}\r\n	}\r\n}\r\n```\r\n*applicationContext.mxl*\r\n```\r\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<beans xmlns=\"http://www.springframework.org/schema/beans\"\r\n    xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\r\n    xsi:schemaLocation=\"\r\n        http://www.springframework.org/schema/beans \r\n        http://www.springframework.org/schema/beans/spring-beans.xsd\">\r\n\r\n    <!-- 注册目标对象 -->\r\n    <bean id=\"someService\" class=\"top.qingrang.aop07.SomeService\"/>\r\n    \r\n    <!-- 注册切面：通知 -->\r\n    <bean id=\"myAdvice\" class=\"top.qingrang.aop07.MyAfterReturningAdvice\"/>\r\n    \r\n    <!-- 生成代理对象 -->\r\n    <bean id=\"serviceProxy\" class=\"org.springframework.aop.framework.ProxyFactoryBean\">\r\n    	<property name=\"target\" ref=\"someService\"/>\r\n    	<property name=\"interceptorNames\" value=\"myAdvice\"/>\r\n    </bean>\r\n\r\n</beans>\r\n```\r\n*MyTest.java*\r\n```\r\n@Test\r\npublic void test01() {\r\n	String resource = \"top/qingrang/aop07/applicationContext.xml\";\r\n	ApplicationContext ac = new ClassPathXmlApplicationContext(resource);\r\n	SomeService service = (SomeService) ac.getBean(\"serviceProxy\");\r\n	service.doFirst();\r\n	System.out.println(\"==================\");\r\n	String result = service.doSecond();\r\n	System.out.println(result);\r\n}\r\n```\r\n### 有接口的 CGLIB 代理生成 - proxyTargetClass 属性\r\n若存在接口，但又需要使用 CGLIB 生成代理对象，此时，只需要在配置文件中增加一个 proxyTargetClass 属性设置，用于指定强制使用 CGLIB 代理机制。\r\n\r\n![CGLIB 代理](https://daily-1252869435.cos.ap-chengdu.myqcloud.com/2018-11-19-12-44-48.png)\r\n也可指定 optimize（优化）的值为 true，强制使用 CGLIB 代理机制。\r\n![optimize（优化）](https://daily-1252869435.cos.ap-chengdu.myqcloud.com/2018-11-19-12-45-22.png)\r\n查看后台运行情况，可以看到代理生成使用的是 CGLIB 代理机制。\r\n![后台运行情况](https://daily-1252869435.cos.ap-chengdu.myqcloud.com/2018-11-19-12-45-57.png)\r\n\r\n\r\n## 顾问 Advisor',`groups`='Java',`is_show`=1,`publish`=1,`summary`='',`gmt_modified`='2018-11-19'  WHERE  `id` = 250 [ RunTime:0.001084s ]
[ sql ] [ SQL ] SELECT COUNT(*) AS tp_count FROM `note` WHERE  `groups` = 'Java' LIMIT 1 [ RunTime:0.002212s ]
[ sql ] [ SQL ] UPDATE `groups`  SET `g_count`=21  WHERE  `groups` = 'Java' [ RunTime:0.000340s ]
[ sql ] [ SQL ] SELECT COUNT(*) AS tp_count FROM `note` WHERE  `groups` = 'Java' LIMIT 1 [ RunTime:0.001236s ]
[ sql ] [ SQL ] UPDATE `groups`  SET `g_count`=21  WHERE  `groups` = 'Java' [ RunTime:0.000387s ]
---------------------------------------------------------------
[ 2018-11-19T12:40:27+08:00 ] 74.120.168.12 74.120.168.12 GET /daily/admin/note/shownote/id/250.html
[ info ] qingrang.top/daily/admin/note/shownote/id/250.html [运行时间：0.060168s][吞吐率：16.62req/s] [内存消耗：2,013.84kb] [文件加载：55]
[ info ] [ LANG ] /var/www/html/daily/thinkphp/lang/zh-cn.php
[ info ] [ ROUTE ] array (
  'type' => 'module',
  'module' => 
  array (
    0 => 'admin',
    1 => 'note',
    2 => 'shownote',
  ),
)
[ info ] [ HEADER ] array (
  'host' => 'qingrang.top',
  'cache-control' => 'max-age=0',
  'upgrade-insecure-requests' => '1',
  'user-agent' => 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/70.0.3538.102 Safari/537.36',
  'accept' => 'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8',
  'referer' => 'http://qingrang.top/daily/admin/note/editnote/id/250.html',
  'accept-encoding' => 'gzip, deflate',
  'accept-language' => 'zh-CN,zh;q=0.9,la;q=0.8,en;q=0.7,lb;q=0.6',
  'cookie' => 'Hm_lvt_1769181352e9adc950166aada465644e=1541082864,1541122974,1541171416,1542098176; PHPSESSID=cvrea98moc9nvt4dg4igb1ep86',
  'connection' => 'close',
)
[ info ] [ PARAM ] array (
  'id' => '250',
)
[ info ] [ SESSION ] INIT array (
  'id' => '',
  'var_session_id' => '',
  'prefix' => 'think',
  'type' => '',
  'auto_start' => true,
)
[ info ] [ RUN ] app\admin\controller\Note->showNote[ /var/www/html/daily/application/admin/controller/Note.php ]
[ info ] [ DB ] INIT mysql
[ info ] [ VIEW ] /var/www/html/daily/application/admin/view/note/shownote.html [ array (
  0 => 'note',
  1 => 'groups',
) ]
[ info ] [ LOG ] INIT File
[ sql ] [ DB ] CONNECT:[ UseTime:0.000565s ] mysql:host=74.120.168.12;dbname=diary;charset=utf8
[ sql ] [ SQL ] SHOW COLUMNS FROM `note` [ RunTime:0.001622s ]
[ sql ] [ SQL ] SELECT * FROM `note` WHERE  `id` = 250 LIMIT 1 [ RunTime:0.000526s ]
[ sql ] [ SQL ] SHOW COLUMNS FROM `groups` [ RunTime:0.001141s ]
[ sql ] [ SQL ] SELECT * FROM `groups` [ RunTime:0.000292s ]
---------------------------------------------------------------
[ 2018-11-19T12:41:08+08:00 ] 74.120.168.12 74.120.168.12 GET /daily/admin/note
[ info ] qingrang.top/daily/admin/note [运行时间：0.108294s][吞吐率：9.23req/s] [内存消耗：2,345.39kb] [文件加载：56]
[ info ] [ LANG ] /var/www/html/daily/thinkphp/lang/zh-cn.php
[ info ] [ ROUTE ] array (
  'type' => 'module',
  'module' => 
  array (
    0 => 'admin',
    1 => 'note',
    2 => NULL,
  ),
)
[ info ] [ HEADER ] array (
  'host' => 'qingrang.top',
  'cache-control' => 'max-age=0',
  'upgrade-insecure-requests' => '1',
  'user-agent' => 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/70.0.3538.102 Safari/537.36',
  'accept' => 'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8',
  'accept-encoding' => 'gzip, deflate',
  'accept-language' => 'zh-CN,zh;q=0.9,la;q=0.8,en;q=0.7,lb;q=0.6',
  'cookie' => 'Hm_lvt_1769181352e9adc950166aada465644e=1541082864,1541122974,1541171416,1542098176; PHPSESSID=cvrea98moc9nvt4dg4igb1ep86',
  'connection' => 'close',
)
[ info ] [ PARAM ] array (
)
[ info ] [ SESSION ] INIT array (
  'id' => '',
  'var_session_id' => '',
  'prefix' => 'think',
  'type' => '',
  'auto_start' => true,
)
[ info ] [ RUN ] app\admin\controller\Note->notelst[ /var/www/html/daily/application/admin/controller/Note.php ]
[ info ] [ DB ] INIT mysql
[ info ] [ VIEW ] /var/www/html/daily/application/admin/view/note/notelst.html [ array (
  0 => 'stickList',
  1 => 'hide',
  2 => 'list',
  3 => 'list_new',
  4 => 'groups',
  5 => 'groups0',
  6 => 'groups1',
  7 => 'groups2',
  8 => 'count',
  9 => 'year',
  10 => 'default_num',
) ]
[ info ] [ LOG ] INIT File
[ sql ] [ DB ] CONNECT:[ UseTime:0.000605s ] mysql:host=74.120.168.12;dbname=diary;charset=utf8
[ sql ] [ SQL ] SHOW COLUMNS FROM `note` [ RunTime:0.001447s ]
[ sql ] [ SQL ] SELECT * FROM `note` WHERE  `groups` <> 'Personal'  AND `is_show` = 1 ORDER BY date desc,id desc [ RunTime:0.002470s ]
[ sql ] [ SQL ] SELECT * FROM `note` WHERE  `groups` <> 'Personal'  AND `is_show` <> 1 ORDER BY gmt_modified desc LIMIT 5 [ RunTime:0.002798s ]
[ sql ] [ SQL ] SHOW COLUMNS FROM `config` [ RunTime:0.001360s ]
[ sql ] [ SQL ] SELECT * FROM `config` WHERE  `name` = 'hide' LIMIT 1 [ RunTime:0.000466s ]
[ sql ] [ SQL ] SELECT * FROM `note` WHERE  `id` < 5 [ RunTime:0.000537s ]
[ sql ] [ SQL ] SHOW COLUMNS FROM `groups` [ RunTime:0.000945s ]
[ sql ] [ SQL ] SELECT * FROM `groups` [ RunTime:0.000308s ]
[ sql ] [ SQL ] SELECT * FROM `groups` WHERE  `parent_id` = 0  AND `id` <> 2 ORDER BY `groups` [ RunTime:0.000502s ]
[ sql ] [ SQL ] SELECT `groups` FROM `groups` WHERE  `parent_id` = 1 [ RunTime:0.000432s ]
[ sql ] [ SQL ] SELECT * FROM `groups` WHERE  `parent_id` = 2 ORDER BY `groups` [ RunTime:0.000457s ]
[ sql ] [ SQL ] SELECT COUNT(*) AS tp_count FROM `note` WHERE  `groups` = 'Default' LIMIT 1 [ RunTime:0.001340s ]
[ sql ] [ SQL ] SELECT COUNT(*) AS tp_count FROM `note` LIMIT 1 [ RunTime:0.000251s ]
[ sql ] [ SQL ] SHOW COLUMNS FROM `yearlist` [ RunTime:0.001172s ]
[ sql ] [ SQL ] SELECT DISTINCT  `year` FROM `yearlist` ORDER BY year desc [ RunTime:0.000725s ]
---------------------------------------------------------------
[ 2018-11-19T12:41:20+08:00 ] 74.120.168.12 74.120.168.12 GET /daily/admin/note/shownote/id/250.html
[ info ] qingrang.top/daily/admin/note/shownote/id/250.html [运行时间：0.056976s][吞吐率：17.55req/s] [内存消耗：2,013.77kb] [文件加载：55]
[ info ] [ LANG ] /var/www/html/daily/thinkphp/lang/zh-cn.php
[ info ] [ ROUTE ] array (
  'type' => 'module',
  'module' => 
  array (
    0 => 'admin',
    1 => 'note',
    2 => 'shownote',
  ),
)
[ info ] [ HEADER ] array (
  'host' => 'qingrang.top',
  'upgrade-insecure-requests' => '1',
  'user-agent' => 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/70.0.3538.102 Safari/537.36',
  'accept' => 'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8',
  'referer' => 'http://qingrang.top/daily/admin/note',
  'accept-encoding' => 'gzip, deflate',
  'accept-language' => 'zh-CN,zh;q=0.9,la;q=0.8,en;q=0.7,lb;q=0.6',
  'cookie' => 'Hm_lvt_1769181352e9adc950166aada465644e=1541082864,1541122974,1541171416,1542098176; PHPSESSID=cvrea98moc9nvt4dg4igb1ep86',
  'connection' => 'close',
)
[ info ] [ PARAM ] array (
  'id' => '250',
)
[ info ] [ SESSION ] INIT array (
  'id' => '',
  'var_session_id' => '',
  'prefix' => 'think',
  'type' => '',
  'auto_start' => true,
)
[ info ] [ RUN ] app\admin\controller\Note->showNote[ /var/www/html/daily/application/admin/controller/Note.php ]
[ info ] [ DB ] INIT mysql
[ info ] [ VIEW ] /var/www/html/daily/application/admin/view/note/shownote.html [ array (
  0 => 'note',
  1 => 'groups',
) ]
[ info ] [ LOG ] INIT File
[ sql ] [ DB ] CONNECT:[ UseTime:0.000592s ] mysql:host=74.120.168.12;dbname=diary;charset=utf8
[ sql ] [ SQL ] SHOW COLUMNS FROM `note` [ RunTime:0.001495s ]
[ sql ] [ SQL ] SELECT * FROM `note` WHERE  `id` = 250 LIMIT 1 [ RunTime:0.000558s ]
[ sql ] [ SQL ] SHOW COLUMNS FROM `groups` [ RunTime:0.000947s ]
[ sql ] [ SQL ] SELECT * FROM `groups` [ RunTime:0.000278s ]
---------------------------------------------------------------
[ 2018-11-19T12:43:36+08:00 ] 74.120.168.12 74.120.168.12 GET /daily/admin/note/shownote/id/247.html
[ info ] qingrang.top/daily/admin/note/shownote/id/247.html [运行时间：0.105632s][吞吐率：9.47req/s] [内存消耗：2,057.10kb] [文件加载：55]
[ info ] [ LANG ] /var/www/html/daily/thinkphp/lang/zh-cn.php
[ info ] [ ROUTE ] array (
  'type' => 'module',
  'module' => 
  array (
    0 => 'admin',
    1 => 'note',
    2 => 'shownote',
  ),
)
[ info ] [ HEADER ] array (
  'host' => 'qingrang.top',
  'upgrade-insecure-requests' => '1',
  'user-agent' => 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/70.0.3538.102 Safari/537.36',
  'accept' => 'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8',
  'referer' => 'http://qingrang.top/daily/admin/note',
  'accept-encoding' => 'gzip, deflate',
  'accept-language' => 'zh-CN,zh;q=0.9,la;q=0.8,en;q=0.7,lb;q=0.6',
  'cookie' => 'Hm_lvt_1769181352e9adc950166aada465644e=1541082864,1541122974,1541171416,1542098176; PHPSESSID=cvrea98moc9nvt4dg4igb1ep86',
  'connection' => 'close',
)
[ info ] [ PARAM ] array (
  'id' => '247',
)
[ info ] [ SESSION ] INIT array (
  'id' => '',
  'var_session_id' => '',
  'prefix' => 'think',
  'type' => '',
  'auto_start' => true,
)
[ info ] [ RUN ] app\admin\controller\Note->showNote[ /var/www/html/daily/application/admin/controller/Note.php ]
[ info ] [ DB ] INIT mysql
[ info ] [ VIEW ] /var/www/html/daily/application/admin/view/note/shownote.html [ array (
  0 => 'note',
  1 => 'groups',
) ]
[ info ] [ LOG ] INIT File
[ sql ] [ DB ] CONNECT:[ UseTime:0.000689s ] mysql:host=74.120.168.12;dbname=diary;charset=utf8
[ sql ] [ SQL ] SHOW COLUMNS FROM `note` [ RunTime:0.002259s ]
[ sql ] [ SQL ] SELECT * FROM `note` WHERE  `id` = 247 LIMIT 1 [ RunTime:0.000929s ]
[ sql ] [ SQL ] SHOW COLUMNS FROM `groups` [ RunTime:0.002172s ]
[ sql ] [ SQL ] SELECT * FROM `groups` [ RunTime:0.000946s ]
---------------------------------------------------------------
[ 2018-11-19T14:42:48+08:00 ] 74.120.168.12 74.120.168.12 GET /daily/admin/note
[ info ] qingrang.top/daily/admin/note [运行时间：0.043548s][吞吐率：22.96req/s] [内存消耗：1,428.94kb] [文件加载：49]
[ info ] [ LANG ] /var/www/html/daily/thinkphp/lang/zh-cn.php
[ info ] [ ROUTE ] array (
  'type' => 'module',
  'module' => 
  array (
    0 => 'admin',
    1 => 'note',
    2 => NULL,
  ),
)
[ info ] [ HEADER ] array (
  'host' => 'qingrang.top',
  'connection' => 'keep-alive',
  'upgrade-insecure-requests' => '1',
  'user-agent' => 'Mozilla/5.0 (Linux; Android 8.1.0; OE106) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/70.0.3538.80 Mobile Safari/537.36',
  'accept' => 'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8',
  'accept-encoding' => 'gzip, deflate',
  'accept-language' => 'zh-CN,zh;q=0.9,la;q=0.8,en;q=0.7,lb;q=0.6',
  'cookie' => 'Hm_lvt_1769181352e9adc950166aada465644e=1542261202,1542265291,1542510929,1542609887; Hm_lpvt_1769181352e9adc950166aada465644e=1542609887',
)
[ info ] [ PARAM ] array (
)
[ info ] [ SESSION ] INIT array (
  'id' => '',
  'var_session_id' => '',
  'prefix' => 'think',
  'type' => '',
  'auto_start' => true,
)
[ info ] [ VIEW ] /var/www/html/daily/thinkphp/tpl/dispatch_jump.tpl [ array (
  0 => 'code',
  1 => 'msg',
  2 => 'data',
  3 => 'url',
  4 => 'wait',
) ]
[ info ] [ LOG ] INIT File
---------------------------------------------------------------
[ 2018-11-19T14:42:50+08:00 ] 74.120.168.12 74.120.168.12 GET /daily/admin/login/index.html
[ info ] qingrang.top/daily/admin/login/index.html [运行时间：0.039439s][吞吐率：25.36req/s] [内存消耗：1,340.92kb] [文件加载：47]
[ info ] [ LANG ] /var/www/html/daily/thinkphp/lang/zh-cn.php
[ info ] [ ROUTE ] array (
  'type' => 'module',
  'module' => 
  array (
    0 => 'admin',
    1 => 'login',
    2 => 'index',
  ),
)
[ info ] [ HEADER ] array (
  'host' => 'qingrang.top',
  'connection' => 'keep-alive',
  'upgrade-insecure-requests' => '1',
  'user-agent' => 'Mozilla/5.0 (Linux; Android 8.1.0; OE106) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/70.0.3538.80 Mobile Safari/537.36',
  'accept' => 'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8',
  'referer' => 'http://qingrang.top/daily/admin/note',
  'accept-encoding' => 'gzip, deflate',
  'accept-language' => 'zh-CN,zh;q=0.9,la;q=0.8,en;q=0.7,lb;q=0.6',
  'cookie' => 'Hm_lvt_1769181352e9adc950166aada465644e=1542261202,1542265291,1542510929,1542609887; Hm_lpvt_1769181352e9adc950166aada465644e=1542609887; PHPSESSID=9tau1sbgbpk8nheuqk2l9e97b3',
)
[ info ] [ PARAM ] array (
)
[ info ] [ RUN ] app\admin\controller\Login->index[ /var/www/html/daily/application/admin/controller/Login.php ]
[ info ] [ VIEW ] /var/www/html/daily/application/admin/view/login/index.html [ array (
) ]
[ info ] [ LOG ] INIT File
---------------------------------------------------------------
[ 2018-11-19T14:42:56+08:00 ] 74.120.168.12 74.120.168.12 POST /daily/admin/login/index.html
[ info ] qingrang.top/daily/admin/login/index.html [运行时间：0.051036s][吞吐率：19.59req/s] [内存消耗：1,922.55kb] [文件加载：54]
[ info ] [ LANG ] /var/www/html/daily/thinkphp/lang/zh-cn.php
[ info ] [ ROUTE ] array (
  'type' => 'module',
  'module' => 
  array (
    0 => 'admin',
    1 => 'login',
    2 => 'index',
  ),
)
[ info ] [ HEADER ] array (
  'host' => 'qingrang.top',
  'connection' => 'keep-alive',
  'content-length' => '8',
  'cache-control' => 'max-age=0',
  'origin' => 'http://qingrang.top',
  'upgrade-insecure-requests' => '1',
  'content-type' => 'application/x-www-form-urlencoded',
  'user-agent' => 'Mozilla/5.0 (Linux; Android 8.1.0; OE106) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/70.0.3538.80 Mobile Safari/537.36',
  'accept' => 'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8',
  'referer' => 'http://qingrang.top/daily/admin/login/index.html',
  'accept-encoding' => 'gzip, deflate',
  'accept-language' => 'zh-CN,zh;q=0.9,la;q=0.8,en;q=0.7,lb;q=0.6',
  'cookie' => 'Hm_lvt_1769181352e9adc950166aada465644e=1542261202,1542265291,1542510929,1542609887; Hm_lpvt_1769181352e9adc950166aada465644e=1542609887; PHPSESSID=9tau1sbgbpk8nheuqk2l9e97b3',
)
[ info ] [ PARAM ] array (
  'pwd' => 'shao',
)
[ info ] [ RUN ] app\admin\controller\Login->index[ /var/www/html/daily/application/admin/controller/Login.php ]
[ info ] [ DB ] INIT mysql
[ info ] [ SESSION ] INIT array (
  'id' => '',
  'var_session_id' => '',
  'prefix' => 'think',
  'type' => '',
  'auto_start' => true,
)
[ info ] [ LOG ] INIT File
[ sql ] [ DB ] CONNECT:[ UseTime:0.000888s ] mysql:host=74.120.168.12;dbname=diary;charset=utf8
[ sql ] [ SQL ] SHOW COLUMNS FROM `admin` [ RunTime:0.001413s ]
[ sql ] [ SQL ] SELECT * FROM `admin` WHERE  `id` = 1 LIMIT 1 [ RunTime:0.000470s ]
---------------------------------------------------------------
[ 2018-11-19T14:42:57+08:00 ] 74.120.168.12 74.120.168.12 GET /daily/admin/note
[ info ] qingrang.top/daily/admin/note [运行时间：0.080710s][吞吐率：12.39req/s] [内存消耗：2,345.88kb] [文件加载：56]
[ info ] [ LANG ] /var/www/html/daily/thinkphp/lang/zh-cn.php
[ info ] [ ROUTE ] array (
  'type' => 'module',
  'module' => 
  array (
    0 => 'admin',
    1 => 'note',
    2 => NULL,
  ),
)
[ info ] [ HEADER ] array (
  'host' => 'qingrang.top',
  'connection' => 'keep-alive',
  'cache-control' => 'max-age=0',
  'upgrade-insecure-requests' => '1',
  'user-agent' => 'Mozilla/5.0 (Linux; Android 8.1.0; OE106) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/70.0.3538.80 Mobile Safari/537.36',
  'accept' => 'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8',
  'referer' => 'http://qingrang.top/daily/admin/login/index.html',
  'accept-encoding' => 'gzip, deflate',
  'accept-language' => 'zh-CN,zh;q=0.9,la;q=0.8,en;q=0.7,lb;q=0.6',
  'cookie' => 'Hm_lvt_1769181352e9adc950166aada465644e=1542261202,1542265291,1542510929,1542609887; Hm_lpvt_1769181352e9adc950166aada465644e=1542609887; PHPSESSID=9tau1sbgbpk8nheuqk2l9e97b3',
)
[ info ] [ PARAM ] array (
)
[ info ] [ SESSION ] INIT array (
  'id' => '',
  'var_session_id' => '',
  'prefix' => 'think',
  'type' => '',
  'auto_start' => true,
)
[ info ] [ RUN ] app\admin\controller\Note->notelst[ /var/www/html/daily/application/admin/controller/Note.php ]
[ info ] [ DB ] INIT mysql
[ info ] [ VIEW ] /var/www/html/daily/application/admin/view/note/notelst.html [ array (
  0 => 'stickList',
  1 => 'hide',
  2 => 'list',
  3 => 'list_new',
  4 => 'groups',
  5 => 'groups0',
  6 => 'groups1',
  7 => 'groups2',
  8 => 'count',
  9 => 'year',
  10 => 'default_num',
) ]
[ info ] [ LOG ] INIT File
[ sql ] [ DB ] CONNECT:[ UseTime:0.000568s ] mysql:host=74.120.168.12;dbname=diary;charset=utf8
[ sql ] [ SQL ] SHOW COLUMNS FROM `note` [ RunTime:0.001382s ]
[ sql ] [ SQL ] SELECT * FROM `note` WHERE  `groups` <> 'Personal'  AND `is_show` = 1 ORDER BY date desc,id desc [ RunTime:0.002923s ]
[ sql ] [ SQL ] SELECT * FROM `note` WHERE  `groups` <> 'Personal'  AND `is_show` <> 1 ORDER BY gmt_modified desc LIMIT 5 [ RunTime:0.002868s ]
[ sql ] [ SQL ] SHOW COLUMNS FROM `config` [ RunTime:0.001017s ]
[ sql ] [ SQL ] SELECT * FROM `config` WHERE  `name` = 'hide' LIMIT 1 [ RunTime:0.000352s ]
[ sql ] [ SQL ] SELECT * FROM `note` WHERE  `id` < 5 [ RunTime:0.000456s ]
[ sql ] [ SQL ] SHOW COLUMNS FROM `groups` [ RunTime:0.000914s ]
[ sql ] [ SQL ] SELECT * FROM `groups` [ RunTime:0.000373s ]
[ sql ] [ SQL ] SELECT * FROM `groups` WHERE  `parent_id` = 0  AND `id` <> 2 ORDER BY `groups` [ RunTime:0.000434s ]
[ sql ] [ SQL ] SELECT `groups` FROM `groups` WHERE  `parent_id` = 1 [ RunTime:0.000295s ]
[ sql ] [ SQL ] SELECT * FROM `groups` WHERE  `parent_id` = 2 ORDER BY `groups` [ RunTime:0.000387s ]
[ sql ] [ SQL ] SELECT COUNT(*) AS tp_count FROM `note` WHERE  `groups` = 'Default' LIMIT 1 [ RunTime:0.001407s ]
[ sql ] [ SQL ] SELECT COUNT(*) AS tp_count FROM `note` LIMIT 1 [ RunTime:0.000274s ]
[ sql ] [ SQL ] SHOW COLUMNS FROM `yearlist` [ RunTime:0.001028s ]
[ sql ] [ SQL ] SELECT DISTINCT  `year` FROM `yearlist` ORDER BY year desc [ RunTime:0.000637s ]
---------------------------------------------------------------
[ 2018-11-19T14:43:07+08:00 ] 74.120.168.12 74.120.168.12 GET /daily/admin/note/shownote/id/4.html
[ info ] qingrang.top/daily/admin/note/shownote/id/4.html [运行时间：0.055114s][吞吐率：18.14req/s] [内存消耗：1,980.75kb] [文件加载：55]
[ info ] [ LANG ] /var/www/html/daily/thinkphp/lang/zh-cn.php
[ info ] [ ROUTE ] array (
  'type' => 'module',
  'module' => 
  array (
    0 => 'admin',
    1 => 'note',
    2 => 'shownote',
  ),
)
[ info ] [ HEADER ] array (
  'host' => 'qingrang.top',
  'connection' => 'keep-alive',
  'upgrade-insecure-requests' => '1',
  'user-agent' => 'Mozilla/5.0 (Linux; Android 8.1.0; OE106) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/70.0.3538.80 Mobile Safari/537.36',
  'accept' => 'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8',
  'referer' => 'http://qingrang.top/daily/admin/note',
  'accept-encoding' => 'gzip, deflate',
  'accept-language' => 'zh-CN,zh;q=0.9,la;q=0.8,en;q=0.7,lb;q=0.6',
  'cookie' => 'Hm_lvt_1769181352e9adc950166aada465644e=1542261202,1542265291,1542510929,1542609887; Hm_lpvt_1769181352e9adc950166aada465644e=1542609887; PHPSESSID=9tau1sbgbpk8nheuqk2l9e97b3',
)
[ info ] [ PARAM ] array (
  'id' => '4',
)
[ info ] [ SESSION ] INIT array (
  'id' => '',
  'var_session_id' => '',
  'prefix' => 'think',
  'type' => '',
  'auto_start' => true,
)
[ info ] [ RUN ] app\admin\controller\Note->showNote[ /var/www/html/daily/application/admin/controller/Note.php ]
[ info ] [ DB ] INIT mysql
[ info ] [ VIEW ] /var/www/html/daily/application/admin/view/note/shownote.html [ array (
  0 => 'note',
  1 => 'groups',
) ]
[ info ] [ LOG ] INIT File
[ sql ] [ DB ] CONNECT:[ UseTime:0.000635s ] mysql:host=74.120.168.12;dbname=diary;charset=utf8
[ sql ] [ SQL ] SHOW COLUMNS FROM `note` [ RunTime:0.001637s ]
[ sql ] [ SQL ] SELECT * FROM `note` WHERE  `id` = 4 LIMIT 1 [ RunTime:0.000392s ]
[ sql ] [ SQL ] SHOW COLUMNS FROM `groups` [ RunTime:0.001099s ]
[ sql ] [ SQL ] SELECT * FROM `groups` [ RunTime:0.000368s ]
---------------------------------------------------------------
[ 2018-11-19T17:03:02+08:00 ] 74.120.168.12 74.120.168.12 GET /daily/admin/note
[ info ] qingrang.top/daily/admin/note [运行时间：0.045542s][吞吐率：21.96req/s] [内存消耗：1,428.95kb] [文件加载：49]
[ info ] [ LANG ] /var/www/html/daily/thinkphp/lang/zh-cn.php
[ info ] [ ROUTE ] array (
  'type' => 'module',
  'module' => 
  array (
    0 => 'admin',
    1 => 'note',
    2 => NULL,
  ),
)
[ info ] [ HEADER ] array (
  'host' => 'qingrang.top',
  'upgrade-insecure-requests' => '1',
  'user-agent' => 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/70.0.3538.102 Safari/537.36',
  'accept' => 'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8',
  'accept-encoding' => 'gzip, deflate',
  'accept-language' => 'zh-CN,zh;q=0.9,la;q=0.8,en;q=0.7,lb;q=0.6',
  'cookie' => 'Hm_lvt_1769181352e9adc950166aada465644e=1541082864,1541122974,1541171416,1542098176',
  'connection' => 'close',
)
[ info ] [ PARAM ] array (
)
[ info ] [ SESSION ] INIT array (
  'id' => '',
  'var_session_id' => '',
  'prefix' => 'think',
  'type' => '',
  'auto_start' => true,
)
[ info ] [ VIEW ] /var/www/html/daily/thinkphp/tpl/dispatch_jump.tpl [ array (
  0 => 'code',
  1 => 'msg',
  2 => 'data',
  3 => 'url',
  4 => 'wait',
) ]
[ info ] [ LOG ] INIT File
---------------------------------------------------------------
[ 2018-11-19T17:03:08+08:00 ] 74.120.168.12 74.120.168.12 GET /daily/admin/login/index.html
[ info ] qingrang.top/daily/admin/login/index.html [运行时间：0.040812s][吞吐率：24.50req/s] [内存消耗：1,340.77kb] [文件加载：47]
[ info ] [ LANG ] /var/www/html/daily/thinkphp/lang/zh-cn.php
[ info ] [ ROUTE ] array (
  'type' => 'module',
  'module' => 
  array (
    0 => 'admin',
    1 => 'login',
    2 => 'index',
  ),
)
[ info ] [ HEADER ] array (
  'host' => 'qingrang.top',
  'upgrade-insecure-requests' => '1',
  'user-agent' => 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/70.0.3538.102 Safari/537.36',
  'accept' => 'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8',
  'referer' => 'http://qingrang.top/daily/admin/note',
  'accept-encoding' => 'gzip, deflate',
  'accept-language' => 'zh-CN,zh;q=0.9,la;q=0.8,en;q=0.7,lb;q=0.6',
  'cookie' => 'Hm_lvt_1769181352e9adc950166aada465644e=1541082864,1541122974,1541171416,1542098176; PHPSESSID=v8kkq118ersdskp7u4al98lic4',
  'connection' => 'close',
)
[ info ] [ PARAM ] array (
)
[ info ] [ RUN ] app\admin\controller\Login->index[ /var/www/html/daily/application/admin/controller/Login.php ]
[ info ] [ VIEW ] /var/www/html/daily/application/admin/view/login/index.html [ array (
) ]
[ info ] [ LOG ] INIT File
---------------------------------------------------------------
[ 2018-11-19T17:03:19+08:00 ] 74.120.168.12 74.120.168.12 POST /daily/admin/login/index.html
[ info ] qingrang.top/daily/admin/login/index.html [运行时间：0.057151s][吞吐率：17.50req/s] [内存消耗：1,922.37kb] [文件加载：54]
[ info ] [ LANG ] /var/www/html/daily/thinkphp/lang/zh-cn.php
[ info ] [ ROUTE ] array (
  'type' => 'module',
  'module' => 
  array (
    0 => 'admin',
    1 => 'login',
    2 => 'index',
  ),
)
[ info ] [ HEADER ] array (
  'host' => 'qingrang.top',
  'content-length' => '8',
  'cache-control' => 'max-age=0',
  'origin' => 'http://qingrang.top',
  'upgrade-insecure-requests' => '1',
  'content-type' => 'application/x-www-form-urlencoded',
  'user-agent' => 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/70.0.3538.102 Safari/537.36',
  'accept' => 'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8',
  'referer' => 'http://qingrang.top/daily/admin/login/index.html',
  'accept-encoding' => 'gzip, deflate',
  'accept-language' => 'zh-CN,zh;q=0.9,la;q=0.8,en;q=0.7,lb;q=0.6',
  'cookie' => 'Hm_lvt_1769181352e9adc950166aada465644e=1541082864,1541122974,1541171416,1542098176; PHPSESSID=v8kkq118ersdskp7u4al98lic4',
  'connection' => 'close',
)
[ info ] [ PARAM ] array (
  'pwd' => 'shao',
)
[ info ] [ RUN ] app\admin\controller\Login->index[ /var/www/html/daily/application/admin/controller/Login.php ]
[ info ] [ DB ] INIT mysql
[ info ] [ SESSION ] INIT array (
  'id' => '',
  'var_session_id' => '',
  'prefix' => 'think',
  'type' => '',
  'auto_start' => true,
)
[ info ] [ LOG ] INIT File
[ sql ] [ DB ] CONNECT:[ UseTime:0.001282s ] mysql:host=74.120.168.12;dbname=diary;charset=utf8
[ sql ] [ SQL ] SHOW COLUMNS FROM `admin` [ RunTime:0.002347s ]
[ sql ] [ SQL ] SELECT * FROM `admin` WHERE  `id` = 1 LIMIT 1 [ RunTime:0.000515s ]
---------------------------------------------------------------
[ 2018-11-19T17:03:20+08:00 ] 74.120.168.12 74.120.168.12 GET /daily/admin/note
[ info ] qingrang.top/daily/admin/note [运行时间：0.090215s][吞吐率：11.08req/s] [内存消耗：2,345.84kb] [文件加载：56]
[ info ] [ LANG ] /var/www/html/daily/thinkphp/lang/zh-cn.php
[ info ] [ ROUTE ] array (
  'type' => 'module',
  'module' => 
  array (
    0 => 'admin',
    1 => 'note',
    2 => NULL,
  ),
)
[ info ] [ HEADER ] array (
  'host' => 'qingrang.top',
  'cache-control' => 'max-age=0',
  'upgrade-insecure-requests' => '1',
  'user-agent' => 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/70.0.3538.102 Safari/537.36',
  'accept' => 'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8',
  'referer' => 'http://qingrang.top/daily/admin/login/index.html',
  'accept-encoding' => 'gzip, deflate',
  'accept-language' => 'zh-CN,zh;q=0.9,la;q=0.8,en;q=0.7,lb;q=0.6',
  'cookie' => 'Hm_lvt_1769181352e9adc950166aada465644e=1541082864,1541122974,1541171416,1542098176; PHPSESSID=v8kkq118ersdskp7u4al98lic4',
  'connection' => 'close',
)
[ info ] [ PARAM ] array (
)
[ info ] [ SESSION ] INIT array (
  'id' => '',
  'var_session_id' => '',
  'prefix' => 'think',
  'type' => '',
  'auto_start' => true,
)
[ info ] [ RUN ] app\admin\controller\Note->notelst[ /var/www/html/daily/application/admin/controller/Note.php ]
[ info ] [ DB ] INIT mysql
[ info ] [ VIEW ] /var/www/html/daily/application/admin/view/note/notelst.html [ array (
  0 => 'stickList',
  1 => 'hide',
  2 => 'list',
  3 => 'list_new',
  4 => 'groups',
  5 => 'groups0',
  6 => 'groups1',
  7 => 'groups2',
  8 => 'count',
  9 => 'year',
  10 => 'default_num',
) ]
[ info ] [ LOG ] INIT File
[ sql ] [ DB ] CONNECT:[ UseTime:0.000699s ] mysql:host=74.120.168.12;dbname=diary;charset=utf8
[ sql ] [ SQL ] SHOW COLUMNS FROM `note` [ RunTime:0.001444s ]
[ sql ] [ SQL ] SELECT * FROM `note` WHERE  `groups` <> 'Personal'  AND `is_show` = 1 ORDER BY date desc,id desc [ RunTime:0.003104s ]
[ sql ] [ SQL ] SELECT * FROM `note` WHERE  `groups` <> 'Personal'  AND `is_show` <> 1 ORDER BY gmt_modified desc LIMIT 5 [ RunTime:0.002649s ]
[ sql ] [ SQL ] SHOW COLUMNS FROM `config` [ RunTime:0.001141s ]
[ sql ] [ SQL ] SELECT * FROM `config` WHERE  `name` = 'hide' LIMIT 1 [ RunTime:0.000354s ]
[ sql ] [ SQL ] SELECT * FROM `note` WHERE  `id` < 5 [ RunTime:0.000634s ]
[ sql ] [ SQL ] SHOW COLUMNS FROM `groups` [ RunTime:0.000975s ]
[ sql ] [ SQL ] SELECT * FROM `groups` [ RunTime:0.000302s ]
[ sql ] [ SQL ] SELECT * FROM `groups` WHERE  `parent_id` = 0  AND `id` <> 2 ORDER BY `groups` [ RunTime:0.000414s ]
[ sql ] [ SQL ] SELECT `groups` FROM `groups` WHERE  `parent_id` = 1 [ RunTime:0.000468s ]
[ sql ] [ SQL ] SELECT * FROM `groups` WHERE  `parent_id` = 2 ORDER BY `groups` [ RunTime:0.000557s ]
[ sql ] [ SQL ] SELECT COUNT(*) AS tp_count FROM `note` WHERE  `groups` = 'Default' LIMIT 1 [ RunTime:0.001444s ]
[ sql ] [ SQL ] SELECT COUNT(*) AS tp_count FROM `note` LIMIT 1 [ RunTime:0.000236s ]
[ sql ] [ SQL ] SHOW COLUMNS FROM `yearlist` [ RunTime:0.001051s ]
[ sql ] [ SQL ] SELECT DISTINCT  `year` FROM `yearlist` ORDER BY year desc [ RunTime:0.000961s ]
---------------------------------------------------------------
[ 2018-11-19T17:24:03+08:00 ] 74.120.168.12 74.120.168.12 GET /daily/admin/note
[ info ] qingrang.top/daily/admin/note [运行时间：0.085840s][吞吐率：11.65req/s] [内存消耗：2,345.03kb] [文件加载：56]
[ info ] [ LANG ] /var/www/html/daily/thinkphp/lang/zh-cn.php
[ info ] [ ROUTE ] array (
  'type' => 'module',
  'module' => 
  array (
    0 => 'admin',
    1 => 'note',
    2 => NULL,
  ),
)
[ info ] [ HEADER ] array (
  'host' => 'qingrang.top',
  'upgrade-insecure-requests' => '1',
  'user-agent' => 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/70.0.3538.102 Safari/537.36',
  'accept' => 'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8',
  'accept-encoding' => 'gzip, deflate',
  'accept-language' => 'zh-CN,zh;q=0.9,la;q=0.8,en;q=0.7,lb;q=0.6',
  'cookie' => 'Hm_lvt_1769181352e9adc950166aada465644e=1541082864,1541122974,1541171416,1542098176; PHPSESSID=v8kkq118ersdskp7u4al98lic4',
  'connection' => 'close',
)
[ info ] [ PARAM ] array (
)
[ info ] [ SESSION ] INIT array (
  'id' => '',
  'var_session_id' => '',
  'prefix' => 'think',
  'type' => '',
  'auto_start' => true,
)
[ info ] [ RUN ] app\admin\controller\Note->notelst[ /var/www/html/daily/application/admin/controller/Note.php ]
[ info ] [ DB ] INIT mysql
[ info ] [ VIEW ] /var/www/html/daily/application/admin/view/note/notelst.html [ array (
  0 => 'stickList',
  1 => 'hide',
  2 => 'list',
  3 => 'list_new',
  4 => 'groups',
  5 => 'groups0',
  6 => 'groups1',
  7 => 'groups2',
  8 => 'count',
  9 => 'year',
  10 => 'default_num',
) ]
[ info ] [ LOG ] INIT File
[ sql ] [ DB ] CONNECT:[ UseTime:0.000670s ] mysql:host=74.120.168.12;dbname=diary;charset=utf8
[ sql ] [ SQL ] SHOW COLUMNS FROM `note` [ RunTime:0.001833s ]
[ sql ] [ SQL ] SELECT * FROM `note` WHERE  `groups` <> 'Personal'  AND `is_show` = 1 ORDER BY date desc,id desc [ RunTime:0.002510s ]
[ sql ] [ SQL ] SELECT * FROM `note` WHERE  `groups` <> 'Personal'  AND `is_show` <> 1 ORDER BY gmt_modified desc LIMIT 5 [ RunTime:0.003167s ]
[ sql ] [ SQL ] SHOW COLUMNS FROM `config` [ RunTime:0.001215s ]
[ sql ] [ SQL ] SELECT * FROM `config` WHERE  `name` = 'hide' LIMIT 1 [ RunTime:0.000340s ]
[ sql ] [ SQL ] SELECT * FROM `note` WHERE  `id` < 5 [ RunTime:0.000429s ]
[ sql ] [ SQL ] SHOW COLUMNS FROM `groups` [ RunTime:0.001019s ]
[ sql ] [ SQL ] SELECT * FROM `groups` [ RunTime:0.000351s ]
[ sql ] [ SQL ] SELECT * FROM `groups` WHERE  `parent_id` = 0  AND `id` <> 2 ORDER BY `groups` [ RunTime:0.000477s ]
[ sql ] [ SQL ] SELECT `groups` FROM `groups` WHERE  `parent_id` = 1 [ RunTime:0.000369s ]
[ sql ] [ SQL ] SELECT * FROM `groups` WHERE  `parent_id` = 2 ORDER BY `groups` [ RunTime:0.000437s ]
[ sql ] [ SQL ] SELECT COUNT(*) AS tp_count FROM `note` WHERE  `groups` = 'Default' LIMIT 1 [ RunTime:0.001549s ]
[ sql ] [ SQL ] SELECT COUNT(*) AS tp_count FROM `note` LIMIT 1 [ RunTime:0.000273s ]
[ sql ] [ SQL ] SHOW COLUMNS FROM `yearlist` [ RunTime:0.001390s ]
[ sql ] [ SQL ] SELECT DISTINCT  `year` FROM `yearlist` ORDER BY year desc [ RunTime:0.000757s ]
---------------------------------------------------------------
[ 2018-11-19T17:32:40+08:00 ] 74.120.168.12 74.120.168.12 GET /daily/admin/note/editnote/id/250.html
[ info ] qingrang.top/daily/admin/note/editnote/id/250.html [运行时间：0.067519s][吞吐率：14.81req/s] [内存消耗：2,062.09kb] [文件加载：56]
[ info ] [ LANG ] /var/www/html/daily/thinkphp/lang/zh-cn.php
[ info ] [ ROUTE ] array (
  'type' => 'module',
  'module' => 
  array (
    0 => 'admin',
    1 => 'note',
    2 => 'editnote',
  ),
)
[ info ] [ HEADER ] array (
  'host' => 'qingrang.top',
  'upgrade-insecure-requests' => '1',
  'user-agent' => 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/70.0.3538.102 Safari/537.36',
  'accept' => 'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8',
  'referer' => 'http://qingrang.top/daily/admin/note',
  'accept-encoding' => 'gzip, deflate',
  'accept-language' => 'zh-CN,zh;q=0.9,la;q=0.8,en;q=0.7,lb;q=0.6',
  'cookie' => 'Hm_lvt_1769181352e9adc950166aada465644e=1541082864,1541122974,1541171416,1542098176; PHPSESSID=v8kkq118ersdskp7u4al98lic4',
  'connection' => 'close',
)
[ info ] [ PARAM ] array (
  'id' => '250',
)
[ info ] [ SESSION ] INIT array (
  'id' => '',
  'var_session_id' => '',
  'prefix' => 'think',
  'type' => '',
  'auto_start' => true,
)
[ info ] [ RUN ] app\admin\controller\Note->editNote[ /var/www/html/daily/application/admin/controller/Note.php ]
[ info ] [ DB ] INIT mysql
[ info ] [ VIEW ] /var/www/html/daily/application/admin/view/note/editnote.html [ array (
  0 => 'note',
  1 => 'groups',
) ]
[ info ] [ LOG ] INIT File
[ sql ] [ DB ] CONNECT:[ UseTime:0.000972s ] mysql:host=74.120.168.12;dbname=diary;charset=utf8
[ sql ] [ SQL ] SHOW COLUMNS FROM `note` [ RunTime:0.001830s ]
[ sql ] [ SQL ] SELECT * FROM `note` WHERE  `id` = 250 LIMIT 1 [ RunTime:0.000664s ]
[ sql ] [ SQL ] SHOW COLUMNS FROM `groups` [ RunTime:0.001023s ]
[ sql ] [ SQL ] SELECT * FROM `groups` [ RunTime:0.000346s ]
---------------------------------------------------------------
[ 2018-11-19T18:49:13+08:00 ] 74.120.168.12 74.120.168.12 GET /daily/admin/note
[ info ] qingrang.top/daily/admin/note [运行时间：0.041398s][吞吐率：24.16req/s] [内存消耗：1,428.95kb] [文件加载：49]
[ info ] [ LANG ] /var/www/html/daily/thinkphp/lang/zh-cn.php
[ info ] [ ROUTE ] array (
  'type' => 'module',
  'module' => 
  array (
    0 => 'admin',
    1 => 'note',
    2 => NULL,
  ),
)
[ info ] [ HEADER ] array (
  'host' => 'qingrang.top',
  'upgrade-insecure-requests' => '1',
  'user-agent' => 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/70.0.3538.102 Safari/537.36',
  'accept' => 'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8',
  'accept-encoding' => 'gzip, deflate',
  'accept-language' => 'zh-CN,zh;q=0.9,la;q=0.8,en;q=0.7,lb;q=0.6',
  'cookie' => 'Hm_lvt_1769181352e9adc950166aada465644e=1541082864,1541122974,1541171416,1542098176',
  'connection' => 'close',
)
[ info ] [ PARAM ] array (
)
[ info ] [ SESSION ] INIT array (
  'id' => '',
  'var_session_id' => '',
  'prefix' => 'think',
  'type' => '',
  'auto_start' => true,
)
[ info ] [ VIEW ] /var/www/html/daily/thinkphp/tpl/dispatch_jump.tpl [ array (
  0 => 'code',
  1 => 'msg',
  2 => 'data',
  3 => 'url',
  4 => 'wait',
) ]
[ info ] [ LOG ] INIT File
---------------------------------------------------------------
[ 2018-11-19T18:49:15+08:00 ] 74.120.168.12 74.120.168.12 GET /daily/admin/login/index.html
[ info ] qingrang.top/daily/admin/login/index.html [运行时间：0.037550s][吞吐率：26.63req/s] [内存消耗：1,340.77kb] [文件加载：47]
[ info ] [ LANG ] /var/www/html/daily/thinkphp/lang/zh-cn.php
[ info ] [ ROUTE ] array (
  'type' => 'module',
  'module' => 
  array (
    0 => 'admin',
    1 => 'login',
    2 => 'index',
  ),
)
[ info ] [ HEADER ] array (
  'host' => 'qingrang.top',
  'upgrade-insecure-requests' => '1',
  'user-agent' => 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/70.0.3538.102 Safari/537.36',
  'accept' => 'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8',
  'referer' => 'http://qingrang.top/daily/admin/note',
  'accept-encoding' => 'gzip, deflate',
  'accept-language' => 'zh-CN,zh;q=0.9,la;q=0.8,en;q=0.7,lb;q=0.6',
  'cookie' => 'Hm_lvt_1769181352e9adc950166aada465644e=1541082864,1541122974,1541171416,1542098176; PHPSESSID=2itucolgeg6ju9b7e0uomjso34',
  'connection' => 'close',
)
[ info ] [ PARAM ] array (
)
[ info ] [ RUN ] app\admin\controller\Login->index[ /var/www/html/daily/application/admin/controller/Login.php ]
[ info ] [ VIEW ] /var/www/html/daily/application/admin/view/login/index.html [ array (
) ]
[ info ] [ LOG ] INIT File
---------------------------------------------------------------
[ 2018-11-19T18:49:20+08:00 ] 74.120.168.12 74.120.168.12 POST /daily/admin/login/index.html
[ info ] qingrang.top/daily/admin/login/index.html [运行时间：0.058844s][吞吐率：16.99req/s] [内存消耗：1,922.37kb] [文件加载：54]
[ info ] [ LANG ] /var/www/html/daily/thinkphp/lang/zh-cn.php
[ info ] [ ROUTE ] array (
  'type' => 'module',
  'module' => 
  array (
    0 => 'admin',
    1 => 'login',
    2 => 'index',
  ),
)
[ info ] [ HEADER ] array (
  'host' => 'qingrang.top',
  'content-length' => '8',
  'cache-control' => 'max-age=0',
  'origin' => 'http://qingrang.top',
  'upgrade-insecure-requests' => '1',
  'content-type' => 'application/x-www-form-urlencoded',
  'user-agent' => 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/70.0.3538.102 Safari/537.36',
  'accept' => 'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8',
  'referer' => 'http://qingrang.top/daily/admin/login/index.html',
  'accept-encoding' => 'gzip, deflate',
  'accept-language' => 'zh-CN,zh;q=0.9,la;q=0.8,en;q=0.7,lb;q=0.6',
  'cookie' => 'Hm_lvt_1769181352e9adc950166aada465644e=1541082864,1541122974,1541171416,1542098176; PHPSESSID=2itucolgeg6ju9b7e0uomjso34',
  'connection' => 'close',
)
[ info ] [ PARAM ] array (
  'pwd' => 'shao',
)
[ info ] [ RUN ] app\admin\controller\Login->index[ /var/www/html/daily/application/admin/controller/Login.php ]
[ info ] [ DB ] INIT mysql
[ info ] [ SESSION ] INIT array (
  'id' => '',
  'var_session_id' => '',
  'prefix' => 'think',
  'type' => '',
  'auto_start' => true,
)
[ info ] [ LOG ] INIT File
[ sql ] [ DB ] CONNECT:[ UseTime:0.000779s ] mysql:host=74.120.168.12;dbname=diary;charset=utf8
[ sql ] [ SQL ] SHOW COLUMNS FROM `admin` [ RunTime:0.001819s ]
[ sql ] [ SQL ] SELECT * FROM `admin` WHERE  `id` = 1 LIMIT 1 [ RunTime:0.000461s ]
---------------------------------------------------------------
[ 2018-11-19T18:49:20+08:00 ] 74.120.168.12 74.120.168.12 GET /daily/admin/note
[ info ] qingrang.top/daily/admin/note [运行时间：0.098941s][吞吐率：10.11req/s] [内存消耗：2,345.84kb] [文件加载：56]
[ info ] [ LANG ] /var/www/html/daily/thinkphp/lang/zh-cn.php
[ info ] [ ROUTE ] array (
  'type' => 'module',
  'module' => 
  array (
    0 => 'admin',
    1 => 'note',
    2 => NULL,
  ),
)
[ info ] [ HEADER ] array (
  'host' => 'qingrang.top',
  'cache-control' => 'max-age=0',
  'upgrade-insecure-requests' => '1',
  'user-agent' => 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/70.0.3538.102 Safari/537.36',
  'accept' => 'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8',
  'referer' => 'http://qingrang.top/daily/admin/login/index.html',
  'accept-encoding' => 'gzip, deflate',
  'accept-language' => 'zh-CN,zh;q=0.9,la;q=0.8,en;q=0.7,lb;q=0.6',
  'cookie' => 'Hm_lvt_1769181352e9adc950166aada465644e=1541082864,1541122974,1541171416,1542098176; PHPSESSID=2itucolgeg6ju9b7e0uomjso34',
  'connection' => 'close',
)
[ info ] [ PARAM ] array (
)
[ info ] [ SESSION ] INIT array (
  'id' => '',
  'var_session_id' => '',
  'prefix' => 'think',
  'type' => '',
  'auto_start' => true,
)
[ info ] [ RUN ] app\admin\controller\Note->notelst[ /var/www/html/daily/application/admin/controller/Note.php ]
[ info ] [ DB ] INIT mysql
[ info ] [ VIEW ] /var/www/html/daily/application/admin/view/note/notelst.html [ array (
  0 => 'stickList',
  1 => 'hide',
  2 => 'list',
  3 => 'list_new',
  4 => 'groups',
  5 => 'groups0',
  6 => 'groups1',
  7 => 'groups2',
  8 => 'count',
  9 => 'year',
  10 => 'default_num',
) ]
[ info ] [ LOG ] INIT File
[ sql ] [ DB ] CONNECT:[ UseTime:0.000583s ] mysql:host=74.120.168.12;dbname=diary;charset=utf8
[ sql ] [ SQL ] SHOW COLUMNS FROM `note` [ RunTime:0.001321s ]
[ sql ] [ SQL ] SELECT * FROM `note` WHERE  `groups` <> 'Personal'  AND `is_show` = 1 ORDER BY date desc,id desc [ RunTime:0.002665s ]
[ sql ] [ SQL ] SELECT * FROM `note` WHERE  `groups` <> 'Personal'  AND `is_show` <> 1 ORDER BY gmt_modified desc LIMIT 5 [ RunTime:0.002880s ]
[ sql ] [ SQL ] SHOW COLUMNS FROM `config` [ RunTime:0.001034s ]
[ sql ] [ SQL ] SELECT * FROM `config` WHERE  `name` = 'hide' LIMIT 1 [ RunTime:0.000351s ]
[ sql ] [ SQL ] SELECT * FROM `note` WHERE  `id` < 5 [ RunTime:0.000490s ]
[ sql ] [ SQL ] SHOW COLUMNS FROM `groups` [ RunTime:0.000857s ]
[ sql ] [ SQL ] SELECT * FROM `groups` [ RunTime:0.000440s ]
[ sql ] [ SQL ] SELECT * FROM `groups` WHERE  `parent_id` = 0  AND `id` <> 2 ORDER BY `groups` [ RunTime:0.000429s ]
[ sql ] [ SQL ] SELECT `groups` FROM `groups` WHERE  `parent_id` = 1 [ RunTime:0.000342s ]
[ sql ] [ SQL ] SELECT * FROM `groups` WHERE  `parent_id` = 2 ORDER BY `groups` [ RunTime:0.000368s ]
[ sql ] [ SQL ] SELECT COUNT(*) AS tp_count FROM `note` WHERE  `groups` = 'Default' LIMIT 1 [ RunTime:0.001470s ]
[ sql ] [ SQL ] SELECT COUNT(*) AS tp_count FROM `note` LIMIT 1 [ RunTime:0.000345s ]
[ sql ] [ SQL ] SHOW COLUMNS FROM `yearlist` [ RunTime:0.001041s ]
[ sql ] [ SQL ] SELECT DISTINCT  `year` FROM `yearlist` ORDER BY year desc [ RunTime:0.000672s ]
---------------------------------------------------------------
[ 2018-11-19T19:08:58+08:00 ] 74.120.168.12 74.120.168.12 GET /daily/admin/note/shownote/id/249.html
[ info ] qingrang.top/daily/admin/note/shownote/id/249.html [运行时间：0.059044s][吞吐率：16.94req/s] [内存消耗：1,984.31kb] [文件加载：55]
[ info ] [ LANG ] /var/www/html/daily/thinkphp/lang/zh-cn.php
[ info ] [ ROUTE ] array (
  'type' => 'module',
  'module' => 
  array (
    0 => 'admin',
    1 => 'note',
    2 => 'shownote',
  ),
)
[ info ] [ HEADER ] array (
  'host' => 'qingrang.top',
  'upgrade-insecure-requests' => '1',
  'user-agent' => 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/70.0.3538.102 Safari/537.36',
  'accept' => 'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8',
  'referer' => 'http://qingrang.top/daily/admin/note',
  'accept-encoding' => 'gzip, deflate',
  'accept-language' => 'zh-CN,zh;q=0.9,la;q=0.8,en;q=0.7,lb;q=0.6',
  'cookie' => 'Hm_lvt_1769181352e9adc950166aada465644e=1541082864,1541122974,1541171416,1542098176; PHPSESSID=2itucolgeg6ju9b7e0uomjso34',
  'connection' => 'close',
)
[ info ] [ PARAM ] array (
  'id' => '249',
)
[ info ] [ SESSION ] INIT array (
  'id' => '',
  'var_session_id' => '',
  'prefix' => 'think',
  'type' => '',
  'auto_start' => true,
)
[ info ] [ RUN ] app\admin\controller\Note->showNote[ /var/www/html/daily/application/admin/controller/Note.php ]
[ info ] [ DB ] INIT mysql
[ info ] [ VIEW ] /var/www/html/daily/application/admin/view/note/shownote.html [ array (
  0 => 'note',
  1 => 'groups',
) ]
[ info ] [ LOG ] INIT File
[ sql ] [ DB ] CONNECT:[ UseTime:0.000593s ] mysql:host=74.120.168.12;dbname=diary;charset=utf8
[ sql ] [ SQL ] SHOW COLUMNS FROM `note` [ RunTime:0.001537s ]
[ sql ] [ SQL ] SELECT * FROM `note` WHERE  `id` = 249 LIMIT 1 [ RunTime:0.000619s ]
[ sql ] [ SQL ] SHOW COLUMNS FROM `groups` [ RunTime:0.001040s ]
[ sql ] [ SQL ] SELECT * FROM `groups` [ RunTime:0.000435s ]
---------------------------------------------------------------
[ 2018-11-19T19:20:51+08:00 ] 74.120.168.12 74.120.168.12 GET /daily/admin/note/shownote/id/165.html
[ info ] qingrang.top/daily/admin/note/shownote/id/165.html [运行时间：0.065970s][吞吐率：15.16req/s] [内存消耗：1,982.18kb] [文件加载：55]
[ info ] [ LANG ] /var/www/html/daily/thinkphp/lang/zh-cn.php
[ info ] [ ROUTE ] array (
  'type' => 'module',
  'module' => 
  array (
    0 => 'admin',
    1 => 'note',
    2 => 'shownote',
  ),
)
[ info ] [ HEADER ] array (
  'host' => 'qingrang.top',
  'upgrade-insecure-requests' => '1',
  'user-agent' => 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/70.0.3538.102 Safari/537.36',
  'accept' => 'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8',
  'referer' => 'http://qingrang.top/daily/admin/note',
  'accept-encoding' => 'gzip, deflate',
  'accept-language' => 'zh-CN,zh;q=0.9,la;q=0.8,en;q=0.7,lb;q=0.6',
  'cookie' => 'Hm_lvt_1769181352e9adc950166aada465644e=1541082864,1541122974,1541171416,1542098176; PHPSESSID=2itucolgeg6ju9b7e0uomjso34',
  'connection' => 'close',
)
[ info ] [ PARAM ] array (
  'id' => '165',
)
[ info ] [ SESSION ] INIT array (
  'id' => '',
  'var_session_id' => '',
  'prefix' => 'think',
  'type' => '',
  'auto_start' => true,
)
[ info ] [ RUN ] app\admin\controller\Note->showNote[ /var/www/html/daily/application/admin/controller/Note.php ]
[ info ] [ DB ] INIT mysql
[ info ] [ VIEW ] /var/www/html/daily/application/admin/view/note/shownote.html [ array (
  0 => 'note',
  1 => 'groups',
) ]
[ info ] [ LOG ] INIT File
[ sql ] [ DB ] CONNECT:[ UseTime:0.001532s ] mysql:host=74.120.168.12;dbname=diary;charset=utf8
[ sql ] [ SQL ] SHOW COLUMNS FROM `note` [ RunTime:0.002601s ]
[ sql ] [ SQL ] SELECT * FROM `note` WHERE  `id` = 165 LIMIT 1 [ RunTime:0.000799s ]
[ sql ] [ SQL ] SHOW COLUMNS FROM `groups` [ RunTime:0.000975s ]
[ sql ] [ SQL ] SELECT * FROM `groups` [ RunTime:0.000323s ]
---------------------------------------------------------------
[ 2018-11-19T19:20:59+08:00 ] 74.120.168.12 74.120.168.12 GET /daily/admin/note/editnote/id/165.html
[ info ] qingrang.top/daily/admin/note/editnote/id/165.html [运行时间：0.061095s][吞吐率：16.37req/s] [内存消耗：2,030.50kb] [文件加载：56]
[ info ] [ LANG ] /var/www/html/daily/thinkphp/lang/zh-cn.php
[ info ] [ ROUTE ] array (
  'type' => 'module',
  'module' => 
  array (
    0 => 'admin',
    1 => 'note',
    2 => 'editnote',
  ),
)
[ info ] [ HEADER ] array (
  'host' => 'qingrang.top',
  'upgrade-insecure-requests' => '1',
  'user-agent' => 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/70.0.3538.102 Safari/537.36',
  'accept' => 'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8',
  'referer' => 'http://qingrang.top/daily/admin/note',
  'accept-encoding' => 'gzip, deflate',
  'accept-language' => 'zh-CN,zh;q=0.9,la;q=0.8,en;q=0.7,lb;q=0.6',
  'cookie' => 'Hm_lvt_1769181352e9adc950166aada465644e=1541082864,1541122974,1541171416,1542098176; PHPSESSID=2itucolgeg6ju9b7e0uomjso34',
  'connection' => 'close',
)
[ info ] [ PARAM ] array (
  'id' => '165',
)
[ info ] [ SESSION ] INIT array (
  'id' => '',
  'var_session_id' => '',
  'prefix' => 'think',
  'type' => '',
  'auto_start' => true,
)
[ info ] [ RUN ] app\admin\controller\Note->editNote[ /var/www/html/daily/application/admin/controller/Note.php ]
[ info ] [ DB ] INIT mysql
[ info ] [ VIEW ] /var/www/html/daily/application/admin/view/note/editnote.html [ array (
  0 => 'note',
  1 => 'groups',
) ]
[ info ] [ LOG ] INIT File
[ sql ] [ DB ] CONNECT:[ UseTime:0.000660s ] mysql:host=74.120.168.12;dbname=diary;charset=utf8
[ sql ] [ SQL ] SHOW COLUMNS FROM `note` [ RunTime:0.001728s ]
[ sql ] [ SQL ] SELECT * FROM `note` WHERE  `id` = 165 LIMIT 1 [ RunTime:0.000444s ]
[ sql ] [ SQL ] SHOW COLUMNS FROM `groups` [ RunTime:0.000855s ]
[ sql ] [ SQL ] SELECT * FROM `groups` [ RunTime:0.000388s ]
---------------------------------------------------------------
[ 2018-11-19T19:21:04+08:00 ] 74.120.168.12 74.120.168.12 POST /daily/admin/note/updatenote/id/165.html
[ info ] qingrang.top/daily/admin/note/updatenote/id/165.html [运行时间：0.099746s][吞吐率：10.03req/s] [内存消耗：2,061.93kb] [文件加载：58]
[ info ] [ LANG ] /var/www/html/daily/thinkphp/lang/zh-cn.php
[ info ] [ ROUTE ] array (
  'type' => 'module',
  'module' => 
  array (
    0 => 'admin',
    1 => 'note',
    2 => 'updatenote',
  ),
)
[ info ] [ HEADER ] array (
  'host' => 'qingrang.top',
  'content-length' => '5088',
  'cache-control' => 'max-age=0',
  'origin' => 'http://qingrang.top',
  'upgrade-insecure-requests' => '1',
  'content-type' => 'application/x-www-form-urlencoded',
  'user-agent' => 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/70.0.3538.102 Safari/537.36',
  'accept' => 'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8',
  'referer' => 'http://qingrang.top/daily/admin/note/editnote/id/165.html',
  'accept-encoding' => 'gzip, deflate',
  'accept-language' => 'zh-CN,zh;q=0.9,la;q=0.8,en;q=0.7,lb;q=0.6',
  'cookie' => 'Hm_lvt_1769181352e9adc950166aada465644e=1541082864,1541122974,1541171416,1542098176; PHPSESSID=2itucolgeg6ju9b7e0uomjso34',
  'connection' => 'close',
)
[ info ] [ PARAM ] array (
  'summary' => '',
  'content' => '# 旅行--骑行川藏线
>对你而言旅行是什么？

对我而言，旅行就是去没有去过或是去了还想再去的地方走一走未曾走过的僻静小巷，看一看没有见过的山水树木，尝一尝不合口味的当地美食。

>你能从旅行中得到什么？

当下的快乐，回忆的舒适。

>旅行的意义是什么？

锻炼毅力，增加见识，洗涤灵魂？我从来没有想过要给旅行赋予这样的意义，与我而言，旅行，就是玩，让我充满快乐的玩。

>网友评论：
反正我是没有勇气去骑行川藏线的，也不建议认识的人去骑行川藏线，所以只能永远羡慕我这个最好的朋友一直都在过他想过的生活。

或许是因为正处于青年时代，我或多或少都会有一些“书生气”，喜欢一些激扬的文字，“世界那么大，我想去看看”，“再不疯狂，我们就老了”之类的，觉得说的太有道理了。于是，我将远方当成是梦想，淡泊名利。

但不可否认，目前我是一边挥洒着父母的血汗钱，一边说着视金钱为粪土。每个人在不同的阶段都有着不同的责任。若家人遇到些病痛需要去医院时，再对比着你那微薄的收入，这时候你还会想着 “世界那么大，我想去看看” 吗？

理论上，每个人都有自己选择的权力和自由，但人生活在社会中，从来都不是一个人，你和你身边的所有人都有着千丝万缕的联系，要时刻清楚自己所承担的责任，在选择的时候，要更加理性一些。有些人看似很洒脱，只是他的那份责任有人替他分担了而已。',
  'groups' => 'Default',
  'showsel' => '0',
  'showse2' => '1',
  'id' => '165',
)
[ info ] [ SESSION ] INIT array (
  'id' => '',
  'var_session_id' => '',
  'prefix' => 'think',
  'type' => '',
  'auto_start' => true,
)
[ info ] [ RUN ] app\admin\controller\Note->updateNote[ /var/www/html/daily/application/admin/controller/Note.php ]
[ info ] [ DB ] INIT mysql
[ info ] [ CACHE ] INIT File
[ info ] [ LOG ] INIT File
[ sql ] [ DB ] CONNECT:[ UseTime:0.000810s ] mysql:host=74.120.168.12;dbname=diary;charset=utf8
[ sql ] [ SQL ] SHOW COLUMNS FROM `note` [ RunTime:0.002154s ]
[ sql ] [ SQL ] SELECT * FROM `note` WHERE  `id` = 165 LIMIT 1 [ RunTime:0.000594s ]
[ sql ] [ SQL ] SELECT `groups` FROM `note` WHERE  `id` = 165 LIMIT 1 [ RunTime:0.000451s ]
[ sql ] [ SQL ] SHOW COLUMNS FROM `groups` [ RunTime:0.001425s ]
[ sql ] [ SQL ] SELECT `parent_id` FROM `groups` WHERE  `groups` = 'Default' LIMIT 1 [ RunTime:0.000472s ]
[ sql ] [ SQL ] SELECT `groups` FROM `groups` WHERE  `id` = 0 LIMIT 1 [ RunTime:0.000508s ]
[ sql ] [ SQL ] SELECT `id` FROM `groups` WHERE  `groups` = 'Default' LIMIT 1 [ RunTime:0.000422s ]
[ sql ] [ SQL ] UPDATE `note`  SET `id`=165,`p_id`=1,`title`='旅行--骑行川藏线\r',`content`='# 旅行--骑行川藏线\r\n>对你而言旅行是什么？\r\n\r\n对我而言，旅行就是去没有去过或是去了还想再去的地方走一走未曾走过的僻静小巷，看一看没有见过的山水树木，尝一尝不合口味的当地美食。\r\n\r\n>你能从旅行中得到什么？\r\n\r\n当下的快乐，回忆的舒适。\r\n\r\n>旅行的意义是什么？\r\n\r\n锻炼毅力，增加见识，洗涤灵魂？我从来没有想过要给旅行赋予这样的意义，与我而言，旅行，就是玩，让我充满快乐的玩。\r\n\r\n>网友评论：\r\n反正我是没有勇气去骑行川藏线的，也不建议认识的人去骑行川藏线，所以只能永远羡慕我这个最好的朋友一直都在过他想过的生活。\r\n\r\n或许是因为正处于青年时代，我或多或少都会有一些“书生气”，喜欢一些激扬的文字，“世界那么大，我想去看看”，“再不疯狂，我们就老了”之类的，觉得说的太有道理了。于是，我将远方当成是梦想，淡泊名利。\r\n\r\n但不可否认，目前我是一边挥洒着父母的血汗钱，一边说着视金钱为粪土。每个人在不同的阶段都有着不同的责任。若家人遇到些病痛需要去医院时，再对比着你那微薄的收入，这时候你还会想着 “世界那么大，我想去看看” 吗？\r\n\r\n理论上，每个人都有自己选择的权力和自由，但人生活在社会中，从来都不是一个人，你和你身边的所有人都有着千丝万缕的联系，要时刻清楚自己所承担的责任，在选择的时候，要更加理性一些。有些人看似很洒脱，只是他的那份责任有人替他分担了而已。',`groups`='Default',`is_show`=0,`publish`=1,`summary`='',`gmt_modified`='2018-11-19'  WHERE  `id` = 165 [ RunTime:0.000823s ]
[ sql ] [ SQL ] SELECT COUNT(*) AS tp_count FROM `note` WHERE  `groups` = 'Default' LIMIT 1 [ RunTime:0.001980s ]
[ sql ] [ SQL ] UPDATE `groups`  SET `g_count`=13  WHERE  `groups` = 'Default' [ RunTime:0.000401s ]
[ sql ] [ SQL ] SELECT COUNT(*) AS tp_count FROM `note` WHERE  `groups` = 'Default' LIMIT 1 [ RunTime:0.001229s ]
[ sql ] [ SQL ] UPDATE `groups`  SET `g_count`=13  WHERE  `groups` = 'Default' [ RunTime:0.000337s ]
---------------------------------------------------------------
[ 2018-11-19T19:21:04+08:00 ] 74.120.168.12 74.120.168.12 GET /daily/admin/note/shownote/id/165.html
[ info ] qingrang.top/daily/admin/note/shownote/id/165.html [运行时间：0.055673s][吞吐率：17.96req/s] [内存消耗：1,982.29kb] [文件加载：55]
[ info ] [ LANG ] /var/www/html/daily/thinkphp/lang/zh-cn.php
[ info ] [ ROUTE ] array (
  'type' => 'module',
  'module' => 
  array (
    0 => 'admin',
    1 => 'note',
    2 => 'shownote',
  ),
)
[ info ] [ HEADER ] array (
  'host' => 'qingrang.top',
  'cache-control' => 'max-age=0',
  'upgrade-insecure-requests' => '1',
  'user-agent' => 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/70.0.3538.102 Safari/537.36',
  'accept' => 'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8',
  'referer' => 'http://qingrang.top/daily/admin/note/editnote/id/165.html',
  'accept-encoding' => 'gzip, deflate',
  'accept-language' => 'zh-CN,zh;q=0.9,la;q=0.8,en;q=0.7,lb;q=0.6',
  'cookie' => 'Hm_lvt_1769181352e9adc950166aada465644e=1541082864,1541122974,1541171416,1542098176; PHPSESSID=2itucolgeg6ju9b7e0uomjso34',
  'connection' => 'close',
)
[ info ] [ PARAM ] array (
  'id' => '165',
)
[ info ] [ SESSION ] INIT array (
  'id' => '',
  'var_session_id' => '',
  'prefix' => 'think',
  'type' => '',
  'auto_start' => true,
)
[ info ] [ RUN ] app\admin\controller\Note->showNote[ /var/www/html/daily/application/admin/controller/Note.php ]
[ info ] [ DB ] INIT mysql
[ info ] [ VIEW ] /var/www/html/daily/application/admin/view/note/shownote.html [ array (
  0 => 'note',
  1 => 'groups',
) ]
[ info ] [ LOG ] INIT File
[ sql ] [ DB ] CONNECT:[ UseTime:0.000613s ] mysql:host=74.120.168.12;dbname=diary;charset=utf8
[ sql ] [ SQL ] SHOW COLUMNS FROM `note` [ RunTime:0.001294s ]
[ sql ] [ SQL ] SELECT * FROM `note` WHERE  `id` = 165 LIMIT 1 [ RunTime:0.000427s ]
[ sql ] [ SQL ] SHOW COLUMNS FROM `groups` [ RunTime:0.000871s ]
[ sql ] [ SQL ] SELECT * FROM `groups` [ RunTime:0.000398s ]
---------------------------------------------------------------
[ 2018-11-19T19:21:08+08:00 ] 74.120.168.12 74.120.168.12 GET /daily/admin/note
[ info ] qingrang.top/daily/admin/note [运行时间：0.077686s][吞吐率：12.87req/s] [内存消耗：2,290.13kb] [文件加载：56]
[ info ] [ LANG ] /var/www/html/daily/thinkphp/lang/zh-cn.php
[ info ] [ ROUTE ] array (
  'type' => 'module',
  'module' => 
  array (
    0 => 'admin',
    1 => 'note',
    2 => NULL,
  ),
)
[ info ] [ HEADER ] array (
  'host' => 'qingrang.top',
  'cache-control' => 'max-age=0',
  'upgrade-insecure-requests' => '1',
  'user-agent' => 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/70.0.3538.102 Safari/537.36',
  'accept' => 'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8',
  'referer' => 'http://qingrang.top/daily/admin/login/index.html',
  'accept-encoding' => 'gzip, deflate',
  'accept-language' => 'zh-CN,zh;q=0.9,la;q=0.8,en;q=0.7,lb;q=0.6',
  'cookie' => 'Hm_lvt_1769181352e9adc950166aada465644e=1541082864,1541122974,1541171416,1542098176; PHPSESSID=2itucolgeg6ju9b7e0uomjso34',
  'connection' => 'close',
)
[ info ] [ PARAM ] array (
)
[ info ] [ SESSION ] INIT array (
  'id' => '',
  'var_session_id' => '',
  'prefix' => 'think',
  'type' => '',
  'auto_start' => true,
)
[ info ] [ RUN ] app\admin\controller\Note->notelst[ /var/www/html/daily/application/admin/controller/Note.php ]
[ info ] [ DB ] INIT mysql
[ info ] [ VIEW ] /var/www/html/daily/application/admin/view/note/notelst.html [ array (
  0 => 'stickList',
  1 => 'hide',
  2 => 'list',
  3 => 'list_new',
  4 => 'groups',
  5 => 'groups0',
  6 => 'groups1',
  7 => 'groups2',
  8 => 'count',
  9 => 'year',
  10 => 'default_num',
) ]
[ info ] [ LOG ] INIT File
[ sql ] [ DB ] CONNECT:[ UseTime:0.000628s ] mysql:host=74.120.168.12;dbname=diary;charset=utf8
[ sql ] [ SQL ] SHOW COLUMNS FROM `note` [ RunTime:0.001326s ]
[ sql ] [ SQL ] SELECT * FROM `note` WHERE  `groups` <> 'Personal'  AND `is_show` = 1 ORDER BY date desc,id desc [ RunTime:0.002106s ]
[ sql ] [ SQL ] SELECT * FROM `note` WHERE  `groups` <> 'Personal'  AND `is_show` <> 1 ORDER BY gmt_modified desc LIMIT 5 [ RunTime:0.002432s ]
[ sql ] [ SQL ] SHOW COLUMNS FROM `config` [ RunTime:0.000952s ]
[ sql ] [ SQL ] SELECT * FROM `config` WHERE  `name` = 'hide' LIMIT 1 [ RunTime:0.000339s ]
[ sql ] [ SQL ] SELECT * FROM `note` WHERE  `id` < 5 [ RunTime:0.000546s ]
[ sql ] [ SQL ] SHOW COLUMNS FROM `groups` [ RunTime:0.000904s ]
[ sql ] [ SQL ] SELECT * FROM `groups` [ RunTime:0.000290s ]
[ sql ] [ SQL ] SELECT * FROM `groups` WHERE  `parent_id` = 0  AND `id` <> 2 ORDER BY `groups` [ RunTime:0.000515s ]
[ sql ] [ SQL ] SELECT `groups` FROM `groups` WHERE  `parent_id` = 1 [ RunTime:0.000296s ]
[ sql ] [ SQL ] SELECT * FROM `groups` WHERE  `parent_id` = 2 ORDER BY `groups` [ RunTime:0.000397s ]
[ sql ] [ SQL ] SELECT COUNT(*) AS tp_count FROM `note` WHERE  `groups` = 'Default' LIMIT 1 [ RunTime:0.001296s ]
[ sql ] [ SQL ] SELECT COUNT(*) AS tp_count FROM `note` LIMIT 1 [ RunTime:0.000240s ]
[ sql ] [ SQL ] SHOW COLUMNS FROM `yearlist` [ RunTime:0.001030s ]
[ sql ] [ SQL ] SELECT DISTINCT  `year` FROM `yearlist` ORDER BY year desc [ RunTime:0.000669s ]
---------------------------------------------------------------
[ 2018-11-19T19:21:12+08:00 ] 74.120.168.12 74.120.168.12 GET /daily/admin/note/editnote/id/32.html
[ info ] qingrang.top/daily/admin/note/editnote/id/32.html [运行时间：0.058142s][吞吐率：17.20req/s] [内存消耗：2,092.92kb] [文件加载：56]
[ info ] [ LANG ] /var/www/html/daily/thinkphp/lang/zh-cn.php
[ info ] [ ROUTE ] array (
  'type' => 'module',
  'module' => 
  array (
    0 => 'admin',
    1 => 'note',
    2 => 'editnote',
  ),
)
[ info ] [ HEADER ] array (
  'host' => 'qingrang.top',
  'upgrade-insecure-requests' => '1',
  'user-agent' => 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/70.0.3538.102 Safari/537.36',
  'accept' => 'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8',
  'referer' => 'http://qingrang.top/daily/admin/note',
  'accept-encoding' => 'gzip, deflate',
  'accept-language' => 'zh-CN,zh;q=0.9,la;q=0.8,en;q=0.7,lb;q=0.6',
  'cookie' => 'Hm_lvt_1769181352e9adc950166aada465644e=1541082864,1541122974,1541171416,1542098176; PHPSESSID=2itucolgeg6ju9b7e0uomjso34',
  'connection' => 'close',
)
[ info ] [ PARAM ] array (
  'id' => '32',
)
[ info ] [ SESSION ] INIT array (
  'id' => '',
  'var_session_id' => '',
  'prefix' => 'think',
  'type' => '',
  'auto_start' => true,
)
[ info ] [ RUN ] app\admin\controller\Note->editNote[ /var/www/html/daily/application/admin/controller/Note.php ]
[ info ] [ DB ] INIT mysql
[ info ] [ VIEW ] /var/www/html/daily/application/admin/view/note/editnote.html [ array (
  0 => 'note',
  1 => 'groups',
) ]
[ info ] [ LOG ] INIT File
[ sql ] [ DB ] CONNECT:[ UseTime:0.000562s ] mysql:host=74.120.168.12;dbname=diary;charset=utf8
[ sql ] [ SQL ] SHOW COLUMNS FROM `note` [ RunTime:0.001422s ]
[ sql ] [ SQL ] SELECT * FROM `note` WHERE  `id` = 32 LIMIT 1 [ RunTime:0.000792s ]
[ sql ] [ SQL ] SHOW COLUMNS FROM `groups` [ RunTime:0.000899s ]
[ sql ] [ SQL ] SELECT * FROM `groups` [ RunTime:0.000312s ]
---------------------------------------------------------------
[ 2018-11-19T19:21:16+08:00 ] 74.120.168.12 74.120.168.12 POST /daily/admin/note/updatenote/id/32.html
[ info ] qingrang.top/daily/admin/note/updatenote/id/32.html [运行时间：0.105335s][吞吐率：9.49req/s] [内存消耗：2,336.69kb] [文件加载：58]
[ info ] [ LANG ] /var/www/html/daily/thinkphp/lang/zh-cn.php
[ info ] [ ROUTE ] array (
  'type' => 'module',
  'module' => 
  array (
    0 => 'admin',
    1 => 'note',
    2 => 'updatenote',
  ),
)
[ info ] [ HEADER ] array (
  'host' => 'qingrang.top',
  'content-length' => '108171',
  'cache-control' => 'max-age=0',
  'origin' => 'http://qingrang.top',
  'upgrade-insecure-requests' => '1',
  'content-type' => 'application/x-www-form-urlencoded',
  'user-agent' => 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/70.0.3538.102 Safari/537.36',
  'accept' => 'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8',
  'referer' => 'http://qingrang.top/daily/admin/note/editnote/id/32.html',
  'accept-encoding' => 'gzip, deflate',
  'accept-language' => 'zh-CN,zh;q=0.9,la;q=0.8,en;q=0.7,lb;q=0.6',
  'cookie' => 'Hm_lvt_1769181352e9adc950166aada465644e=1541082864,1541122974,1541171416,1542098176; PHPSESSID=2itucolgeg6ju9b7e0uomjso34',
  'connection' => 'close',
)
[ info ] [ PARAM ] array (
  'summary' => '',
  'content' => '# 写出这些话的人，我估计一辈子都追不上了
1. 如果发出声音是危险的，那就保持沉默；如果自觉无力发光，那就别去照亮别人。但是，不要习惯了黑暗就为黑暗辩护不要为自己的苟且而得意洋洋；不要嘲讽那些比自己更勇敢，更有热量的人们。可以卑微如尘土，不可扭曲如蛆虫。
2. 你多学一样本事，就少说一句求人的话。
3. 我38岁那年，琢磨着要不要去读两年的放射线照相术大专学位。然后我跟我朋友说了这事，我觉得自己太老了，等拿到学位是，我都40岁了。
--朋友说，如果你不读，你还是会40岁，一个没有学位的40岁。
4.	这些年来我一直提醒自己一件事情，千万不要自己感动自己。大部分人看似的努力，不过是愚蠢导致的。什么熬夜看书到天亮，连续几天只睡几小时，多久没有放假了，如果这些东西也值得夸耀，那么富士康流水线上任何一个人都比你努力多了。人难免天生有自怜的情绪，唯有时刻保持清醒，才能看清真正的价值在哪里。
5.	孩子，我要求你读书用功，不是因为我要你跟别人比成绩，而是，我希望你将来会拥有选择的权利，选择有意义，有时间的工作，而不是被迫谋生。当你的工作在你心中有意义，你就有成就感。当你的工作给你时间，不剥夺你的生活，你就有尊严。成就感和尊严，给你快乐。
6.	最终我们都将学会，与他人交往，最重要的不是甜言蜜语，不是容貌金钱，而是你和他对于这个世界的看法，对人生的态度是否一致。
7.	我们一路奋战，不是为了改变世界，而是为了世界不再改变我们。
8.	不要欺骗别人，因为你能骗到的人，都是相信你的人。
9.	熟练的运用"关我屁事"和"关你屁事"可以省下人生80％的时间。
10.	我怎么敢倒下。我身后空无一人。
11.	"痛苦是财富，这话是扯淡。姑娘，痛苦就是痛苦，对痛苦的思考才是财富。"
12.	永远不要相信苦难是值得的，苦难就是苦难，苦难不会带来成功。苦难不值得追求，磨练意志是因为苦难无法躲开。
13.	如果我不曾见过太阳，我本可以忍受黑暗。
14.	社交之所以累，是因为每个人都试图展现出自己其实并不具备的品质。
15.	读书：之前觉得自己是一个人，现在觉得自己可以是一个世界。
16.	希望你今天白费的努力，早晚有一天变成值得。
17.	历史：遗忘，对倒下的人不公平。
18.	南京大屠杀：
安培说：现在日本的年轻人没有义务为过去的日本人像现在的中国人道歉。
那现在的中国人也没有权利为过去的中国人原谅现在的日本人。
19.	明明别人轻轻松松可以做到的事，我却做不了。满满的无力感，无力到没有力气。
20.	人的一切痛苦，本质上都是对自己无能的愤怒。
21.	不要试图同情你自己。
22.	你配得上你自己想要的生活吗？
23.	什么叫成熟？
了解自己，了解自己的欲望，了解自己的局限。理解别人，理解别人的欲望，理解别人的局限。
24.	我们会看到要寻找的东西，错失不去寻找的东西，虽然它在那里。我们的阅历被我们的关注点深深地影响了。
25.	做你害怕做的事，然后你会发现，不过如此。
26.	一直认为，所谓新鲜感，不是和未知的人一起去做同样的事，而是和已知的人一起去体验未知的人生。
27.	如果不能随时有限的反击，所有的宽容都是懦弱。
28.	群众的眼睛不是雪亮的，群众的眼睛是盲目的。
29.	不是所有的人都能功成名就，我们中有些人注定要在日常的点滴中寻找生命的意义。
30.	带人友善是修养，独来独往是性格。
31.	几年前踏上火车那一刻还没有意识到，从此故乡只有冬夏，再无春秋。
32.	十年饮水，难凉热血。
33.	德，律己为德，律人无异于私刑。
34.	信仰，他可以与宗教无关，代表自己的精神追求。
35.	人最重要的能力有两个，适应环境，不忘初心。适应环境可以安身，不忘初心可以立命。
36.	维护不在场的人，所言不多于所知。
37.	只有你愿意为之而死的东西，你才可以藉之而生。
38.	你见过树，却没见过森林。
39.	那些杀不死你的最终都会使你更强壮。
40.	是你把你的秘密告诉了风，那就别怪风把他带给树。
41.	似乎大家都这样。自命不凡，却无足轻重。
42.	保安笑着问我："你那么小个子，开那么大个车？"的时候。我傻笑着回答："你是当保安，我是当司机的。"
43.	猪会飞，是因为他站在了风口上，成功的飞起来以后他可以总结起飞技巧，但重要的，是风。
44.	你现在做的每一件事看来并没有什么意义，但他们也许会在未来助你 一臂之力。
45.	唱出本身就是最要不得的态度。当你做某件事的时候，一旦想要求快，就表示你再也不关心他，而是想去做别的事。
46.	命运啊，说是注定，不如说是你在何时做了选择。
47.	在一群出色的人中间，常常误以为自己也是其中一员，然后忘了努力。
48.	只有经历过地狱磨难的人，才有建造天堂的力量。
49.	一个伟大的人往往受到排挤，压抑，甚至被人斥为哗众取宠而陷于孤独中。
50.	与怪物战斗的人，应当小心自己不要成为怪物。当你远远凝视深渊时，深渊也在凝视你。
51.	一个人知道自己为什么而活，就可以忍受任何一种生活。
52.	假如我们不去打仗，敌人用刺刀杀死了我们，还要指着我们的骨头说：看，这是奴隶。
53.	我有一事，生死与之。
54.	我的体内啊，有个器官比心脏还重要，他虽然看不见，但却是在我的体内从脑袋一直贯穿到胯间。就因为他，我才能站着直，坐着正，就算脚步摇晃也能笔直地向前行，在这里退缩的话，那东西就会折断。
55.	不可能这三个字，你说的太多了。
56.	世界上没遇上帝，如果有的话，我无法容忍我不是。－－尼采
57.	剑在英雄手，登台傲王侯。－－比莫干《九州缥缈录》
58.	武士的一生，只相信自己手中可以握住的东西。－－赢无翳《九州缥缈录》
59.	为天地立心，为生民立命，为往圣继绝学，为万世开太平。－－北宋时期张载
60.	为不能作战的人而战。
61.	你的成功标准： 能做自己喜欢做的事，能只做自己喜欢做的事。
62.	如何不招人厌的展现自己的学识：别人问了，你再答。
63.	无论现实如何操蛋，你都能在心里有一个更诗意的世界，那个世界便是情怀。
64.	情怀就是以心灵的满足而不是功利的得失作为自己的行为标准的一种品质。一件没有什么用的事，还是要去做，也许只是因为我喜欢，也许只是因为它看起来很美。
65.	跟优秀的人相处是怎样一种体验：他从不刻意优秀，却总是无意中卓越。
66.	不要跟眼界不一样的人争辩。
67.	人穷尽一生追求另一个人的事，我一直无法理解，或许是因为我自己太有意思，无需他人陪伴，所以我祝你们在对方身上得到的快乐与我给自己的一样多。
68.	一个人需要控制的事情越少，他心理上就越自由。当你企图控制一件事情的时候，你同时也就被这件事情所控制，这永远是个相互的过程。
69.	我们痛恨限制的同时，也依赖限制。
70.	一个能够安住于不确定和不可控制中的人最自由。
71.	大部分的教育工作者都在教人找到工作，而不是寻找人生。
72.	漫画提供给我们的，也许就是这个早以被我们遗忘的世界。但将它看做一个逃避现实，发泄情绪的渠道，还是从中寻找勇气和激励，在现实生活中做一个真正的英雄，决定权在你。
73.	社会衡量一个人的价值，在于他能向外产出什么，至于他吸收了什么，没人在乎。
74.	我发现没有任何一个煤矿工人靠挖煤多又快当上了煤老板。
75.	有的人努力的时候是真的在努力，有的人努力的时候只是为了感动自己，这决定了一个人究竟能变成什么样。
76.	在这残酷的现实面前，除了吃人与被吃，我还有第三种选择，就是努力活下去，并且让这个社会再好一点。知大恶才知大善。知暗夜才知光明。不要低估人性的丑恶，也不要低估人性的光辉。
77.	群众的眼光到底是不是雪亮的？                                                                                  1）群众的智商，呈现非周期性的上升或者下降。                                                        2）其实群众的眼睛就是灯泡，而开关掌控在领导手中，需要时就是雪亮的，不需要时就是不明真相的。 
3）如果让群众挑错，那群众的眼睛无疑是雪亮的，他们最擅长干这个了，但要是问群众什么是对的，那就瞎了。
78.	我一向不太相信离别时的情真意切，我觉得那只是一种情绪渲染。
79.	为什么孩子喜欢看有关恐龙的书？                                                                                恐龙代表过去，宇宙飞船代表未来，我就是不喜欢现在。－－询问一7岁男孩得知
80.	纠正一个错误的方法有很多，而解决一个错误的终极方法就是不给他任何发生的机会。
81.	为什么父母一吵架，小孩就特别懂事？                                                                         小孩的沉默，隐忍，恐惧，以及讨好，在麻木的大人眼中，便是：懂事。
82.	凡我中华之寸土皆洒满我中华儿女之血泪，永世不忘倭寇侵占与残杀之历史。
83.	我相信再有一个妖精大闹天宫，悟空会是去镇压的那个人。
骑士杀死恶龙后，望着满地的财宝，身上长出了鳞片。
84.	只有写鸡汤的人才能从鸡汤中受益。
85.	没有中枪的觉悟，就没有开枪的资格。
86.	什么是人渣？   
浑身都是铠甲，没有一处软肋。
87.	一种人，天天都笑嘻嘻的，好似和谁都合得来，但是从不主动联系朋友，脾气也出奇的好，好像世上没有什么事情能让他们愤怒和悲伤。心中怀着宏伟的梦想，却不愿与现实中的人分担，只是默默的做，以为能用沙砾和泥土堆出山川。
88.	为什么我们愿意把钱捐给身边的乞丐，而不顾那些生活在水深火热之中的欠发达国家的人民呢？                                                                                                                         人类的所有善意都遵循邻避原则。坏的事可以发生，只要别发生在我家后院就行了。－－善意有效辐射范围
89.	后来许多人问我一个人夜晚踟蹰路上的心情，我想起的却不是孤单和路长，而是波澜壮阔的海和天空中闪耀的星光。－－张小砚
90.	当很重要的人寻求更大的世界，却因此不得不离开你的时候，支持还是阻止好？            
他走是因为他想走，他不走是因为他不想走，不要试图去背负别人的人生。
91.	一个人在对另一个人的内心世界做出评判时，最好怀有一定程度的谦逊和宽容。－－《群山回响》
92.	楼下的一个男人病的要死，那间壁的一家唱着留声机，对面是弄孩子，楼上两个人狂笑，还有打鼾声，还有打牌声，河中的船上有女人哭着她失去的母亲。 人类的悲欢并不相通，我只觉得他们吵闹。－－鲁迅
93.	什么样的状态最恐怖？ 
忙碌的学习，上班，以为忙碌了，就是充实了。一般还很满足，自以为比别人过得有意义。其实说到底，都是急于活得明白，反倒搞不清楚。
94.	未知的危险性是最恐怖的，而未知来自于你感官能力的丧失。比如说漆黑一片的屋子里你丧失的是视觉，比如说一片静谧的丛林里你丧失的是听觉。当你失去这些采集环境信息的渠道后，你会无法用经验体系构建一个稳定可预测的环境状况。人本能的就希望远离这种不稳定，这就是恐惧的作用了。
95.	我们千山万水来到这，为的也不过是说一声再见。
96.	遇见你所爱的人，时间就会停止。
97.	在遇到她之前，我不怕死，不惧远行，也不曾忧虑悠长岁月，现在却从未如此真切地思虑起将来。－－《平如美棠》
98.	从今往后，咱们只有死别，再无生离。－－《我们仨》
99.	别人的痛苦才是你艺术的源泉，而你去受苦只会成为别人艺术的源泉。
100.	我们大部分人根本谈不上独立的审美，而且美也是随着时代和环境在变化。
101.	无论我告诉你什么道理，当你的心智没有达到这个境界或接近的水平时或经历过一些事情的时候，你是不会理解这个道理的。或者你以为你知道这个道理，其实你不知道。
102.	除了自身的病患或亲友离去的痛苦是真实的，其他的痛苦都是你自己的价值观带给你的。
103.	别人指责你的事情或批评的你的理由，往往最能伤害你的，是那些你也这样认为的事情。
104.	其实人跟人之间差别其实不大，所以不要与别人去比较，人生就是一场长跑，你可能不会是第一名，但也不不太会是最后一名，和前面比你会有动力，和后面比你会有幸福。但重要的是享受过程。
105.	永远不要与人去辩论，你也很难把别人辩服，因为立场不同，因为没有对错，只有规则，只有利益。人生就是一场游戏，懂得你在玩的游戏的游戏规则，然后玩好它。
106.	生活其实是一种运营，时间是你最宝贵的资源，还有钱，关系，都是你的一种投入，自己重视什么，事业，友谊，家庭上，就多投入些，种瓜得瓜，好好平衡各个关系是你要做好的。
107.	人不会死在绝境。却往往栽在十字路口。
108.	编剧是你，我怎么知道结局。
109.	一只船孤独的航行在海上，它既不寻求幸福，也不逃避幸福，它只是向前航行，底下是沉静碧蓝的大海，而头顶是金色的太阳。   --莱蒙托夫
110.	历史学——孤证不成立
111.	新闻无需撒谎，它只需要给出“部分的真相”，就可以达到操纵民意的目的
112.	你所关注的东西，永远都是媒体想让你关注的
113.	很多时候舆论一边倒的声音，未必是大多数人所赞同的，只是不赞同的人以为自己是少数，不愿意发声而已
114.	除非你准备射击，否则不要把枪口对准人或物
115.	把自己不能理解的行为定义为「装」实在是非常不好的习惯，要改。
116.	画家不识渔家苦，好作寒江钓雪图。
117.	我们坚持一件事情，并不是因为这样做了会有效果，而是坚信，这样做是对的。——哈维尔
118.	人这一生为什么要努力？
是一种想去体验一个更大的世界的欲望。
119.	子路有闻，未能行之，唯恐有（又）闻。
120.	信任就像一张纸，皱了，即使抚平，也恢复不了原样了。。。 
用水胶带，喷水，绷木板上干后比原先还平。---做不到只是知识不够用。
121.	我第一次感受到时间是一种物质的存在。它就像是一条蠕动的虫子，拖着臃肿皱皮的身躯，从我的血管里缓缓缓缓地爬过，并且留下了一条粘乎乎的痕迹。
122.	原来死亡就是一种消失。不但是肉体，精神和思想的消失，更重要的是在人们的记忆中慢慢成为了空白，就像这个人从没在这个世界上来过一样。
123.	张浩站在他办公室高大的落地窗玻璃前，看着下面的芸芸众生。他说，林岚，你觉得他们生活得辛苦吗？我觉得很辛苦。每个人都很辛苦。这个世界不会符合你所有的想象，甚至连一个你的想象也不符合，可是我们还是得生存下去。
124.	人是为活着本身而活着，而不是为了活着之外的任何事物所活着。
125.	人生的意义是什么？
意义这个词太单薄，太卑微，低落到尘埃里，配不上生命，也承载不起人生。
126.	人生逆旅，一蓑烟雨。
127.	外行看热闹，都不知道别人家的事情，一群吃瓜群众指指点点，哈哈哈哈。。。被媒体玩的像猪一样。
128.	底线之上才有资格说各展所长。
129.	“我寄给你的信，总要送往邮局，不喜欢放在街边的绿色邮筒中，我总疑心那里会慢一点。”	--鲁迅《致许广平》
130.	我不要儿子，我要一个女儿--只要一个，像你的。--钱钟书
131.	孩子不是图画练习册，不要光顾着涂上自己喜欢的颜色。	--《追风筝的人》
132.	生活其实也很简单，喜欢的就争取，得到的就珍惜，失去了就忘记。
133.	有什么事情是游戏从业者不愿意告诉玩家的?
免费玩家也是我们提供给付费玩家的功能之一。
134.	哪有什么岁月静好，不过是有人为你付中负重前行，生活从来都不容易，当你觉得挺容易的时候，一点是有人再替你负重前行。
//好像现在是我人生中最轻松容易的时候了，那么到底有哪些人在为我负重前行呢？
135.	有枪但你没盾，你挡不住别人的子弹。
136.	没有人有义务了解你所尽力的艰辛。
137.	我从来没有想过一个节目会以无解来结尾，一直到明白真实的世界就是如此。 --柴静《双城的创伤》
138.	能够让你后悔的，从来不是你做过的事，而是你想做却没有做过的事。
139.	很多时候，你愿意讲给别人听的，大概是那些很想，却再也没有机会告诉以前的自己的话吧。--《肖申克的救赎》
140.	从童年起，我便独自一人。照顾着历代的星辰。--《孤独》白鹤林
141.	与这世界交手多年，你是否光彩依旧，兴致盎然。
142.	为什么你不让别人看到你善良的一面？因为如果他们看见了，就会期望我一直是善良的。
143. 周围认识的许多情侣，最后都步入了婚姻殿堂，但其中不少人在爱情长跑中都曾不忠。有些故事大家心照不宣，甚至帮他们遮掩。每次婚礼，我看着新人们热泪盈眶地念誓言，从没怀疑过他们在那一刻的真诚，可人性是如此幽深复杂，千帆过尽，我变得什么都能理解，也什么都无法相信。
144. 人生有5%的幸福，5%的痛苦，还有90%的平淡。人们往往被那5%的幸福诱惑着，幻想未来或怀念过去，忍受着5%的痛苦，在90%的平淡中慢慢度过漫长的一生。
145. 记得一个电影里面的女主说过”我不是喜欢钱，但是钱可以带来自由和尊严。我喜欢的是自由和尊严。”
146. 90次的反复下载上传，最后变成了这样，可见你认为最可靠的数据也是会在传播中失去原来的样子，更何况是你从被人嘴里听到的别人。
147. 无论你做的事情多正义，都不能强制我和你一个步调。
148. 既无法忍受现在的状态，又没能力改变这一切，可以像只猪一样懒，却无法像只猪一样心安理得。
149. 我们的祖先是被吃了无数回才走上了食物链的顶端。
150. 尊重粉丝维护偶像，但也请尊重一个人从内心深处鄙视另一个人的自由。
151. 皇帝为什么不多生孩子，最后选择优秀的孩子即位？”长幼”是常量，”优秀”是变量，政治稳定不能有太多的变量。
152. 我们看到的都是别人让我们看到的。
153. 没打出来的牌才是王牌。
154. 市场不一定是去迎合的，而是可以引导和培养的。
155. 后代子孙永远也不会知晓当初战争中零星冲突的悲惨情况；事实上，一无所知反而最好。真正的战争永远会隐没于历史的黑暗面。 ---沃尔特•惠特曼
156. 只有你才知道对你而言什么才是糟糕的生活，什么才是真正的一塌糊涂，这与旁人的教说，旁人的经验并无关系。
1. 这世上真话本就不多，一位女子的脸红胜过一大段对白。-- 老舍
1. 如果说有谁在看到流星的瞬时就能许下愿望，那一定是非常纯熟且迫切的愿望。
1. “我可以尽管向你们这个组合宣泄负面情绪，因为你们是被主流唾弃的，所以无论我说什么都没错，毕竟我是站在道德制高点上的。” --momo的老公
1. 不是返璞归真，转了个圈回到的却不是原处。两个放羊最大的区别，一个是满足物质生活，一个是满足精神生活。曾经的种地放羊是生活的根基，被迫接受的事没有什么美感，结束一天的工作后裹着一身臭汗上炕睡觉第二天周而复始，这种放羊与“舒适的生活”是没有挂钩的。而现在那种有情怀的种地放羊则是一种有钱人的主动选择，把过去的苦事中的精华提取，与其他美好的事相连接，在放羊的生活中也能享受惬意的生活。他们有能力选择和组合生活，这不该被批判。
1. 我看到的多数家庭的教育是颠倒混乱的。生下来到学龄前应当树立家长权威（要有敬畏），他们却去溺爱；小学应当严格培养学习习惯和基础，他们却宽松；青春期个性萌芽，父母应当从权威退到民主，让孩子学会理性和责任时，他们却开始各种着急焦虑和专制严管；到大学应该是退居二线，最多给于建议的时候他们开始对孩子人生规划指手画脚；工作了，父母应当放手让孩子完全独立对自己负责时，他们却最终升级到强迫相亲这种直接干涉。
1. 不愿费心力和别人交流。然而总是被指诘在躲避。内心不坦然，才是孤独者的坟墓。
1. 人生如逆旅，我亦是行人。
1. 你一直耿耿于怀的事事实上相关人物根本早就忘记了 耿耿于怀的果然只有你自己“
1. 当前的环境也许只是一个暂态，也许只是世界的一小面；如果你想要见见更大的世界，那就不要太急着让自己为了适应当前的环境而彻底改变。
1. 当你老了，回顾一生，就会发觉：什么时候出国读书，什么时候决定做第一份职业、何时选定了对象而恋爱、什么时候结婚，其实都是命运的巨变。只是当时站在三岔路口，眼见风云千樯，你作出选择的那一日，在日记上，相当沉闷和平凡，当时还以为是生命中普通的一天。——陶杰 《杀鹌鹑的少女》
1. 那一天我二十一岁，在我一生的黄金时代，我有好多奢望。我想爱，想吃，还想在一瞬间变成天上半明半暗的云，后来我才知道，生活就是个缓慢受锤的过程，人一天天老下去，奢望也一天天消逝，最后变得像挨了锤的牛一样。可是我过二十一岁生日时没有预见到这一点。我觉得自己会永远生猛下去，什么也锤不了我。 — —王小波
1. 想要追求自由随性的生活，就一定要先从自律开始。
1. 别人口中越是容易让人得出倾向性结论的问题描述，往往代表他刻意隐瞒了越多关键的细节。
1. 走不进去的世界就不要硬挤了，为难了别人，也作贱了自己。
1. 古龙《多情剑客无情剑》里，提过一个例子：一对厨子，饭馆打烊后，他们在后厨，自己给自己炒了盘菜，找点小酒，很惬意的饮食一番，舒服那一两个时辰。
--古龙还说：他们还活着，就是因为一天还有那么一两个时辰。
1. 从来如此，便对么？——鲁迅《狂人日记》
1. 那……学校不好，难道知识也不好么?
1. 高三毕业的欢送会上，复读班上的五个男生合唱了这首歌，我知道他们都不是第一年参加高考，我也知道那一年他们仍然成绩平平，我们那一届复读班整体都考的很差，但这首歌我记到现在。好像长这么大，见过的最多的无功而返，苦苦挣扎都是在学习的道路上。可苦涩中的温暖最能长存。路漫漫，且行且珍重！
1. 我一直记得刘瑜写给女儿的一段话：愿你被很多人爱，如果没有，愿你在寂寞里学会宽容。
1. 开始并完成一件事，比做好它更重要，因为只要开始了，你就有机会把它做的更好———-一件看上去繁难的事，只要开始做了，就会变得越来越容易。”
1. 张一鸣有一句说的特别对：所谓成功，就是延迟满足。
1. 成长是件残酷的事情，也许久而久之我们活成了别人想要的模样。但世俗跟成熟是两码事：在熙熙攘攘之外学会“我愿意”，不愿将就的你也可以不那么讲究。
1. “秘密的暴力比公开的暴力更令人恐怖，它会使人失去思考能力、道德意识和抵抗意志，因此退化到最低等原始动物保命本能中去。为了保命求生、避免肉体折磨，人会变得全无廉耻、奴性十足、无所不为。秘密统治对政府权力的正当行使和合道德性同样有着严重的腐蚀作用。” ---《布达佩斯往事》
1. 一个成熟的人，他的标准来自他的内心，而大多数的人，却受环境左右。对自己的标准会不由自主的降低以适应这个环境，减少自身与环境的冲突，在一个低标准下，自觉“满意”的度过每一天。 ——《精进》
1. 梦想不一定要马上实现，如果身边的人反对，那就走慢一点，只要你每天确定自己在往那里走就行。
1. 他没有勇气，也没有兴趣使渴望的行动得以一气呵成，因此自己在半途中就会怀疑行动的意义。---夏目漱石
1. 我来不及认真地年轻，待明白过来时，只能选择认真地老去。 —— 三毛
1. 我会以我的标准与方式看待世界，但我并不会以他来要求他人。--清让
1. 时间，只是一个自称能治百病的庸医。
1. 当你能从你认可的人或者事物身上吸取经验与知识，这是大部分人能做到的，但是如果你能从你不认可的人或者事物身上吸取营养，学到东西，那就真的太难得
了。
1. 你想成为什么样的人，那就尽量去向他们靠近。
1. 真正幽默的人，是把快乐给了别人。
1. 人这一生有很多重要的决定，每个决定其实都决定了我未来的人生，是否被动接受做一个幼师、是否转专业、是否升本等等等，做这些所有的选择与决定前，想想自身的优势，结合趋势与实力，看一下自己做这件事的把握有多少，但凡重大的决定，不要想着在尝试中去找答案，对于小事情这样是可以的，但是一些人生的重大决定是没有尝试的机会的，想尽一切办法想把仗打赢的，是最难的，我最该做的，是在一开始选择前，确定这场仗能打赢，再去打。
1. 面试造飞机，工作扭螺丝。
1. “让忙于务实的人务实，让乐于做梦的人做梦”。
1. 生命是一场华丽的冒险，只是我们永远都跨不过时间的深渊。
1. 曾经的你，以为只要带着那把长剑和赤子之心就可以说服自己不出卖理想的灵魂。在最艰难和不得不流泪的晚上，即使连自己都在笑自己傻，但仍然用长剑刺痛自己，提醒自己，勇往直前，直到将来。
1. 过往不恋，未来不迎，当下不负。
1. 忠言逆耳，良药苦口，可不都是这样吗。但我觉得最重要的是要培养自己的判断力，在兼容并包的基础上一定要有自己的主心骨。善听百家之言，思想上的言论抒发不分对错，要客观结合自己的情况，别人的经验也不全是对的，就算是对的，也不全适合自己，不同的人有不同的性格，脾气，要自己汲取自己认可的观点看法，适合自己才是最好的。
1. 世上最难的事之一，把自己的思想装进别人的脑袋。
1. 这短短的一生，我们最终都会失去。你不妨大胆一些，爱一个人，攀一座山，追一个梦。 ——《大鱼海棠》
1. 有时候遇到瓶颈了，你应该停下来好好想想，是有四年工作经验，还是一个经验用了四年。
1. 这世上唯有病痛和亲人去世是真切的痛楚，其他都是不必要的伤感，是忽略了当下拥有的一切的贪婪。
1. 许多人所谓的成熟， 不过是被习俗磨去了棱角，变得世故而实际了。那不是成熟，而是精神的早衰和个性的消亡。真正的成熟，应当是独特个性的形成，真实自我的发现，精神上的结果和丰收。
1. 别嫌读书苦，你现在的气质里，藏着你走过的路，读书不是为了雄辩和驳斥，也不是为了轻信和盲从，而是为了思考和权衡。
1. 真的不要小看父母，不要觉得自己很厉害。以前笑父母遥控器还要套个手机套，其实和现在我们用手机还要贴膜戴手机套是一样的。以前笑父母为了一毛钱还和人家讨价还价，其实和我们现在用着手机在群里抢红包是一样的。以前父母无聊时磕着瓜子看着小说，其实和我们现在拿着手机刷着朋友圈是一样的。以前父母拉几个好友打麻将谈天说地，其实和我们现在拉几个网友王者农药开黑是一样的。以前父母在厂里上班踩着缝纫机，其实和我们现在写字楼里对着电脑写 PPT word 文档是一样的。所有的都没有变，只是时代在变，生活方式升级，换一种方式活着而已。很多年以后，可能会有10后笑着：瞧，我爸以前是在格子间苦逼写代码的工程师，我现在一家未来公司看着机器人帮我干活，公司只有我一个人呢。
1. 有勇气去改变那些可以改变的事，
有肚量去容忍那些无法改变的事，
有智慧去区分上述的事。
1. 识人不必探尽，探尽则多疑。
知人不必言尽，言尽则无友。
责人不必苛尽，苛尽则众远。
敬人不必卑尽，卑尽则少骨。
让人不必退尽，退尽则路寡。
1. 安全感在很多时候是束缚人的枷锁，过度追求会让人生少了很多可能性。
1. 大部分的恐惧，只有在你把它当回事儿的时候才是。
1. 很多时候，没有兴趣并不真的是没有兴趣，而是怕自己做不好。
1. 最好的兴趣就是永远达不到但可以不断精进的那些。
1. 很多时候，成功者是自证的，失败者也是。
1. 阻止大脑用思维定式进行自动加工，夺回大脑的控制权。
1. 努力不是盲目的，是定向的。
1. 要超越心智，首先要能辨别更好的心智与现有心智的区别。
1. 世俗的成功不是人人都可以达成的，按概率也就只有一小部分。
1. 盲目听信成功学故事并模仿，将离成功越来越远。
1. 不管是恋爱还是职场，要选得好就得先小范围尝试和观察，对所谓的“好坏”有个大体了解后，然后再选择，最后全情投入。
1. 完美的职业规划不存在，避免因为规划得太细而失去更多的可能性。
1. 过去的付出只代表过去，沉没成本不是成本。
1. 常认为自己是受害者的人往往真的会成为受害者。
1. 绝对公平并不存在，追求绝对公平只是追求自利。
1. 活在父母的世界跟活在子女的世界一样，都是人格尚未独立出来的婴儿。
1. 在事情没有快速变化的前提下，等待仅仅是无谓的消耗。
1. 要撕掉自己的短处，不要试图掩盖，用更强的标签去替代它。
1. 陷入指定的成功，你就基本不太可能成功了。
1. 握不住的沙，不如扬了它。
1. 优于别人并不高贵，真正的高贵因该是优于过去的自己。-- 海明威《真实的高贵》
1. 顶级组织至情至性，
 一流组织共同信仰，
二流组织共同利益，
三流组织共同规则。
1. 像老大寻求意见时，自己先思考出几套解决方案也就是“香蕉”，让你的老板去做选择而不是让他出想法。如果因为你的”香蕉”没熟透，放心你的老大会给你更好的解决方法，先养成动脑思考的好习惯。 --香蕉法则
1. 善良不是要求别人做什么，而是要求自己做什么。
1. 自己是既得利益者，说这不公平叫「觉悟高」，值得钦佩，自己不是既得利益者，就别眼里只看到不公平，因为这太正常了，如果不理解，或者心生抱怨，该想想自己的问题。
1. 文字传达观点，文字也能误传观点。
1. “检验一流智力的标准，就是看你能不能在头脑中同时存在两种相反的想法，还维持正常行事的能力。”
1. 有时候，鸡汤可能比所谓的干货更有用，很多道理其实大家都懂，我们做出改变缺乏的只是一个推动力。
1. 不自律，无自由：
曾经以为自由就是想做啥做啥，后来才发现自律者才会自由。当一个人缺乏自由的时候，他做的事情总是在受习惯和即时诱惑的影响，要么就是被他人的思想观念所扰，几乎永远不可能去做内心真正渴望的事。
1. 《海上钢琴师》中，1900 为什么最后没有下船？
我们的陆地就是他的海洋。无人愿意一生漂泊。
1. 永生是否是一种酷刑？
凡是能被适应的惩罚都不能算是酷刑。
1. 当有人做一件事并没有伤害到任何人的事情，你却要指手画脚的时候，你才是那个傻逼。
1. 这世上只有一种成功，就是能用自己喜欢的方式度过自己的一生。
1. 只有深入一座城市的边边角角，了解城市里的一花一草一木，才能真正看懂人生百态，品味酸甜苦辣的人生。
1. 信仰是用来约束自己的。
1. 习惯，是扼杀创造力的最大杀手！
当你所掌握的信息不足以帮自己判断的时候，你可以选择观望，但是用这些无比正确的废话来说服别人，就是最大的笑话，就等同于，你自己没有判断力，也要求别人也跟你一样没有判断力。
1. 没有观点的反驳更可怕，有那么一拨人，为了让自己无比正确，总说一大堆永远正确的话。
1. 穷人思维和富人的思维是，穷人花 10 块，总奢望得到 100 块的价值，而富人花 1w 块，只求得到 1000 块的价值就够了，但是即便如此，富人可以轻易获取 1000 块的资源，而穷人即便费劲九牛二虎之力得到 100 块的价值也差距很大。
1. 我自己也做了公众号，尤其是影响力越做越大，关注的人越来越多，当一个群体越来越大的时候，难免鱼龙混杂，什么样的人都有，也就意味着，你的所有观点，总会随着群体越来越大，不认可你的人越来越多，当然，认可你的人其实是更多的，但是认可你的人不会让你糟心，而不认可你的人，或者说一些杠精才会让你最糟心的。
1. 这个世界有几样东西是不能被取代的，第一：亲身感受。我拿着一碗水，告诉你：这个是海洋，你永远不会有感觉。第二：自我成长和努力。没有人可以取代你做事情，应该自己完成的，只能由自己完成。工具的善用，自我的实力，重要性是排在第一位。刘翔跑再快，我开车，轻松超越他。当然，前提是我会开车，四肢还得健全。
1. 吃不了起早贪黑的苦，你丢不起那个街头摆摊的人，你凭什么觉得不公平？
1. 活在当下。我 22 岁的时候从不会去考虑五六年之后的我会是怎样，我只是活在当下，做好当下的事而已。
1. 致正少年的你，愿你所有快乐无需假装，愿你此生尽兴赤诚善良。
1. 罗素说：只有一种英雄主义，就是在认清生活的真相后依然热爱生活。
1. 这世界就是一拨人昼夜不停的运转，另一拨人起床发现世界变了。
1. 人有一个通病：一直拥有的就觉得是理所当然的，唯有等到失去的时候，才发现原来自己是如何的富有。
1. 故乡养活不了肉体，城市寄托不了灵魂，回不去的故乡，容不进的城市。有工作的地万没有家，有家的地方却没有工作，他乡容不下灵魂，故乡安不了肉身，一个叫家的地方找不到养家糊口的路，找到了养家糊口的地方却安不了家，从此便有了漂泊，有了远方，有了乡愁......',
  'groups' => 'Default',
  'showsel' => '0',
  'showse2' => '1',
  'id' => '32',
)
[ info ] [ SESSION ] INIT array (
  'id' => '',
  'var_session_id' => '',
  'prefix' => 'think',
  'type' => '',
  'auto_start' => true,
)
[ info ] [ RUN ] app\admin\controller\Note->updateNote[ /var/www/html/daily/application/admin/controller/Note.php ]
[ info ] [ DB ] INIT mysql
[ info ] [ CACHE ] INIT File
[ info ] [ LOG ] INIT File
[ sql ] [ DB ] CONNECT:[ UseTime:0.000847s ] mysql:host=74.120.168.12;dbname=diary;charset=utf8
[ sql ] [ SQL ] SHOW COLUMNS FROM `note` [ RunTime:0.001910s ]
[ sql ] [ SQL ] SELECT * FROM `note` WHERE  `id` = 32 LIMIT 1 [ RunTime:0.000820s ]
[ sql ] [ SQL ] SELECT `groups` FROM `note` WHERE  `id` = 32 LIMIT 1 [ RunTime:0.000457s ]
[ sql ] [ SQL ] SHOW COLUMNS FROM `groups` [ RunTime:0.001351s ]
[ sql ] [ SQL ] SELECT `parent_id` FROM `groups` WHERE  `groups` = 'Default' LIMIT 1 [ RunTime:0.000401s ]
[ sql ] [ SQL ] SELECT `groups` FROM `groups` WHERE  `id` = 0 LIMIT 1 [ RunTime:0.000344s ]
[ sql ] [ SQL ] SELECT `id` FROM `groups` WHERE  `groups` = 'Default' LIMIT 1 [ RunTime:0.000358s ]
[ sql ] [ SQL ] UPDATE `note`  SET `id`=32,`p_id`=1,`title`='写出这些话的人，我估计一辈子都追不上了\r',`content`='# 写出这些话的人，我估计一辈子都追不上了\r\n1. 如果发出声音是危险的，那就保持沉默；如果自觉无力发光，那就别去照亮别人。但是，不要习惯了黑暗就为黑暗辩护不要为自己的苟且而得意洋洋；不要嘲讽那些比自己更勇敢，更有热量的人们。可以卑微如尘土，不可扭曲如蛆虫。\r\n2. 你多学一样本事，就少说一句求人的话。\r\n3. 我38岁那年，琢磨着要不要去读两年的放射线照相术大专学位。然后我跟我朋友说了这事，我觉得自己太老了，等拿到学位是，我都40岁了。\r\n--朋友说，如果你不读，你还是会40岁，一个没有学位的40岁。\r\n4.	这些年来我一直提醒自己一件事情，千万不要自己感动自己。大部分人看似的努力，不过是愚蠢导致的。什么熬夜看书到天亮，连续几天只睡几小时，多久没有放假了，如果这些东西也值得夸耀，那么富士康流水线上任何一个人都比你努力多了。人难免天生有自怜的情绪，唯有时刻保持清醒，才能看清真正的价值在哪里。\r\n5.	孩子，我要求你读书用功，不是因为我要你跟别人比成绩，而是，我希望你将来会拥有选择的权利，选择有意义，有时间的工作，而不是被迫谋生。当你的工作在你心中有意义，你就有成就感。当你的工作给你时间，不剥夺你的生活，你就有尊严。成就感和尊严，给你快乐。\r\n6.	最终我们都将学会，与他人交往，最重要的不是甜言蜜语，不是容貌金钱，而是你和他对于这个世界的看法，对人生的态度是否一致。\r\n7.	我们一路奋战，不是为了改变世界，而是为了世界不再改变我们。\r\n8.	不要欺骗别人，因为你能骗到的人，都是相信你的人。\r\n9.	熟练的运用\"关我屁事\"和\"关你屁事\"可以省下人生80％的时间。\r\n10.	我怎么敢倒下。我身后空无一人。\r\n11.	\"痛苦是财富，这话是扯淡。姑娘，痛苦就是痛苦，对痛苦的思考才是财富。\"\r\n12.	永远不要相信苦难是值得的，苦难就是苦难，苦难不会带来成功。苦难不值得追求，磨练意志是因为苦难无法躲开。\r\n13.	如果我不曾见过太阳，我本可以忍受黑暗。\r\n14.	社交之所以累，是因为每个人都试图展现出自己其实并不具备的品质。\r\n15.	读书：之前觉得自己是一个人，现在觉得自己可以是一个世界。\r\n16.	希望你今天白费的努力，早晚有一天变成值得。\r\n17.	历史：遗忘，对倒下的人不公平。\r\n18.	南京大屠杀：\r\n安培说：现在日本的年轻人没有义务为过去的日本人像现在的中国人道歉。\r\n那现在的中国人也没有权利为过去的中国人原谅现在的日本人。\r\n19.	明明别人轻轻松松可以做到的事，我却做不了。满满的无力感，无力到没有力气。\r\n20.	人的一切痛苦，本质上都是对自己无能的愤怒。\r\n21.	不要试图同情你自己。\r\n22.	你配得上你自己想要的生活吗？\r\n23.	什么叫成熟？\r\n了解自己，了解自己的欲望，了解自己的局限。理解别人，理解别人的欲望，理解别人的局限。\r\n24.	我们会看到要寻找的东西，错失不去寻找的东西，虽然它在那里。我们的阅历被我们的关注点深深地影响了。\r\n25.	做你害怕做的事，然后你会发现，不过如此。\r\n26.	一直认为，所谓新鲜感，不是和未知的人一起去做同样的事，而是和已知的人一起去体验未知的人生。\r\n27.	如果不能随时有限的反击，所有的宽容都是懦弱。\r\n28.	群众的眼睛不是雪亮的，群众的眼睛是盲目的。\r\n29.	不是所有的人都能功成名就，我们中有些人注定要在日常的点滴中寻找生命的意义。\r\n30.	带人友善是修养，独来独往是性格。\r\n31.	几年前踏上火车那一刻还没有意识到，从此故乡只有冬夏，再无春秋。\r\n32.	十年饮水，难凉热血。\r\n33.	德，律己为德，律人无异于私刑。\r\n34.	信仰，他可以与宗教无关，代表自己的精神追求。\r\n35.	人最重要的能力有两个，适应环境，不忘初心。适应环境可以安身，不忘初心可以立命。\r\n36.	维护不在场的人，所言不多于所知。\r\n37.	只有你愿意为之而死的东西，你才可以藉之而生。\r\n38.	你见过树，却没见过森林。\r\n39.	那些杀不死你的最终都会使你更强壮。\r\n40.	是你把你的秘密告诉了风，那就别怪风把他带给树。\r\n41.	似乎大家都这样。自命不凡，却无足轻重。\r\n42.	保安笑着问我：\"你那么小个子，开那么大个车？\"的时候。我傻笑着回答：\"你是当保安，我是当司机的。\"\r\n43.	猪会飞，是因为他站在了风口上，成功的飞起来以后他可以总结起飞技巧，但重要的，是风。\r\n44.	你现在做的每一件事看来并没有什么意义，但他们也许会在未来助你 一臂之力。\r\n45.	唱出本身就是最要不得的态度。当你做某件事的时候，一旦想要求快，就表示你再也不关心他，而是想去做别的事。\r\n46.	命运啊，说是注定，不如说是你在何时做了选择。\r\n47.	在一群出色的人中间，常常误以为自己也是其中一员，然后忘了努力。\r\n48.	只有经历过地狱磨难的人，才有建造天堂的力量。\r\n49.	一个伟大的人往往受到排挤，压抑，甚至被人斥为哗众取宠而陷于孤独中。\r\n50.	与怪物战斗的人，应当小心自己不要成为怪物。当你远远凝视深渊时，深渊也在凝视你。\r\n51.	一个人知道自己为什么而活，就可以忍受任何一种生活。\r\n52.	假如我们不去打仗，敌人用刺刀杀死了我们，还要指着我们的骨头说：看，这是奴隶。\r\n53.	我有一事，生死与之。\r\n54.	我的体内啊，有个器官比心脏还重要，他虽然看不见，但却是在我的体内从脑袋一直贯穿到胯间。就因为他，我才能站着直，坐着正，就算脚步摇晃也能笔直地向前行，在这里退缩的话，那东西就会折断。\r\n55.	不可能这三个字，你说的太多了。\r\n56.	世界上没遇上帝，如果有的话，我无法容忍我不是。－－尼采\r\n57.	剑在英雄手，登台傲王侯。－－比莫干《九州缥缈录》\r\n58.	武士的一生，只相信自己手中可以握住的东西。－－赢无翳《九州缥缈录》\r\n59.	为天地立心，为生民立命，为往圣继绝学，为万世开太平。－－北宋时期张载\r\n60.	为不能作战的人而战。\r\n61.	你的成功标准： 能做自己喜欢做的事，能只做自己喜欢做的事。\r\n62.	如何不招人厌的展现自己的学识：别人问了，你再答。\r\n63.	无论现实如何操蛋，你都能在心里有一个更诗意的世界，那个世界便是情怀。\r\n64.	情怀就是以心灵的满足而不是功利的得失作为自己的行为标准的一种品质。一件没有什么用的事，还是要去做，也许只是因为我喜欢，也许只是因为它看起来很美。\r\n65.	跟优秀的人相处是怎样一种体验：他从不刻意优秀，却总是无意中卓越。\r\n66.	不要跟眼界不一样的人争辩。\r\n67.	人穷尽一生追求另一个人的事，我一直无法理解，或许是因为我自己太有意思，无需他人陪伴，所以我祝你们在对方身上得到的快乐与我给自己的一样多。\r\n68.	一个人需要控制的事情越少，他心理上就越自由。当你企图控制一件事情的时候，你同时也就被这件事情所控制，这永远是个相互的过程。\r\n69.	我们痛恨限制的同时，也依赖限制。\r\n70.	一个能够安住于不确定和不可控制中的人最自由。\r\n71.	大部分的教育工作者都在教人找到工作，而不是寻找人生。\r\n72.	漫画提供给我们的，也许就是这个早以被我们遗忘的世界。但将它看做一个逃避现实，发泄情绪的渠道，还是从中寻找勇气和激励，在现实生活中做一个真正的英雄，决定权在你。\r\n73.	社会衡量一个人的价值，在于他能向外产出什么，至于他吸收了什么，没人在乎。\r\n74.	我发现没有任何一个煤矿工人靠挖煤多又快当上了煤老板。\r\n75.	有的人努力的时候是真的在努力，有的人努力的时候只是为了感动自己，这决定了一个人究竟能变成什么样。\r\n76.	在这残酷的现实面前，除了吃人与被吃，我还有第三种选择，就是努力活下去，并且让这个社会再好一点。知大恶才知大善。知暗夜才知光明。不要低估人性的丑恶，也不要低估人性的光辉。\r\n77.	群众的眼光到底是不是雪亮的？                                                                                  1）群众的智商，呈现非周期性的上升或者下降。                                                        2）其实群众的眼睛就是灯泡，而开关掌控在领导手中，需要时就是雪亮的，不需要时就是不明真相的。 \r\n3）如果让群众挑错，那群众的眼睛无疑是雪亮的，他们最擅长干这个了，但要是问群众什么是对的，那就瞎了。\r\n78.	我一向不太相信离别时的情真意切，我觉得那只是一种情绪渲染。\r\n79.	为什么孩子喜欢看有关恐龙的书？                                                                                恐龙代表过去，宇宙飞船代表未来，我就是不喜欢现在。－－询问一7岁男孩得知\r\n80.	纠正一个错误的方法有很多，而解决一个错误的终极方法就是不给他任何发生的机会。\r\n81.	为什么父母一吵架，小孩就特别懂事？                                                                         小孩的沉默，隐忍，恐惧，以及讨好，在麻木的大人眼中，便是：懂事。\r\n82.	凡我中华之寸土皆洒满我中华儿女之血泪，永世不忘倭寇侵占与残杀之历史。\r\n83.	我相信再有一个妖精大闹天宫，悟空会是去镇压的那个人。\r\n骑士杀死恶龙后，望着满地的财宝，身上长出了鳞片。\r\n84.	只有写鸡汤的人才能从鸡汤中受益。\r\n85.	没有中枪的觉悟，就没有开枪的资格。\r\n86.	什么是人渣？   \r\n浑身都是铠甲，没有一处软肋。\r\n87.	一种人，天天都笑嘻嘻的，好似和谁都合得来，但是从不主动联系朋友，脾气也出奇的好，好像世上没有什么事情能让他们愤怒和悲伤。心中怀着宏伟的梦想，却不愿与现实中的人分担，只是默默的做，以为能用沙砾和泥土堆出山川。\r\n88.	为什么我们愿意把钱捐给身边的乞丐，而不顾那些生活在水深火热之中的欠发达国家的人民呢？                                                                                                                         人类的所有善意都遵循邻避原则。坏的事可以发生，只要别发生在我家后院就行了。－－善意有效辐射范围\r\n89.	后来许多人问我一个人夜晚踟蹰路上的心情，我想起的却不是孤单和路长，而是波澜壮阔的海和天空中闪耀的星光。－－张小砚\r\n90.	当很重要的人寻求更大的世界，却因此不得不离开你的时候，支持还是阻止好？            \r\n他走是因为他想走，他不走是因为他不想走，不要试图去背负别人的人生。\r\n91.	一个人在对另一个人的内心世界做出评判时，最好怀有一定程度的谦逊和宽容。－－《群山回响》\r\n92.	楼下的一个男人病的要死，那间壁的一家唱着留声机，对面是弄孩子，楼上两个人狂笑，还有打鼾声，还有打牌声，河中的船上有女人哭着她失去的母亲。 人类的悲欢并不相通，我只觉得他们吵闹。－－鲁迅\r\n93.	什么样的状态最恐怖？ \r\n忙碌的学习，上班，以为忙碌了，就是充实了。一般还很满足，自以为比别人过得有意义。其实说到底，都是急于活得明白，反倒搞不清楚。\r\n94.	未知的危险性是最恐怖的，而未知来自于你感官能力的丧失。比如说漆黑一片的屋子里你丧失的是视觉，比如说一片静谧的丛林里你丧失的是听觉。当你失去这些采集环境信息的渠道后，你会无法用经验体系构建一个稳定可预测的环境状况。人本能的就希望远离这种不稳定，这就是恐惧的作用了。\r\n95.	我们千山万水来到这，为的也不过是说一声再见。\r\n96.	遇见你所爱的人，时间就会停止。\r\n97.	在遇到她之前，我不怕死，不惧远行，也不曾忧虑悠长岁月，现在却从未如此真切地思虑起将来。－－《平如美棠》\r\n98.	从今往后，咱们只有死别，再无生离。－－《我们仨》\r\n99.	别人的痛苦才是你艺术的源泉，而你去受苦只会成为别人艺术的源泉。\r\n100.	我们大部分人根本谈不上独立的审美，而且美也是随着时代和环境在变化。\r\n101.	无论我告诉你什么道理，当你的心智没有达到这个境界或接近的水平时或经历过一些事情的时候，你是不会理解这个道理的。或者你以为你知道这个道理，其实你不知道。\r\n102.	除了自身的病患或亲友离去的痛苦是真实的，其他的痛苦都是你自己的价值观带给你的。\r\n103.	别人指责你的事情或批评的你的理由，往往最能伤害你的，是那些你也这样认为的事情。\r\n104.	其实人跟人之间差别其实不大，所以不要与别人去比较，人生就是一场长跑，你可能不会是第一名，但也不不太会是最后一名，和前面比你会有动力，和后面比你会有幸福。但重要的是享受过程。\r\n105.	永远不要与人去辩论，你也很难把别人辩服，因为立场不同，因为没有对错，只有规则，只有利益。人生就是一场游戏，懂得你在玩的游戏的游戏规则，然后玩好它。\r\n106.	生活其实是一种运营，时间是你最宝贵的资源，还有钱，关系，都是你的一种投入，自己重视什么，事业，友谊，家庭上，就多投入些，种瓜得瓜，好好平衡各个关系是你要做好的。\r\n107.	人不会死在绝境。却往往栽在十字路口。\r\n108.	编剧是你，我怎么知道结局。\r\n109.	一只船孤独的航行在海上，它既不寻求幸福，也不逃避幸福，它只是向前航行，底下是沉静碧蓝的大海，而头顶是金色的太阳。   --莱蒙托夫\r\n110.	历史学——孤证不成立\r\n111.	新闻无需撒谎，它只需要给出“部分的真相”，就可以达到操纵民意的目的\r\n112.	你所关注的东西，永远都是媒体想让你关注的\r\n113.	很多时候舆论一边倒的声音，未必是大多数人所赞同的，只是不赞同的人以为自己是少数，不愿意发声而已\r\n114.	除非你准备射击，否则不要把枪口对准人或物\r\n115.	把自己不能理解的行为定义为「装」实在是非常不好的习惯，要改。\r\n116.	画家不识渔家苦，好作寒江钓雪图。\r\n117.	我们坚持一件事情，并不是因为这样做了会有效果，而是坚信，这样做是对的。——哈维尔\r\n118.	人这一生为什么要努力？\r\n是一种想去体验一个更大的世界的欲望。\r\n119.	子路有闻，未能行之，唯恐有（又）闻。\r\n120.	信任就像一张纸，皱了，即使抚平，也恢复不了原样了。。。 \r\n用水胶带，喷水，绷木板上干后比原先还平。---做不到只是知识不够用。\r\n121.	我第一次感受到时间是一种物质的存在。它就像是一条蠕动的虫子，拖着臃肿皱皮的身躯，从我的血管里缓缓缓缓地爬过，并且留下了一条粘乎乎的痕迹。\r\n122.	原来死亡就是一种消失。不但是肉体，精神和思想的消失，更重要的是在人们的记忆中慢慢成为了空白，就像这个人从没在这个世界上来过一样。\r\n123.	张浩站在他办公室高大的落地窗玻璃前，看着下面的芸芸众生。他说，林岚，你觉得他们生活得辛苦吗？我觉得很辛苦。每个人都很辛苦。这个世界不会符合你所有的想象，甚至连一个你的想象也不符合，可是我们还是得生存下去。\r\n124.	人是为活着本身而活着，而不是为了活着之外的任何事物所活着。\r\n125.	人生的意义是什么？\r\n意义这个词太单薄，太卑微，低落到尘埃里，配不上生命，也承载不起人生。\r\n126.	人生逆旅，一蓑烟雨。\r\n127.	外行看热闹，都不知道别人家的事情，一群吃瓜群众指指点点，哈哈哈哈。。。被媒体玩的像猪一样。\r\n128.	底线之上才有资格说各展所长。\r\n129.	“我寄给你的信，总要送往邮局，不喜欢放在街边的绿色邮筒中，我总疑心那里会慢一点。”	--鲁迅《致许广平》\r\n130.	我不要儿子，我要一个女儿--只要一个，像你的。--钱钟书\r\n131.	孩子不是图画练习册，不要光顾着涂上自己喜欢的颜色。	--《追风筝的人》\r\n132.	生活其实也很简单，喜欢的就争取，得到的就珍惜，失去了就忘记。\r\n133.	有什么事情是游戏从业者不愿意告诉玩家的?\r\n免费玩家也是我们提供给付费玩家的功能之一。\r\n134.	哪有什么岁月静好，不过是有人为你付中负重前行，生活从来都不容易，当你觉得挺容易的时候，一点是有人再替你负重前行。\r\n//好像现在是我人生中最轻松容易的时候了，那么到底有哪些人在为我负重前行呢？\r\n135.	有枪但你没盾，你挡不住别人的子弹。\r\n136.	没有人有义务了解你所尽力的艰辛。\r\n137.	我从来没有想过一个节目会以无解来结尾，一直到明白真实的世界就是如此。 --柴静《双城的创伤》\r\n138.	能够让你后悔的，从来不是你做过的事，而是你想做却没有做过的事。\r\n139.	很多时候，你愿意讲给别人听的，大概是那些很想，却再也没有机会告诉以前的自己的话吧。--《肖申克的救赎》\r\n140.	从童年起，我便独自一人。照顾着历代的星辰。--《孤独》白鹤林\r\n141.	与这世界交手多年，你是否光彩依旧，兴致盎然。\r\n142.	为什么你不让别人看到你善良的一面？因为如果他们看见了，就会期望我一直是善良的。\r\n143. 周围认识的许多情侣，最后都步入了婚姻殿堂，但其中不少人在爱情长跑中都曾不忠。有些故事大家心照不宣，甚至帮他们遮掩。每次婚礼，我看着新人们热泪盈眶地念誓言，从没怀疑过他们在那一刻的真诚，可人性是如此幽深复杂，千帆过尽，我变得什么都能理解，也什么都无法相信。\r\n144. 人生有5%的幸福，5%的痛苦，还有90%的平淡。人们往往被那5%的幸福诱惑着，幻想未来或怀念过去，忍受着5%的痛苦，在90%的平淡中慢慢度过漫长的一生。\r\n145. 记得一个电影里面的女主说过”我不是喜欢钱，但是钱可以带来自由和尊严。我喜欢的是自由和尊严。”\r\n146. 90次的反复下载上传，最后变成了这样，可见你认为最可靠的数据也是会在传播中失去原来的样子，更何况是你从被人嘴里听到的别人。\r\n147. 无论你做的事情多正义，都不能强制我和你一个步调。\r\n148. 既无法忍受现在的状态，又没能力改变这一切，可以像只猪一样懒，却无法像只猪一样心安理得。\r\n149. 我们的祖先是被吃了无数回才走上了食物链的顶端。\r\n150. 尊重粉丝维护偶像，但也请尊重一个人从内心深处鄙视另一个人的自由。\r\n151. 皇帝为什么不多生孩子，最后选择优秀的孩子即位？”长幼”是常量，”优秀”是变量，政治稳定不能有太多的变量。\r\n152. 我们看到的都是别人让我们看到的。\r\n153. 没打出来的牌才是王牌。\r\n154. 市场不一定是去迎合的，而是可以引导和培养的。\r\n155. 后代子孙永远也不会知晓当初战争中零星冲突的悲惨情况；事实上，一无所知反而最好。真正的战争永远会隐没于历史的黑暗面。 ---沃尔特•惠特曼\r\n156. 只有你才知道对你而言什么才是糟糕的生活，什么才是真正的一塌糊涂，这与旁人的教说，旁人的经验并无关系。\r\n1. 这世上真话本就不多，一位女子的脸红胜过一大段对白。-- 老舍\r\n1. 如果说有谁在看到流星的瞬时就能许下愿望，那一定是非常纯熟且迫切的愿望。\r\n1. “我可以尽管向你们这个组合宣泄负面情绪，因为你们是被主流唾弃的，所以无论我说什么都没错，毕竟我是站在道德制高点上的。” --momo的老公\r\n1. 不是返璞归真，转了个圈回到的却不是原处。两个放羊最大的区别，一个是满足物质生活，一个是满足精神生活。曾经的种地放羊是生活的根基，被迫接受的事没有什么美感，结束一天的工作后裹着一身臭汗上炕睡觉第二天周而复始，这种放羊与“舒适的生活”是没有挂钩的。而现在那种有情怀的种地放羊则是一种有钱人的主动选择，把过去的苦事中的精华提取，与其他美好的事相连接，在放羊的生活中也能享受惬意的生活。他们有能力选择和组合生活，这不该被批判。\r\n1. 我看到的多数家庭的教育是颠倒混乱的。生下来到学龄前应当树立家长权威（要有敬畏），他们却去溺爱；小学应当严格培养学习习惯和基础，他们却宽松；青春期个性萌芽，父母应当从权威退到民主，让孩子学会理性和责任时，他们却开始各种着急焦虑和专制严管；到大学应该是退居二线，最多给于建议的时候他们开始对孩子人生规划指手画脚；工作了，父母应当放手让孩子完全独立对自己负责时，他们却最终升级到强迫相亲这种直接干涉。\r\n1. 不愿费心力和别人交流。然而总是被指诘在躲避。内心不坦然，才是孤独者的坟墓。\r\n1. 人生如逆旅，我亦是行人。\r\n1. 你一直耿耿于怀的事事实上相关人物根本早就忘记了 耿耿于怀的果然只有你自己“\r\n1. 当前的环境也许只是一个暂态，也许只是世界的一小面；如果你想要见见更大的世界，那就不要太急着让自己为了适应当前的环境而彻底改变。\r\n1. 当你老了，回顾一生，就会发觉：什么时候出国读书，什么时候决定做第一份职业、何时选定了对象而恋爱、什么时候结婚，其实都是命运的巨变。只是当时站在三岔路口，眼见风云千樯，你作出选择的那一日，在日记上，相当沉闷和平凡，当时还以为是生命中普通的一天。——陶杰 《杀鹌鹑的少女》\r\n1. 那一天我二十一岁，在我一生的黄金时代，我有好多奢望。我想爱，想吃，还想在一瞬间变成天上半明半暗的云，后来我才知道，生活就是个缓慢受锤的过程，人一天天老下去，奢望也一天天消逝，最后变得像挨了锤的牛一样。可是我过二十一岁生日时没有预见到这一点。我觉得自己会永远生猛下去，什么也锤不了我。 — —王小波\r\n1. 想要追求自由随性的生活，就一定要先从自律开始。\r\n1. 别人口中越是容易让人得出倾向性结论的问题描述，往往代表他刻意隐瞒了越多关键的细节。\r\n1. 走不进去的世界就不要硬挤了，为难了别人，也作贱了自己。\r\n1. 古龙《多情剑客无情剑》里，提过一个例子：一对厨子，饭馆打烊后，他们在后厨，自己给自己炒了盘菜，找点小酒，很惬意的饮食一番，舒服那一两个时辰。\r\n--古龙还说：他们还活着，就是因为一天还有那么一两个时辰。\r\n1. 从来如此，便对么？——鲁迅《狂人日记》\r\n1. 那……学校不好，难道知识也不好么?\r\n1. 高三毕业的欢送会上，复读班上的五个男生合唱了这首歌，我知道他们都不是第一年参加高考，我也知道那一年他们仍然成绩平平，我们那一届复读班整体都考的很差，但这首歌我记到现在。好像长这么大，见过的最多的无功而返，苦苦挣扎都是在学习的道路上。可苦涩中的温暖最能长存。路漫漫，且行且珍重！\r\n1. 我一直记得刘瑜写给女儿的一段话：愿你被很多人爱，如果没有，愿你在寂寞里学会宽容。\r\n1. 开始并完成一件事，比做好它更重要，因为只要开始了，你就有机会把它做的更好———-一件看上去繁难的事，只要开始做了，就会变得越来越容易。”\r\n1. 张一鸣有一句说的特别对：所谓成功，就是延迟满足。\r\n1. 成长是件残酷的事情，也许久而久之我们活成了别人想要的模样。但世俗跟成熟是两码事：在熙熙攘攘之外学会“我愿意”，不愿将就的你也可以不那么讲究。\r\n1. “秘密的暴力比公开的暴力更令人恐怖，它会使人失去思考能力、道德意识和抵抗意志，因此退化到最低等原始动物保命本能中去。为了保命求生、避免肉体折磨，人会变得全无廉耻、奴性十足、无所不为。秘密统治对政府权力的正当行使和合道德性同样有着严重的腐蚀作用。” ---《布达佩斯往事》\r\n1. 一个成熟的人，他的标准来自他的内心，而大多数的人，却受环境左右。对自己的标准会不由自主的降低以适应这个环境，减少自身与环境的冲突，在一个低标准下，自觉“满意”的度过每一天。 ——《精进》\r\n1. 梦想不一定要马上实现，如果身边的人反对，那就走慢一点，只要你每天确定自己在往那里走就行。\r\n1. 他没有勇气，也没有兴趣使渴望的行动得以一气呵成，因此自己在半途中就会怀疑行动的意义。---夏目漱石\r\n1. 我来不及认真地年轻，待明白过来时，只能选择认真地老去。 —— 三毛\r\n1. 我会以我的标准与方式看待世界，但我并不会以他来要求他人。--清让\r\n1. 时间，只是一个自称能治百病的庸医。\r\n1. 当你能从你认可的人或者事物身上吸取经验与知识，这是大部分人能做到的，但是如果你能从你不认可的人或者事物身上吸取营养，学到东西，那就真的太难得\r\n了。\r\n1. 你想成为什么样的人，那就尽量去向他们靠近。\r\n1. 真正幽默的人，是把快乐给了别人。\r\n1. 人这一生有很多重要的决定，每个决定其实都决定了我未来的人生，是否被动接受做一个幼师、是否转专业、是否升本等等等，做这些所有的选择与决定前，想想自身的优势，结合趋势与实力，看一下自己做这件事的把握有多少，但凡重大的决定，不要想着在尝试中去找答案，对于小事情这样是可以的，但是一些人生的重大决定是没有尝试的机会的，想尽一切办法想把仗打赢的，是最难的，我最该做的，是在一开始选择前，确定这场仗能打赢，再去打。\r\n1. 面试造飞机，工作扭螺丝。\r\n1. “让忙于务实的人务实，让乐于做梦的人做梦”。\r\n1. 生命是一场华丽的冒险，只是我们永远都跨不过时间的深渊。\r\n1. 曾经的你，以为只要带着那把长剑和赤子之心就可以说服自己不出卖理想的灵魂。在最艰难和不得不流泪的晚上，即使连自己都在笑自己傻，但仍然用长剑刺痛自己，提醒自己，勇往直前，直到将来。\r\n1. 过往不恋，未来不迎，当下不负。\r\n1. 忠言逆耳，良药苦口，可不都是这样吗。但我觉得最重要的是要培养自己的判断力，在兼容并包的基础上一定要有自己的主心骨。善听百家之言，思想上的言论抒发不分对错，要客观结合自己的情况，别人的经验也不全是对的，就算是对的，也不全适合自己，不同的人有不同的性格，脾气，要自己汲取自己认可的观点看法，适合自己才是最好的。\r\n1. 世上最难的事之一，把自己的思想装进别人的脑袋。\r\n1. 这短短的一生，我们最终都会失去。你不妨大胆一些，爱一个人，攀一座山，追一个梦。 ——《大鱼海棠》\r\n1. 有时候遇到瓶颈了，你应该停下来好好想想，是有四年工作经验，还是一个经验用了四年。\r\n1. 这世上唯有病痛和亲人去世是真切的痛楚，其他都是不必要的伤感，是忽略了当下拥有的一切的贪婪。\r\n1. 许多人所谓的成熟， 不过是被习俗磨去了棱角，变得世故而实际了。那不是成熟，而是精神的早衰和个性的消亡。真正的成熟，应当是独特个性的形成，真实自我的发现，精神上的结果和丰收。\r\n1. 别嫌读书苦，你现在的气质里，藏着你走过的路，读书不是为了雄辩和驳斥，也不是为了轻信和盲从，而是为了思考和权衡。\r\n1. 真的不要小看父母，不要觉得自己很厉害。以前笑父母遥控器还要套个手机套，其实和现在我们用手机还要贴膜戴手机套是一样的。以前笑父母为了一毛钱还和人家讨价还价，其实和我们现在用着手机在群里抢红包是一样的。以前父母无聊时磕着瓜子看着小说，其实和我们现在拿着手机刷着朋友圈是一样的。以前父母拉几个好友打麻将谈天说地，其实和我们现在拉几个网友王者农药开黑是一样的。以前父母在厂里上班踩着缝纫机，其实和我们现在写字楼里对着电脑写 PPT word 文档是一样的。所有的都没有变，只是时代在变，生活方式升级，换一种方式活着而已。很多年以后，可能会有10后笑着：瞧，我爸以前是在格子间苦逼写代码的工程师，我现在一家未来公司看着机器人帮我干活，公司只有我一个人呢。\r\n1. 有勇气去改变那些可以改变的事，\r\n有肚量去容忍那些无法改变的事，\r\n有智慧去区分上述的事。\r\n1. 识人不必探尽，探尽则多疑。\r\n知人不必言尽，言尽则无友。\r\n责人不必苛尽，苛尽则众远。\r\n敬人不必卑尽，卑尽则少骨。\r\n让人不必退尽，退尽则路寡。\r\n1. 安全感在很多时候是束缚人的枷锁，过度追求会让人生少了很多可能性。\r\n1. 大部分的恐惧，只有在你把它当回事儿的时候才是。\r\n1. 很多时候，没有兴趣并不真的是没有兴趣，而是怕自己做不好。\r\n1. 最好的兴趣就是永远达不到但可以不断精进的那些。\r\n1. 很多时候，成功者是自证的，失败者也是。\r\n1. 阻止大脑用思维定式进行自动加工，夺回大脑的控制权。\r\n1. 努力不是盲目的，是定向的。\r\n1. 要超越心智，首先要能辨别更好的心智与现有心智的区别。\r\n1. 世俗的成功不是人人都可以达成的，按概率也就只有一小部分。\r\n1. 盲目听信成功学故事并模仿，将离成功越来越远。\r\n1. 不管是恋爱还是职场，要选得好就得先小范围尝试和观察，对所谓的“好坏”有个大体了解后，然后再选择，最后全情投入。\r\n1. 完美的职业规划不存在，避免因为规划得太细而失去更多的可能性。\r\n1. 过去的付出只代表过去，沉没成本不是成本。\r\n1. 常认为自己是受害者的人往往真的会成为受害者。\r\n1. 绝对公平并不存在，追求绝对公平只是追求自利。\r\n1. 活在父母的世界跟活在子女的世界一样，都是人格尚未独立出来的婴儿。\r\n1. 在事情没有快速变化的前提下，等待仅仅是无谓的消耗。\r\n1. 要撕掉自己的短处，不要试图掩盖，用更强的标签去替代它。\r\n1. 陷入指定的成功，你就基本不太可能成功了。\r\n1. 握不住的沙，不如扬了它。\r\n1. 优于别人并不高贵，真正的高贵因该是优于过去的自己。-- 海明威《真实的高贵》\r\n1. 顶级组织至情至性，\r\n 一流组织共同信仰，\r\n二流组织共同利益，\r\n三流组织共同规则。\r\n1. 像老大寻求意见时，自己先思考出几套解决方案也就是“香蕉”，让你的老板去做选择而不是让他出想法。如果因为你的”香蕉”没熟透，放心你的老大会给你更好的解决方法，先养成动脑思考的好习惯。 --香蕉法则\r\n1. 善良不是要求别人做什么，而是要求自己做什么。\r\n1. 自己是既得利益者，说这不公平叫「觉悟高」，值得钦佩，自己不是既得利益者，就别眼里只看到不公平，因为这太正常了，如果不理解，或者心生抱怨，该想想自己的问题。\r\n1. 文字传达观点，文字也能误传观点。\r\n1. “检验一流智力的标准，就是看你能不能在头脑中同时存在两种相反的想法，还维持正常行事的能力。”\r\n1. 有时候，鸡汤可能比所谓的干货更有用，很多道理其实大家都懂，我们做出改变缺乏的只是一个推动力。\r\n1. 不自律，无自由：\r\n曾经以为自由就是想做啥做啥，后来才发现自律者才会自由。当一个人缺乏自由的时候，他做的事情总是在受习惯和即时诱惑的影响，要么就是被他人的思想观念所扰，几乎永远不可能去做内心真正渴望的事。\r\n1. 《海上钢琴师》中，1900 为什么最后没有下船？\r\n我们的陆地就是他的海洋。无人愿意一生漂泊。\r\n1. 永生是否是一种酷刑？\r\n凡是能被适应的惩罚都不能算是酷刑。\r\n1. 当有人做一件事并没有伤害到任何人的事情，你却要指手画脚的时候，你才是那个傻逼。\r\n1. 这世上只有一种成功，就是能用自己喜欢的方式度过自己的一生。\r\n1. 只有深入一座城市的边边角角，了解城市里的一花一草一木，才能真正看懂人生百态，品味酸甜苦辣的人生。\r\n1. 信仰是用来约束自己的。\r\n1. 习惯，是扼杀创造力的最大杀手！\r\n当你所掌握的信息不足以帮自己判断的时候，你可以选择观望，但是用这些无比正确的废话来说服别人，就是最大的笑话，就等同于，你自己没有判断力，也要求别人也跟你一样没有判断力。\r\n1. 没有观点的反驳更可怕，有那么一拨人，为了让自己无比正确，总说一大堆永远正确的话。\r\n1. 穷人思维和富人的思维是，穷人花 10 块，总奢望得到 100 块的价值，而富人花 1w 块，只求得到 1000 块的价值就够了，但是即便如此，富人可以轻易获取 1000 块的资源，而穷人即便费劲九牛二虎之力得到 100 块的价值也差距很大。\r\n1. 我自己也做了公众号，尤其是影响力越做越大，关注的人越来越多，当一个群体越来越大的时候，难免鱼龙混杂，什么样的人都有，也就意味着，你的所有观点，总会随着群体越来越大，不认可你的人越来越多，当然，认可你的人其实是更多的，但是认可你的人不会让你糟心，而不认可你的人，或者说一些杠精才会让你最糟心的。\r\n1. 这个世界有几样东西是不能被取代的，第一：亲身感受。我拿着一碗水，告诉你：这个是海洋，你永远不会有感觉。第二：自我成长和努力。没有人可以取代你做事情，应该自己完成的，只能由自己完成。工具的善用，自我的实力，重要性是排在第一位。刘翔跑再快，我开车，轻松超越他。当然，前提是我会开车，四肢还得健全。\r\n1. 吃不了起早贪黑的苦，你丢不起那个街头摆摊的人，你凭什么觉得不公平？\r\n1. 活在当下。我 22 岁的时候从不会去考虑五六年之后的我会是怎样，我只是活在当下，做好当下的事而已。\r\n1. 致正少年的你，愿你所有快乐无需假装，愿你此生尽兴赤诚善良。\r\n1. 罗素说：只有一种英雄主义，就是在认清生活的真相后依然热爱生活。\r\n1. 这世界就是一拨人昼夜不停的运转，另一拨人起床发现世界变了。\r\n1. 人有一个通病：一直拥有的就觉得是理所当然的，唯有等到失去的时候，才发现原来自己是如何的富有。\r\n1. 故乡养活不了肉体，城市寄托不了灵魂，回不去的故乡，容不进的城市。有工作的地万没有家，有家的地方却没有工作，他乡容不下灵魂，故乡安不了肉身，一个叫家的地方找不到养家糊口的路，找到了养家糊口的地方却安不了家，从此便有了漂泊，有了远方，有了乡愁......',`groups`='Default',`is_show`=0,`publish`=1,`summary`='',`gmt_modified`='2018-11-19'  WHERE  `id` = 32 [ RunTime:0.001798s ]
[ sql ] [ SQL ] SELECT COUNT(*) AS tp_count FROM `note` WHERE  `groups` = 'Default' LIMIT 1 [ RunTime:0.002215s ]
[ sql ] [ SQL ] UPDATE `groups`  SET `g_count`=13  WHERE  `groups` = 'Default' [ RunTime:0.000502s ]
[ sql ] [ SQL ] SELECT COUNT(*) AS tp_count FROM `note` WHERE  `groups` = 'Default' LIMIT 1 [ RunTime:0.002009s ]
[ sql ] [ SQL ] UPDATE `groups`  SET `g_count`=13  WHERE  `groups` = 'Default' [ RunTime:0.000490s ]
---------------------------------------------------------------
[ 2018-11-19T19:21:17+08:00 ] 74.120.168.12 74.120.168.12 GET /daily/admin/note/shownote/id/32.html
[ info ] qingrang.top/daily/admin/note/shownote/id/32.html [运行时间：0.064752s][吞吐率：15.44req/s] [内存消耗：2,040.85kb] [文件加载：55]
[ info ] [ LANG ] /var/www/html/daily/thinkphp/lang/zh-cn.php
[ info ] [ ROUTE ] array (
  'type' => 'module',
  'module' => 
  array (
    0 => 'admin',
    1 => 'note',
    2 => 'shownote',
  ),
)
[ info ] [ HEADER ] array (
  'host' => 'qingrang.top',
  'cache-control' => 'max-age=0',
  'upgrade-insecure-requests' => '1',
  'user-agent' => 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/70.0.3538.102 Safari/537.36',
  'accept' => 'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8',
  'referer' => 'http://qingrang.top/daily/admin/note/editnote/id/32.html',
  'accept-encoding' => 'gzip, deflate',
  'accept-language' => 'zh-CN,zh;q=0.9,la;q=0.8,en;q=0.7,lb;q=0.6',
  'cookie' => 'Hm_lvt_1769181352e9adc950166aada465644e=1541082864,1541122974,1541171416,1542098176; PHPSESSID=2itucolgeg6ju9b7e0uomjso34',
  'connection' => 'close',
)
[ info ] [ PARAM ] array (
  'id' => '32',
)
[ info ] [ SESSION ] INIT array (
  'id' => '',
  'var_session_id' => '',
  'prefix' => 'think',
  'type' => '',
  'auto_start' => true,
)
[ info ] [ RUN ] app\admin\controller\Note->showNote[ /var/www/html/daily/application/admin/controller/Note.php ]
[ info ] [ DB ] INIT mysql
[ info ] [ VIEW ] /var/www/html/daily/application/admin/view/note/shownote.html [ array (
  0 => 'note',
  1 => 'groups',
) ]
[ info ] [ LOG ] INIT File
[ sql ] [ DB ] CONNECT:[ UseTime:0.000519s ] mysql:host=74.120.168.12;dbname=diary;charset=utf8
[ sql ] [ SQL ] SHOW COLUMNS FROM `note` [ RunTime:0.001310s ]
[ sql ] [ SQL ] SELECT * FROM `note` WHERE  `id` = 32 LIMIT 1 [ RunTime:0.000632s ]
[ sql ] [ SQL ] SHOW COLUMNS FROM `groups` [ RunTime:0.000930s ]
[ sql ] [ SQL ] SELECT * FROM `groups` [ RunTime:0.000362s ]
---------------------------------------------------------------
[ 2018-11-19T19:21:24+08:00 ] 74.120.168.12 74.120.168.12 GET /daily/admin/note/editnote/id/247.html
[ info ] qingrang.top/daily/admin/note/editnote/id/247.html [运行时间：0.062824s][吞吐率：15.92req/s] [内存消耗：2,113.41kb] [文件加载：56]
[ info ] [ LANG ] /var/www/html/daily/thinkphp/lang/zh-cn.php
[ info ] [ ROUTE ] array (
  'type' => 'module',
  'module' => 
  array (
    0 => 'admin',
    1 => 'note',
    2 => 'editnote',
  ),
)
[ info ] [ HEADER ] array (
  'host' => 'qingrang.top',
  'upgrade-insecure-requests' => '1',
  'user-agent' => 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/70.0.3538.102 Safari/537.36',
  'accept' => 'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8',
  'referer' => 'http://qingrang.top/daily/admin/note',
  'accept-encoding' => 'gzip, deflate',
  'accept-language' => 'zh-CN,zh;q=0.9,la;q=0.8,en;q=0.7,lb;q=0.6',
  'cookie' => 'Hm_lvt_1769181352e9adc950166aada465644e=1541082864,1541122974,1541171416,1542098176; PHPSESSID=2itucolgeg6ju9b7e0uomjso34',
  'connection' => 'close',
)
[ info ] [ PARAM ] array (
  'id' => '247',
)
[ info ] [ SESSION ] INIT array (
  'id' => '',
  'var_session_id' => '',
  'prefix' => 'think',
  'type' => '',
  'auto_start' => true,
)
[ info ] [ RUN ] app\admin\controller\Note->editNote[ /var/www/html/daily/application/admin/controller/Note.php ]
[ info ] [ DB ] INIT mysql
[ info ] [ VIEW ] /var/www/html/daily/application/admin/view/note/editnote.html [ array (
  0 => 'note',
  1 => 'groups',
) ]
[ info ] [ LOG ] INIT File
[ sql ] [ DB ] CONNECT:[ UseTime:0.000708s ] mysql:host=74.120.168.12;dbname=diary;charset=utf8
[ sql ] [ SQL ] SHOW COLUMNS FROM `note` [ RunTime:0.001403s ]
[ sql ] [ SQL ] SELECT * FROM `note` WHERE  `id` = 247 LIMIT 1 [ RunTime:0.000705s ]
[ sql ] [ SQL ] SHOW COLUMNS FROM `groups` [ RunTime:0.000872s ]
[ sql ] [ SQL ] SELECT * FROM `groups` [ RunTime:0.000339s ]
---------------------------------------------------------------
[ 2018-11-19T19:21:33+08:00 ] 74.120.168.12 74.120.168.12 POST /daily/admin/note/updatenote/id/247.html
[ info ] qingrang.top/daily/admin/note/updatenote/id/247.html [运行时间：0.067180s][吞吐率：14.89req/s] [内存消耗：2,365.35kb] [文件加载：58]
[ info ] [ LANG ] /var/www/html/daily/thinkphp/lang/zh-cn.php
[ info ] [ ROUTE ] array (
  'type' => 'module',
  'module' => 
  array (
    0 => 'admin',
    1 => 'note',
    2 => 'updatenote',
  ),
)
[ info ] [ HEADER ] array (
  'host' => 'qingrang.top',
  'content-length' => '86442',
  'cache-control' => 'max-age=0',
  'origin' => 'http://qingrang.top',
  'upgrade-insecure-requests' => '1',
  'content-type' => 'application/x-www-form-urlencoded',
  'user-agent' => 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/70.0.3538.102 Safari/537.36',
  'accept' => 'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8',
  'referer' => 'http://qingrang.top/daily/admin/note/editnote/id/247.html',
  'accept-encoding' => 'gzip, deflate',
  'accept-language' => 'zh-CN,zh;q=0.9,la;q=0.8,en;q=0.7,lb;q=0.6',
  'cookie' => 'Hm_lvt_1769181352e9adc950166aada465644e=1541082864,1541122974,1541171416,1542098176; PHPSESSID=2itucolgeg6ju9b7e0uomjso34',
  'connection' => 'close',
)
[ info ] [ PARAM ] array (
  'summary' => '',
  'content' => '# Spring(一) - IOC（控制反转）
[TOC]

Spring 是一个基于 **IOC** 和 **AOP** 的结构 J2EE 系统的框架。
## IOC 概念
控制反转（IOC， Inversion of Control），是一个概念，是一种思想。指将传统上由程序代码直接操控的对象调用权交给容器，通过容器来实现对象的装配和管理。控制反转就是对对象控制权的转移，从程序代码本身反转到了外部容器。简单说就是创建对象由以前的程序员自己 new 构造方法来调用，变成了交由 Spring 创建对象。

IoC 是一个概念，是一种思想，其实现方式多种多样。当前比较流行的实现方式有两种：依赖注入和依赖查找。依赖注入方式应用更为广泛。
- 依赖查找： Dependency Lookup， DL，容器提供回调接口和上下文环境给组件，程序代
码则需要提供具体的查找方式。比较典型的是依赖于 JNDI 系统的查找。
- 依赖注入： Dependency Injection， DI，程序代码不做定位查询，这些工作由容器自行完成。简单地说就是拿到的对象的属性，已经被注入好相关值了，直接使用即可。

依赖注入 DI 是指程序运行过程中，若需要调用另一个对象协助时，无须在代码中创建被调用者，而是依赖于外部容器，由外部容器创建后传递给程序。Spring 的依赖注入对调用者与被调用者几乎没有任何要求，完全支持 POJO 之间依赖关系的管理。

依赖注入是目前最优秀的解耦方式。依赖注入让 Spring 的 Bean 之间以配置文件的方式组织在一起，而不是以硬编码的方式耦合在一起的。

>以获取对象的方式来进行比较

- 传统的方式

通过 new 关键字主动创建一个对象

相当于你自己去菜市场 new 了一只鸡，不过是生鸡，要自己拔毛，去内脏，再上花椒，酱油，烤制，经过各种工序之后，才可以食用。

- IOC方式

对象的生命周期由 Spring 来管理，直接从 Spring 那里去获取一个对象。IOC 是反转控制 (Inversion Of Control)的缩写，就像控制权从本来在自己手里，现在交给了 Spring。

相当于去馆子(Spring)点了一只鸡，交到你手上的时候，已经五味俱全，你就只管吃就行了。

## 第一个 Spring 程序
### 传统的面向接口编程
经过以下例子可以看出，若接口（Service 层）变了，Test(View 层) 也的改，耦合度很高。

*ISomeService.java - 接口*
```
public interface ISomeService {
	void doSome();
}
```
*SomeServiceImpl.java - 实现类*
```
public class SomeServiceImpl implements ISomeService {
	@Override
	public void doSome() {
		System.out.println("执行doSome()方法");
	}
}
```
*Test.java - 测试*
```
@Test
public void test01() {
	ISomeService service = new SomeServiceImpl();
	service.doSome();
}
```
### Spring 实现
*applicationContext.mxl - Spring 的配置文件*
```
<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xsi:schemaLocation="
        http://www.springframework.org/schema/beans 
        http://www.springframework.org/schema/beans/spring-beans.xsd">

    <!-- 注册 Service，Spring 底层实际是做了 SomeServiceImpl myService = new SomeServiceImpl(); -->
    <bean id="myService" class="top.qingrang.service.SomeServiceImpl"/>

</beans>
```
*Test.java - 测试*
```
@Test
public void test02() {
	// 创建容器对象，加载 Spring 配置文件，会从类路径下查找配置文件
	ApplicationContext ac = new ClassPathXmlApplicationContext("applicationContext.xml");
	ISomeService someService = (ISomeService)ac.getBean("myService");
	someService.doSome();
}
```

从以上代码中已经看不到 `SomeServiceImpl` 这个实现类了，就做到了解耦。

>FileSystemXmlApplicationContext

```
// 创建容器对象，加载 Spring 配置文件，会从项目的根下查找配置文件
ApplicationContext ac = new FileSystemXmlApplicationContext("applicationContext.xml");

// 创建容器对象，加载 Spring 配置文件，会从当前文件系统的 D 盘根目录下查找配置文件
ApplicationContext ac = new FileSystemXmlApplicationContext("d:/applicationContext.xml");
```

>BeanFactory 容器

*Test.java*
```
@Test
public void test05() {
	// 创建 BeanFactory 容器
	BeanFactory bf = new XmlBeanFactory(new ClassPathResource("applicationContext.xml"));
	ISomeService service = (ISomeService) bf.getBean("myService");
	service.doSome();
}
```

>ApplicationContext 与 BeanFactory 容器的区别

这两上容器对于其中 Bean 的创建时机不同：
1. ApplicationContext容器在进行初始化时，会将其中的所有Bean(对象)进行创建
 - 缺点：占用系统资源（内存、CPU等）
 - 优点：响应速度快
1. BeanFactory容器中的对象，在容器初始化时并不会被创建，而是在真正获取该对象时才被创建
 - 缺点：相对来说，响应速度慢
 - 优点：不多占用系统资源

## Bean 的装配
Bean 的装配，即 Bean 对象的创建。容器根据代码要求创建 Bean 对象后再传递给代码的过程，称为 Bean 的装配。
### 默认装配方式
代码通过 `getBean()` 方式从容器获取指定的 Bean 实例，容器首先会调用 Bean 类的无参构造器，创建空值的实例对象。

*ISomeService.java - service 接口*
```
public interface ISomeService {
	void doSome();
}
```
*SomeServiceImpl.java - service 实现类*
```
public class SomeServiceImpl implements ISomeService {
	public SomeServiceImpl() {
		System.out.println("执行无参构造器");
	}

	@Override
	public void doSome() {
		System.out.println("执行doSome()方法");
	}
}
```
*ServiceFactory.java - service 工厂*
```
public class ServiceFactory {
	public ISomeService getSomeService() {
		return new SomeServiceImpl();
	}
}
```
*applicationContext.mxl*
```
<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xsi:schemaLocation="
        http://www.springframework.org/schema/beans 
        http://www.springframework.org/schema/beans/spring-beans.xsd">

    <!-- 注册 Service，Spring 底层实际是做了 SomeServiceImpl myService = new SomeServiceImpl();  -->
    <bean id="myService" class="com.bjpowernode.ba01.SomeServiceImpl"/>
</beans>
```
*Test.java - 测试*
```
@Test
public void test01() {
	// 创建容器对象，加载Spring配置文件
	String resource = "com/bjpowernode/ba01/applicationContext.xml";
	ApplicationContext ac = new ClassPathXmlApplicationContext(resource);
	ISomeService service = (ISomeService) ac.getBean("myService");
	service.doSome();
}
```
### 动态工厂 Bean
有些时候，项目中需要通过工厂类来创建 Bean 实例，而不能像前面例子中似的，直接由 Spring 容器来装配 Bean 实例。使用工厂模式创建 Bean 实例，就会使工厂类与要创建的 Bean 类耦合到一起。但，这样做的缺点是，不仅工厂类与目标类耦合到了一起，测试类与工厂类也耦合到了一起。

*ISomeService.java - service 接口*
```
public interface ISomeService {
	void doSome();
}
```
*SomeServiceImpl.java - service 实现类*
```
public class SomeServiceImpl implements ISomeService {
	@Override
	public void doSome() {
		System.out.println("执行doSome()方法");
	}
}
```
*ServiceFactory.java - service 工厂*
```
public class ServiceFactory {
	public ISomeService getSomeService() {
		return new SomeServiceImpl();
	}
}
```
*applicationContext.mxl*
```
<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xsi:schemaLocation="
        http://www.springframework.org/schema/beans 
        http://www.springframework.org/schema/beans/spring-beans.xsd">

    <!-- 注册动态工厂 -->
    <bean id="factory" class="top.qingrang.ba02.ServiceFactory"/>

    <!-- 注册 Service：动态工厂 Bean -->
    <bean id="myService" factory-bean="factory" factory-method="getSomeService"/>
</beans>
```
*Test.java - 测试*
```
public void test02() {
	String resource = "top/qingrang/ba02/applicationContext.xml";
	ApplicationContext ac = new ClassPathXmlApplicationContext(resource);
	ISomeService service = (ISomeService) ac.getBean("myService");
	service.doSome();
}
```
### 静态工厂 Bean
*ServiceFactory.java - service 工厂*
```
public class ServiceFactory {
	//静态方法
	public static ISomeService getSomeService() {
		return new SomeServiceImpl();
	}
}
```
*applicationContext.mxl*
```
<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xsi:schemaLocation="
        http://www.springframework.org/schema/beans 
        http://www.springframework.org/schema/beans/spring-beans.xsd">

    <!-- 注册 Service：静态工厂 Bean -->
    <bean id="myService" class="top.qingrang.ba03.ServiceFactory" factory-method="getSomeService"/>
</beans>
```
### 容器中 Bean 的作用域
*applicationContext.mxl*
```
<bean id="myService" class="top.qingrang.ba04.SomeServiceImpl" scope="prototype"/>
```

当通过 Spring 容器创建一个 Bean 实例时，不仅可以完成 Bean 的实例化，还可以通过 scope 属性，为 Bean 指定特定的作用域。 Spring 支持 5 种作用域。
1. singleton： 单例模式。即在整个 Spring 容器中，使用 singleton 定义的 Bean 将是单例的，只有一个实例。该 Bean 是在容器被创建时即被装配好了。 默认为单例的。
1. prototype： 原型模式。即每次使用 getBean 方法获取的同一个 `<bean />` 的实例都是一个新的实例。Bean 实例是在代码中使用该 Bean 实例时才进行装配的。
1. request：对于每次 HTTP 请求，都将会产生一个不同的 Bean 实例。
1. session：对于每个不同的 HTTP session，都将产生一个不同的 Bean 实例。
1. global session：每个全局的 HTTP session 对应一个 Bean 实例。典型情况下，仅在使用 portlet 集群时有效，多个 Web 应用共享一个 session。一般应用中， global-session 与 session 是等同的。

对于 scope 的值 request、 session 与 global session， 只有在 Web 应用中使用 Spring 时，该作用域才有效。

### Bean 后处理器
Bean 后处理器是一种特殊的 Bean，容器中所有的 Bean 在初始化时，均会自动执行该类的两个方法。由于该 Bean 是由其它 Bean 自动调用执行，不是程序员手工调用，故此 Bean 无须 id 属性。

需要做的是，在 Bean 后处理器类方法中，只要对 Bean 类与 Bean 类中的方法进行判断，就可实现对指定的 Bean 的指定方法进行功能扩展与增强。方法返回的 Bean 对象，即是增强过的对象。就是**设计模式中的代理模式**。

代码中需要**自定义 Bean 后处理器类**。该类就是**实现**了**接口 BeanPostProcessor** 的类。该接口中包含两个方法，分别在目标 Bean 初始化完毕之前与之后执行。它们的返回值为：功能被扩展或增强后的 Bean 对象。

Bean 初始化完毕有一个标志：一个方法将被执行。即当该方法被执行时，表示该 Bean 被初始化完毕。所以 Bean 后处理器中两个方法的执行，是在这个方法之前之后执行。 这个方法在后面将会讲到。

`public Object postProcessBeforeInitialization(Object bean, String beanId) throws BeansException`

该方法会在目标 Bean 初始化完毕之前由容器自动调用。

`public Object postProcessAfterInitialization(Object bean, String beanId) throws BeansException`

该方法会在目标 Bean 初始化完毕之后由容器自动调用。它们的参数是：第一个参数是系统即将初始化的 Bean 实例，第二个参数是该 Bean 实例的 id 属性值。若 Bean 没有 id 就是 name 属性值。

*ISomeService.java - service 接口*
```
public interface ISomeService {
	String doSome();
	String doOther();
}
```
*SomeServiceImpl.java - service 实现类*
```
public class SomeServiceImpl implements ISomeService {
	@Override
	public String doSome() {
		System.out.println("执行doSome()方法");
		return "doSome() - abc";
	}
	
	@Override
	public String doOther() {
		System.out.println("执行doOther()方法");
		return "doOther() - def";
	}
}
```
*MyBeanPostProcessor.java - 自定义 Bean 后处理器类*
```
public class MyBeanPostProcessor implements BeanPostProcessor {

	// bean：表示当前正在进行初始化的Bean对象
	// beanName：表示当前正在进行初始化的Bean对象的id
	@Override
	public Object postProcessBeforeInitialization(Object bean, String beanName) throws BeansException {
		System.out.println("执行 ---- before() ---方法");
		return bean;
	}

	@Override
	public Object postProcessAfterInitialization(final Object bean, String beanName) throws BeansException {
		System.out.println("执行 ---- after() ---方法");
		//判断 SomeServiceImpl 对象
		if ("myService".equals(beanName)) {
			Object obj = Proxy.newProxyInstance(bean.getClass().getClassLoader(),
					bean.getClass().getInterfaces(),
					new InvocationHandler() {
						@Override
						public Object invoke(Object proxy, Method method, Object[] args) throws Throwable {
							Object invoke = method.invoke(bean, args);
							//判断具体方法
							if ("doSome".equals(method.getName())) {
								return ((String) invoke).toUpperCase();
							}
							return invoke;
						}
					});
			return obj;
		}
		return bean;
	}
}
```
*applicationContext.mxl*
```
<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xsi:schemaLocation="
        http://www.springframework.org/schema/beans 
        http://www.springframework.org/schema/beans/spring-beans.xsd">

    <!-- 注册 Service -->
    <bean id="myService" class="top.qingrang.ba05.SomeServiceImpl"/>
    <bean id="myService2" class="top.qingrang.ba05.SomeServiceImpl"/>

    <!-- 注册 Bean 后处理器 -->
    <bean class="top.qingrang.ba05.MyBeanPostProcessor"/>

</beans>
```
*Test.java - 测试*
```
public void test01() {
	String resource = "top/qingrang/ba05/applicationContext.xml";
	ApplicationContext ac = new ClassPathXmlApplicationContext(resource);

	ISomeService service = (ISomeService) ac.getBean("myService");
	System.out.println(service.doSome());
	System.out.println(service.doOther());

	System.out.println("======================");

	ISomeService service2 = (ISomeService) ac.getBean("myService2");
	System.out.println(service2.doSome());
	System.out.println(service2.doOther());
}
```

*输出结果*
```
执行 ---- before() ---方法
执行 ---- after() ---方法
执行 ---- before() ---方法
执行 ---- after() ---方法
执行doSome()方法
DOSOME() - ABC
执行doOther()方法
doOther() - def
======================
执行doSome()方法
doSome() - abc
执行doOther()方法
doOther() - def
```
### Bean 的生命周期
*ISomeService.java - service 接口*
```
public interface ISomeService {
	void doSome();
}
```
*SomeServiceImpl.java - service 实现类*
```
public class SomeServiceImpl implements ISomeService, BeanNameAware, BeanFactoryAware, InitializingBean, DisposableBean {
	private String adao;
	private String bdao;

	public void setAdao(String adao) {
		this.adao = adao;
		System.out.println("Step2：执行 setter");
	}

	public void setBdao(String bdao) {
		this.bdao = bdao;
		System.out.println("Step2：执行 setter");
	}

	public SomeServiceImpl() {
		System.out.println("Step1：执行无参构造器");
	}

	@Override
	public void doSome() {
		System.out.println("Step9：执行 doSome() 方法");
	}

	public void setUp() {
		System.out.println("Step7：初始化完毕之后");
	}

	public void tearDown() {
		System.out.println("Step11：销毁之前");
	}

	@Override
	public void setBeanName(String name) {
		System.out.println("Step3：获取到 bean 的 id = " + name);
	}

	@Override
	public void setBeanFactory(BeanFactory beanFactory) throws BeansException {
		System.out.println("Step4：获取到 BeanFactory 容器");
	}

	@Override
	public void afterPropertiesSet() throws Exception {
		System.out.println("Step6：Bean 初始化完毕了");
	}

	@Override
	public void destroy() throws Exception {
		System.out.println("Step10：实现接口的销毁之前");
	}
}
```
*MyBeanPostProcessor.java - Bean 后处理器*
```
public class MyBeanPostProcessor implements BeanPostProcessor {
	@Override
	public Object postProcessBeforeInitialization(Object bean, String beanName)
			throws BeansException {
		System.out.println("Step5：MyBeanPostProcessor - 执行 before() 方法");
		return bean;
	}

	@Override
	public Object postProcessAfterInitialization(final Object bean, String beanName)
			throws BeansException {
		System.out.println("Step8：MyBeanPostProcessor - 执行 after() 方法");
		return bean;
	}
}
```
*applicationContext.mxl*
```
<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xsi:schemaLocation="
        http://www.springframework.org/schema/beans 
        http://www.springframework.org/schema/beans/spring-beans.xsd">

    <!-- 注册Service -->
    <bean id="myService" class="top.qingrang.ba07.SomeServiceImpl"
    		init-method="setUp" destroy-method="tearDown">
    	<property name="adao" value="aaa"/>
    	<property name="bdao" value="bbb"/>
   	</bean>

   	<bean class="top.qingrang.ba07.MyBeanPostProcessor"/>
</beans>
```
*Test.java - 测试*
```
public void test01() {
	// 创建容器对象，加载Spring配置文件
	String resource = "top/qingrang/ba07/applicationContext.xml";
	ApplicationContext ac = new ClassPathXmlApplicationContext(resource);
	ISomeService service = (ISomeService) ac.getBean("myService");
	service.doSome();
	// 对于销毁方法的执行，有两个条件：
	// 1)当前的Bean需要是singleton的
	// 2)要手工关闭容器
	((ClassPathXmlApplicationContext)ac).close();
}
```

*输出信息*
```
Step1：执行无参构造器
Step2：执行 setter
Step2：执行 setter
Step3：获取到 bean 的 id = myService
Step4：获取到 BeanFactory 容器
Step5：MyBeanPostProcessor - 执行 before() 方法
Step6：Bean 初始化完毕了
Step7：初始化完毕之后
Step8：MyBeanPostProcessor - 执行 after() 方法
Step9：执行 doSome() 方法
Step10：实现接口的销毁之前
Step11：销毁之前
```
## 基于 XML 的 DI
Bean 实例在调用无参构造器创建了空值对象后，就要**对 Bean 对象的属性进行初始化**。初始化是由容器自动完成的，称为注入。
### 注入分类
#### 设值注入(常用)
和 `setter` 方法有关系。

*School.java*
```
public class School {
	private String name;
	public void setName(String name) {
		this.name = name;
	}

	@Override
	public String toString() {
		return "School [name=" + name + "]";
	}
}
```

*Student.java*
```
public class Student {
	private String name;
	private int age;
	private School school;   // 对象属性，域属性
	
	public void setName(String name) {
		System.out.println("执行setName()");
		this.name = name;
	}
	public void setAge(int age) {
		System.out.println("执行setAge()");
		this.age = age;
	}
	public void setSchool(School school) {
		this.school = school;
	}

	@Override
	public String toString() {
		return "Student [name=" + name + ", age=" + age + ", school=" + school
				+ "]";
	}
}
```

*applicationContext.mxl*
```
<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xsi:schemaLocation="
        http://www.springframework.org/schema/beans 
        http://www.springframework.org/schema/beans/spring-beans.xsd">

    <!-- 注册 Student -->
    <bean id="myStudent" class="top.qingrang.di01.Student">
    	<property name="name" value="张三"/>
    	<property name="age" value="23"/>
        <!-- 对于对象的注入要用 ref -->
    	<property name="school" ref="mySchool"/>
    </bean>

    <!-- 注册 School -->
    <bean id="mySchool" class="top.qingrang.di01.School">
    	<property name="name" value="清华大学"/>
    </bean>

</beans>
```

*Test.java - 测试*
```
public void test01() {
	// 创建容器对象，加载Spring配置文件
	String resource = "top/qingrang/di01/applicationContext.xml";
	ApplicationContext ac = new ClassPathXmlApplicationContext(resource);
	Student student = (Student) ac.getBean("myStudent");
	System.out.println(student);
}
```

*输出信息*
```
执行setName()
执行setAge()
Student [name=张三, age=23, school=School [name=清华大学]]
```
#### 构造注入(很少用)
和 `setter` 方法没有关系，和构造方法有关系。

*Student.java - 为 Student 增加带参构造器*
```
public class Student {
	private String name;
	private int age;
	private School school;   // 对象属性，域属性

	/**
	 * 带参数的构造方法
	 */
	public Student(String name, int age, School school) {
		super();
		this.name = name;
		this.age = age;
		this.school = school;
	}
	...
}
```

*applicationContext.mxl*
```
<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xsi:schemaLocation="
        http://www.springframework.org/schema/beans 
        http://www.springframework.org/schema/beans/spring-beans.xsd">

    <!-- 注册School -->
    <bean id="mySchool" class="top.qingrang.di02.School">
    	<property name="name" value="清华大学"/>
    </bean>

    <!-- 注册Student -->
    <bean id="myStudent" class="top.qingrang.di02.Student">
        <!-- 构造器参数，指定 name -->
    	<constructor-arg name="name" value="李四"/>
    	<constructor-arg name="age" value="24"/>
    	<constructor-arg name="school" ref="mySchool"/>

        <!-- 构造器参数，使用索引 -->
    	<!--
    	<constructor-arg index="0" value="李四"/>
    	<constructor-arg index="1" value="24"/>
    	<constructor-arg index="2" ref="mySchool"/>
    	 -->

        <!-- 构造器参数，默认索引 -->
    	<!--
    	<constructor-arg value="李四"/>
    	<constructor-arg value="24"/>
    	<constructor-arg ref="mySchool"/>
    	 -->
    </bean>
</beans>
```
### 集合属性注入
基本类型数组，对象数组，List，Set，Map，Properties 等。

*School.java*
```
public class School {
	private String name;

	public void setName(String name) {
		this.name = name;
	}

	@Override
	public String toString() {
		return "School [name=" + name + "]";
	}
}
```
*Some.java*
```
public class Some {
	private School[] schools; // 对象数组
	private String[] myStrs; // 字符串数组
	private List<String> myList; // List
	private Set<String> mySet; // Set
	private Map<String, Object> myMap; // Map
	private Properties myPros; // Properties

	public void setSchools(School[] schools) {
		this.schools = schools;
	}
	public void setMyStrs(String[] myStrs) {
		this.myStrs = myStrs;
	}
	public void setMyList(List<String> myList) {
		this.myList = myList;
	}
	public void setMySet(Set<String> mySet) {
		this.mySet = mySet;
	}
	public void setMyMap(Map<String, Object> myMap) {
		this.myMap = myMap;
	}
	public void setMyPros(Properties myPros) {
		this.myPros = myPros;
	}

	@Override
	public String toString() {
		return "Some [schools=" + Arrays.toString(schools) + ", myStrs="
				+ Arrays.toString(myStrs) + ", myList=" + myList + ", mySet="
				+ mySet + ", myMap=" + myMap + ", myPros=" + myPros + "]";
	}
}
```
*applicationContext.xml*
```
<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xsi:schemaLocation="
        http://www.springframework.org/schema/beans 
        http://www.springframework.org/schema/beans/spring-beans.xsd">

    <!-- 注册 School -->
    <bean id="mySchool" class="top.qingrang.di05.School">
    	<property name="name" value="清华大学"/>
    </bean>
    <bean id="mySchool2" class="top.qingrang.di05.School">
    	<property name="name" value="北京大学"/>
    </bean>

    <!-- 注册 Student -->
    <bean id="mySome" class="top.qingrang.di05.Some">
		<!-- 对象数组 -->
    	<property name="schools">
    		<array>
    			<ref bean="mySchool"/>
    			<ref bean="mySchool2"/>
    		</array>
    	</property>
		<!-- 数组：简写，带 ref 的若只有一个可以简写，多个则不行 -->
		<property name="schools" value="mySchool"/>

		<!-- 基本类型数组 -->
    	<property name="myStrs">
    		<array>
    			<value>中国</value>
    			<value>北京</value>
    		</array>
    	</property>
		<!-- 数组：简写 -->
		<property name="myStrs" value="中国,北京"/>

		<!-- List<String> -->
    	<property name="myList">
    		<list>
    			<value>大兴</value>
    			<value>亦庄</value>
    		</list>
    	</property>
		<!-- List<String>：简写 -->
		<property name="myList" value="大兴,亦庄"/>

		<!-- Set<String> -->
    	<property name="mySet">
    		<set>
    			<value>大族企业湾</value>
    			<value>10号楼</value>
    		</set>
    	</property>
		<!-- Set<String>：简写 -->
		<property name="mySet" value="大族企业湾,10号楼"/>

		<!-- Map<String, Object>，Map 的键值都是 object -->
    	<property name="myMap">
    		<map>
    			<entry key="mobile" value="1234567"/>
    			<entry key="QQ" value="7654321"/>
    		</map>
    	</property>

		<!-- Properties，Properties 的键值都是字符串 -->
    	<property name="myPros">
    		<props>
    			<prop key="education">大学</prop>
    			<prop key="gender">男</prop>
    		</props>
    	</property>
    </bean>

</beans>
```
*MyTest.java*
```
@Test
public void test01() {
	// 创建容器对象，加载 Spring 配置文件
	String resource = "top/qingrang/di05/applicationContext.xml";
	ApplicationContext ac = new ClassPathXmlApplicationContext(resource);
	Some some = (Some) ac.getBean("mySome");
	System.out.println(some);
}
```
### 对于域属性(对象)的自动注入
#### byName 方式自动注入
![byName 方式自动注入](https://daily-1252869435.cos.ap-chengdu.myqcloud.com/2018-11-17-22-04-38.png)
#### byType 方式自动注入
![mark](https://daily-1252869435.cos.ap-chengdu.myqcloud.com/2018-11-17-22-06-41.png)
### 使用 SPEL 注入
SPEL(Spring Expression Language)，即 Spring EL 表达式语言。即，在 Spring 配置文件中为 Bean 的属性注入值时，可直接使用 SPEL 表达式计算的结果。 SPEL 表达式以#开头，后跟一对大括号。用法： `<bean id=“abc” value=“#{…}”/>`。
*Person.java*
```
public class Person {
	private String pname;
	private int page;

	public void setPname(String pname) {
		this.pname = pname;
	}
	public void setPage(int page) {
		this.page = page;
	}
	public String getPname() {
		return pname;
	}
	public int getPage() {
		return page;
	}

	@Override
	public String toString() {
		return "Person [pname=" + pname + ", page=" + page + "]";
	}
	
	public int computeAge() {
		return page > 25 ? 25 : page;
	}
}
```
*Student.java*
```
public class Student {
	private String name;
	private int age;
	
	public void setName(String name) {
		this.name = name;
	}
	public void setAge(int age) {
		this.age = age;
	}
	
	@Override
	public String toString() {
		return "Student [name=" + name + ", age=" + age + "]";
	}
}
```
*applicationContext.mxl*
```
<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xsi:schemaLocation="
        http://www.springframework.org/schema/beans 
        http://www.springframework.org/schema/beans/spring-beans.xsd">

    <!-- 注册School -->
    <bean id="myPerson" class="top.qingrang.di09.Person">
    	<property name="pname" value="李四"/>
    	<property name="page" value="#{T(java.lang.Math).random() * 50}"/>   
    </bean>
    
    <bean id="myStudent" class="top.qingrang.di09.Student">
    	<property name="name" value="#{myPerson.pname}"/>
    	<!-- <property name="age" value="#{myPerson.page > 25 ? 25 : myPerson.page}"/> -->
    	<property name="age" value="#{myPerson.computeAge() }"/>
    </bean>

</beans>
```
*Test.java - 测试*
```
@Test
public void test01() {
	// 创建容器对象，加载Spring配置文件
	String resource = "top/qingrang/di09/applicationContext.xml";
	ApplicationContext ac = new ClassPathXmlApplicationContext(resource);
	
	Person person = (Person) ac.getBean("myPerson");
	System.out.println(person);
	
	Student student = (Student) ac.getBean("myStudent");
	System.out.println(student);
}
```
### 使用内部 Bean 注入
若不希望代码直接访问某个 bean，即，在代码中通过 getBean 方法获取该 Bean 实例，则可将该 Bean 的定义放入调用者 bean 定义的内部。

*applicationContext.mxl*
```
<!-- 注册 Student -->
<bean id="myStudent" class="top.qingrang.di10.Student">
	<property name="name" value="张三"/>
	<property name="age" value="23"/>
	<property name="school">
		<!-- 内部 Bean -->
	    <bean class="top.qingrang.di10.School">
	    	<property name="name" value="清华大学"/>
	    </bean>
	</property>
</bean>
```
*Test.java - 测试*
```
@Test
public void test01() {
	// 创建容器对象，加载Spring配置文件
	String resource = "top/qingrang/di10/applicationContext.xml";
	ApplicationContext ac = new ClassPathXmlApplicationContext(resource);
	
	Student student = (Student) ac.getBean("myStudent");
	System.out.println(student);
	
	// 不能访问，会报错
	//org.springframework.beans.factory.NoSuchBeanDefinitionException: No bean named \'mySchool\' is defined
	School school = (School) ac.getBean("mySchool");
	System.out.println(school);
}
```
### 使用同类抽象 Bean 注入
当若干 Bean 实例同属于一个类，且这些实例的属性值又有相同值时，可以使用抽象 Bean，以简化配置文件。

抽象 Bean 是用于让其它 bean 继承的。这个 bean 在 Bean 类中是不能通过 getBean 方法获取的。设置 abstract 属性为 true 来指明该 bean 为抽象 bean， 默认值为 false。 不过，该 bean 不为抽象 bean 时，也可被继承。 只不过，在应用中，用于被继承的 bean 一般为抽象 bean。

*Student.java*
```
public class Student {
	private String name;
	private int age;
	private String school; // 学校

	public void setName(String name) {
		this.name = name;
	}

	public void setAge(int age) {
		this.age = age;
	}

	public void setSchool(String school) {
		this.school = school;
	}

	@Override
	public String toString() {
		return "Student [name=" + name + ", age=" + age + ", school=" + school + "]";
	}
}
```
*applicationContext.mxl*
```
<!-- 同类抽象 Bean，abstract="true" -->
<bean id="baseStudent" class="top.qingrang.di11.Student" abstract="true">
	<property name="school" value="清华大学"/>
</bean>
<!-- 利用 parent 实现继承 -->
<bean id="myStudent" parent="baseStudent">
	<property name="name" value="张三"/>
	<property name="age" value="23"/>
</bean>
<bean id="myStudent2" parent="baseStudent">
	<property name="name" value="李四"/>
	<property name="age" value="24"/>
</bean>
```
*Test.java - 测试*
```
@Test
public void test01() {
	// 创建容器对象，加载Spring配置文件
	String resource = "top/qingrang/di11/applicationContext.xml";
	ApplicationContext ac = new ClassPathXmlApplicationContext(resource);
	
	Student student = (Student) ac.getBean("myStudent");
	System.out.println(student);
	Student student2 = (Student) ac.getBean("myStudent2");
	System.out.println(student2);
}
```
### 使用异类抽象 Bean 注入
当若干不同的类对象具有相同的属性，且其值也相同时，可使用异类抽象 Bean。
![异类抽象 Bean 注入](https://daily-1252869435.cos.ap-chengdu.myqcloud.com/2018-11-18-19-41-35.png)
### 为应用指定多个 Spring 配置文件
在实际应用里，随着应用规模的增加，系统中 Bean 数量也大量增加，导致配置文件变得非常庞大、臃肿。为了避免这种情况的产生，提高配置文件的可读性与可维护性，可以将 Spring 配置文件分解成多个配置文件。
#### 平等关系的配置文件
假设有两个配置文件：`spring-base.xml`，`spring-beans.xml`
```
@Test
public void test01() {
	// 可变参数
	String resource = "top/qingrang/di13/spring-base.xml";
	String resource2 = "top/qingrang/di13/spring-beans.xml";
	ApplicationContext ac = new ClassPathXmlApplicationContext(resource, resource2);
	// 参数数组
	String resource = "top/qingrang/di13/spring-base.xml";
	String resource2 = "top/qingrang/di13/spring-beans.xml";
	String[] resources = {resource, resource2};
	ApplicationContext ac = new ClassPathXmlApplicationContext(resources);
	// 通配符
	String resource = "top/qingrang/di13/spring-*.xml";
	ApplicationContext ac = new ClassPathXmlApplicationContext(resource);

	Student student = (Student) ac.getBean("myStudent");
	System.out.println(student);
	Teacher teacher = (Teacher) ac.getBean("myTeacher");
	System.out.println(teacher);
}
```
#### 包含关系的配置文件
*applicationContext.mxl*
```
<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xsi:schemaLocation="
        http://www.springframework.org/schema/beans 
        http://www.springframework.org/schema/beans/spring-beans.xsd">
	<!-- 
	<import resource="classpath:top/qingrang/di14/spring-base.xml"/>
	<import resource="classpath:top/qingrang/di14/spring-beans.xml"/>
	 -->

	<!-- 使用通配符 -->
	<import resource="classpath:top/qingrang/di14/spring-*.xml"/>

</beans>
```
*Test.java - 测试*
```
@Test
public void test01() {
	String resource = "top/qingrang/di14/springTotal.xml";
	ApplicationContext ac = new ClassPathXmlApplicationContext(resource);
	...
}
```
## 基于注解的 DI
对于 DI 使用注解，将不再需要在 Spring 配置文件中声明 Bean 实例。
### 定义 Bean `@Component`
- 与 `@Component` 注解功能相同，但意义不同的注解还有三个：
	- `@Repository`：注解在 Dao 实现类上
	- `@Service`：注解在 Service 实现类上
	- `@Controller`：注解在 SpringMVC 的处理器上

### Bean 的作用域 `@Scope`
### 基本类型属性注入 `@Value`
### 按类型注入域属性 `@Autowired`
需要在域属性上使用注解 `@Autowired`，该注解默认使用按类型自动装配 Bean 的方式。使用该注解完成属性注入时，类中无需 setter。当然，若属性有 setter，则也可将其加到 setter 上。
### 按名称注入域属性 `@Autowired` 与 `@Qualifier`
需要在域属性上联合使用注解 `@Autowired` 与 `@Qualifier`。 `@Qualifier` 的 value 属性用于指定要匹配的 Bean 的 id 值。同样类中无需 setter，也可加到 setter 上。
### 域属性注解 `@Resource`
Spring 提供了对 JSR-250 规范中定义 `@Resource` 标准注解的支持。 `@Resource` 注解既可以按名称匹配 Bean，也可以按类型匹配 Bean。 使用该注解，要求 JDK 必须是 6 及以上版本。
### Bean 的生命始末 `@PostConstruct` 与 `@PreDestroy`
在方法上使用 `@PostConstruct`，与原来的 `init-method` 等效。在方法上使 `@PreDestroy`，与 `destroy-method` 等效。

*School.java*
```
// 组件，表示当前类被 Spring 容器所管理
@Component("mySchool")
public class School {
	@Value("清华大学")
	private String name;

	public void setName(String name) {
		this.name = name;
	}

	@Override
	public String toString() {
		return "School [name=" + name + "]";
	}
}
```
*Student.java*
```
// @Scope("prototype")   // 默认也是 singleton
@Component("myStudent")
public class Student {
	@Value("张三")
	private String name;
	@Value("23")
	private int age;

// ------------------- byType 方式的注解式注入 -------------------
//	@Autowired
//	private School school;   // 对象属性，域属性
// --------------------------------------------------------------

// ----- byName 方式的注解式注入，要求 @Autowired 与 @Qualifier 联合使用 ----
//	@Autowired
//	@Qualifier("mySchool")
//	private School school;   // 对象属性，域属性
// --------------------------------------------------------------

// -------------------- 域属性注解 @Resource --------------------
	// @Resource(name="mySchool")   // byName 方式的注解式注入
	@Resource   // byType 方式的注解式注入
	private School school;   // 对象属性，域属性
// --------------------------------------------------------------

	@Override
	public String toString() {
		return "Student [name=" + name + ", age=" + age + ", school=" + school
				+ "]";
	}

	// Bean 的生命始 @PostConstruct
	@PostConstruct
	public void initAfter() {
		System.out.println("当前Bean初始化刚完毕");
	}

	// Bean 的生命末 @PreDestroy
	@PreDestroy
	public void preDestroy() {
		System.out.println("当前Bean即将被销毁");
	}
}
```
*applicationContext.mxl*
```
<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xmlns:context="http://www.springframework.org/schema/context" xsi:schemaLocation="
        http://www.springframework.org/schema/beans 
        http://www.springframework.org/schema/beans/spring-beans.xsd
        http://www.springframework.org/schema/context 
        http://www.springframework.org/schema/context/spring-context.xsd">
        
	<!-- 组件扫描 top.qingrang 这个包及其子包 -->
	<!--<context:component-scan base-package="top.qingrang"/> -->
	
	<!-- 组件扫描 top.qingrang 这个包的子包 -->
	<!--<context:component-scan base-package="top.qingrang.*"/> -->
	
	<context:component-scan base-package="top.qingrang.di01"/>
	
</beans>
```
*Test.java - 测试*
```
@Test
public void test01() {
	// 创建容器对象，加载 Spring 配置文件
	String resource = "top/qingrang/di01/applicationContext.xml";
	ApplicationContext ac = new ClassPathXmlApplicationContext(resource);
	Student student = (Student) ac.getBean("myStudent");
	System.out.println(student);
}
```
### 使用 JavaConfig 进行配置
JavaConfig，是在 Spring 3.0 开始从一个独立的项目并入到 Spring 中的。
JavaConfig 可以看成一个用于完成 Bean 装配的 Spring 配置文件，即 Spring 容器， 只不过该容器不是 XML文件，而是由程序员使用 Java 自己编写的 Java 类。

*School.java*
```
public class School {
	private String name;

	public School() {
		super();
		// TODO Auto-generated constructor stub
	}

	public School(String name) {
		super();
		this.name = name;
	}

	public void setName(String name) {
		this.name = name;
	}

	@Override
	public String toString() {
		return "School [name=" + name + "]";
	}
}
```
*Student.java*
```
public class Student {
	private String name;
	private int age;
	private School school; // 对象属性，域属性

	public Student() {
		super();
		// TODO Auto-generated constructor stub
	}

	public Student(String name, int age) {
		super();
		this.name = name;
		this.age = age;
	}

	public void setName(String name) {
		System.out.println("执行setName()");
		this.name = name;
	}

	public void setAge(int age) {
		System.out.println("执行setAge()");
		this.age = age;
	}

	public void setSchool(School school) {
		this.school = school;
	}

	@Override
	public String toString() {
		return "Student [name=" + name + ", age=" + age + ", school=" + school
				+ "]";
	}
}
```
*MyJavaConfig.java*
```
@Configuration    // 表示当前类充当 Spring 容器，即所有的 Bean 将由这个类来创建
public class MyJavaConfig {
	
	@Bean(name="school")
	public School mySchoolCreator() {
		return new School("北京大学");
	}
	
	// autowire=Autowire.BY_TYPE 指从当前类这个容器中查找与域属性的类型具有is-a关系的Bean
	/*
	@Bean(name="myStudent", autowire=Autowire.BY_TYPE)
	public Student myStudentCreator() {
		return new Student("张三", 23);
	}
	*/
	
	// autowire=Autowire.BY_NAME 指从当前类这个容器中查找与域属性同名的Bean
	@Bean(name="myStudent", autowire=Autowire.BY_NAME)
	public Student myStudentCreator() {
		return new Student("张三", 23);
	}
}
```
*applicationContext.mxl*
```
<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xmlns:context="http://www.springframework.org/schema/context" xsi:schemaLocation="
        http://www.springframework.org/schema/beans 
        http://www.springframework.org/schema/beans/spring-beans.xsd
        http://www.springframework.org/schema/context 
        http://www.springframework.org/schema/context/spring-context.xsd">

	<!-- 扫描组件 -->
	<context:component-scan base-package="top.qingrang.di05"/>

</beans>
```
*Test.java - 测试*
```
@Test
public void test01() {
	String resource = "top/qingrang/di05/applicationContext.xml";
	ApplicationContext ac = new ClassPathXmlApplicationContext(resource);
	Student student = (Student) ac.getBean("myStudent");
	System.out.println(student);
}
```
### 使用 Spring 的 JUnit4 测试 Spring
使用 Spring 的 JUnit4 对 Spring 代码进行测试，将不再需要在程序的代码中直接写出创建 Spring 容器，及从 Spring 容器中通过 getBean() 获取对象了。这些工作将由 JUnit4 注解，配合着域属性的自动注入注解共同完成。
*School.java*
```
public class School {
	private String name;

	public void setName(String name) {
		this.name = name;
	}

	@Override
	public String toString() {
		return "School [name=" + name + "]";
	}
}
```
*Student.java*
```
public class Student {
	private String name;
	private School school;   // 对象属性，域属性
	
	public void setName(String name) {
		this.name = name;
	}

	public void setSchool(School school) {
		this.school = school;
	}
	@Override
	public String toString() {
		return "Student [name=" + name + ", school=" + school + "]";
	}
}
```
*applicationContext.mxl*
```
<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xsi:schemaLocation="
        http://www.springframework.org/schema/beans 
        http://www.springframework.org/schema/beans/spring-beans.xsd">

    <!-- 注册 School -->
    <bean id="mySchool" class="top.qingrang.di06.School">
    	<property name="name" value="清华大学"/>
    </bean>

    <!-- 注册 Student -->
    <bean id="myStudent" class="top.qingrang.di06.Student">
    	<property name="name" value="张三"/>
    	<property name="school" ref="mySchool"/>
    </bean>

</beans>
```
*Test.java - 测试*
```
@RunWith(SpringJUnit4ClassRunner.class)	// 指定运行环境
@ContextConfiguration(locations="classpath:top/qingrang/di06/applicationContext.xml") // 指定配置文件位置
public class MyTest {

	//对于需要从容器中获取的 Bean 对象，使用 byType 或 byName 方式，将其自动注入.
	@Autowired
	private Student student;

	@Autowired
	private School school;

	//然后就可以直接测试对象了.
	@Test
	public void test01() {
		System.out.println(student);
	}
	
	@Test
	public void test02() {
		System.out.println(school);
	}
}
```

### 注解与 XML 共同使用
注解的好处是，配置方便，直观。但其弊端也显而易见：以硬编码的方式写入到了 Java 代码中，其修改是需要重新编译代码的。
XML 配置方式的最大好处是，对其所做修改，无需编译代码，只需重启服务器即可将新的配置加载。
若注解与 XML 同用， **XML 的优先级要高于注解**。这样做的好处是，需要对某个 Bean 做修改，只需修改配置文件即可。当然，此时， Bean 类要有 setter 或构造器。
',
  'groups' => 'Java',
  'showsel' => '0',
  'showse2' => '1',
  'id' => '247',
)
[ info ] [ SESSION ] INIT array (
  'id' => '',
  'var_session_id' => '',
  'prefix' => 'think',
  'type' => '',
  'auto_start' => true,
)
[ info ] [ RUN ] app\admin\controller\Note->updateNote[ /var/www/html/daily/application/admin/controller/Note.php ]
[ info ] [ DB ] INIT mysql
[ info ] [ CACHE ] INIT File
[ info ] [ LOG ] INIT File
[ sql ] [ DB ] CONNECT:[ UseTime:0.000525s ] mysql:host=74.120.168.12;dbname=diary;charset=utf8
[ sql ] [ SQL ] SHOW COLUMNS FROM `note` [ RunTime:0.001271s ]
[ sql ] [ SQL ] SELECT * FROM `note` WHERE  `id` = 247 LIMIT 1 [ RunTime:0.000635s ]
[ sql ] [ SQL ] SELECT `groups` FROM `note` WHERE  `id` = 247 LIMIT 1 [ RunTime:0.000301s ]
[ sql ] [ SQL ] SHOW COLUMNS FROM `groups` [ RunTime:0.000993s ]
[ sql ] [ SQL ] SELECT `parent_id` FROM `groups` WHERE  `groups` = 'Java' LIMIT 1 [ RunTime:0.000321s ]
[ sql ] [ SQL ] SELECT `groups` FROM `groups` WHERE  `id` = 2 LIMIT 1 [ RunTime:0.000395s ]
[ sql ] [ SQL ] UPDATE `note`  SET `id`=247,`p_id`=2,`title`='Spring(一) - IOC（控制反转）\r',`content`='# Spring(一) - IOC（控制反转）\r\n[TOC]\r\n\r\nSpring 是一个基于 **IOC** 和 **AOP** 的结构 J2EE 系统的框架。\r\n## IOC 概念\r\n控制反转（IOC， Inversion of Control），是一个概念，是一种思想。指将传统上由程序代码直接操控的对象调用权交给容器，通过容器来实现对象的装配和管理。控制反转就是对对象控制权的转移，从程序代码本身反转到了外部容器。简单说就是创建对象由以前的程序员自己 new 构造方法来调用，变成了交由 Spring 创建对象。\r\n\r\nIoC 是一个概念，是一种思想，其实现方式多种多样。当前比较流行的实现方式有两种：依赖注入和依赖查找。依赖注入方式应用更为广泛。\r\n- 依赖查找： Dependency Lookup， DL，容器提供回调接口和上下文环境给组件，程序代\r\n码则需要提供具体的查找方式。比较典型的是依赖于 JNDI 系统的查找。\r\n- 依赖注入： Dependency Injection， DI，程序代码不做定位查询，这些工作由容器自行完成。简单地说就是拿到的对象的属性，已经被注入好相关值了，直接使用即可。\r\n\r\n依赖注入 DI 是指程序运行过程中，若需要调用另一个对象协助时，无须在代码中创建被调用者，而是依赖于外部容器，由外部容器创建后传递给程序。Spring 的依赖注入对调用者与被调用者几乎没有任何要求，完全支持 POJO 之间依赖关系的管理。\r\n\r\n依赖注入是目前最优秀的解耦方式。依赖注入让 Spring 的 Bean 之间以配置文件的方式组织在一起，而不是以硬编码的方式耦合在一起的。\r\n\r\n>以获取对象的方式来进行比较\r\n\r\n- 传统的方式\r\n\r\n通过 new 关键字主动创建一个对象\r\n\r\n相当于你自己去菜市场 new 了一只鸡，不过是生鸡，要自己拔毛，去内脏，再上花椒，酱油，烤制，经过各种工序之后，才可以食用。\r\n\r\n- IOC方式\r\n\r\n对象的生命周期由 Spring 来管理，直接从 Spring 那里去获取一个对象。IOC 是反转控制 (Inversion Of Control)的缩写，就像控制权从本来在自己手里，现在交给了 Spring。\r\n\r\n相当于去馆子(Spring)点了一只鸡，交到你手上的时候，已经五味俱全，你就只管吃就行了。\r\n\r\n## 第一个 Spring 程序\r\n### 传统的面向接口编程\r\n经过以下例子可以看出，若接口（Service 层）变了，Test(View 层) 也的改，耦合度很高。\r\n\r\n*ISomeService.java - 接口*\r\n```\r\npublic interface ISomeService {\r\n	void doSome();\r\n}\r\n```\r\n*SomeServiceImpl.java - 实现类*\r\n```\r\npublic class SomeServiceImpl implements ISomeService {\r\n	@Override\r\n	public void doSome() {\r\n		System.out.println(\"执行doSome()方法\");\r\n	}\r\n}\r\n```\r\n*Test.java - 测试*\r\n```\r\n@Test\r\npublic void test01() {\r\n	ISomeService service = new SomeServiceImpl();\r\n	service.doSome();\r\n}\r\n```\r\n### Spring 实现\r\n*applicationContext.mxl - Spring 的配置文件*\r\n```\r\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<beans xmlns=\"http://www.springframework.org/schema/beans\"\r\n    xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\r\n    xsi:schemaLocation=\"\r\n        http://www.springframework.org/schema/beans \r\n        http://www.springframework.org/schema/beans/spring-beans.xsd\">\r\n\r\n    <!-- 注册 Service，Spring 底层实际是做了 SomeServiceImpl myService = new SomeServiceImpl(); -->\r\n    <bean id=\"myService\" class=\"top.qingrang.service.SomeServiceImpl\"/>\r\n\r\n</beans>\r\n```\r\n*Test.java - 测试*\r\n```\r\n@Test\r\npublic void test02() {\r\n	// 创建容器对象，加载 Spring 配置文件，会从类路径下查找配置文件\r\n	ApplicationContext ac = new ClassPathXmlApplicationContext(\"applicationContext.xml\");\r\n	ISomeService someService = (ISomeService)ac.getBean(\"myService\");\r\n	someService.doSome();\r\n}\r\n```\r\n\r\n从以上代码中已经看不到 `SomeServiceImpl` 这个实现类了，就做到了解耦。\r\n\r\n>FileSystemXmlApplicationContext\r\n\r\n```\r\n// 创建容器对象，加载 Spring 配置文件，会从项目的根下查找配置文件\r\nApplicationContext ac = new FileSystemXmlApplicationContext(\"applicationContext.xml\");\r\n\r\n// 创建容器对象，加载 Spring 配置文件，会从当前文件系统的 D 盘根目录下查找配置文件\r\nApplicationContext ac = new FileSystemXmlApplicationContext(\"d:/applicationContext.xml\");\r\n```\r\n\r\n>BeanFactory 容器\r\n\r\n*Test.java*\r\n```\r\n@Test\r\npublic void test05() {\r\n	// 创建 BeanFactory 容器\r\n	BeanFactory bf = new XmlBeanFactory(new ClassPathResource(\"applicationContext.xml\"));\r\n	ISomeService service = (ISomeService) bf.getBean(\"myService\");\r\n	service.doSome();\r\n}\r\n```\r\n\r\n>ApplicationContext 与 BeanFactory 容器的区别\r\n\r\n这两上容器对于其中 Bean 的创建时机不同：\r\n1. ApplicationContext容器在进行初始化时，会将其中的所有Bean(对象)进行创建\r\n - 缺点：占用系统资源（内存、CPU等）\r\n - 优点：响应速度快\r\n1. BeanFactory容器中的对象，在容器初始化时并不会被创建，而是在真正获取该对象时才被创建\r\n - 缺点：相对来说，响应速度慢\r\n - 优点：不多占用系统资源\r\n\r\n## Bean 的装配\r\nBean 的装配，即 Bean 对象的创建。容器根据代码要求创建 Bean 对象后再传递给代码的过程，称为 Bean 的装配。\r\n### 默认装配方式\r\n代码通过 `getBean()` 方式从容器获取指定的 Bean 实例，容器首先会调用 Bean 类的无参构造器，创建空值的实例对象。\r\n\r\n*ISomeService.java - service 接口*\r\n```\r\npublic interface ISomeService {\r\n	void doSome();\r\n}\r\n```\r\n*SomeServiceImpl.java - service 实现类*\r\n```\r\npublic class SomeServiceImpl implements ISomeService {\r\n	public SomeServiceImpl() {\r\n		System.out.println(\"执行无参构造器\");\r\n	}\r\n\r\n	@Override\r\n	public void doSome() {\r\n		System.out.println(\"执行doSome()方法\");\r\n	}\r\n}\r\n```\r\n*ServiceFactory.java - service 工厂*\r\n```\r\npublic class ServiceFactory {\r\n	public ISomeService getSomeService() {\r\n		return new SomeServiceImpl();\r\n	}\r\n}\r\n```\r\n*applicationContext.mxl*\r\n```\r\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<beans xmlns=\"http://www.springframework.org/schema/beans\"\r\n    xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\r\n    xsi:schemaLocation=\"\r\n        http://www.springframework.org/schema/beans \r\n        http://www.springframework.org/schema/beans/spring-beans.xsd\">\r\n\r\n    <!-- 注册 Service，Spring 底层实际是做了 SomeServiceImpl myService = new SomeServiceImpl();  -->\r\n    <bean id=\"myService\" class=\"com.bjpowernode.ba01.SomeServiceImpl\"/>\r\n</beans>\r\n```\r\n*Test.java - 测试*\r\n```\r\n@Test\r\npublic void test01() {\r\n	// 创建容器对象，加载Spring配置文件\r\n	String resource = \"com/bjpowernode/ba01/applicationContext.xml\";\r\n	ApplicationContext ac = new ClassPathXmlApplicationContext(resource);\r\n	ISomeService service = (ISomeService) ac.getBean(\"myService\");\r\n	service.doSome();\r\n}\r\n```\r\n### 动态工厂 Bean\r\n有些时候，项目中需要通过工厂类来创建 Bean 实例，而不能像前面例子中似的，直接由 Spring 容器来装配 Bean 实例。使用工厂模式创建 Bean 实例，就会使工厂类与要创建的 Bean 类耦合到一起。但，这样做的缺点是，不仅工厂类与目标类耦合到了一起，测试类与工厂类也耦合到了一起。\r\n\r\n*ISomeService.java - service 接口*\r\n```\r\npublic interface ISomeService {\r\n	void doSome();\r\n}\r\n```\r\n*SomeServiceImpl.java - service 实现类*\r\n```\r\npublic class SomeServiceImpl implements ISomeService {\r\n	@Override\r\n	public void doSome() {\r\n		System.out.println(\"执行doSome()方法\");\r\n	}\r\n}\r\n```\r\n*ServiceFactory.java - service 工厂*\r\n```\r\npublic class ServiceFactory {\r\n	public ISomeService getSomeService() {\r\n		return new SomeServiceImpl();\r\n	}\r\n}\r\n```\r\n*applicationContext.mxl*\r\n```\r\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<beans xmlns=\"http://www.springframework.org/schema/beans\"\r\n    xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\r\n    xsi:schemaLocation=\"\r\n        http://www.springframework.org/schema/beans \r\n        http://www.springframework.org/schema/beans/spring-beans.xsd\">\r\n\r\n    <!-- 注册动态工厂 -->\r\n    <bean id=\"factory\" class=\"top.qingrang.ba02.ServiceFactory\"/>\r\n\r\n    <!-- 注册 Service：动态工厂 Bean -->\r\n    <bean id=\"myService\" factory-bean=\"factory\" factory-method=\"getSomeService\"/>\r\n</beans>\r\n```\r\n*Test.java - 测试*\r\n```\r\npublic void test02() {\r\n	String resource = \"top/qingrang/ba02/applicationContext.xml\";\r\n	ApplicationContext ac = new ClassPathXmlApplicationContext(resource);\r\n	ISomeService service = (ISomeService) ac.getBean(\"myService\");\r\n	service.doSome();\r\n}\r\n```\r\n### 静态工厂 Bean\r\n*ServiceFactory.java - service 工厂*\r\n```\r\npublic class ServiceFactory {\r\n	//静态方法\r\n	public static ISomeService getSomeService() {\r\n		return new SomeServiceImpl();\r\n	}\r\n}\r\n```\r\n*applicationContext.mxl*\r\n```\r\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<beans xmlns=\"http://www.springframework.org/schema/beans\"\r\n    xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\r\n    xsi:schemaLocation=\"\r\n        http://www.springframework.org/schema/beans \r\n        http://www.springframework.org/schema/beans/spring-beans.xsd\">\r\n\r\n    <!-- 注册 Service：静态工厂 Bean -->\r\n    <bean id=\"myService\" class=\"top.qingrang.ba03.ServiceFactory\" factory-method=\"getSomeService\"/>\r\n</beans>\r\n```\r\n### 容器中 Bean 的作用域\r\n*applicationContext.mxl*\r\n```\r\n<bean id=\"myService\" class=\"top.qingrang.ba04.SomeServiceImpl\" scope=\"prototype\"/>\r\n```\r\n\r\n当通过 Spring 容器创建一个 Bean 实例时，不仅可以完成 Bean 的实例化，还可以通过 scope 属性，为 Bean 指定特定的作用域。 Spring 支持 5 种作用域。\r\n1. singleton： 单例模式。即在整个 Spring 容器中，使用 singleton 定义的 Bean 将是单例的，只有一个实例。该 Bean 是在容器被创建时即被装配好了。 默认为单例的。\r\n1. prototype： 原型模式。即每次使用 getBean 方法获取的同一个 `<bean />` 的实例都是一个新的实例。Bean 实例是在代码中使用该 Bean 实例时才进行装配的。\r\n1. request：对于每次 HTTP 请求，都将会产生一个不同的 Bean 实例。\r\n1. session：对于每个不同的 HTTP session，都将产生一个不同的 Bean 实例。\r\n1. global session：每个全局的 HTTP session 对应一个 Bean 实例。典型情况下，仅在使用 portlet 集群时有效，多个 Web 应用共享一个 session。一般应用中， global-session 与 session 是等同的。\r\n\r\n对于 scope 的值 request、 session 与 global session， 只有在 Web 应用中使用 Spring 时，该作用域才有效。\r\n\r\n### Bean 后处理器\r\nBean 后处理器是一种特殊的 Bean，容器中所有的 Bean 在初始化时，均会自动执行该类的两个方法。由于该 Bean 是由其它 Bean 自动调用执行，不是程序员手工调用，故此 Bean 无须 id 属性。\r\n\r\n需要做的是，在 Bean 后处理器类方法中，只要对 Bean 类与 Bean 类中的方法进行判断，就可实现对指定的 Bean 的指定方法进行功能扩展与增强。方法返回的 Bean 对象，即是增强过的对象。就是**设计模式中的代理模式**。\r\n\r\n代码中需要**自定义 Bean 后处理器类**。该类就是**实现**了**接口 BeanPostProcessor** 的类。该接口中包含两个方法，分别在目标 Bean 初始化完毕之前与之后执行。它们的返回值为：功能被扩展或增强后的 Bean 对象。\r\n\r\nBean 初始化完毕有一个标志：一个方法将被执行。即当该方法被执行时，表示该 Bean 被初始化完毕。所以 Bean 后处理器中两个方法的执行，是在这个方法之前之后执行。 这个方法在后面将会讲到。\r\n\r\n`public Object postProcessBeforeInitialization(Object bean, String beanId) throws BeansException`\r\n\r\n该方法会在目标 Bean 初始化完毕之前由容器自动调用。\r\n\r\n`public Object postProcessAfterInitialization(Object bean, String beanId) throws BeansException`\r\n\r\n该方法会在目标 Bean 初始化完毕之后由容器自动调用。它们的参数是：第一个参数是系统即将初始化的 Bean 实例，第二个参数是该 Bean 实例的 id 属性值。若 Bean 没有 id 就是 name 属性值。\r\n\r\n*ISomeService.java - service 接口*\r\n```\r\npublic interface ISomeService {\r\n	String doSome();\r\n	String doOther();\r\n}\r\n```\r\n*SomeServiceImpl.java - service 实现类*\r\n```\r\npublic class SomeServiceImpl implements ISomeService {\r\n	@Override\r\n	public String doSome() {\r\n		System.out.println(\"执行doSome()方法\");\r\n		return \"doSome() - abc\";\r\n	}\r\n	\r\n	@Override\r\n	public String doOther() {\r\n		System.out.println(\"执行doOther()方法\");\r\n		return \"doOther() - def\";\r\n	}\r\n}\r\n```\r\n*MyBeanPostProcessor.java - 自定义 Bean 后处理器类*\r\n```\r\npublic class MyBeanPostProcessor implements BeanPostProcessor {\r\n\r\n	// bean：表示当前正在进行初始化的Bean对象\r\n	// beanName：表示当前正在进行初始化的Bean对象的id\r\n	@Override\r\n	public Object postProcessBeforeInitialization(Object bean, String beanName) throws BeansException {\r\n		System.out.println(\"执行 ---- before() ---方法\");\r\n		return bean;\r\n	}\r\n\r\n	@Override\r\n	public Object postProcessAfterInitialization(final Object bean, String beanName) throws BeansException {\r\n		System.out.println(\"执行 ---- after() ---方法\");\r\n		//判断 SomeServiceImpl 对象\r\n		if (\"myService\".equals(beanName)) {\r\n			Object obj = Proxy.newProxyInstance(bean.getClass().getClassLoader(),\r\n					bean.getClass().getInterfaces(),\r\n					new InvocationHandler() {\r\n						@Override\r\n						public Object invoke(Object proxy, Method method, Object[] args) throws Throwable {\r\n							Object invoke = method.invoke(bean, args);\r\n							//判断具体方法\r\n							if (\"doSome\".equals(method.getName())) {\r\n								return ((String) invoke).toUpperCase();\r\n							}\r\n							return invoke;\r\n						}\r\n					});\r\n			return obj;\r\n		}\r\n		return bean;\r\n	}\r\n}\r\n```\r\n*applicationContext.mxl*\r\n```\r\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<beans xmlns=\"http://www.springframework.org/schema/beans\"\r\n    xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\r\n    xsi:schemaLocation=\"\r\n        http://www.springframework.org/schema/beans \r\n        http://www.springframework.org/schema/beans/spring-beans.xsd\">\r\n\r\n    <!-- 注册 Service -->\r\n    <bean id=\"myService\" class=\"top.qingrang.ba05.SomeServiceImpl\"/>\r\n    <bean id=\"myService2\" class=\"top.qingrang.ba05.SomeServiceImpl\"/>\r\n\r\n    <!-- 注册 Bean 后处理器 -->\r\n    <bean class=\"top.qingrang.ba05.MyBeanPostProcessor\"/>\r\n\r\n</beans>\r\n```\r\n*Test.java - 测试*\r\n```\r\npublic void test01() {\r\n	String resource = \"top/qingrang/ba05/applicationContext.xml\";\r\n	ApplicationContext ac = new ClassPathXmlApplicationContext(resource);\r\n\r\n	ISomeService service = (ISomeService) ac.getBean(\"myService\");\r\n	System.out.println(service.doSome());\r\n	System.out.println(service.doOther());\r\n\r\n	System.out.println(\"======================\");\r\n\r\n	ISomeService service2 = (ISomeService) ac.getBean(\"myService2\");\r\n	System.out.println(service2.doSome());\r\n	System.out.println(service2.doOther());\r\n}\r\n```\r\n\r\n*输出结果*\r\n```\r\n执行 ---- before() ---方法\r\n执行 ---- after() ---方法\r\n执行 ---- before() ---方法\r\n执行 ---- after() ---方法\r\n执行doSome()方法\r\nDOSOME() - ABC\r\n执行doOther()方法\r\ndoOther() - def\r\n======================\r\n执行doSome()方法\r\ndoSome() - abc\r\n执行doOther()方法\r\ndoOther() - def\r\n```\r\n### Bean 的生命周期\r\n*ISomeService.java - service 接口*\r\n```\r\npublic interface ISomeService {\r\n	void doSome();\r\n}\r\n```\r\n*SomeServiceImpl.java - service 实现类*\r\n```\r\npublic class SomeServiceImpl implements ISomeService, BeanNameAware, BeanFactoryAware, InitializingBean, DisposableBean {\r\n	private String adao;\r\n	private String bdao;\r\n\r\n	public void setAdao(String adao) {\r\n		this.adao = adao;\r\n		System.out.println(\"Step2：执行 setter\");\r\n	}\r\n\r\n	public void setBdao(String bdao) {\r\n		this.bdao = bdao;\r\n		System.out.println(\"Step2：执行 setter\");\r\n	}\r\n\r\n	public SomeServiceImpl() {\r\n		System.out.println(\"Step1：执行无参构造器\");\r\n	}\r\n\r\n	@Override\r\n	public void doSome() {\r\n		System.out.println(\"Step9：执行 doSome() 方法\");\r\n	}\r\n\r\n	public void setUp() {\r\n		System.out.println(\"Step7：初始化完毕之后\");\r\n	}\r\n\r\n	public void tearDown() {\r\n		System.out.println(\"Step11：销毁之前\");\r\n	}\r\n\r\n	@Override\r\n	public void setBeanName(String name) {\r\n		System.out.println(\"Step3：获取到 bean 的 id = \" + name);\r\n	}\r\n\r\n	@Override\r\n	public void setBeanFactory(BeanFactory beanFactory) throws BeansException {\r\n		System.out.println(\"Step4：获取到 BeanFactory 容器\");\r\n	}\r\n\r\n	@Override\r\n	public void afterPropertiesSet() throws Exception {\r\n		System.out.println(\"Step6：Bean 初始化完毕了\");\r\n	}\r\n\r\n	@Override\r\n	public void destroy() throws Exception {\r\n		System.out.println(\"Step10：实现接口的销毁之前\");\r\n	}\r\n}\r\n```\r\n*MyBeanPostProcessor.java - Bean 后处理器*\r\n```\r\npublic class MyBeanPostProcessor implements BeanPostProcessor {\r\n	@Override\r\n	public Object postProcessBeforeInitialization(Object bean, String beanName)\r\n			throws BeansException {\r\n		System.out.println(\"Step5：MyBeanPostProcessor - 执行 before() 方法\");\r\n		return bean;\r\n	}\r\n\r\n	@Override\r\n	public Object postProcessAfterInitialization(final Object bean, String beanName)\r\n			throws BeansException {\r\n		System.out.println(\"Step8：MyBeanPostProcessor - 执行 after() 方法\");\r\n		return bean;\r\n	}\r\n}\r\n```\r\n*applicationContext.mxl*\r\n```\r\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<beans xmlns=\"http://www.springframework.org/schema/beans\"\r\n    xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\r\n    xsi:schemaLocation=\"\r\n        http://www.springframework.org/schema/beans \r\n        http://www.springframework.org/schema/beans/spring-beans.xsd\">\r\n\r\n    <!-- 注册Service -->\r\n    <bean id=\"myService\" class=\"top.qingrang.ba07.SomeServiceImpl\"\r\n    		init-method=\"setUp\" destroy-method=\"tearDown\">\r\n    	<property name=\"adao\" value=\"aaa\"/>\r\n    	<property name=\"bdao\" value=\"bbb\"/>\r\n   	</bean>\r\n\r\n   	<bean class=\"top.qingrang.ba07.MyBeanPostProcessor\"/>\r\n</beans>\r\n```\r\n*Test.java - 测试*\r\n```\r\npublic void test01() {\r\n	// 创建容器对象，加载Spring配置文件\r\n	String resource = \"top/qingrang/ba07/applicationContext.xml\";\r\n	ApplicationContext ac = new ClassPathXmlApplicationContext(resource);\r\n	ISomeService service = (ISomeService) ac.getBean(\"myService\");\r\n	service.doSome();\r\n	// 对于销毁方法的执行，有两个条件：\r\n	// 1)当前的Bean需要是singleton的\r\n	// 2)要手工关闭容器\r\n	((ClassPathXmlApplicationContext)ac).close();\r\n}\r\n```\r\n\r\n*输出信息*\r\n```\r\nStep1：执行无参构造器\r\nStep2：执行 setter\r\nStep2：执行 setter\r\nStep3：获取到 bean 的 id = myService\r\nStep4：获取到 BeanFactory 容器\r\nStep5：MyBeanPostProcessor - 执行 before() 方法\r\nStep6：Bean 初始化完毕了\r\nStep7：初始化完毕之后\r\nStep8：MyBeanPostProcessor - 执行 after() 方法\r\nStep9：执行 doSome() 方法\r\nStep10：实现接口的销毁之前\r\nStep11：销毁之前\r\n```\r\n## 基于 XML 的 DI\r\nBean 实例在调用无参构造器创建了空值对象后，就要**对 Bean 对象的属性进行初始化**。初始化是由容器自动完成的，称为注入。\r\n### 注入分类\r\n#### 设值注入(常用)\r\n和 `setter` 方法有关系。\r\n\r\n*School.java*\r\n```\r\npublic class School {\r\n	private String name;\r\n	public void setName(String name) {\r\n		this.name = name;\r\n	}\r\n\r\n	@Override\r\n	public String toString() {\r\n		return \"School [name=\" + name + \"]\";\r\n	}\r\n}\r\n```\r\n\r\n*Student.java*\r\n```\r\npublic class Student {\r\n	private String name;\r\n	private int age;\r\n	private School school;   // 对象属性，域属性\r\n	\r\n	public void setName(String name) {\r\n		System.out.println(\"执行setName()\");\r\n		this.name = name;\r\n	}\r\n	public void setAge(int age) {\r\n		System.out.println(\"执行setAge()\");\r\n		this.age = age;\r\n	}\r\n	public void setSchool(School school) {\r\n		this.school = school;\r\n	}\r\n\r\n	@Override\r\n	public String toString() {\r\n		return \"Student [name=\" + name + \", age=\" + age + \", school=\" + school\r\n				+ \"]\";\r\n	}\r\n}\r\n```\r\n\r\n*applicationContext.mxl*\r\n```\r\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<beans xmlns=\"http://www.springframework.org/schema/beans\"\r\n    xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\r\n    xsi:schemaLocation=\"\r\n        http://www.springframework.org/schema/beans \r\n        http://www.springframework.org/schema/beans/spring-beans.xsd\">\r\n\r\n    <!-- 注册 Student -->\r\n    <bean id=\"myStudent\" class=\"top.qingrang.di01.Student\">\r\n    	<property name=\"name\" value=\"张三\"/>\r\n    	<property name=\"age\" value=\"23\"/>\r\n        <!-- 对于对象的注入要用 ref -->\r\n    	<property name=\"school\" ref=\"mySchool\"/>\r\n    </bean>\r\n\r\n    <!-- 注册 School -->\r\n    <bean id=\"mySchool\" class=\"top.qingrang.di01.School\">\r\n    	<property name=\"name\" value=\"清华大学\"/>\r\n    </bean>\r\n\r\n</beans>\r\n```\r\n\r\n*Test.java - 测试*\r\n```\r\npublic void test01() {\r\n	// 创建容器对象，加载Spring配置文件\r\n	String resource = \"top/qingrang/di01/applicationContext.xml\";\r\n	ApplicationContext ac = new ClassPathXmlApplicationContext(resource);\r\n	Student student = (Student) ac.getBean(\"myStudent\");\r\n	System.out.println(student);\r\n}\r\n```\r\n\r\n*输出信息*\r\n```\r\n执行setName()\r\n执行setAge()\r\nStudent [name=张三, age=23, school=School [name=清华大学]]\r\n```\r\n#### 构造注入(很少用)\r\n和 `setter` 方法没有关系，和构造方法有关系。\r\n\r\n*Student.java - 为 Student 增加带参构造器*\r\n```\r\npublic class Student {\r\n	private String name;\r\n	private int age;\r\n	private School school;   // 对象属性，域属性\r\n\r\n	/**\r\n	 * 带参数的构造方法\r\n	 */\r\n	public Student(String name, int age, School school) {\r\n		super();\r\n		this.name = name;\r\n		this.age = age;\r\n		this.school = school;\r\n	}\r\n	...\r\n}\r\n```\r\n\r\n*applicationContext.mxl*\r\n```\r\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<beans xmlns=\"http://www.springframework.org/schema/beans\"\r\n    xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\r\n    xsi:schemaLocation=\"\r\n        http://www.springframework.org/schema/beans \r\n        http://www.springframework.org/schema/beans/spring-beans.xsd\">\r\n\r\n    <!-- 注册School -->\r\n    <bean id=\"mySchool\" class=\"top.qingrang.di02.School\">\r\n    	<property name=\"name\" value=\"清华大学\"/>\r\n    </bean>\r\n\r\n    <!-- 注册Student -->\r\n    <bean id=\"myStudent\" class=\"top.qingrang.di02.Student\">\r\n        <!-- 构造器参数，指定 name -->\r\n    	<constructor-arg name=\"name\" value=\"李四\"/>\r\n    	<constructor-arg name=\"age\" value=\"24\"/>\r\n    	<constructor-arg name=\"school\" ref=\"mySchool\"/>\r\n\r\n        <!-- 构造器参数，使用索引 -->\r\n    	<!--\r\n    	<constructor-arg index=\"0\" value=\"李四\"/>\r\n    	<constructor-arg index=\"1\" value=\"24\"/>\r\n    	<constructor-arg index=\"2\" ref=\"mySchool\"/>\r\n    	 -->\r\n\r\n        <!-- 构造器参数，默认索引 -->\r\n    	<!--\r\n    	<constructor-arg value=\"李四\"/>\r\n    	<constructor-arg value=\"24\"/>\r\n    	<constructor-arg ref=\"mySchool\"/>\r\n    	 -->\r\n    </bean>\r\n</beans>\r\n```\r\n### 集合属性注入\r\n基本类型数组，对象数组，List，Set，Map，Properties 等。\r\n\r\n*School.java*\r\n```\r\npublic class School {\r\n	private String name;\r\n\r\n	public void setName(String name) {\r\n		this.name = name;\r\n	}\r\n\r\n	@Override\r\n	public String toString() {\r\n		return \"School [name=\" + name + \"]\";\r\n	}\r\n}\r\n```\r\n*Some.java*\r\n```\r\npublic class Some {\r\n	private School[] schools; // 对象数组\r\n	private String[] myStrs; // 字符串数组\r\n	private List<String> myList; // List\r\n	private Set<String> mySet; // Set\r\n	private Map<String, Object> myMap; // Map\r\n	private Properties myPros; // Properties\r\n\r\n	public void setSchools(School[] schools) {\r\n		this.schools = schools;\r\n	}\r\n	public void setMyStrs(String[] myStrs) {\r\n		this.myStrs = myStrs;\r\n	}\r\n	public void setMyList(List<String> myList) {\r\n		this.myList = myList;\r\n	}\r\n	public void setMySet(Set<String> mySet) {\r\n		this.mySet = mySet;\r\n	}\r\n	public void setMyMap(Map<String, Object> myMap) {\r\n		this.myMap = myMap;\r\n	}\r\n	public void setMyPros(Properties myPros) {\r\n		this.myPros = myPros;\r\n	}\r\n\r\n	@Override\r\n	public String toString() {\r\n		return \"Some [schools=\" + Arrays.toString(schools) + \", myStrs=\"\r\n				+ Arrays.toString(myStrs) + \", myList=\" + myList + \", mySet=\"\r\n				+ mySet + \", myMap=\" + myMap + \", myPros=\" + myPros + \"]\";\r\n	}\r\n}\r\n```\r\n*applicationContext.xml*\r\n```\r\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<beans xmlns=\"http://www.springframework.org/schema/beans\"\r\n    xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\r\n    xsi:schemaLocation=\"\r\n        http://www.springframework.org/schema/beans \r\n        http://www.springframework.org/schema/beans/spring-beans.xsd\">\r\n\r\n    <!-- 注册 School -->\r\n    <bean id=\"mySchool\" class=\"top.qingrang.di05.School\">\r\n    	<property name=\"name\" value=\"清华大学\"/>\r\n    </bean>\r\n    <bean id=\"mySchool2\" class=\"top.qingrang.di05.School\">\r\n    	<property name=\"name\" value=\"北京大学\"/>\r\n    </bean>\r\n\r\n    <!-- 注册 Student -->\r\n    <bean id=\"mySome\" class=\"top.qingrang.di05.Some\">\r\n		<!-- 对象数组 -->\r\n    	<property name=\"schools\">\r\n    		<array>\r\n    			<ref bean=\"mySchool\"/>\r\n    			<ref bean=\"mySchool2\"/>\r\n    		</array>\r\n    	</property>\r\n		<!-- 数组：简写，带 ref 的若只有一个可以简写，多个则不行 -->\r\n		<property name=\"schools\" value=\"mySchool\"/>\r\n\r\n		<!-- 基本类型数组 -->\r\n    	<property name=\"myStrs\">\r\n    		<array>\r\n    			<value>中国</value>\r\n    			<value>北京</value>\r\n    		</array>\r\n    	</property>\r\n		<!-- 数组：简写 -->\r\n		<property name=\"myStrs\" value=\"中国,北京\"/>\r\n\r\n		<!-- List<String> -->\r\n    	<property name=\"myList\">\r\n    		<list>\r\n    			<value>大兴</value>\r\n    			<value>亦庄</value>\r\n    		</list>\r\n    	</property>\r\n		<!-- List<String>：简写 -->\r\n		<property name=\"myList\" value=\"大兴,亦庄\"/>\r\n\r\n		<!-- Set<String> -->\r\n    	<property name=\"mySet\">\r\n    		<set>\r\n    			<value>大族企业湾</value>\r\n    			<value>10号楼</value>\r\n    		</set>\r\n    	</property>\r\n		<!-- Set<String>：简写 -->\r\n		<property name=\"mySet\" value=\"大族企业湾,10号楼\"/>\r\n\r\n		<!-- Map<String, Object>，Map 的键值都是 object -->\r\n    	<property name=\"myMap\">\r\n    		<map>\r\n    			<entry key=\"mobile\" value=\"1234567\"/>\r\n    			<entry key=\"QQ\" value=\"7654321\"/>\r\n    		</map>\r\n    	</property>\r\n\r\n		<!-- Properties，Properties 的键值都是字符串 -->\r\n    	<property name=\"myPros\">\r\n    		<props>\r\n    			<prop key=\"education\">大学</prop>\r\n    			<prop key=\"gender\">男</prop>\r\n    		</props>\r\n    	</property>\r\n    </bean>\r\n\r\n</beans>\r\n```\r\n*MyTest.java*\r\n```\r\n@Test\r\npublic void test01() {\r\n	// 创建容器对象，加载 Spring 配置文件\r\n	String resource = \"top/qingrang/di05/applicationContext.xml\";\r\n	ApplicationContext ac = new ClassPathXmlApplicationContext(resource);\r\n	Some some = (Some) ac.getBean(\"mySome\");\r\n	System.out.println(some);\r\n}\r\n```\r\n### 对于域属性(对象)的自动注入\r\n#### byName 方式自动注入\r\n![byName 方式自动注入](https://daily-1252869435.cos.ap-chengdu.myqcloud.com/2018-11-17-22-04-38.png)\r\n#### byType 方式自动注入\r\n![mark](https://daily-1252869435.cos.ap-chengdu.myqcloud.com/2018-11-17-22-06-41.png)\r\n### 使用 SPEL 注入\r\nSPEL(Spring Expression Language)，即 Spring EL 表达式语言。即，在 Spring 配置文件中为 Bean 的属性注入值时，可直接使用 SPEL 表达式计算的结果。 SPEL 表达式以#开头，后跟一对大括号。用法： `<bean id=“abc” value=“#{…}”/>`。\r\n*Person.java*\r\n```\r\npublic class Person {\r\n	private String pname;\r\n	private int page;\r\n\r\n	public void setPname(String pname) {\r\n		this.pname = pname;\r\n	}\r\n	public void setPage(int page) {\r\n		this.page = page;\r\n	}\r\n	public String getPname() {\r\n		return pname;\r\n	}\r\n	public int getPage() {\r\n		return page;\r\n	}\r\n\r\n	@Override\r\n	public String toString() {\r\n		return \"Person [pname=\" + pname + \", page=\" + page + \"]\";\r\n	}\r\n	\r\n	public int computeAge() {\r\n		return page > 25 ? 25 : page;\r\n	}\r\n}\r\n```\r\n*Student.java*\r\n```\r\npublic class Student {\r\n	private String name;\r\n	private int age;\r\n	\r\n	public void setName(String name) {\r\n		this.name = name;\r\n	}\r\n	public void setAge(int age) {\r\n		this.age = age;\r\n	}\r\n	\r\n	@Override\r\n	public String toString() {\r\n		return \"Student [name=\" + name + \", age=\" + age + \"]\";\r\n	}\r\n}\r\n```\r\n*applicationContext.mxl*\r\n```\r\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<beans xmlns=\"http://www.springframework.org/schema/beans\"\r\n    xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\r\n    xsi:schemaLocation=\"\r\n        http://www.springframework.org/schema/beans \r\n        http://www.springframework.org/schema/beans/spring-beans.xsd\">\r\n\r\n    <!-- 注册School -->\r\n    <bean id=\"myPerson\" class=\"top.qingrang.di09.Person\">\r\n    	<property name=\"pname\" value=\"李四\"/>\r\n    	<property name=\"page\" value=\"#{T(java.lang.Math).random() * 50}\"/>   \r\n    </bean>\r\n    \r\n    <bean id=\"myStudent\" class=\"top.qingrang.di09.Student\">\r\n    	<property name=\"name\" value=\"#{myPerson.pname}\"/>\r\n    	<!-- <property name=\"age\" value=\"#{myPerson.page > 25 ? 25 : myPerson.page}\"/> -->\r\n    	<property name=\"age\" value=\"#{myPerson.computeAge() }\"/>\r\n    </bean>\r\n\r\n</beans>\r\n```\r\n*Test.java - 测试*\r\n```\r\n@Test\r\npublic void test01() {\r\n	// 创建容器对象，加载Spring配置文件\r\n	String resource = \"top/qingrang/di09/applicationContext.xml\";\r\n	ApplicationContext ac = new ClassPathXmlApplicationContext(resource);\r\n	\r\n	Person person = (Person) ac.getBean(\"myPerson\");\r\n	System.out.println(person);\r\n	\r\n	Student student = (Student) ac.getBean(\"myStudent\");\r\n	System.out.println(student);\r\n}\r\n```\r\n### 使用内部 Bean 注入\r\n若不希望代码直接访问某个 bean，即，在代码中通过 getBean 方法获取该 Bean 实例，则可将该 Bean 的定义放入调用者 bean 定义的内部。\r\n\r\n*applicationContext.mxl*\r\n```\r\n<!-- 注册 Student -->\r\n<bean id=\"myStudent\" class=\"top.qingrang.di10.Student\">\r\n	<property name=\"name\" value=\"张三\"/>\r\n	<property name=\"age\" value=\"23\"/>\r\n	<property name=\"school\">\r\n		<!-- 内部 Bean -->\r\n	    <bean class=\"top.qingrang.di10.School\">\r\n	    	<property name=\"name\" value=\"清华大学\"/>\r\n	    </bean>\r\n	</property>\r\n</bean>\r\n```\r\n*Test.java - 测试*\r\n```\r\n@Test\r\npublic void test01() {\r\n	// 创建容器对象，加载Spring配置文件\r\n	String resource = \"top/qingrang/di10/applicationContext.xml\";\r\n	ApplicationContext ac = new ClassPathXmlApplicationContext(resource);\r\n	\r\n	Student student = (Student) ac.getBean(\"myStudent\");\r\n	System.out.println(student);\r\n	\r\n	// 不能访问，会报错\r\n	//org.springframework.beans.factory.NoSuchBeanDefinitionException: No bean named \'mySchool\' is defined\r\n	School school = (School) ac.getBean(\"mySchool\");\r\n	System.out.println(school);\r\n}\r\n```\r\n### 使用同类抽象 Bean 注入\r\n当若干 Bean 实例同属于一个类，且这些实例的属性值又有相同值时，可以使用抽象 Bean，以简化配置文件。\r\n\r\n抽象 Bean 是用于让其它 bean 继承的。这个 bean 在 Bean 类中是不能通过 getBean 方法获取的。设置 abstract 属性为 true 来指明该 bean 为抽象 bean， 默认值为 false。 不过，该 bean 不为抽象 bean 时，也可被继承。 只不过，在应用中，用于被继承的 bean 一般为抽象 bean。\r\n\r\n*Student.java*\r\n```\r\npublic class Student {\r\n	private String name;\r\n	private int age;\r\n	private String school; // 学校\r\n\r\n	public void setName(String name) {\r\n		this.name = name;\r\n	}\r\n\r\n	public void setAge(int age) {\r\n		this.age = age;\r\n	}\r\n\r\n	public void setSchool(String school) {\r\n		this.school = school;\r\n	}\r\n\r\n	@Override\r\n	public String toString() {\r\n		return \"Student [name=\" + name + \", age=\" + age + \", school=\" + school + \"]\";\r\n	}\r\n}\r\n```\r\n*applicationContext.mxl*\r\n```\r\n<!-- 同类抽象 Bean，abstract=\"true\" -->\r\n<bean id=\"baseStudent\" class=\"top.qingrang.di11.Student\" abstract=\"true\">\r\n	<property name=\"school\" value=\"清华大学\"/>\r\n</bean>\r\n<!-- 利用 parent 实现继承 -->\r\n<bean id=\"myStudent\" parent=\"baseStudent\">\r\n	<property name=\"name\" value=\"张三\"/>\r\n	<property name=\"age\" value=\"23\"/>\r\n</bean>\r\n<bean id=\"myStudent2\" parent=\"baseStudent\">\r\n	<property name=\"name\" value=\"李四\"/>\r\n	<property name=\"age\" value=\"24\"/>\r\n</bean>\r\n```\r\n*Test.java - 测试*\r\n```\r\n@Test\r\npublic void test01() {\r\n	// 创建容器对象，加载Spring配置文件\r\n	String resource = \"top/qingrang/di11/applicationContext.xml\";\r\n	ApplicationContext ac = new ClassPathXmlApplicationContext(resource);\r\n	\r\n	Student student = (Student) ac.getBean(\"myStudent\");\r\n	System.out.println(student);\r\n	Student student2 = (Student) ac.getBean(\"myStudent2\");\r\n	System.out.println(student2);\r\n}\r\n```\r\n### 使用异类抽象 Bean 注入\r\n当若干不同的类对象具有相同的属性，且其值也相同时，可使用异类抽象 Bean。\r\n![异类抽象 Bean 注入](https://daily-1252869435.cos.ap-chengdu.myqcloud.com/2018-11-18-19-41-35.png)\r\n### 为应用指定多个 Spring 配置文件\r\n在实际应用里，随着应用规模的增加，系统中 Bean 数量也大量增加，导致配置文件变得非常庞大、臃肿。为了避免这种情况的产生，提高配置文件的可读性与可维护性，可以将 Spring 配置文件分解成多个配置文件。\r\n#### 平等关系的配置文件\r\n假设有两个配置文件：`spring-base.xml`，`spring-beans.xml`\r\n```\r\n@Test\r\npublic void test01() {\r\n	// 可变参数\r\n	String resource = \"top/qingrang/di13/spring-base.xml\";\r\n	String resource2 = \"top/qingrang/di13/spring-beans.xml\";\r\n	ApplicationContext ac = new ClassPathXmlApplicationContext(resource, resource2);\r\n	// 参数数组\r\n	String resource = \"top/qingrang/di13/spring-base.xml\";\r\n	String resource2 = \"top/qingrang/di13/spring-beans.xml\";\r\n	String[] resources = {resource, resource2};\r\n	ApplicationContext ac = new ClassPathXmlApplicationContext(resources);\r\n	// 通配符\r\n	String resource = \"top/qingrang/di13/spring-*.xml\";\r\n	ApplicationContext ac = new ClassPathXmlApplicationContext(resource);\r\n\r\n	Student student = (Student) ac.getBean(\"myStudent\");\r\n	System.out.println(student);\r\n	Teacher teacher = (Teacher) ac.getBean(\"myTeacher\");\r\n	System.out.println(teacher);\r\n}\r\n```\r\n#### 包含关系的配置文件\r\n*applicationContext.mxl*\r\n```\r\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<beans xmlns=\"http://www.springframework.org/schema/beans\"\r\n    xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\r\n    xsi:schemaLocation=\"\r\n        http://www.springframework.org/schema/beans \r\n        http://www.springframework.org/schema/beans/spring-beans.xsd\">\r\n	<!-- \r\n	<import resource=\"classpath:top/qingrang/di14/spring-base.xml\"/>\r\n	<import resource=\"classpath:top/qingrang/di14/spring-beans.xml\"/>\r\n	 -->\r\n\r\n	<!-- 使用通配符 -->\r\n	<import resource=\"classpath:top/qingrang/di14/spring-*.xml\"/>\r\n\r\n</beans>\r\n```\r\n*Test.java - 测试*\r\n```\r\n@Test\r\npublic void test01() {\r\n	String resource = \"top/qingrang/di14/springTotal.xml\";\r\n	ApplicationContext ac = new ClassPathXmlApplicationContext(resource);\r\n	...\r\n}\r\n```\r\n## 基于注解的 DI\r\n对于 DI 使用注解，将不再需要在 Spring 配置文件中声明 Bean 实例。\r\n### 定义 Bean `@Component`\r\n- 与 `@Component` 注解功能相同，但意义不同的注解还有三个：\r\n	- `@Repository`：注解在 Dao 实现类上\r\n	- `@Service`：注解在 Service 实现类上\r\n	- `@Controller`：注解在 SpringMVC 的处理器上\r\n\r\n### Bean 的作用域 `@Scope`\r\n### 基本类型属性注入 `@Value`\r\n### 按类型注入域属性 `@Autowired`\r\n需要在域属性上使用注解 `@Autowired`，该注解默认使用按类型自动装配 Bean 的方式。使用该注解完成属性注入时，类中无需 setter。当然，若属性有 setter，则也可将其加到 setter 上。\r\n### 按名称注入域属性 `@Autowired` 与 `@Qualifier`\r\n需要在域属性上联合使用注解 `@Autowired` 与 `@Qualifier`。 `@Qualifier` 的 value 属性用于指定要匹配的 Bean 的 id 值。同样类中无需 setter，也可加到 setter 上。\r\n### 域属性注解 `@Resource`\r\nSpring 提供了对 JSR-250 规范中定义 `@Resource` 标准注解的支持。 `@Resource` 注解既可以按名称匹配 Bean，也可以按类型匹配 Bean。 使用该注解，要求 JDK 必须是 6 及以上版本。\r\n### Bean 的生命始末 `@PostConstruct` 与 `@PreDestroy`\r\n在方法上使用 `@PostConstruct`，与原来的 `init-method` 等效。在方法上使 `@PreDestroy`，与 `destroy-method` 等效。\r\n\r\n*School.java*\r\n```\r\n// 组件，表示当前类被 Spring 容器所管理\r\n@Component(\"mySchool\")\r\npublic class School {\r\n	@Value(\"清华大学\")\r\n	private String name;\r\n\r\n	public void setName(String name) {\r\n		this.name = name;\r\n	}\r\n\r\n	@Override\r\n	public String toString() {\r\n		return \"School [name=\" + name + \"]\";\r\n	}\r\n}\r\n```\r\n*Student.java*\r\n```\r\n// @Scope(\"prototype\")   // 默认也是 singleton\r\n@Component(\"myStudent\")\r\npublic class Student {\r\n	@Value(\"张三\")\r\n	private String name;\r\n	@Value(\"23\")\r\n	private int age;\r\n\r\n// ------------------- byType 方式的注解式注入 -------------------\r\n//	@Autowired\r\n//	private School school;   // 对象属性，域属性\r\n// --------------------------------------------------------------\r\n\r\n// ----- byName 方式的注解式注入，要求 @Autowired 与 @Qualifier 联合使用 ----\r\n//	@Autowired\r\n//	@Qualifier(\"mySchool\")\r\n//	private School school;   // 对象属性，域属性\r\n// --------------------------------------------------------------\r\n\r\n// -------------------- 域属性注解 @Resource --------------------\r\n	// @Resource(name=\"mySchool\")   // byName 方式的注解式注入\r\n	@Resource   // byType 方式的注解式注入\r\n	private School school;   // 对象属性，域属性\r\n// --------------------------------------------------------------\r\n\r\n	@Override\r\n	public String toString() {\r\n		return \"Student [name=\" + name + \", age=\" + age + \", school=\" + school\r\n				+ \"]\";\r\n	}\r\n\r\n	// Bean 的生命始 @PostConstruct\r\n	@PostConstruct\r\n	public void initAfter() {\r\n		System.out.println(\"当前Bean初始化刚完毕\");\r\n	}\r\n\r\n	// Bean 的生命末 @PreDestroy\r\n	@PreDestroy\r\n	public void preDestroy() {\r\n		System.out.println(\"当前Bean即将被销毁\");\r\n	}\r\n}\r\n```\r\n*applicationContext.mxl*\r\n```\r\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<beans xmlns=\"http://www.springframework.org/schema/beans\"\r\n    xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\r\n    xmlns:context=\"http://www.springframework.org/schema/context\" xsi:schemaLocation=\"\r\n        http://www.springframework.org/schema/beans \r\n        http://www.springframework.org/schema/beans/spring-beans.xsd\r\n        http://www.springframework.org/schema/context \r\n        http://www.springframework.org/schema/context/spring-context.xsd\">\r\n        \r\n	<!-- 组件扫描 top.qingrang 这个包及其子包 -->\r\n	<!--<context:component-scan base-package=\"top.qingrang\"/> -->\r\n	\r\n	<!-- 组件扫描 top.qingrang 这个包的子包 -->\r\n	<!--<context:component-scan base-package=\"top.qingrang.*\"/> -->\r\n	\r\n	<context:component-scan base-package=\"top.qingrang.di01\"/>\r\n	\r\n</beans>\r\n```\r\n*Test.java - 测试*\r\n```\r\n@Test\r\npublic void test01() {\r\n	// 创建容器对象，加载 Spring 配置文件\r\n	String resource = \"top/qingrang/di01/applicationContext.xml\";\r\n	ApplicationContext ac = new ClassPathXmlApplicationContext(resource);\r\n	Student student = (Student) ac.getBean(\"myStudent\");\r\n	System.out.println(student);\r\n}\r\n```\r\n### 使用 JavaConfig 进行配置\r\nJavaConfig，是在 Spring 3.0 开始从一个独立的项目并入到 Spring 中的。\r\nJavaConfig 可以看成一个用于完成 Bean 装配的 Spring 配置文件，即 Spring 容器， 只不过该容器不是 XML文件，而是由程序员使用 Java 自己编写的 Java 类。\r\n\r\n*School.java*\r\n```\r\npublic class School {\r\n	private String name;\r\n\r\n	public School() {\r\n		super();\r\n		// TODO Auto-generated constructor stub\r\n	}\r\n\r\n	public School(String name) {\r\n		super();\r\n		this.name = name;\r\n	}\r\n\r\n	public void setName(String name) {\r\n		this.name = name;\r\n	}\r\n\r\n	@Override\r\n	public String toString() {\r\n		return \"School [name=\" + name + \"]\";\r\n	}\r\n}\r\n```\r\n*Student.java*\r\n```\r\npublic class Student {\r\n	private String name;\r\n	private int age;\r\n	private School school; // 对象属性，域属性\r\n\r\n	public Student() {\r\n		super();\r\n		// TODO Auto-generated constructor stub\r\n	}\r\n\r\n	public Student(String name, int age) {\r\n		super();\r\n		this.name = name;\r\n		this.age = age;\r\n	}\r\n\r\n	public void setName(String name) {\r\n		System.out.println(\"执行setName()\");\r\n		this.name = name;\r\n	}\r\n\r\n	public void setAge(int age) {\r\n		System.out.println(\"执行setAge()\");\r\n		this.age = age;\r\n	}\r\n\r\n	public void setSchool(School school) {\r\n		this.school = school;\r\n	}\r\n\r\n	@Override\r\n	public String toString() {\r\n		return \"Student [name=\" + name + \", age=\" + age + \", school=\" + school\r\n				+ \"]\";\r\n	}\r\n}\r\n```\r\n*MyJavaConfig.java*\r\n```\r\n@Configuration    // 表示当前类充当 Spring 容器，即所有的 Bean 将由这个类来创建\r\npublic class MyJavaConfig {\r\n	\r\n	@Bean(name=\"school\")\r\n	public School mySchoolCreator() {\r\n		return new School(\"北京大学\");\r\n	}\r\n	\r\n	// autowire=Autowire.BY_TYPE 指从当前类这个容器中查找与域属性的类型具有is-a关系的Bean\r\n	/*\r\n	@Bean(name=\"myStudent\", autowire=Autowire.BY_TYPE)\r\n	public Student myStudentCreator() {\r\n		return new Student(\"张三\", 23);\r\n	}\r\n	*/\r\n	\r\n	// autowire=Autowire.BY_NAME 指从当前类这个容器中查找与域属性同名的Bean\r\n	@Bean(name=\"myStudent\", autowire=Autowire.BY_NAME)\r\n	public Student myStudentCreator() {\r\n		return new Student(\"张三\", 23);\r\n	}\r\n}\r\n```\r\n*applicationContext.mxl*\r\n```\r\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<beans xmlns=\"http://www.springframework.org/schema/beans\"\r\n    xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\r\n    xmlns:context=\"http://www.springframework.org/schema/context\" xsi:schemaLocation=\"\r\n        http://www.springframework.org/schema/beans \r\n        http://www.springframework.org/schema/beans/spring-beans.xsd\r\n        http://www.springframework.org/schema/context \r\n        http://www.springframework.org/schema/context/spring-context.xsd\">\r\n\r\n	<!-- 扫描组件 -->\r\n	<context:component-scan base-package=\"top.qingrang.di05\"/>\r\n\r\n</beans>\r\n```\r\n*Test.java - 测试*\r\n```\r\n@Test\r\npublic void test01() {\r\n	String resource = \"top/qingrang/di05/applicationContext.xml\";\r\n	ApplicationContext ac = new ClassPathXmlApplicationContext(resource);\r\n	Student student = (Student) ac.getBean(\"myStudent\");\r\n	System.out.println(student);\r\n}\r\n```\r\n### 使用 Spring 的 JUnit4 测试 Spring\r\n使用 Spring 的 JUnit4 对 Spring 代码进行测试，将不再需要在程序的代码中直接写出创建 Spring 容器，及从 Spring 容器中通过 getBean() 获取对象了。这些工作将由 JUnit4 注解，配合着域属性的自动注入注解共同完成。\r\n*School.java*\r\n```\r\npublic class School {\r\n	private String name;\r\n\r\n	public void setName(String name) {\r\n		this.name = name;\r\n	}\r\n\r\n	@Override\r\n	public String toString() {\r\n		return \"School [name=\" + name + \"]\";\r\n	}\r\n}\r\n```\r\n*Student.java*\r\n```\r\npublic class Student {\r\n	private String name;\r\n	private School school;   // 对象属性，域属性\r\n	\r\n	public void setName(String name) {\r\n		this.name = name;\r\n	}\r\n\r\n	public void setSchool(School school) {\r\n		this.school = school;\r\n	}\r\n	@Override\r\n	public String toString() {\r\n		return \"Student [name=\" + name + \", school=\" + school + \"]\";\r\n	}\r\n}\r\n```\r\n*applicationContext.mxl*\r\n```\r\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<beans xmlns=\"http://www.springframework.org/schema/beans\"\r\n    xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\r\n    xsi:schemaLocation=\"\r\n        http://www.springframework.org/schema/beans \r\n        http://www.springframework.org/schema/beans/spring-beans.xsd\">\r\n\r\n    <!-- 注册 School -->\r\n    <bean id=\"mySchool\" class=\"top.qingrang.di06.School\">\r\n    	<property name=\"name\" value=\"清华大学\"/>\r\n    </bean>\r\n\r\n    <!-- 注册 Student -->\r\n    <bean id=\"myStudent\" class=\"top.qingrang.di06.Student\">\r\n    	<property name=\"name\" value=\"张三\"/>\r\n    	<property name=\"school\" ref=\"mySchool\"/>\r\n    </bean>\r\n\r\n</beans>\r\n```\r\n*Test.java - 测试*\r\n```\r\n@RunWith(SpringJUnit4ClassRunner.class)	// 指定运行环境\r\n@ContextConfiguration(locations=\"classpath:top/qingrang/di06/applicationContext.xml\") // 指定配置文件位置\r\npublic class MyTest {\r\n\r\n	//对于需要从容器中获取的 Bean 对象，使用 byType 或 byName 方式，将其自动注入.\r\n	@Autowired\r\n	private Student student;\r\n\r\n	@Autowired\r\n	private School school;\r\n\r\n	//然后就可以直接测试对象了.\r\n	@Test\r\n	public void test01() {\r\n		System.out.println(student);\r\n	}\r\n	\r\n	@Test\r\n	public void test02() {\r\n		System.out.println(school);\r\n	}\r\n}\r\n```\r\n\r\n### 注解与 XML 共同使用\r\n注解的好处是，配置方便，直观。但其弊端也显而易见：以硬编码的方式写入到了 Java 代码中，其修改是需要重新编译代码的。\r\nXML 配置方式的最大好处是，对其所做修改，无需编译代码，只需重启服务器即可将新的配置加载。\r\n若注解与 XML 同用， **XML 的优先级要高于注解**。这样做的好处是，需要对某个 Bean 做修改，只需修改配置文件即可。当然，此时， Bean 类要有 setter 或构造器。\r\n',`groups`='Java',`is_show`=0,`publish`=1,`summary`='',`gmt_modified`='2018-11-19'  WHERE  `id` = 247 [ RunTime:0.001533s ]
[ sql ] [ SQL ] SELECT COUNT(*) AS tp_count FROM `note` WHERE  `groups` = 'Java' LIMIT 1 [ RunTime:0.001564s ]
[ sql ] [ SQL ] UPDATE `groups`  SET `g_count`=21  WHERE  `groups` = 'Java' [ RunTime:0.000364s ]
[ sql ] [ SQL ] SELECT COUNT(*) AS tp_count FROM `note` WHERE  `groups` = 'Java' LIMIT 1 [ RunTime:0.001340s ]
[ sql ] [ SQL ] UPDATE `groups`  SET `g_count`=21  WHERE  `groups` = 'Java' [ RunTime:0.000401s ]
---------------------------------------------------------------
[ 2018-11-19T19:21:33+08:00 ] 74.120.168.12 74.120.168.12 GET /daily/admin/note/shownote/id/247.html
[ info ] qingrang.top/daily/admin/note/shownote/id/247.html [运行时间：0.069743s][吞吐率：14.34req/s] [内存消耗：2,057.19kb] [文件加载：55]
[ info ] [ LANG ] /var/www/html/daily/thinkphp/lang/zh-cn.php
[ info ] [ ROUTE ] array (
  'type' => 'module',
  'module' => 
  array (
    0 => 'admin',
    1 => 'note',
    2 => 'shownote',
  ),
)
[ info ] [ HEADER ] array (
  'host' => 'qingrang.top',
  'cache-control' => 'max-age=0',
  'upgrade-insecure-requests' => '1',
  'user-agent' => 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/70.0.3538.102 Safari/537.36',
  'accept' => 'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8',
  'referer' => 'http://qingrang.top/daily/admin/note/editnote/id/247.html',
  'accept-encoding' => 'gzip, deflate',
  'accept-language' => 'zh-CN,zh;q=0.9,la;q=0.8,en;q=0.7,lb;q=0.6',
  'cookie' => 'Hm_lvt_1769181352e9adc950166aada465644e=1541082864,1541122974,1541171416,1542098176; PHPSESSID=2itucolgeg6ju9b7e0uomjso34',
  'connection' => 'close',
)
[ info ] [ PARAM ] array (
  'id' => '247',
)
[ info ] [ SESSION ] INIT array (
  'id' => '',
  'var_session_id' => '',
  'prefix' => 'think',
  'type' => '',
  'auto_start' => true,
)
[ info ] [ RUN ] app\admin\controller\Note->showNote[ /var/www/html/daily/application/admin/controller/Note.php ]
[ info ] [ DB ] INIT mysql
[ info ] [ VIEW ] /var/www/html/daily/application/admin/view/note/shownote.html [ array (
  0 => 'note',
  1 => 'groups',
) ]
[ info ] [ LOG ] INIT File
[ sql ] [ DB ] CONNECT:[ UseTime:0.000639s ] mysql:host=74.120.168.12;dbname=diary;charset=utf8
[ sql ] [ SQL ] SHOW COLUMNS FROM `note` [ RunTime:0.001353s ]
[ sql ] [ SQL ] SELECT * FROM `note` WHERE  `id` = 247 LIMIT 1 [ RunTime:0.000769s ]
[ sql ] [ SQL ] SHOW COLUMNS FROM `groups` [ RunTime:0.001198s ]
[ sql ] [ SQL ] SELECT * FROM `groups` [ RunTime:0.000480s ]
---------------------------------------------------------------
[ 2018-11-19T19:21:42+08:00 ] 74.120.168.12 74.120.168.12 GET /daily/admin/note
[ info ] qingrang.top/daily/admin/note [运行时间：0.090408s][吞吐率：11.06req/s] [内存消耗：2,277.54kb] [文件加载：56]
[ info ] [ LANG ] /var/www/html/daily/thinkphp/lang/zh-cn.php
[ info ] [ ROUTE ] array (
  'type' => 'module',
  'module' => 
  array (
    0 => 'admin',
    1 => 'note',
    2 => NULL,
  ),
)
[ info ] [ HEADER ] array (
  'host' => 'qingrang.top',
  'cache-control' => 'max-age=0',
  'upgrade-insecure-requests' => '1',
  'user-agent' => 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/70.0.3538.102 Safari/537.36',
  'accept' => 'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8',
  'referer' => 'http://qingrang.top/daily/admin/login/index.html',
  'accept-encoding' => 'gzip, deflate',
  'accept-language' => 'zh-CN,zh;q=0.9,la;q=0.8,en;q=0.7,lb;q=0.6',
  'cookie' => 'Hm_lvt_1769181352e9adc950166aada465644e=1541082864,1541122974,1541171416,1542098176; PHPSESSID=2itucolgeg6ju9b7e0uomjso34',
  'connection' => 'close',
)
[ info ] [ PARAM ] array (
)
[ info ] [ SESSION ] INIT array (
  'id' => '',
  'var_session_id' => '',
  'prefix' => 'think',
  'type' => '',
  'auto_start' => true,
)
[ info ] [ RUN ] app\admin\controller\Note->notelst[ /var/www/html/daily/application/admin/controller/Note.php ]
[ info ] [ DB ] INIT mysql
[ info ] [ VIEW ] /var/www/html/daily/application/admin/view/note/notelst.html [ array (
  0 => 'stickList',
  1 => 'hide',
  2 => 'list',
  3 => 'list_new',
  4 => 'groups',
  5 => 'groups0',
  6 => 'groups1',
  7 => 'groups2',
  8 => 'count',
  9 => 'year',
  10 => 'default_num',
) ]
[ info ] [ LOG ] INIT File
[ sql ] [ DB ] CONNECT:[ UseTime:0.000613s ] mysql:host=74.120.168.12;dbname=diary;charset=utf8
[ sql ] [ SQL ] SHOW COLUMNS FROM `note` [ RunTime:0.001504s ]
[ sql ] [ SQL ] SELECT * FROM `note` WHERE  `groups` <> 'Personal'  AND `is_show` = 1 ORDER BY date desc,id desc [ RunTime:0.001872s ]
[ sql ] [ SQL ] SELECT * FROM `note` WHERE  `groups` <> 'Personal'  AND `is_show` <> 1 ORDER BY gmt_modified desc LIMIT 5 [ RunTime:0.002592s ]
[ sql ] [ SQL ] SHOW COLUMNS FROM `config` [ RunTime:0.001047s ]
[ sql ] [ SQL ] SELECT * FROM `config` WHERE  `name` = 'hide' LIMIT 1 [ RunTime:0.000394s ]
[ sql ] [ SQL ] SELECT * FROM `note` WHERE  `id` < 5 [ RunTime:0.000456s ]
[ sql ] [ SQL ] SHOW COLUMNS FROM `groups` [ RunTime:0.000951s ]
[ sql ] [ SQL ] SELECT * FROM `groups` [ RunTime:0.000385s ]
[ sql ] [ SQL ] SELECT * FROM `groups` WHERE  `parent_id` = 0  AND `id` <> 2 ORDER BY `groups` [ RunTime:0.000467s ]
[ sql ] [ SQL ] SELECT `groups` FROM `groups` WHERE  `parent_id` = 1 [ RunTime:0.000299s ]
[ sql ] [ SQL ] SELECT * FROM `groups` WHERE  `parent_id` = 2 ORDER BY `groups` [ RunTime:0.000435s ]
[ sql ] [ SQL ] SELECT COUNT(*) AS tp_count FROM `note` WHERE  `groups` = 'Default' LIMIT 1 [ RunTime:0.001282s ]
[ sql ] [ SQL ] SELECT COUNT(*) AS tp_count FROM `note` LIMIT 1 [ RunTime:0.000243s ]
[ sql ] [ SQL ] SHOW COLUMNS FROM `yearlist` [ RunTime:0.001056s ]
[ sql ] [ SQL ] SELECT DISTINCT  `year` FROM `yearlist` ORDER BY year desc [ RunTime:0.000692s ]
---------------------------------------------------------------
[ 2018-11-19T19:24:56+08:00 ] 74.120.168.12 74.120.168.12 POST /daily/admin/note/ashownote2.html
[ info ] qingrang.top/daily/admin/note/ashownote2.html [运行时间：0.057937s][吞吐率：17.26req/s] [内存消耗：2,637.41kb] [文件加载：52]
[ info ] [ LANG ] /var/www/html/daily/thinkphp/lang/zh-cn.php
[ info ] [ ROUTE ] array (
  'type' => 'module',
  'module' => 
  array (
    0 => 'admin',
    1 => 'note',
    2 => 'ashownote2',
  ),
)
[ info ] [ HEADER ] array (
  'host' => 'qingrang.top',
  'content-length' => '14',
  'accept' => 'application/json, text/javascript, */*; q=0.01',
  'origin' => 'http://qingrang.top',
  'x-requested-with' => 'XMLHttpRequest',
  'user-agent' => 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/70.0.3538.102 Safari/537.36',
  'content-type' => 'application/x-www-form-urlencoded',
  'referer' => 'http://qingrang.top/daily/admin/note',
  'accept-encoding' => 'gzip, deflate',
  'accept-language' => 'zh-CN,zh;q=0.9,la;q=0.8,en;q=0.7,lb;q=0.6',
  'cookie' => 'Hm_lvt_1769181352e9adc950166aada465644e=1541082864,1541122974,1541171416,1542098176; PHPSESSID=2itucolgeg6ju9b7e0uomjso34',
  'connection' => 'close',
)
[ info ] [ PARAM ] array (
  'groupname' => 'Java',
)
[ info ] [ SESSION ] INIT array (
  'id' => '',
  'var_session_id' => '',
  'prefix' => 'think',
  'type' => '',
  'auto_start' => true,
)
[ info ] [ RUN ] app\admin\controller\Note->aShowNote2[ /var/www/html/daily/application/admin/controller/Note.php ]
[ info ] [ DB ] INIT mysql
[ info ] [ LOG ] INIT File
[ sql ] [ DB ] CONNECT:[ UseTime:0.000484s ] mysql:host=74.120.168.12;dbname=diary;charset=utf8
[ sql ] [ SQL ] SHOW COLUMNS FROM `note` [ RunTime:0.001575s ]
[ sql ] [ SQL ] SELECT * FROM `note` WHERE  `groups` = 'Java' ORDER BY date desc [ RunTime:0.002475s ]
---------------------------------------------------------------
[ 2018-11-19T19:24:59+08:00 ] 74.120.168.12 74.120.168.12 GET /daily/admin/note/shownote/id/247
[ info ] qingrang.top/daily/admin/note/shownote/id/247 [运行时间：0.066956s][吞吐率：14.94req/s] [内存消耗：2,057.03kb] [文件加载：55]
[ info ] [ LANG ] /var/www/html/daily/thinkphp/lang/zh-cn.php
[ info ] [ ROUTE ] array (
  'type' => 'module',
  'module' => 
  array (
    0 => 'admin',
    1 => 'note',
    2 => 'shownote',
  ),
)
[ info ] [ HEADER ] array (
  'host' => 'qingrang.top',
  'upgrade-insecure-requests' => '1',
  'user-agent' => 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/70.0.3538.102 Safari/537.36',
  'accept' => 'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8',
  'referer' => 'http://qingrang.top/daily/admin/note',
  'accept-encoding' => 'gzip, deflate',
  'accept-language' => 'zh-CN,zh;q=0.9,la;q=0.8,en;q=0.7,lb;q=0.6',
  'cookie' => 'Hm_lvt_1769181352e9adc950166aada465644e=1541082864,1541122974,1541171416,1542098176; PHPSESSID=2itucolgeg6ju9b7e0uomjso34',
  'connection' => 'close',
)
[ info ] [ PARAM ] array (
  'id' => '247',
)
[ info ] [ SESSION ] INIT array (
  'id' => '',
  'var_session_id' => '',
  'prefix' => 'think',
  'type' => '',
  'auto_start' => true,
)
[ info ] [ RUN ] app\admin\controller\Note->showNote[ /var/www/html/daily/application/admin/controller/Note.php ]
[ info ] [ DB ] INIT mysql
[ info ] [ VIEW ] /var/www/html/daily/application/admin/view/note/shownote.html [ array (
  0 => 'note',
  1 => 'groups',
) ]
[ info ] [ LOG ] INIT File
[ sql ] [ DB ] CONNECT:[ UseTime:0.000515s ] mysql:host=74.120.168.12;dbname=diary;charset=utf8
[ sql ] [ SQL ] SHOW COLUMNS FROM `note` [ RunTime:0.001266s ]
[ sql ] [ SQL ] SELECT * FROM `note` WHERE  `id` = 247 LIMIT 1 [ RunTime:0.000585s ]
[ sql ] [ SQL ] SHOW COLUMNS FROM `groups` [ RunTime:0.000893s ]
[ sql ] [ SQL ] SELECT * FROM `groups` [ RunTime:0.000319s ]
---------------------------------------------------------------
[ 2018-11-19T19:25:04+08:00 ] 74.120.168.12 74.120.168.12 GET /daily/admin/note/editNote/id/247
[ info ] qingrang.top/daily/admin/note/editNote/id/247 [运行时间：0.061204s][吞吐率：16.34req/s] [内存消耗：2,113.32kb] [文件加载：56]
[ info ] [ LANG ] /var/www/html/daily/thinkphp/lang/zh-cn.php
[ info ] [ ROUTE ] array (
  'type' => 'module',
  'module' => 
  array (
    0 => 'admin',
    1 => 'note',
    2 => 'editNote',
  ),
)
[ info ] [ HEADER ] array (
  'host' => 'qingrang.top',
  'upgrade-insecure-requests' => '1',
  'user-agent' => 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/70.0.3538.102 Safari/537.36',
  'accept' => 'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8',
  'referer' => 'http://qingrang.top/daily/admin/note',
  'accept-encoding' => 'gzip, deflate',
  'accept-language' => 'zh-CN,zh;q=0.9,la;q=0.8,en;q=0.7,lb;q=0.6',
  'cookie' => 'Hm_lvt_1769181352e9adc950166aada465644e=1541082864,1541122974,1541171416,1542098176; PHPSESSID=2itucolgeg6ju9b7e0uomjso34',
  'connection' => 'close',
)
[ info ] [ PARAM ] array (
  'id' => '247',
)
[ info ] [ SESSION ] INIT array (
  'id' => '',
  'var_session_id' => '',
  'prefix' => 'think',
  'type' => '',
  'auto_start' => true,
)
[ info ] [ RUN ] app\admin\controller\Note->editNote[ /var/www/html/daily/application/admin/controller/Note.php ]
[ info ] [ DB ] INIT mysql
[ info ] [ VIEW ] /var/www/html/daily/application/admin/view/note/editnote.html [ array (
  0 => 'note',
  1 => 'groups',
) ]
[ info ] [ LOG ] INIT File
[ sql ] [ DB ] CONNECT:[ UseTime:0.000683s ] mysql:host=74.120.168.12;dbname=diary;charset=utf8
[ sql ] [ SQL ] SHOW COLUMNS FROM `note` [ RunTime:0.001399s ]
[ sql ] [ SQL ] SELECT * FROM `note` WHERE  `id` = 247 LIMIT 1 [ RunTime:0.000675s ]
[ sql ] [ SQL ] SHOW COLUMNS FROM `groups` [ RunTime:0.000853s ]
[ sql ] [ SQL ] SELECT * FROM `groups` [ RunTime:0.000309s ]
---------------------------------------------------------------
[ 2018-11-19T19:25:11+08:00 ] 74.120.168.12 74.120.168.12 POST /daily/admin/note/updatenote/id/247.html
[ info ] qingrang.top/daily/admin/note/updatenote/id/247.html [运行时间：0.067981s][吞吐率：14.71req/s] [内存消耗：2,365.29kb] [文件加载：58]
[ info ] [ LANG ] /var/www/html/daily/thinkphp/lang/zh-cn.php
[ info ] [ ROUTE ] array (
  'type' => 'module',
  'module' => 
  array (
    0 => 'admin',
    1 => 'note',
    2 => 'updatenote',
  ),
)
[ info ] [ HEADER ] array (
  'host' => 'qingrang.top',
  'content-length' => '86442',
  'cache-control' => 'max-age=0',
  'origin' => 'http://qingrang.top',
  'upgrade-insecure-requests' => '1',
  'content-type' => 'application/x-www-form-urlencoded',
  'user-agent' => 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/70.0.3538.102 Safari/537.36',
  'accept' => 'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8',
  'referer' => 'http://qingrang.top/daily/admin/note/editNote/id/247',
  'accept-encoding' => 'gzip, deflate',
  'accept-language' => 'zh-CN,zh;q=0.9,la;q=0.8,en;q=0.7,lb;q=0.6',
  'cookie' => 'Hm_lvt_1769181352e9adc950166aada465644e=1541082864,1541122974,1541171416,1542098176; PHPSESSID=2itucolgeg6ju9b7e0uomjso34',
  'connection' => 'close',
)
[ info ] [ PARAM ] array (
  'summary' => '',
  'content' => '# Spring(一) - IOC（控制反转）
[TOC]

Spring 是一个基于 **IOC** 和 **AOP** 的结构 J2EE 系统的框架。
## IOC 概念
控制反转（IOC， Inversion of Control），是一个概念，是一种思想。指将传统上由程序代码直接操控的对象调用权交给容器，通过容器来实现对象的装配和管理。控制反转就是对对象控制权的转移，从程序代码本身反转到了外部容器。简单说就是创建对象由以前的程序员自己 new 构造方法来调用，变成了交由 Spring 创建对象。

IoC 是一个概念，是一种思想，其实现方式多种多样。当前比较流行的实现方式有两种：依赖注入和依赖查找。依赖注入方式应用更为广泛。
- 依赖查找： Dependency Lookup， DL，容器提供回调接口和上下文环境给组件，程序代
码则需要提供具体的查找方式。比较典型的是依赖于 JNDI 系统的查找。
- 依赖注入： Dependency Injection， DI，程序代码不做定位查询，这些工作由容器自行完成。简单地说就是拿到的对象的属性，已经被注入好相关值了，直接使用即可。

依赖注入 DI 是指程序运行过程中，若需要调用另一个对象协助时，无须在代码中创建被调用者，而是依赖于外部容器，由外部容器创建后传递给程序。Spring 的依赖注入对调用者与被调用者几乎没有任何要求，完全支持 POJO 之间依赖关系的管理。

依赖注入是目前最优秀的解耦方式。依赖注入让 Spring 的 Bean 之间以配置文件的方式组织在一起，而不是以硬编码的方式耦合在一起的。

>以获取对象的方式来进行比较

- 传统的方式

通过 new 关键字主动创建一个对象

相当于你自己去菜市场 new 了一只鸡，不过是生鸡，要自己拔毛，去内脏，再上花椒，酱油，烤制，经过各种工序之后，才可以食用。

- IOC方式

对象的生命周期由 Spring 来管理，直接从 Spring 那里去获取一个对象。IOC 是反转控制 (Inversion Of Control)的缩写，就像控制权从本来在自己手里，现在交给了 Spring。

相当于去馆子(Spring)点了一只鸡，交到你手上的时候，已经五味俱全，你就只管吃就行了。

## 第一个 Spring 程序
### 传统的面向接口编程
经过以下例子可以看出，若接口（Service 层）变了，Test(View 层) 也的改，耦合度很高。

*ISomeService.java - 接口*
```
public interface ISomeService {
	void doSome();
}
```
*SomeServiceImpl.java - 实现类*
```
public class SomeServiceImpl implements ISomeService {
	@Override
	public void doSome() {
		System.out.println("执行doSome()方法");
	}
}
```
*Test.java - 测试*
```
@Test
public void test01() {
	ISomeService service = new SomeServiceImpl();
	service.doSome();
}
```
### Spring 实现
*applicationContext.mxl - Spring 的配置文件*
```
<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xsi:schemaLocation="
        http://www.springframework.org/schema/beans 
        http://www.springframework.org/schema/beans/spring-beans.xsd">

    <!-- 注册 Service，Spring 底层实际是做了 SomeServiceImpl myService = new SomeServiceImpl(); -->
    <bean id="myService" class="top.qingrang.service.SomeServiceImpl"/>

</beans>
```
*Test.java - 测试*
```
@Test
public void test02() {
	// 创建容器对象，加载 Spring 配置文件，会从类路径下查找配置文件
	ApplicationContext ac = new ClassPathXmlApplicationContext("applicationContext.xml");
	ISomeService someService = (ISomeService)ac.getBean("myService");
	someService.doSome();
}
```

从以上代码中已经看不到 `SomeServiceImpl` 这个实现类了，就做到了解耦。

>FileSystemXmlApplicationContext

```
// 创建容器对象，加载 Spring 配置文件，会从项目的根下查找配置文件
ApplicationContext ac = new FileSystemXmlApplicationContext("applicationContext.xml");

// 创建容器对象，加载 Spring 配置文件，会从当前文件系统的 D 盘根目录下查找配置文件
ApplicationContext ac = new FileSystemXmlApplicationContext("d:/applicationContext.xml");
```

>BeanFactory 容器

*Test.java*
```
@Test
public void test05() {
	// 创建 BeanFactory 容器
	BeanFactory bf = new XmlBeanFactory(new ClassPathResource("applicationContext.xml"));
	ISomeService service = (ISomeService) bf.getBean("myService");
	service.doSome();
}
```

>ApplicationContext 与 BeanFactory 容器的区别

这两上容器对于其中 Bean 的创建时机不同：
1. ApplicationContext容器在进行初始化时，会将其中的所有Bean(对象)进行创建
 - 缺点：占用系统资源（内存、CPU等）
 - 优点：响应速度快
1. BeanFactory容器中的对象，在容器初始化时并不会被创建，而是在真正获取该对象时才被创建
 - 缺点：相对来说，响应速度慢
 - 优点：不多占用系统资源

## Bean 的装配
Bean 的装配，即 Bean 对象的创建。容器根据代码要求创建 Bean 对象后再传递给代码的过程，称为 Bean 的装配。
### 默认装配方式
代码通过 `getBean()` 方式从容器获取指定的 Bean 实例，容器首先会调用 Bean 类的无参构造器，创建空值的实例对象。

*ISomeService.java - service 接口*
```
public interface ISomeService {
	void doSome();
}
```
*SomeServiceImpl.java - service 实现类*
```
public class SomeServiceImpl implements ISomeService {
	public SomeServiceImpl() {
		System.out.println("执行无参构造器");
	}

	@Override
	public void doSome() {
		System.out.println("执行doSome()方法");
	}
}
```
*ServiceFactory.java - service 工厂*
```
public class ServiceFactory {
	public ISomeService getSomeService() {
		return new SomeServiceImpl();
	}
}
```
*applicationContext.mxl*
```
<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xsi:schemaLocation="
        http://www.springframework.org/schema/beans 
        http://www.springframework.org/schema/beans/spring-beans.xsd">

    <!-- 注册 Service，Spring 底层实际是做了 SomeServiceImpl myService = new SomeServiceImpl();  -->
    <bean id="myService" class="com.bjpowernode.ba01.SomeServiceImpl"/>
</beans>
```
*Test.java - 测试*
```
@Test
public void test01() {
	// 创建容器对象，加载Spring配置文件
	String resource = "com/bjpowernode/ba01/applicationContext.xml";
	ApplicationContext ac = new ClassPathXmlApplicationContext(resource);
	ISomeService service = (ISomeService) ac.getBean("myService");
	service.doSome();
}
```
### 动态工厂 Bean
有些时候，项目中需要通过工厂类来创建 Bean 实例，而不能像前面例子中似的，直接由 Spring 容器来装配 Bean 实例。使用工厂模式创建 Bean 实例，就会使工厂类与要创建的 Bean 类耦合到一起。但，这样做的缺点是，不仅工厂类与目标类耦合到了一起，测试类与工厂类也耦合到了一起。

*ISomeService.java - service 接口*
```
public interface ISomeService {
	void doSome();
}
```
*SomeServiceImpl.java - service 实现类*
```
public class SomeServiceImpl implements ISomeService {
	@Override
	public void doSome() {
		System.out.println("执行doSome()方法");
	}
}
```
*ServiceFactory.java - service 工厂*
```
public class ServiceFactory {
	public ISomeService getSomeService() {
		return new SomeServiceImpl();
	}
}
```
*applicationContext.mxl*
```
<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xsi:schemaLocation="
        http://www.springframework.org/schema/beans 
        http://www.springframework.org/schema/beans/spring-beans.xsd">

    <!-- 注册动态工厂 -->
    <bean id="factory" class="top.qingrang.ba02.ServiceFactory"/>

    <!-- 注册 Service：动态工厂 Bean -->
    <bean id="myService" factory-bean="factory" factory-method="getSomeService"/>
</beans>
```
*Test.java - 测试*
```
public void test02() {
	String resource = "top/qingrang/ba02/applicationContext.xml";
	ApplicationContext ac = new ClassPathXmlApplicationContext(resource);
	ISomeService service = (ISomeService) ac.getBean("myService");
	service.doSome();
}
```
### 静态工厂 Bean
*ServiceFactory.java - service 工厂*
```
public class ServiceFactory {
	//静态方法
	public static ISomeService getSomeService() {
		return new SomeServiceImpl();
	}
}
```
*applicationContext.mxl*
```
<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xsi:schemaLocation="
        http://www.springframework.org/schema/beans 
        http://www.springframework.org/schema/beans/spring-beans.xsd">

    <!-- 注册 Service：静态工厂 Bean -->
    <bean id="myService" class="top.qingrang.ba03.ServiceFactory" factory-method="getSomeService"/>
</beans>
```
### 容器中 Bean 的作用域
*applicationContext.mxl*
```
<bean id="myService" class="top.qingrang.ba04.SomeServiceImpl" scope="prototype"/>
```

当通过 Spring 容器创建一个 Bean 实例时，不仅可以完成 Bean 的实例化，还可以通过 scope 属性，为 Bean 指定特定的作用域。 Spring 支持 5 种作用域。
1. singleton： 单例模式。即在整个 Spring 容器中，使用 singleton 定义的 Bean 将是单例的，只有一个实例。该 Bean 是在容器被创建时即被装配好了。 默认为单例的。
1. prototype： 原型模式。即每次使用 getBean 方法获取的同一个 `<bean />` 的实例都是一个新的实例。Bean 实例是在代码中使用该 Bean 实例时才进行装配的。
1. request：对于每次 HTTP 请求，都将会产生一个不同的 Bean 实例。
1. session：对于每个不同的 HTTP session，都将产生一个不同的 Bean 实例。
1. global session：每个全局的 HTTP session 对应一个 Bean 实例。典型情况下，仅在使用 portlet 集群时有效，多个 Web 应用共享一个 session。一般应用中， global-session 与 session 是等同的。

对于 scope 的值 request、 session 与 global session， 只有在 Web 应用中使用 Spring 时，该作用域才有效。

### Bean 后处理器
Bean 后处理器是一种特殊的 Bean，容器中所有的 Bean 在初始化时，均会自动执行该类的两个方法。由于该 Bean 是由其它 Bean 自动调用执行，不是程序员手工调用，故此 Bean 无须 id 属性。

需要做的是，在 Bean 后处理器类方法中，只要对 Bean 类与 Bean 类中的方法进行判断，就可实现对指定的 Bean 的指定方法进行功能扩展与增强。方法返回的 Bean 对象，即是增强过的对象。就是**设计模式中的代理模式**。

代码中需要**自定义 Bean 后处理器类**。该类就是**实现**了**接口 BeanPostProcessor** 的类。该接口中包含两个方法，分别在目标 Bean 初始化完毕之前与之后执行。它们的返回值为：功能被扩展或增强后的 Bean 对象。

Bean 初始化完毕有一个标志：一个方法将被执行。即当该方法被执行时，表示该 Bean 被初始化完毕。所以 Bean 后处理器中两个方法的执行，是在这个方法之前之后执行。 这个方法在后面将会讲到。

`public Object postProcessBeforeInitialization(Object bean, String beanId) throws BeansException`

该方法会在目标 Bean 初始化完毕之前由容器自动调用。

`public Object postProcessAfterInitialization(Object bean, String beanId) throws BeansException`

该方法会在目标 Bean 初始化完毕之后由容器自动调用。它们的参数是：第一个参数是系统即将初始化的 Bean 实例，第二个参数是该 Bean 实例的 id 属性值。若 Bean 没有 id 就是 name 属性值。

*ISomeService.java - service 接口*
```
public interface ISomeService {
	String doSome();
	String doOther();
}
```
*SomeServiceImpl.java - service 实现类*
```
public class SomeServiceImpl implements ISomeService {
	@Override
	public String doSome() {
		System.out.println("执行doSome()方法");
		return "doSome() - abc";
	}
	
	@Override
	public String doOther() {
		System.out.println("执行doOther()方法");
		return "doOther() - def";
	}
}
```
*MyBeanPostProcessor.java - 自定义 Bean 后处理器类*
```
public class MyBeanPostProcessor implements BeanPostProcessor {

	// bean：表示当前正在进行初始化的Bean对象
	// beanName：表示当前正在进行初始化的Bean对象的id
	@Override
	public Object postProcessBeforeInitialization(Object bean, String beanName) throws BeansException {
		System.out.println("执行 ---- before() ---方法");
		return bean;
	}

	@Override
	public Object postProcessAfterInitialization(final Object bean, String beanName) throws BeansException {
		System.out.println("执行 ---- after() ---方法");
		//判断 SomeServiceImpl 对象
		if ("myService".equals(beanName)) {
			Object obj = Proxy.newProxyInstance(bean.getClass().getClassLoader(),
					bean.getClass().getInterfaces(),
					new InvocationHandler() {
						@Override
						public Object invoke(Object proxy, Method method, Object[] args) throws Throwable {
							Object invoke = method.invoke(bean, args);
							//判断具体方法
							if ("doSome".equals(method.getName())) {
								return ((String) invoke).toUpperCase();
							}
							return invoke;
						}
					});
			return obj;
		}
		return bean;
	}
}
```
*applicationContext.mxl*
```
<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xsi:schemaLocation="
        http://www.springframework.org/schema/beans 
        http://www.springframework.org/schema/beans/spring-beans.xsd">

    <!-- 注册 Service -->
    <bean id="myService" class="top.qingrang.ba05.SomeServiceImpl"/>
    <bean id="myService2" class="top.qingrang.ba05.SomeServiceImpl"/>

    <!-- 注册 Bean 后处理器 -->
    <bean class="top.qingrang.ba05.MyBeanPostProcessor"/>

</beans>
```
*Test.java - 测试*
```
public void test01() {
	String resource = "top/qingrang/ba05/applicationContext.xml";
	ApplicationContext ac = new ClassPathXmlApplicationContext(resource);

	ISomeService service = (ISomeService) ac.getBean("myService");
	System.out.println(service.doSome());
	System.out.println(service.doOther());

	System.out.println("======================");

	ISomeService service2 = (ISomeService) ac.getBean("myService2");
	System.out.println(service2.doSome());
	System.out.println(service2.doOther());
}
```

*输出结果*
```
执行 ---- before() ---方法
执行 ---- after() ---方法
执行 ---- before() ---方法
执行 ---- after() ---方法
执行doSome()方法
DOSOME() - ABC
执行doOther()方法
doOther() - def
======================
执行doSome()方法
doSome() - abc
执行doOther()方法
doOther() - def
```
### Bean 的生命周期
*ISomeService.java - service 接口*
```
public interface ISomeService {
	void doSome();
}
```
*SomeServiceImpl.java - service 实现类*
```
public class SomeServiceImpl implements ISomeService, BeanNameAware, BeanFactoryAware, InitializingBean, DisposableBean {
	private String adao;
	private String bdao;

	public void setAdao(String adao) {
		this.adao = adao;
		System.out.println("Step2：执行 setter");
	}

	public void setBdao(String bdao) {
		this.bdao = bdao;
		System.out.println("Step2：执行 setter");
	}

	public SomeServiceImpl() {
		System.out.println("Step1：执行无参构造器");
	}

	@Override
	public void doSome() {
		System.out.println("Step9：执行 doSome() 方法");
	}

	public void setUp() {
		System.out.println("Step7：初始化完毕之后");
	}

	public void tearDown() {
		System.out.println("Step11：销毁之前");
	}

	@Override
	public void setBeanName(String name) {
		System.out.println("Step3：获取到 bean 的 id = " + name);
	}

	@Override
	public void setBeanFactory(BeanFactory beanFactory) throws BeansException {
		System.out.println("Step4：获取到 BeanFactory 容器");
	}

	@Override
	public void afterPropertiesSet() throws Exception {
		System.out.println("Step6：Bean 初始化完毕了");
	}

	@Override
	public void destroy() throws Exception {
		System.out.println("Step10：实现接口的销毁之前");
	}
}
```
*MyBeanPostProcessor.java - Bean 后处理器*
```
public class MyBeanPostProcessor implements BeanPostProcessor {
	@Override
	public Object postProcessBeforeInitialization(Object bean, String beanName)
			throws BeansException {
		System.out.println("Step5：MyBeanPostProcessor - 执行 before() 方法");
		return bean;
	}

	@Override
	public Object postProcessAfterInitialization(final Object bean, String beanName)
			throws BeansException {
		System.out.println("Step8：MyBeanPostProcessor - 执行 after() 方法");
		return bean;
	}
}
```
*applicationContext.mxl*
```
<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xsi:schemaLocation="
        http://www.springframework.org/schema/beans 
        http://www.springframework.org/schema/beans/spring-beans.xsd">

    <!-- 注册Service -->
    <bean id="myService" class="top.qingrang.ba07.SomeServiceImpl"
    		init-method="setUp" destroy-method="tearDown">
    	<property name="adao" value="aaa"/>
    	<property name="bdao" value="bbb"/>
   	</bean>

   	<bean class="top.qingrang.ba07.MyBeanPostProcessor"/>
</beans>
```
*Test.java - 测试*
```
public void test01() {
	// 创建容器对象，加载Spring配置文件
	String resource = "top/qingrang/ba07/applicationContext.xml";
	ApplicationContext ac = new ClassPathXmlApplicationContext(resource);
	ISomeService service = (ISomeService) ac.getBean("myService");
	service.doSome();
	// 对于销毁方法的执行，有两个条件：
	// 1)当前的Bean需要是singleton的
	// 2)要手工关闭容器
	((ClassPathXmlApplicationContext)ac).close();
}
```

*输出信息*
```
Step1：执行无参构造器
Step2：执行 setter
Step2：执行 setter
Step3：获取到 bean 的 id = myService
Step4：获取到 BeanFactory 容器
Step5：MyBeanPostProcessor - 执行 before() 方法
Step6：Bean 初始化完毕了
Step7：初始化完毕之后
Step8：MyBeanPostProcessor - 执行 after() 方法
Step9：执行 doSome() 方法
Step10：实现接口的销毁之前
Step11：销毁之前
```
## 基于 XML 的 DI
Bean 实例在调用无参构造器创建了空值对象后，就要**对 Bean 对象的属性进行初始化**。初始化是由容器自动完成的，称为注入。
### 注入分类
#### 设值注入(常用)
和 `setter` 方法有关系。

*School.java*
```
public class School {
	private String name;
	public void setName(String name) {
		this.name = name;
	}

	@Override
	public String toString() {
		return "School [name=" + name + "]";
	}
}
```

*Student.java*
```
public class Student {
	private String name;
	private int age;
	private School school;   // 对象属性，域属性
	
	public void setName(String name) {
		System.out.println("执行setName()");
		this.name = name;
	}
	public void setAge(int age) {
		System.out.println("执行setAge()");
		this.age = age;
	}
	public void setSchool(School school) {
		this.school = school;
	}

	@Override
	public String toString() {
		return "Student [name=" + name + ", age=" + age + ", school=" + school
				+ "]";
	}
}
```

*applicationContext.mxl*
```
<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xsi:schemaLocation="
        http://www.springframework.org/schema/beans 
        http://www.springframework.org/schema/beans/spring-beans.xsd">

    <!-- 注册 Student -->
    <bean id="myStudent" class="top.qingrang.di01.Student">
    	<property name="name" value="张三"/>
    	<property name="age" value="23"/>
        <!-- 对于对象的注入要用 ref -->
    	<property name="school" ref="mySchool"/>
    </bean>

    <!-- 注册 School -->
    <bean id="mySchool" class="top.qingrang.di01.School">
    	<property name="name" value="清华大学"/>
    </bean>

</beans>
```

*Test.java - 测试*
```
public void test01() {
	// 创建容器对象，加载Spring配置文件
	String resource = "top/qingrang/di01/applicationContext.xml";
	ApplicationContext ac = new ClassPathXmlApplicationContext(resource);
	Student student = (Student) ac.getBean("myStudent");
	System.out.println(student);
}
```

*输出信息*
```
执行setName()
执行setAge()
Student [name=张三, age=23, school=School [name=清华大学]]
```
#### 构造注入(很少用)
和 `setter` 方法没有关系，和构造方法有关系。

*Student.java - 为 Student 增加带参构造器*
```
public class Student {
	private String name;
	private int age;
	private School school;   // 对象属性，域属性

	/**
	 * 带参数的构造方法
	 */
	public Student(String name, int age, School school) {
		super();
		this.name = name;
		this.age = age;
		this.school = school;
	}
	...
}
```

*applicationContext.mxl*
```
<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xsi:schemaLocation="
        http://www.springframework.org/schema/beans 
        http://www.springframework.org/schema/beans/spring-beans.xsd">

    <!-- 注册School -->
    <bean id="mySchool" class="top.qingrang.di02.School">
    	<property name="name" value="清华大学"/>
    </bean>

    <!-- 注册Student -->
    <bean id="myStudent" class="top.qingrang.di02.Student">
        <!-- 构造器参数，指定 name -->
    	<constructor-arg name="name" value="李四"/>
    	<constructor-arg name="age" value="24"/>
    	<constructor-arg name="school" ref="mySchool"/>

        <!-- 构造器参数，使用索引 -->
    	<!--
    	<constructor-arg index="0" value="李四"/>
    	<constructor-arg index="1" value="24"/>
    	<constructor-arg index="2" ref="mySchool"/>
    	 -->

        <!-- 构造器参数，默认索引 -->
    	<!--
    	<constructor-arg value="李四"/>
    	<constructor-arg value="24"/>
    	<constructor-arg ref="mySchool"/>
    	 -->
    </bean>
</beans>
```
### 集合属性注入
基本类型数组，对象数组，List，Set，Map，Properties 等。

*School.java*
```
public class School {
	private String name;

	public void setName(String name) {
		this.name = name;
	}

	@Override
	public String toString() {
		return "School [name=" + name + "]";
	}
}
```
*Some.java*
```
public class Some {
	private School[] schools; // 对象数组
	private String[] myStrs; // 字符串数组
	private List<String> myList; // List
	private Set<String> mySet; // Set
	private Map<String, Object> myMap; // Map
	private Properties myPros; // Properties

	public void setSchools(School[] schools) {
		this.schools = schools;
	}
	public void setMyStrs(String[] myStrs) {
		this.myStrs = myStrs;
	}
	public void setMyList(List<String> myList) {
		this.myList = myList;
	}
	public void setMySet(Set<String> mySet) {
		this.mySet = mySet;
	}
	public void setMyMap(Map<String, Object> myMap) {
		this.myMap = myMap;
	}
	public void setMyPros(Properties myPros) {
		this.myPros = myPros;
	}

	@Override
	public String toString() {
		return "Some [schools=" + Arrays.toString(schools) + ", myStrs="
				+ Arrays.toString(myStrs) + ", myList=" + myList + ", mySet="
				+ mySet + ", myMap=" + myMap + ", myPros=" + myPros + "]";
	}
}
```
*applicationContext.xml*
```
<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xsi:schemaLocation="
        http://www.springframework.org/schema/beans 
        http://www.springframework.org/schema/beans/spring-beans.xsd">

    <!-- 注册 School -->
    <bean id="mySchool" class="top.qingrang.di05.School">
    	<property name="name" value="清华大学"/>
    </bean>
    <bean id="mySchool2" class="top.qingrang.di05.School">
    	<property name="name" value="北京大学"/>
    </bean>

    <!-- 注册 Student -->
    <bean id="mySome" class="top.qingrang.di05.Some">
		<!-- 对象数组 -->
    	<property name="schools">
    		<array>
    			<ref bean="mySchool"/>
    			<ref bean="mySchool2"/>
    		</array>
    	</property>
		<!-- 数组：简写，带 ref 的若只有一个可以简写，多个则不行 -->
		<property name="schools" value="mySchool"/>

		<!-- 基本类型数组 -->
    	<property name="myStrs">
    		<array>
    			<value>中国</value>
    			<value>北京</value>
    		</array>
    	</property>
		<!-- 数组：简写 -->
		<property name="myStrs" value="中国,北京"/>

		<!-- List<String> -->
    	<property name="myList">
    		<list>
    			<value>大兴</value>
    			<value>亦庄</value>
    		</list>
    	</property>
		<!-- List<String>：简写 -->
		<property name="myList" value="大兴,亦庄"/>

		<!-- Set<String> -->
    	<property name="mySet">
    		<set>
    			<value>大族企业湾</value>
    			<value>10号楼</value>
    		</set>
    	</property>
		<!-- Set<String>：简写 -->
		<property name="mySet" value="大族企业湾,10号楼"/>

		<!-- Map<String, Object>，Map 的键值都是 object -->
    	<property name="myMap">
    		<map>
    			<entry key="mobile" value="1234567"/>
    			<entry key="QQ" value="7654321"/>
    		</map>
    	</property>

		<!-- Properties，Properties 的键值都是字符串 -->
    	<property name="myPros">
    		<props>
    			<prop key="education">大学</prop>
    			<prop key="gender">男</prop>
    		</props>
    	</property>
    </bean>

</beans>
```
*MyTest.java*
```
@Test
public void test01() {
	// 创建容器对象，加载 Spring 配置文件
	String resource = "top/qingrang/di05/applicationContext.xml";
	ApplicationContext ac = new ClassPathXmlApplicationContext(resource);
	Some some = (Some) ac.getBean("mySome");
	System.out.println(some);
}
```
### 对于域属性(对象)的自动注入
#### byName 方式自动注入
![byName 方式自动注入](https://daily-1252869435.cos.ap-chengdu.myqcloud.com/2018-11-17-22-04-38.png)
#### byType 方式自动注入
![mark](https://daily-1252869435.cos.ap-chengdu.myqcloud.com/2018-11-17-22-06-41.png)
### 使用 SPEL 注入
SPEL(Spring Expression Language)，即 Spring EL 表达式语言。即，在 Spring 配置文件中为 Bean 的属性注入值时，可直接使用 SPEL 表达式计算的结果。 SPEL 表达式以#开头，后跟一对大括号。用法： `<bean id=“abc” value=“#{…}”/>`。
*Person.java*
```
public class Person {
	private String pname;
	private int page;

	public void setPname(String pname) {
		this.pname = pname;
	}
	public void setPage(int page) {
		this.page = page;
	}
	public String getPname() {
		return pname;
	}
	public int getPage() {
		return page;
	}

	@Override
	public String toString() {
		return "Person [pname=" + pname + ", page=" + page + "]";
	}
	
	public int computeAge() {
		return page > 25 ? 25 : page;
	}
}
```
*Student.java*
```
public class Student {
	private String name;
	private int age;
	
	public void setName(String name) {
		this.name = name;
	}
	public void setAge(int age) {
		this.age = age;
	}
	
	@Override
	public String toString() {
		return "Student [name=" + name + ", age=" + age + "]";
	}
}
```
*applicationContext.mxl*
```
<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xsi:schemaLocation="
        http://www.springframework.org/schema/beans 
        http://www.springframework.org/schema/beans/spring-beans.xsd">

    <!-- 注册School -->
    <bean id="myPerson" class="top.qingrang.di09.Person">
    	<property name="pname" value="李四"/>
    	<property name="page" value="#{T(java.lang.Math).random() * 50}"/>   
    </bean>
    
    <bean id="myStudent" class="top.qingrang.di09.Student">
    	<property name="name" value="#{myPerson.pname}"/>
    	<!-- <property name="age" value="#{myPerson.page > 25 ? 25 : myPerson.page}"/> -->
    	<property name="age" value="#{myPerson.computeAge() }"/>
    </bean>

</beans>
```
*Test.java - 测试*
```
@Test
public void test01() {
	// 创建容器对象，加载Spring配置文件
	String resource = "top/qingrang/di09/applicationContext.xml";
	ApplicationContext ac = new ClassPathXmlApplicationContext(resource);
	
	Person person = (Person) ac.getBean("myPerson");
	System.out.println(person);
	
	Student student = (Student) ac.getBean("myStudent");
	System.out.println(student);
}
```
### 使用内部 Bean 注入
若不希望代码直接访问某个 bean，即，在代码中通过 getBean 方法获取该 Bean 实例，则可将该 Bean 的定义放入调用者 bean 定义的内部。

*applicationContext.mxl*
```
<!-- 注册 Student -->
<bean id="myStudent" class="top.qingrang.di10.Student">
	<property name="name" value="张三"/>
	<property name="age" value="23"/>
	<property name="school">
		<!-- 内部 Bean -->
	    <bean class="top.qingrang.di10.School">
	    	<property name="name" value="清华大学"/>
	    </bean>
	</property>
</bean>
```
*Test.java - 测试*
```
@Test
public void test01() {
	// 创建容器对象，加载Spring配置文件
	String resource = "top/qingrang/di10/applicationContext.xml";
	ApplicationContext ac = new ClassPathXmlApplicationContext(resource);
	
	Student student = (Student) ac.getBean("myStudent");
	System.out.println(student);
	
	// 不能访问，会报错
	//org.springframework.beans.factory.NoSuchBeanDefinitionException: No bean named \'mySchool\' is defined
	School school = (School) ac.getBean("mySchool");
	System.out.println(school);
}
```
### 使用同类抽象 Bean 注入
当若干 Bean 实例同属于一个类，且这些实例的属性值又有相同值时，可以使用抽象 Bean，以简化配置文件。

抽象 Bean 是用于让其它 bean 继承的。这个 bean 在 Bean 类中是不能通过 getBean 方法获取的。设置 abstract 属性为 true 来指明该 bean 为抽象 bean， 默认值为 false。 不过，该 bean 不为抽象 bean 时，也可被继承。 只不过，在应用中，用于被继承的 bean 一般为抽象 bean。

*Student.java*
```
public class Student {
	private String name;
	private int age;
	private String school; // 学校

	public void setName(String name) {
		this.name = name;
	}

	public void setAge(int age) {
		this.age = age;
	}

	public void setSchool(String school) {
		this.school = school;
	}

	@Override
	public String toString() {
		return "Student [name=" + name + ", age=" + age + ", school=" + school + "]";
	}
}
```
*applicationContext.mxl*
```
<!-- 同类抽象 Bean，abstract="true" -->
<bean id="baseStudent" class="top.qingrang.di11.Student" abstract="true">
	<property name="school" value="清华大学"/>
</bean>
<!-- 利用 parent 实现继承 -->
<bean id="myStudent" parent="baseStudent">
	<property name="name" value="张三"/>
	<property name="age" value="23"/>
</bean>
<bean id="myStudent2" parent="baseStudent">
	<property name="name" value="李四"/>
	<property name="age" value="24"/>
</bean>
```
*Test.java - 测试*
```
@Test
public void test01() {
	// 创建容器对象，加载Spring配置文件
	String resource = "top/qingrang/di11/applicationContext.xml";
	ApplicationContext ac = new ClassPathXmlApplicationContext(resource);
	
	Student student = (Student) ac.getBean("myStudent");
	System.out.println(student);
	Student student2 = (Student) ac.getBean("myStudent2");
	System.out.println(student2);
}
```
### 使用异类抽象 Bean 注入
当若干不同的类对象具有相同的属性，且其值也相同时，可使用异类抽象 Bean。
![异类抽象 Bean 注入](https://daily-1252869435.cos.ap-chengdu.myqcloud.com/2018-11-18-19-41-35.png)
### 为应用指定多个 Spring 配置文件
在实际应用里，随着应用规模的增加，系统中 Bean 数量也大量增加，导致配置文件变得非常庞大、臃肿。为了避免这种情况的产生，提高配置文件的可读性与可维护性，可以将 Spring 配置文件分解成多个配置文件。
#### 平等关系的配置文件
假设有两个配置文件：`spring-base.xml`，`spring-beans.xml`
```
@Test
public void test01() {
	// 可变参数
	String resource = "top/qingrang/di13/spring-base.xml";
	String resource2 = "top/qingrang/di13/spring-beans.xml";
	ApplicationContext ac = new ClassPathXmlApplicationContext(resource, resource2);
	// 参数数组
	String resource = "top/qingrang/di13/spring-base.xml";
	String resource2 = "top/qingrang/di13/spring-beans.xml";
	String[] resources = {resource, resource2};
	ApplicationContext ac = new ClassPathXmlApplicationContext(resources);
	// 通配符
	String resource = "top/qingrang/di13/spring-*.xml";
	ApplicationContext ac = new ClassPathXmlApplicationContext(resource);

	Student student = (Student) ac.getBean("myStudent");
	System.out.println(student);
	Teacher teacher = (Teacher) ac.getBean("myTeacher");
	System.out.println(teacher);
}
```
#### 包含关系的配置文件
*applicationContext.mxl*
```
<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xsi:schemaLocation="
        http://www.springframework.org/schema/beans 
        http://www.springframework.org/schema/beans/spring-beans.xsd">
	<!-- 
	<import resource="classpath:top/qingrang/di14/spring-base.xml"/>
	<import resource="classpath:top/qingrang/di14/spring-beans.xml"/>
	 -->

	<!-- 使用通配符 -->
	<import resource="classpath:top/qingrang/di14/spring-*.xml"/>

</beans>
```
*Test.java - 测试*
```
@Test
public void test01() {
	String resource = "top/qingrang/di14/springTotal.xml";
	ApplicationContext ac = new ClassPathXmlApplicationContext(resource);
	...
}
```
## 基于注解的 DI
对于 DI 使用注解，将不再需要在 Spring 配置文件中声明 Bean 实例。
### 定义 Bean `@Component`
- 与 `@Component` 注解功能相同，但意义不同的注解还有三个：
	- `@Repository`：注解在 Dao 实现类上
	- `@Service`：注解在 Service 实现类上
	- `@Controller`：注解在 SpringMVC 的处理器上

### Bean 的作用域 `@Scope`
### 基本类型属性注入 `@Value`
### 按类型注入域属性 `@Autowired`
需要在域属性上使用注解 `@Autowired`，该注解默认使用按类型自动装配 Bean 的方式。使用该注解完成属性注入时，类中无需 setter。当然，若属性有 setter，则也可将其加到 setter 上。
### 按名称注入域属性 `@Autowired` 与 `@Qualifier`
需要在域属性上联合使用注解 `@Autowired` 与 `@Qualifier`。 `@Qualifier` 的 value 属性用于指定要匹配的 Bean 的 id 值。同样类中无需 setter，也可加到 setter 上。
### 域属性注解 `@Resource`
Spring 提供了对 JSR-250 规范中定义 `@Resource` 标准注解的支持。 `@Resource` 注解既可以按名称匹配 Bean，也可以按类型匹配 Bean。 使用该注解，要求 JDK 必须是 6 及以上版本。
### Bean 的生命始末 `@PostConstruct` 与 `@PreDestroy`
在方法上使用 `@PostConstruct`，与原来的 `init-method` 等效。在方法上使 `@PreDestroy`，与 `destroy-method` 等效。

*School.java*
```
// 组件，表示当前类被 Spring 容器所管理
@Component("mySchool")
public class School {
	@Value("清华大学")
	private String name;

	public void setName(String name) {
		this.name = name;
	}

	@Override
	public String toString() {
		return "School [name=" + name + "]";
	}
}
```
*Student.java*
```
// @Scope("prototype")   // 默认也是 singleton
@Component("myStudent")
public class Student {
	@Value("张三")
	private String name;
	@Value("23")
	private int age;

// ------------------- byType 方式的注解式注入 -------------------
//	@Autowired
//	private School school;   // 对象属性，域属性
// --------------------------------------------------------------

// ----- byName 方式的注解式注入，要求 @Autowired 与 @Qualifier 联合使用 ----
//	@Autowired
//	@Qualifier("mySchool")
//	private School school;   // 对象属性，域属性
// --------------------------------------------------------------

// -------------------- 域属性注解 @Resource --------------------
	// @Resource(name="mySchool")   // byName 方式的注解式注入
	@Resource   // byType 方式的注解式注入
	private School school;   // 对象属性，域属性
// --------------------------------------------------------------

	@Override
	public String toString() {
		return "Student [name=" + name + ", age=" + age + ", school=" + school
				+ "]";
	}

	// Bean 的生命始 @PostConstruct
	@PostConstruct
	public void initAfter() {
		System.out.println("当前Bean初始化刚完毕");
	}

	// Bean 的生命末 @PreDestroy
	@PreDestroy
	public void preDestroy() {
		System.out.println("当前Bean即将被销毁");
	}
}
```
*applicationContext.mxl*
```
<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xmlns:context="http://www.springframework.org/schema/context" xsi:schemaLocation="
        http://www.springframework.org/schema/beans 
        http://www.springframework.org/schema/beans/spring-beans.xsd
        http://www.springframework.org/schema/context 
        http://www.springframework.org/schema/context/spring-context.xsd">
        
	<!-- 组件扫描 top.qingrang 这个包及其子包 -->
	<!--<context:component-scan base-package="top.qingrang"/> -->
	
	<!-- 组件扫描 top.qingrang 这个包的子包 -->
	<!--<context:component-scan base-package="top.qingrang.*"/> -->
	
	<context:component-scan base-package="top.qingrang.di01"/>
	
</beans>
```
*Test.java - 测试*
```
@Test
public void test01() {
	// 创建容器对象，加载 Spring 配置文件
	String resource = "top/qingrang/di01/applicationContext.xml";
	ApplicationContext ac = new ClassPathXmlApplicationContext(resource);
	Student student = (Student) ac.getBean("myStudent");
	System.out.println(student);
}
```
### 使用 JavaConfig 进行配置
JavaConfig，是在 Spring 3.0 开始从一个独立的项目并入到 Spring 中的。
JavaConfig 可以看成一个用于完成 Bean 装配的 Spring 配置文件，即 Spring 容器， 只不过该容器不是 XML文件，而是由程序员使用 Java 自己编写的 Java 类。

*School.java*
```
public class School {
	private String name;

	public School() {
		super();
		// TODO Auto-generated constructor stub
	}

	public School(String name) {
		super();
		this.name = name;
	}

	public void setName(String name) {
		this.name = name;
	}

	@Override
	public String toString() {
		return "School [name=" + name + "]";
	}
}
```
*Student.java*
```
public class Student {
	private String name;
	private int age;
	private School school; // 对象属性，域属性

	public Student() {
		super();
		// TODO Auto-generated constructor stub
	}

	public Student(String name, int age) {
		super();
		this.name = name;
		this.age = age;
	}

	public void setName(String name) {
		System.out.println("执行setName()");
		this.name = name;
	}

	public void setAge(int age) {
		System.out.println("执行setAge()");
		this.age = age;
	}

	public void setSchool(School school) {
		this.school = school;
	}

	@Override
	public String toString() {
		return "Student [name=" + name + ", age=" + age + ", school=" + school
				+ "]";
	}
}
```
*MyJavaConfig.java*
```
@Configuration    // 表示当前类充当 Spring 容器，即所有的 Bean 将由这个类来创建
public class MyJavaConfig {
	
	@Bean(name="school")
	public School mySchoolCreator() {
		return new School("北京大学");
	}
	
	// autowire=Autowire.BY_TYPE 指从当前类这个容器中查找与域属性的类型具有is-a关系的Bean
	/*
	@Bean(name="myStudent", autowire=Autowire.BY_TYPE)
	public Student myStudentCreator() {
		return new Student("张三", 23);
	}
	*/
	
	// autowire=Autowire.BY_NAME 指从当前类这个容器中查找与域属性同名的Bean
	@Bean(name="myStudent", autowire=Autowire.BY_NAME)
	public Student myStudentCreator() {
		return new Student("张三", 23);
	}
}
```
*applicationContext.mxl*
```
<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xmlns:context="http://www.springframework.org/schema/context" xsi:schemaLocation="
        http://www.springframework.org/schema/beans 
        http://www.springframework.org/schema/beans/spring-beans.xsd
        http://www.springframework.org/schema/context 
        http://www.springframework.org/schema/context/spring-context.xsd">

	<!-- 扫描组件 -->
	<context:component-scan base-package="top.qingrang.di05"/>

</beans>
```
*Test.java - 测试*
```
@Test
public void test01() {
	String resource = "top/qingrang/di05/applicationContext.xml";
	ApplicationContext ac = new ClassPathXmlApplicationContext(resource);
	Student student = (Student) ac.getBean("myStudent");
	System.out.println(student);
}
```
### 使用 Spring 的 JUnit4 测试 Spring
使用 Spring 的 JUnit4 对 Spring 代码进行测试，将不再需要在程序的代码中直接写出创建 Spring 容器，及从 Spring 容器中通过 getBean() 获取对象了。这些工作将由 JUnit4 注解，配合着域属性的自动注入注解共同完成。
*School.java*
```
public class School {
	private String name;

	public void setName(String name) {
		this.name = name;
	}

	@Override
	public String toString() {
		return "School [name=" + name + "]";
	}
}
```
*Student.java*
```
public class Student {
	private String name;
	private School school;   // 对象属性，域属性
	
	public void setName(String name) {
		this.name = name;
	}

	public void setSchool(School school) {
		this.school = school;
	}
	@Override
	public String toString() {
		return "Student [name=" + name + ", school=" + school + "]";
	}
}
```
*applicationContext.mxl*
```
<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xsi:schemaLocation="
        http://www.springframework.org/schema/beans 
        http://www.springframework.org/schema/beans/spring-beans.xsd">

    <!-- 注册 School -->
    <bean id="mySchool" class="top.qingrang.di06.School">
    	<property name="name" value="清华大学"/>
    </bean>

    <!-- 注册 Student -->
    <bean id="myStudent" class="top.qingrang.di06.Student">
    	<property name="name" value="张三"/>
    	<property name="school" ref="mySchool"/>
    </bean>

</beans>
```
*Test.java - 测试*
```
@RunWith(SpringJUnit4ClassRunner.class)	// 指定运行环境
@ContextConfiguration(locations="classpath:top/qingrang/di06/applicationContext.xml") // 指定配置文件位置
public class MyTest {

	//对于需要从容器中获取的 Bean 对象，使用 byType 或 byName 方式，将其自动注入.
	@Autowired
	private Student student;

	@Autowired
	private School school;

	//然后就可以直接测试对象了.
	@Test
	public void test01() {
		System.out.println(student);
	}
	
	@Test
	public void test02() {
		System.out.println(school);
	}
}
```

### 注解与 XML 共同使用
注解的好处是，配置方便，直观。但其弊端也显而易见：以硬编码的方式写入到了 Java 代码中，其修改是需要重新编译代码的。
XML 配置方式的最大好处是，对其所做修改，无需编译代码，只需重启服务器即可将新的配置加载。
若注解与 XML 同用， **XML 的优先级要高于注解**。这样做的好处是，需要对某个 Bean 做修改，只需修改配置文件即可。当然，此时， Bean 类要有 setter 或构造器。
',
  'groups' => 'Java',
  'showsel' => '1',
  'showse2' => '1',
  'id' => '247',
)
[ info ] [ SESSION ] INIT array (
  'id' => '',
  'var_session_id' => '',
  'prefix' => 'think',
  'type' => '',
  'auto_start' => true,
)
[ info ] [ RUN ] app\admin\controller\Note->updateNote[ /var/www/html/daily/application/admin/controller/Note.php ]
[ info ] [ DB ] INIT mysql
[ info ] [ CACHE ] INIT File
[ info ] [ LOG ] INIT File
[ sql ] [ DB ] CONNECT:[ UseTime:0.000583s ] mysql:host=74.120.168.12;dbname=diary;charset=utf8
[ sql ] [ SQL ] SHOW COLUMNS FROM `note` [ RunTime:0.001334s ]
[ sql ] [ SQL ] SELECT * FROM `note` WHERE  `id` = 247 LIMIT 1 [ RunTime:0.000636s ]
[ sql ] [ SQL ] SELECT `groups` FROM `note` WHERE  `id` = 247 LIMIT 1 [ RunTime:0.000510s ]
[ sql ] [ SQL ] SHOW COLUMNS FROM `groups` [ RunTime:0.000971s ]
[ sql ] [ SQL ] SELECT `parent_id` FROM `groups` WHERE  `groups` = 'Java' LIMIT 1 [ RunTime:0.000310s ]
[ sql ] [ SQL ] SELECT `groups` FROM `groups` WHERE  `id` = 2 LIMIT 1 [ RunTime:0.000286s ]
[ sql ] [ SQL ] UPDATE `note`  SET `id`=247,`p_id`=2,`title`='Spring(一) - IOC（控制反转）\r',`content`='# Spring(一) - IOC（控制反转）\r\n[TOC]\r\n\r\nSpring 是一个基于 **IOC** 和 **AOP** 的结构 J2EE 系统的框架。\r\n## IOC 概念\r\n控制反转（IOC， Inversion of Control），是一个概念，是一种思想。指将传统上由程序代码直接操控的对象调用权交给容器，通过容器来实现对象的装配和管理。控制反转就是对对象控制权的转移，从程序代码本身反转到了外部容器。简单说就是创建对象由以前的程序员自己 new 构造方法来调用，变成了交由 Spring 创建对象。\r\n\r\nIoC 是一个概念，是一种思想，其实现方式多种多样。当前比较流行的实现方式有两种：依赖注入和依赖查找。依赖注入方式应用更为广泛。\r\n- 依赖查找： Dependency Lookup， DL，容器提供回调接口和上下文环境给组件，程序代\r\n码则需要提供具体的查找方式。比较典型的是依赖于 JNDI 系统的查找。\r\n- 依赖注入： Dependency Injection， DI，程序代码不做定位查询，这些工作由容器自行完成。简单地说就是拿到的对象的属性，已经被注入好相关值了，直接使用即可。\r\n\r\n依赖注入 DI 是指程序运行过程中，若需要调用另一个对象协助时，无须在代码中创建被调用者，而是依赖于外部容器，由外部容器创建后传递给程序。Spring 的依赖注入对调用者与被调用者几乎没有任何要求，完全支持 POJO 之间依赖关系的管理。\r\n\r\n依赖注入是目前最优秀的解耦方式。依赖注入让 Spring 的 Bean 之间以配置文件的方式组织在一起，而不是以硬编码的方式耦合在一起的。\r\n\r\n>以获取对象的方式来进行比较\r\n\r\n- 传统的方式\r\n\r\n通过 new 关键字主动创建一个对象\r\n\r\n相当于你自己去菜市场 new 了一只鸡，不过是生鸡，要自己拔毛，去内脏，再上花椒，酱油，烤制，经过各种工序之后，才可以食用。\r\n\r\n- IOC方式\r\n\r\n对象的生命周期由 Spring 来管理，直接从 Spring 那里去获取一个对象。IOC 是反转控制 (Inversion Of Control)的缩写，就像控制权从本来在自己手里，现在交给了 Spring。\r\n\r\n相当于去馆子(Spring)点了一只鸡，交到你手上的时候，已经五味俱全，你就只管吃就行了。\r\n\r\n## 第一个 Spring 程序\r\n### 传统的面向接口编程\r\n经过以下例子可以看出，若接口（Service 层）变了，Test(View 层) 也的改，耦合度很高。\r\n\r\n*ISomeService.java - 接口*\r\n```\r\npublic interface ISomeService {\r\n	void doSome();\r\n}\r\n```\r\n*SomeServiceImpl.java - 实现类*\r\n```\r\npublic class SomeServiceImpl implements ISomeService {\r\n	@Override\r\n	public void doSome() {\r\n		System.out.println(\"执行doSome()方法\");\r\n	}\r\n}\r\n```\r\n*Test.java - 测试*\r\n```\r\n@Test\r\npublic void test01() {\r\n	ISomeService service = new SomeServiceImpl();\r\n	service.doSome();\r\n}\r\n```\r\n### Spring 实现\r\n*applicationContext.mxl - Spring 的配置文件*\r\n```\r\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<beans xmlns=\"http://www.springframework.org/schema/beans\"\r\n    xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\r\n    xsi:schemaLocation=\"\r\n        http://www.springframework.org/schema/beans \r\n        http://www.springframework.org/schema/beans/spring-beans.xsd\">\r\n\r\n    <!-- 注册 Service，Spring 底层实际是做了 SomeServiceImpl myService = new SomeServiceImpl(); -->\r\n    <bean id=\"myService\" class=\"top.qingrang.service.SomeServiceImpl\"/>\r\n\r\n</beans>\r\n```\r\n*Test.java - 测试*\r\n```\r\n@Test\r\npublic void test02() {\r\n	// 创建容器对象，加载 Spring 配置文件，会从类路径下查找配置文件\r\n	ApplicationContext ac = new ClassPathXmlApplicationContext(\"applicationContext.xml\");\r\n	ISomeService someService = (ISomeService)ac.getBean(\"myService\");\r\n	someService.doSome();\r\n}\r\n```\r\n\r\n从以上代码中已经看不到 `SomeServiceImpl` 这个实现类了，就做到了解耦。\r\n\r\n>FileSystemXmlApplicationContext\r\n\r\n```\r\n// 创建容器对象，加载 Spring 配置文件，会从项目的根下查找配置文件\r\nApplicationContext ac = new FileSystemXmlApplicationContext(\"applicationContext.xml\");\r\n\r\n// 创建容器对象，加载 Spring 配置文件，会从当前文件系统的 D 盘根目录下查找配置文件\r\nApplicationContext ac = new FileSystemXmlApplicationContext(\"d:/applicationContext.xml\");\r\n```\r\n\r\n>BeanFactory 容器\r\n\r\n*Test.java*\r\n```\r\n@Test\r\npublic void test05() {\r\n	// 创建 BeanFactory 容器\r\n	BeanFactory bf = new XmlBeanFactory(new ClassPathResource(\"applicationContext.xml\"));\r\n	ISomeService service = (ISomeService) bf.getBean(\"myService\");\r\n	service.doSome();\r\n}\r\n```\r\n\r\n>ApplicationContext 与 BeanFactory 容器的区别\r\n\r\n这两上容器对于其中 Bean 的创建时机不同：\r\n1. ApplicationContext容器在进行初始化时，会将其中的所有Bean(对象)进行创建\r\n - 缺点：占用系统资源（内存、CPU等）\r\n - 优点：响应速度快\r\n1. BeanFactory容器中的对象，在容器初始化时并不会被创建，而是在真正获取该对象时才被创建\r\n - 缺点：相对来说，响应速度慢\r\n - 优点：不多占用系统资源\r\n\r\n## Bean 的装配\r\nBean 的装配，即 Bean 对象的创建。容器根据代码要求创建 Bean 对象后再传递给代码的过程，称为 Bean 的装配。\r\n### 默认装配方式\r\n代码通过 `getBean()` 方式从容器获取指定的 Bean 实例，容器首先会调用 Bean 类的无参构造器，创建空值的实例对象。\r\n\r\n*ISomeService.java - service 接口*\r\n```\r\npublic interface ISomeService {\r\n	void doSome();\r\n}\r\n```\r\n*SomeServiceImpl.java - service 实现类*\r\n```\r\npublic class SomeServiceImpl implements ISomeService {\r\n	public SomeServiceImpl() {\r\n		System.out.println(\"执行无参构造器\");\r\n	}\r\n\r\n	@Override\r\n	public void doSome() {\r\n		System.out.println(\"执行doSome()方法\");\r\n	}\r\n}\r\n```\r\n*ServiceFactory.java - service 工厂*\r\n```\r\npublic class ServiceFactory {\r\n	public ISomeService getSomeService() {\r\n		return new SomeServiceImpl();\r\n	}\r\n}\r\n```\r\n*applicationContext.mxl*\r\n```\r\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<beans xmlns=\"http://www.springframework.org/schema/beans\"\r\n    xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\r\n    xsi:schemaLocation=\"\r\n        http://www.springframework.org/schema/beans \r\n        http://www.springframework.org/schema/beans/spring-beans.xsd\">\r\n\r\n    <!-- 注册 Service，Spring 底层实际是做了 SomeServiceImpl myService = new SomeServiceImpl();  -->\r\n    <bean id=\"myService\" class=\"com.bjpowernode.ba01.SomeServiceImpl\"/>\r\n</beans>\r\n```\r\n*Test.java - 测试*\r\n```\r\n@Test\r\npublic void test01() {\r\n	// 创建容器对象，加载Spring配置文件\r\n	String resource = \"com/bjpowernode/ba01/applicationContext.xml\";\r\n	ApplicationContext ac = new ClassPathXmlApplicationContext(resource);\r\n	ISomeService service = (ISomeService) ac.getBean(\"myService\");\r\n	service.doSome();\r\n}\r\n```\r\n### 动态工厂 Bean\r\n有些时候，项目中需要通过工厂类来创建 Bean 实例，而不能像前面例子中似的，直接由 Spring 容器来装配 Bean 实例。使用工厂模式创建 Bean 实例，就会使工厂类与要创建的 Bean 类耦合到一起。但，这样做的缺点是，不仅工厂类与目标类耦合到了一起，测试类与工厂类也耦合到了一起。\r\n\r\n*ISomeService.java - service 接口*\r\n```\r\npublic interface ISomeService {\r\n	void doSome();\r\n}\r\n```\r\n*SomeServiceImpl.java - service 实现类*\r\n```\r\npublic class SomeServiceImpl implements ISomeService {\r\n	@Override\r\n	public void doSome() {\r\n		System.out.println(\"执行doSome()方法\");\r\n	}\r\n}\r\n```\r\n*ServiceFactory.java - service 工厂*\r\n```\r\npublic class ServiceFactory {\r\n	public ISomeService getSomeService() {\r\n		return new SomeServiceImpl();\r\n	}\r\n}\r\n```\r\n*applicationContext.mxl*\r\n```\r\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<beans xmlns=\"http://www.springframework.org/schema/beans\"\r\n    xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\r\n    xsi:schemaLocation=\"\r\n        http://www.springframework.org/schema/beans \r\n        http://www.springframework.org/schema/beans/spring-beans.xsd\">\r\n\r\n    <!-- 注册动态工厂 -->\r\n    <bean id=\"factory\" class=\"top.qingrang.ba02.ServiceFactory\"/>\r\n\r\n    <!-- 注册 Service：动态工厂 Bean -->\r\n    <bean id=\"myService\" factory-bean=\"factory\" factory-method=\"getSomeService\"/>\r\n</beans>\r\n```\r\n*Test.java - 测试*\r\n```\r\npublic void test02() {\r\n	String resource = \"top/qingrang/ba02/applicationContext.xml\";\r\n	ApplicationContext ac = new ClassPathXmlApplicationContext(resource);\r\n	ISomeService service = (ISomeService) ac.getBean(\"myService\");\r\n	service.doSome();\r\n}\r\n```\r\n### 静态工厂 Bean\r\n*ServiceFactory.java - service 工厂*\r\n```\r\npublic class ServiceFactory {\r\n	//静态方法\r\n	public static ISomeService getSomeService() {\r\n		return new SomeServiceImpl();\r\n	}\r\n}\r\n```\r\n*applicationContext.mxl*\r\n```\r\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<beans xmlns=\"http://www.springframework.org/schema/beans\"\r\n    xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\r\n    xsi:schemaLocation=\"\r\n        http://www.springframework.org/schema/beans \r\n        http://www.springframework.org/schema/beans/spring-beans.xsd\">\r\n\r\n    <!-- 注册 Service：静态工厂 Bean -->\r\n    <bean id=\"myService\" class=\"top.qingrang.ba03.ServiceFactory\" factory-method=\"getSomeService\"/>\r\n</beans>\r\n```\r\n### 容器中 Bean 的作用域\r\n*applicationContext.mxl*\r\n```\r\n<bean id=\"myService\" class=\"top.qingrang.ba04.SomeServiceImpl\" scope=\"prototype\"/>\r\n```\r\n\r\n当通过 Spring 容器创建一个 Bean 实例时，不仅可以完成 Bean 的实例化，还可以通过 scope 属性，为 Bean 指定特定的作用域。 Spring 支持 5 种作用域。\r\n1. singleton： 单例模式。即在整个 Spring 容器中，使用 singleton 定义的 Bean 将是单例的，只有一个实例。该 Bean 是在容器被创建时即被装配好了。 默认为单例的。\r\n1. prototype： 原型模式。即每次使用 getBean 方法获取的同一个 `<bean />` 的实例都是一个新的实例。Bean 实例是在代码中使用该 Bean 实例时才进行装配的。\r\n1. request：对于每次 HTTP 请求，都将会产生一个不同的 Bean 实例。\r\n1. session：对于每个不同的 HTTP session，都将产生一个不同的 Bean 实例。\r\n1. global session：每个全局的 HTTP session 对应一个 Bean 实例。典型情况下，仅在使用 portlet 集群时有效，多个 Web 应用共享一个 session。一般应用中， global-session 与 session 是等同的。\r\n\r\n对于 scope 的值 request、 session 与 global session， 只有在 Web 应用中使用 Spring 时，该作用域才有效。\r\n\r\n### Bean 后处理器\r\nBean 后处理器是一种特殊的 Bean，容器中所有的 Bean 在初始化时，均会自动执行该类的两个方法。由于该 Bean 是由其它 Bean 自动调用执行，不是程序员手工调用，故此 Bean 无须 id 属性。\r\n\r\n需要做的是，在 Bean 后处理器类方法中，只要对 Bean 类与 Bean 类中的方法进行判断，就可实现对指定的 Bean 的指定方法进行功能扩展与增强。方法返回的 Bean 对象，即是增强过的对象。就是**设计模式中的代理模式**。\r\n\r\n代码中需要**自定义 Bean 后处理器类**。该类就是**实现**了**接口 BeanPostProcessor** 的类。该接口中包含两个方法，分别在目标 Bean 初始化完毕之前与之后执行。它们的返回值为：功能被扩展或增强后的 Bean 对象。\r\n\r\nBean 初始化完毕有一个标志：一个方法将被执行。即当该方法被执行时，表示该 Bean 被初始化完毕。所以 Bean 后处理器中两个方法的执行，是在这个方法之前之后执行。 这个方法在后面将会讲到。\r\n\r\n`public Object postProcessBeforeInitialization(Object bean, String beanId) throws BeansException`\r\n\r\n该方法会在目标 Bean 初始化完毕之前由容器自动调用。\r\n\r\n`public Object postProcessAfterInitialization(Object bean, String beanId) throws BeansException`\r\n\r\n该方法会在目标 Bean 初始化完毕之后由容器自动调用。它们的参数是：第一个参数是系统即将初始化的 Bean 实例，第二个参数是该 Bean 实例的 id 属性值。若 Bean 没有 id 就是 name 属性值。\r\n\r\n*ISomeService.java - service 接口*\r\n```\r\npublic interface ISomeService {\r\n	String doSome();\r\n	String doOther();\r\n}\r\n```\r\n*SomeServiceImpl.java - service 实现类*\r\n```\r\npublic class SomeServiceImpl implements ISomeService {\r\n	@Override\r\n	public String doSome() {\r\n		System.out.println(\"执行doSome()方法\");\r\n		return \"doSome() - abc\";\r\n	}\r\n	\r\n	@Override\r\n	public String doOther() {\r\n		System.out.println(\"执行doOther()方法\");\r\n		return \"doOther() - def\";\r\n	}\r\n}\r\n```\r\n*MyBeanPostProcessor.java - 自定义 Bean 后处理器类*\r\n```\r\npublic class MyBeanPostProcessor implements BeanPostProcessor {\r\n\r\n	// bean：表示当前正在进行初始化的Bean对象\r\n	// beanName：表示当前正在进行初始化的Bean对象的id\r\n	@Override\r\n	public Object postProcessBeforeInitialization(Object bean, String beanName) throws BeansException {\r\n		System.out.println(\"执行 ---- before() ---方法\");\r\n		return bean;\r\n	}\r\n\r\n	@Override\r\n	public Object postProcessAfterInitialization(final Object bean, String beanName) throws BeansException {\r\n		System.out.println(\"执行 ---- after() ---方法\");\r\n		//判断 SomeServiceImpl 对象\r\n		if (\"myService\".equals(beanName)) {\r\n			Object obj = Proxy.newProxyInstance(bean.getClass().getClassLoader(),\r\n					bean.getClass().getInterfaces(),\r\n					new InvocationHandler() {\r\n						@Override\r\n						public Object invoke(Object proxy, Method method, Object[] args) throws Throwable {\r\n							Object invoke = method.invoke(bean, args);\r\n							//判断具体方法\r\n							if (\"doSome\".equals(method.getName())) {\r\n								return ((String) invoke).toUpperCase();\r\n							}\r\n							return invoke;\r\n						}\r\n					});\r\n			return obj;\r\n		}\r\n		return bean;\r\n	}\r\n}\r\n```\r\n*applicationContext.mxl*\r\n```\r\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<beans xmlns=\"http://www.springframework.org/schema/beans\"\r\n    xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\r\n    xsi:schemaLocation=\"\r\n        http://www.springframework.org/schema/beans \r\n        http://www.springframework.org/schema/beans/spring-beans.xsd\">\r\n\r\n    <!-- 注册 Service -->\r\n    <bean id=\"myService\" class=\"top.qingrang.ba05.SomeServiceImpl\"/>\r\n    <bean id=\"myService2\" class=\"top.qingrang.ba05.SomeServiceImpl\"/>\r\n\r\n    <!-- 注册 Bean 后处理器 -->\r\n    <bean class=\"top.qingrang.ba05.MyBeanPostProcessor\"/>\r\n\r\n</beans>\r\n```\r\n*Test.java - 测试*\r\n```\r\npublic void test01() {\r\n	String resource = \"top/qingrang/ba05/applicationContext.xml\";\r\n	ApplicationContext ac = new ClassPathXmlApplicationContext(resource);\r\n\r\n	ISomeService service = (ISomeService) ac.getBean(\"myService\");\r\n	System.out.println(service.doSome());\r\n	System.out.println(service.doOther());\r\n\r\n	System.out.println(\"======================\");\r\n\r\n	ISomeService service2 = (ISomeService) ac.getBean(\"myService2\");\r\n	System.out.println(service2.doSome());\r\n	System.out.println(service2.doOther());\r\n}\r\n```\r\n\r\n*输出结果*\r\n```\r\n执行 ---- before() ---方法\r\n执行 ---- after() ---方法\r\n执行 ---- before() ---方法\r\n执行 ---- after() ---方法\r\n执行doSome()方法\r\nDOSOME() - ABC\r\n执行doOther()方法\r\ndoOther() - def\r\n======================\r\n执行doSome()方法\r\ndoSome() - abc\r\n执行doOther()方法\r\ndoOther() - def\r\n```\r\n### Bean 的生命周期\r\n*ISomeService.java - service 接口*\r\n```\r\npublic interface ISomeService {\r\n	void doSome();\r\n}\r\n```\r\n*SomeServiceImpl.java - service 实现类*\r\n```\r\npublic class SomeServiceImpl implements ISomeService, BeanNameAware, BeanFactoryAware, InitializingBean, DisposableBean {\r\n	private String adao;\r\n	private String bdao;\r\n\r\n	public void setAdao(String adao) {\r\n		this.adao = adao;\r\n		System.out.println(\"Step2：执行 setter\");\r\n	}\r\n\r\n	public void setBdao(String bdao) {\r\n		this.bdao = bdao;\r\n		System.out.println(\"Step2：执行 setter\");\r\n	}\r\n\r\n	public SomeServiceImpl() {\r\n		System.out.println(\"Step1：执行无参构造器\");\r\n	}\r\n\r\n	@Override\r\n	public void doSome() {\r\n		System.out.println(\"Step9：执行 doSome() 方法\");\r\n	}\r\n\r\n	public void setUp() {\r\n		System.out.println(\"Step7：初始化完毕之后\");\r\n	}\r\n\r\n	public void tearDown() {\r\n		System.out.println(\"Step11：销毁之前\");\r\n	}\r\n\r\n	@Override\r\n	public void setBeanName(String name) {\r\n		System.out.println(\"Step3：获取到 bean 的 id = \" + name);\r\n	}\r\n\r\n	@Override\r\n	public void setBeanFactory(BeanFactory beanFactory) throws BeansException {\r\n		System.out.println(\"Step4：获取到 BeanFactory 容器\");\r\n	}\r\n\r\n	@Override\r\n	public void afterPropertiesSet() throws Exception {\r\n		System.out.println(\"Step6：Bean 初始化完毕了\");\r\n	}\r\n\r\n	@Override\r\n	public void destroy() throws Exception {\r\n		System.out.println(\"Step10：实现接口的销毁之前\");\r\n	}\r\n}\r\n```\r\n*MyBeanPostProcessor.java - Bean 后处理器*\r\n```\r\npublic class MyBeanPostProcessor implements BeanPostProcessor {\r\n	@Override\r\n	public Object postProcessBeforeInitialization(Object bean, String beanName)\r\n			throws BeansException {\r\n		System.out.println(\"Step5：MyBeanPostProcessor - 执行 before() 方法\");\r\n		return bean;\r\n	}\r\n\r\n	@Override\r\n	public Object postProcessAfterInitialization(final Object bean, String beanName)\r\n			throws BeansException {\r\n		System.out.println(\"Step8：MyBeanPostProcessor - 执行 after() 方法\");\r\n		return bean;\r\n	}\r\n}\r\n```\r\n*applicationContext.mxl*\r\n```\r\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<beans xmlns=\"http://www.springframework.org/schema/beans\"\r\n    xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\r\n    xsi:schemaLocation=\"\r\n        http://www.springframework.org/schema/beans \r\n        http://www.springframework.org/schema/beans/spring-beans.xsd\">\r\n\r\n    <!-- 注册Service -->\r\n    <bean id=\"myService\" class=\"top.qingrang.ba07.SomeServiceImpl\"\r\n    		init-method=\"setUp\" destroy-method=\"tearDown\">\r\n    	<property name=\"adao\" value=\"aaa\"/>\r\n    	<property name=\"bdao\" value=\"bbb\"/>\r\n   	</bean>\r\n\r\n   	<bean class=\"top.qingrang.ba07.MyBeanPostProcessor\"/>\r\n</beans>\r\n```\r\n*Test.java - 测试*\r\n```\r\npublic void test01() {\r\n	// 创建容器对象，加载Spring配置文件\r\n	String resource = \"top/qingrang/ba07/applicationContext.xml\";\r\n	ApplicationContext ac = new ClassPathXmlApplicationContext(resource);\r\n	ISomeService service = (ISomeService) ac.getBean(\"myService\");\r\n	service.doSome();\r\n	// 对于销毁方法的执行，有两个条件：\r\n	// 1)当前的Bean需要是singleton的\r\n	// 2)要手工关闭容器\r\n	((ClassPathXmlApplicationContext)ac).close();\r\n}\r\n```\r\n\r\n*输出信息*\r\n```\r\nStep1：执行无参构造器\r\nStep2：执行 setter\r\nStep2：执行 setter\r\nStep3：获取到 bean 的 id = myService\r\nStep4：获取到 BeanFactory 容器\r\nStep5：MyBeanPostProcessor - 执行 before() 方法\r\nStep6：Bean 初始化完毕了\r\nStep7：初始化完毕之后\r\nStep8：MyBeanPostProcessor - 执行 after() 方法\r\nStep9：执行 doSome() 方法\r\nStep10：实现接口的销毁之前\r\nStep11：销毁之前\r\n```\r\n## 基于 XML 的 DI\r\nBean 实例在调用无参构造器创建了空值对象后，就要**对 Bean 对象的属性进行初始化**。初始化是由容器自动完成的，称为注入。\r\n### 注入分类\r\n#### 设值注入(常用)\r\n和 `setter` 方法有关系。\r\n\r\n*School.java*\r\n```\r\npublic class School {\r\n	private String name;\r\n	public void setName(String name) {\r\n		this.name = name;\r\n	}\r\n\r\n	@Override\r\n	public String toString() {\r\n		return \"School [name=\" + name + \"]\";\r\n	}\r\n}\r\n```\r\n\r\n*Student.java*\r\n```\r\npublic class Student {\r\n	private String name;\r\n	private int age;\r\n	private School school;   // 对象属性，域属性\r\n	\r\n	public void setName(String name) {\r\n		System.out.println(\"执行setName()\");\r\n		this.name = name;\r\n	}\r\n	public void setAge(int age) {\r\n		System.out.println(\"执行setAge()\");\r\n		this.age = age;\r\n	}\r\n	public void setSchool(School school) {\r\n		this.school = school;\r\n	}\r\n\r\n	@Override\r\n	public String toString() {\r\n		return \"Student [name=\" + name + \", age=\" + age + \", school=\" + school\r\n				+ \"]\";\r\n	}\r\n}\r\n```\r\n\r\n*applicationContext.mxl*\r\n```\r\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<beans xmlns=\"http://www.springframework.org/schema/beans\"\r\n    xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\r\n    xsi:schemaLocation=\"\r\n        http://www.springframework.org/schema/beans \r\n        http://www.springframework.org/schema/beans/spring-beans.xsd\">\r\n\r\n    <!-- 注册 Student -->\r\n    <bean id=\"myStudent\" class=\"top.qingrang.di01.Student\">\r\n    	<property name=\"name\" value=\"张三\"/>\r\n    	<property name=\"age\" value=\"23\"/>\r\n        <!-- 对于对象的注入要用 ref -->\r\n    	<property name=\"school\" ref=\"mySchool\"/>\r\n    </bean>\r\n\r\n    <!-- 注册 School -->\r\n    <bean id=\"mySchool\" class=\"top.qingrang.di01.School\">\r\n    	<property name=\"name\" value=\"清华大学\"/>\r\n    </bean>\r\n\r\n</beans>\r\n```\r\n\r\n*Test.java - 测试*\r\n```\r\npublic void test01() {\r\n	// 创建容器对象，加载Spring配置文件\r\n	String resource = \"top/qingrang/di01/applicationContext.xml\";\r\n	ApplicationContext ac = new ClassPathXmlApplicationContext(resource);\r\n	Student student = (Student) ac.getBean(\"myStudent\");\r\n	System.out.println(student);\r\n}\r\n```\r\n\r\n*输出信息*\r\n```\r\n执行setName()\r\n执行setAge()\r\nStudent [name=张三, age=23, school=School [name=清华大学]]\r\n```\r\n#### 构造注入(很少用)\r\n和 `setter` 方法没有关系，和构造方法有关系。\r\n\r\n*Student.java - 为 Student 增加带参构造器*\r\n```\r\npublic class Student {\r\n	private String name;\r\n	private int age;\r\n	private School school;   // 对象属性，域属性\r\n\r\n	/**\r\n	 * 带参数的构造方法\r\n	 */\r\n	public Student(String name, int age, School school) {\r\n		super();\r\n		this.name = name;\r\n		this.age = age;\r\n		this.school = school;\r\n	}\r\n	...\r\n}\r\n```\r\n\r\n*applicationContext.mxl*\r\n```\r\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<beans xmlns=\"http://www.springframework.org/schema/beans\"\r\n    xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\r\n    xsi:schemaLocation=\"\r\n        http://www.springframework.org/schema/beans \r\n        http://www.springframework.org/schema/beans/spring-beans.xsd\">\r\n\r\n    <!-- 注册School -->\r\n    <bean id=\"mySchool\" class=\"top.qingrang.di02.School\">\r\n    	<property name=\"name\" value=\"清华大学\"/>\r\n    </bean>\r\n\r\n    <!-- 注册Student -->\r\n    <bean id=\"myStudent\" class=\"top.qingrang.di02.Student\">\r\n        <!-- 构造器参数，指定 name -->\r\n    	<constructor-arg name=\"name\" value=\"李四\"/>\r\n    	<constructor-arg name=\"age\" value=\"24\"/>\r\n    	<constructor-arg name=\"school\" ref=\"mySchool\"/>\r\n\r\n        <!-- 构造器参数，使用索引 -->\r\n    	<!--\r\n    	<constructor-arg index=\"0\" value=\"李四\"/>\r\n    	<constructor-arg index=\"1\" value=\"24\"/>\r\n    	<constructor-arg index=\"2\" ref=\"mySchool\"/>\r\n    	 -->\r\n\r\n        <!-- 构造器参数，默认索引 -->\r\n    	<!--\r\n    	<constructor-arg value=\"李四\"/>\r\n    	<constructor-arg value=\"24\"/>\r\n    	<constructor-arg ref=\"mySchool\"/>\r\n    	 -->\r\n    </bean>\r\n</beans>\r\n```\r\n### 集合属性注入\r\n基本类型数组，对象数组，List，Set，Map，Properties 等。\r\n\r\n*School.java*\r\n```\r\npublic class School {\r\n	private String name;\r\n\r\n	public void setName(String name) {\r\n		this.name = name;\r\n	}\r\n\r\n	@Override\r\n	public String toString() {\r\n		return \"School [name=\" + name + \"]\";\r\n	}\r\n}\r\n```\r\n*Some.java*\r\n```\r\npublic class Some {\r\n	private School[] schools; // 对象数组\r\n	private String[] myStrs; // 字符串数组\r\n	private List<String> myList; // List\r\n	private Set<String> mySet; // Set\r\n	private Map<String, Object> myMap; // Map\r\n	private Properties myPros; // Properties\r\n\r\n	public void setSchools(School[] schools) {\r\n		this.schools = schools;\r\n	}\r\n	public void setMyStrs(String[] myStrs) {\r\n		this.myStrs = myStrs;\r\n	}\r\n	public void setMyList(List<String> myList) {\r\n		this.myList = myList;\r\n	}\r\n	public void setMySet(Set<String> mySet) {\r\n		this.mySet = mySet;\r\n	}\r\n	public void setMyMap(Map<String, Object> myMap) {\r\n		this.myMap = myMap;\r\n	}\r\n	public void setMyPros(Properties myPros) {\r\n		this.myPros = myPros;\r\n	}\r\n\r\n	@Override\r\n	public String toString() {\r\n		return \"Some [schools=\" + Arrays.toString(schools) + \", myStrs=\"\r\n				+ Arrays.toString(myStrs) + \", myList=\" + myList + \", mySet=\"\r\n				+ mySet + \", myMap=\" + myMap + \", myPros=\" + myPros + \"]\";\r\n	}\r\n}\r\n```\r\n*applicationContext.xml*\r\n```\r\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<beans xmlns=\"http://www.springframework.org/schema/beans\"\r\n    xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\r\n    xsi:schemaLocation=\"\r\n        http://www.springframework.org/schema/beans \r\n        http://www.springframework.org/schema/beans/spring-beans.xsd\">\r\n\r\n    <!-- 注册 School -->\r\n    <bean id=\"mySchool\" class=\"top.qingrang.di05.School\">\r\n    	<property name=\"name\" value=\"清华大学\"/>\r\n    </bean>\r\n    <bean id=\"mySchool2\" class=\"top.qingrang.di05.School\">\r\n    	<property name=\"name\" value=\"北京大学\"/>\r\n    </bean>\r\n\r\n    <!-- 注册 Student -->\r\n    <bean id=\"mySome\" class=\"top.qingrang.di05.Some\">\r\n		<!-- 对象数组 -->\r\n    	<property name=\"schools\">\r\n    		<array>\r\n    			<ref bean=\"mySchool\"/>\r\n    			<ref bean=\"mySchool2\"/>\r\n    		</array>\r\n    	</property>\r\n		<!-- 数组：简写，带 ref 的若只有一个可以简写，多个则不行 -->\r\n		<property name=\"schools\" value=\"mySchool\"/>\r\n\r\n		<!-- 基本类型数组 -->\r\n    	<property name=\"myStrs\">\r\n    		<array>\r\n    			<value>中国</value>\r\n    			<value>北京</value>\r\n    		</array>\r\n    	</property>\r\n		<!-- 数组：简写 -->\r\n		<property name=\"myStrs\" value=\"中国,北京\"/>\r\n\r\n		<!-- List<String> -->\r\n    	<property name=\"myList\">\r\n    		<list>\r\n    			<value>大兴</value>\r\n    			<value>亦庄</value>\r\n    		</list>\r\n    	</property>\r\n		<!-- List<String>：简写 -->\r\n		<property name=\"myList\" value=\"大兴,亦庄\"/>\r\n\r\n		<!-- Set<String> -->\r\n    	<property name=\"mySet\">\r\n    		<set>\r\n    			<value>大族企业湾</value>\r\n    			<value>10号楼</value>\r\n    		</set>\r\n    	</property>\r\n		<!-- Set<String>：简写 -->\r\n		<property name=\"mySet\" value=\"大族企业湾,10号楼\"/>\r\n\r\n		<!-- Map<String, Object>，Map 的键值都是 object -->\r\n    	<property name=\"myMap\">\r\n    		<map>\r\n    			<entry key=\"mobile\" value=\"1234567\"/>\r\n    			<entry key=\"QQ\" value=\"7654321\"/>\r\n    		</map>\r\n    	</property>\r\n\r\n		<!-- Properties，Properties 的键值都是字符串 -->\r\n    	<property name=\"myPros\">\r\n    		<props>\r\n    			<prop key=\"education\">大学</prop>\r\n    			<prop key=\"gender\">男</prop>\r\n    		</props>\r\n    	</property>\r\n    </bean>\r\n\r\n</beans>\r\n```\r\n*MyTest.java*\r\n```\r\n@Test\r\npublic void test01() {\r\n	// 创建容器对象，加载 Spring 配置文件\r\n	String resource = \"top/qingrang/di05/applicationContext.xml\";\r\n	ApplicationContext ac = new ClassPathXmlApplicationContext(resource);\r\n	Some some = (Some) ac.getBean(\"mySome\");\r\n	System.out.println(some);\r\n}\r\n```\r\n### 对于域属性(对象)的自动注入\r\n#### byName 方式自动注入\r\n![byName 方式自动注入](https://daily-1252869435.cos.ap-chengdu.myqcloud.com/2018-11-17-22-04-38.png)\r\n#### byType 方式自动注入\r\n![mark](https://daily-1252869435.cos.ap-chengdu.myqcloud.com/2018-11-17-22-06-41.png)\r\n### 使用 SPEL 注入\r\nSPEL(Spring Expression Language)，即 Spring EL 表达式语言。即，在 Spring 配置文件中为 Bean 的属性注入值时，可直接使用 SPEL 表达式计算的结果。 SPEL 表达式以#开头，后跟一对大括号。用法： `<bean id=“abc” value=“#{…}”/>`。\r\n*Person.java*\r\n```\r\npublic class Person {\r\n	private String pname;\r\n	private int page;\r\n\r\n	public void setPname(String pname) {\r\n		this.pname = pname;\r\n	}\r\n	public void setPage(int page) {\r\n		this.page = page;\r\n	}\r\n	public String getPname() {\r\n		return pname;\r\n	}\r\n	public int getPage() {\r\n		return page;\r\n	}\r\n\r\n	@Override\r\n	public String toString() {\r\n		return \"Person [pname=\" + pname + \", page=\" + page + \"]\";\r\n	}\r\n	\r\n	public int computeAge() {\r\n		return page > 25 ? 25 : page;\r\n	}\r\n}\r\n```\r\n*Student.java*\r\n```\r\npublic class Student {\r\n	private String name;\r\n	private int age;\r\n	\r\n	public void setName(String name) {\r\n		this.name = name;\r\n	}\r\n	public void setAge(int age) {\r\n		this.age = age;\r\n	}\r\n	\r\n	@Override\r\n	public String toString() {\r\n		return \"Student [name=\" + name + \", age=\" + age + \"]\";\r\n	}\r\n}\r\n```\r\n*applicationContext.mxl*\r\n```\r\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<beans xmlns=\"http://www.springframework.org/schema/beans\"\r\n    xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\r\n    xsi:schemaLocation=\"\r\n        http://www.springframework.org/schema/beans \r\n        http://www.springframework.org/schema/beans/spring-beans.xsd\">\r\n\r\n    <!-- 注册School -->\r\n    <bean id=\"myPerson\" class=\"top.qingrang.di09.Person\">\r\n    	<property name=\"pname\" value=\"李四\"/>\r\n    	<property name=\"page\" value=\"#{T(java.lang.Math).random() * 50}\"/>   \r\n    </bean>\r\n    \r\n    <bean id=\"myStudent\" class=\"top.qingrang.di09.Student\">\r\n    	<property name=\"name\" value=\"#{myPerson.pname}\"/>\r\n    	<!-- <property name=\"age\" value=\"#{myPerson.page > 25 ? 25 : myPerson.page}\"/> -->\r\n    	<property name=\"age\" value=\"#{myPerson.computeAge() }\"/>\r\n    </bean>\r\n\r\n</beans>\r\n```\r\n*Test.java - 测试*\r\n```\r\n@Test\r\npublic void test01() {\r\n	// 创建容器对象，加载Spring配置文件\r\n	String resource = \"top/qingrang/di09/applicationContext.xml\";\r\n	ApplicationContext ac = new ClassPathXmlApplicationContext(resource);\r\n	\r\n	Person person = (Person) ac.getBean(\"myPerson\");\r\n	System.out.println(person);\r\n	\r\n	Student student = (Student) ac.getBean(\"myStudent\");\r\n	System.out.println(student);\r\n}\r\n```\r\n### 使用内部 Bean 注入\r\n若不希望代码直接访问某个 bean，即，在代码中通过 getBean 方法获取该 Bean 实例，则可将该 Bean 的定义放入调用者 bean 定义的内部。\r\n\r\n*applicationContext.mxl*\r\n```\r\n<!-- 注册 Student -->\r\n<bean id=\"myStudent\" class=\"top.qingrang.di10.Student\">\r\n	<property name=\"name\" value=\"张三\"/>\r\n	<property name=\"age\" value=\"23\"/>\r\n	<property name=\"school\">\r\n		<!-- 内部 Bean -->\r\n	    <bean class=\"top.qingrang.di10.School\">\r\n	    	<property name=\"name\" value=\"清华大学\"/>\r\n	    </bean>\r\n	</property>\r\n</bean>\r\n```\r\n*Test.java - 测试*\r\n```\r\n@Test\r\npublic void test01() {\r\n	// 创建容器对象，加载Spring配置文件\r\n	String resource = \"top/qingrang/di10/applicationContext.xml\";\r\n	ApplicationContext ac = new ClassPathXmlApplicationContext(resource);\r\n	\r\n	Student student = (Student) ac.getBean(\"myStudent\");\r\n	System.out.println(student);\r\n	\r\n	// 不能访问，会报错\r\n	//org.springframework.beans.factory.NoSuchBeanDefinitionException: No bean named \'mySchool\' is defined\r\n	School school = (School) ac.getBean(\"mySchool\");\r\n	System.out.println(school);\r\n}\r\n```\r\n### 使用同类抽象 Bean 注入\r\n当若干 Bean 实例同属于一个类，且这些实例的属性值又有相同值时，可以使用抽象 Bean，以简化配置文件。\r\n\r\n抽象 Bean 是用于让其它 bean 继承的。这个 bean 在 Bean 类中是不能通过 getBean 方法获取的。设置 abstract 属性为 true 来指明该 bean 为抽象 bean， 默认值为 false。 不过，该 bean 不为抽象 bean 时，也可被继承。 只不过，在应用中，用于被继承的 bean 一般为抽象 bean。\r\n\r\n*Student.java*\r\n```\r\npublic class Student {\r\n	private String name;\r\n	private int age;\r\n	private String school; // 学校\r\n\r\n	public void setName(String name) {\r\n		this.name = name;\r\n	}\r\n\r\n	public void setAge(int age) {\r\n		this.age = age;\r\n	}\r\n\r\n	public void setSchool(String school) {\r\n		this.school = school;\r\n	}\r\n\r\n	@Override\r\n	public String toString() {\r\n		return \"Student [name=\" + name + \", age=\" + age + \", school=\" + school + \"]\";\r\n	}\r\n}\r\n```\r\n*applicationContext.mxl*\r\n```\r\n<!-- 同类抽象 Bean，abstract=\"true\" -->\r\n<bean id=\"baseStudent\" class=\"top.qingrang.di11.Student\" abstract=\"true\">\r\n	<property name=\"school\" value=\"清华大学\"/>\r\n</bean>\r\n<!-- 利用 parent 实现继承 -->\r\n<bean id=\"myStudent\" parent=\"baseStudent\">\r\n	<property name=\"name\" value=\"张三\"/>\r\n	<property name=\"age\" value=\"23\"/>\r\n</bean>\r\n<bean id=\"myStudent2\" parent=\"baseStudent\">\r\n	<property name=\"name\" value=\"李四\"/>\r\n	<property name=\"age\" value=\"24\"/>\r\n</bean>\r\n```\r\n*Test.java - 测试*\r\n```\r\n@Test\r\npublic void test01() {\r\n	// 创建容器对象，加载Spring配置文件\r\n	String resource = \"top/qingrang/di11/applicationContext.xml\";\r\n	ApplicationContext ac = new ClassPathXmlApplicationContext(resource);\r\n	\r\n	Student student = (Student) ac.getBean(\"myStudent\");\r\n	System.out.println(student);\r\n	Student student2 = (Student) ac.getBean(\"myStudent2\");\r\n	System.out.println(student2);\r\n}\r\n```\r\n### 使用异类抽象 Bean 注入\r\n当若干不同的类对象具有相同的属性，且其值也相同时，可使用异类抽象 Bean。\r\n![异类抽象 Bean 注入](https://daily-1252869435.cos.ap-chengdu.myqcloud.com/2018-11-18-19-41-35.png)\r\n### 为应用指定多个 Spring 配置文件\r\n在实际应用里，随着应用规模的增加，系统中 Bean 数量也大量增加，导致配置文件变得非常庞大、臃肿。为了避免这种情况的产生，提高配置文件的可读性与可维护性，可以将 Spring 配置文件分解成多个配置文件。\r\n#### 平等关系的配置文件\r\n假设有两个配置文件：`spring-base.xml`，`spring-beans.xml`\r\n```\r\n@Test\r\npublic void test01() {\r\n	// 可变参数\r\n	String resource = \"top/qingrang/di13/spring-base.xml\";\r\n	String resource2 = \"top/qingrang/di13/spring-beans.xml\";\r\n	ApplicationContext ac = new ClassPathXmlApplicationContext(resource, resource2);\r\n	// 参数数组\r\n	String resource = \"top/qingrang/di13/spring-base.xml\";\r\n	String resource2 = \"top/qingrang/di13/spring-beans.xml\";\r\n	String[] resources = {resource, resource2};\r\n	ApplicationContext ac = new ClassPathXmlApplicationContext(resources);\r\n	// 通配符\r\n	String resource = \"top/qingrang/di13/spring-*.xml\";\r\n	ApplicationContext ac = new ClassPathXmlApplicationContext(resource);\r\n\r\n	Student student = (Student) ac.getBean(\"myStudent\");\r\n	System.out.println(student);\r\n	Teacher teacher = (Teacher) ac.getBean(\"myTeacher\");\r\n	System.out.println(teacher);\r\n}\r\n```\r\n#### 包含关系的配置文件\r\n*applicationContext.mxl*\r\n```\r\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<beans xmlns=\"http://www.springframework.org/schema/beans\"\r\n    xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\r\n    xsi:schemaLocation=\"\r\n        http://www.springframework.org/schema/beans \r\n        http://www.springframework.org/schema/beans/spring-beans.xsd\">\r\n	<!-- \r\n	<import resource=\"classpath:top/qingrang/di14/spring-base.xml\"/>\r\n	<import resource=\"classpath:top/qingrang/di14/spring-beans.xml\"/>\r\n	 -->\r\n\r\n	<!-- 使用通配符 -->\r\n	<import resource=\"classpath:top/qingrang/di14/spring-*.xml\"/>\r\n\r\n</beans>\r\n```\r\n*Test.java - 测试*\r\n```\r\n@Test\r\npublic void test01() {\r\n	String resource = \"top/qingrang/di14/springTotal.xml\";\r\n	ApplicationContext ac = new ClassPathXmlApplicationContext(resource);\r\n	...\r\n}\r\n```\r\n## 基于注解的 DI\r\n对于 DI 使用注解，将不再需要在 Spring 配置文件中声明 Bean 实例。\r\n### 定义 Bean `@Component`\r\n- 与 `@Component` 注解功能相同，但意义不同的注解还有三个：\r\n	- `@Repository`：注解在 Dao 实现类上\r\n	- `@Service`：注解在 Service 实现类上\r\n	- `@Controller`：注解在 SpringMVC 的处理器上\r\n\r\n### Bean 的作用域 `@Scope`\r\n### 基本类型属性注入 `@Value`\r\n### 按类型注入域属性 `@Autowired`\r\n需要在域属性上使用注解 `@Autowired`，该注解默认使用按类型自动装配 Bean 的方式。使用该注解完成属性注入时，类中无需 setter。当然，若属性有 setter，则也可将其加到 setter 上。\r\n### 按名称注入域属性 `@Autowired` 与 `@Qualifier`\r\n需要在域属性上联合使用注解 `@Autowired` 与 `@Qualifier`。 `@Qualifier` 的 value 属性用于指定要匹配的 Bean 的 id 值。同样类中无需 setter，也可加到 setter 上。\r\n### 域属性注解 `@Resource`\r\nSpring 提供了对 JSR-250 规范中定义 `@Resource` 标准注解的支持。 `@Resource` 注解既可以按名称匹配 Bean，也可以按类型匹配 Bean。 使用该注解，要求 JDK 必须是 6 及以上版本。\r\n### Bean 的生命始末 `@PostConstruct` 与 `@PreDestroy`\r\n在方法上使用 `@PostConstruct`，与原来的 `init-method` 等效。在方法上使 `@PreDestroy`，与 `destroy-method` 等效。\r\n\r\n*School.java*\r\n```\r\n// 组件，表示当前类被 Spring 容器所管理\r\n@Component(\"mySchool\")\r\npublic class School {\r\n	@Value(\"清华大学\")\r\n	private String name;\r\n\r\n	public void setName(String name) {\r\n		this.name = name;\r\n	}\r\n\r\n	@Override\r\n	public String toString() {\r\n		return \"School [name=\" + name + \"]\";\r\n	}\r\n}\r\n```\r\n*Student.java*\r\n```\r\n// @Scope(\"prototype\")   // 默认也是 singleton\r\n@Component(\"myStudent\")\r\npublic class Student {\r\n	@Value(\"张三\")\r\n	private String name;\r\n	@Value(\"23\")\r\n	private int age;\r\n\r\n// ------------------- byType 方式的注解式注入 -------------------\r\n//	@Autowired\r\n//	private School school;   // 对象属性，域属性\r\n// --------------------------------------------------------------\r\n\r\n// ----- byName 方式的注解式注入，要求 @Autowired 与 @Qualifier 联合使用 ----\r\n//	@Autowired\r\n//	@Qualifier(\"mySchool\")\r\n//	private School school;   // 对象属性，域属性\r\n// --------------------------------------------------------------\r\n\r\n// -------------------- 域属性注解 @Resource --------------------\r\n	// @Resource(name=\"mySchool\")   // byName 方式的注解式注入\r\n	@Resource   // byType 方式的注解式注入\r\n	private School school;   // 对象属性，域属性\r\n// --------------------------------------------------------------\r\n\r\n	@Override\r\n	public String toString() {\r\n		return \"Student [name=\" + name + \", age=\" + age + \", school=\" + school\r\n				+ \"]\";\r\n	}\r\n\r\n	// Bean 的生命始 @PostConstruct\r\n	@PostConstruct\r\n	public void initAfter() {\r\n		System.out.println(\"当前Bean初始化刚完毕\");\r\n	}\r\n\r\n	// Bean 的生命末 @PreDestroy\r\n	@PreDestroy\r\n	public void preDestroy() {\r\n		System.out.println(\"当前Bean即将被销毁\");\r\n	}\r\n}\r\n```\r\n*applicationContext.mxl*\r\n```\r\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<beans xmlns=\"http://www.springframework.org/schema/beans\"\r\n    xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\r\n    xmlns:context=\"http://www.springframework.org/schema/context\" xsi:schemaLocation=\"\r\n        http://www.springframework.org/schema/beans \r\n        http://www.springframework.org/schema/beans/spring-beans.xsd\r\n        http://www.springframework.org/schema/context \r\n        http://www.springframework.org/schema/context/spring-context.xsd\">\r\n        \r\n	<!-- 组件扫描 top.qingrang 这个包及其子包 -->\r\n	<!--<context:component-scan base-package=\"top.qingrang\"/> -->\r\n	\r\n	<!-- 组件扫描 top.qingrang 这个包的子包 -->\r\n	<!--<context:component-scan base-package=\"top.qingrang.*\"/> -->\r\n	\r\n	<context:component-scan base-package=\"top.qingrang.di01\"/>\r\n	\r\n</beans>\r\n```\r\n*Test.java - 测试*\r\n```\r\n@Test\r\npublic void test01() {\r\n	// 创建容器对象，加载 Spring 配置文件\r\n	String resource = \"top/qingrang/di01/applicationContext.xml\";\r\n	ApplicationContext ac = new ClassPathXmlApplicationContext(resource);\r\n	Student student = (Student) ac.getBean(\"myStudent\");\r\n	System.out.println(student);\r\n}\r\n```\r\n### 使用 JavaConfig 进行配置\r\nJavaConfig，是在 Spring 3.0 开始从一个独立的项目并入到 Spring 中的。\r\nJavaConfig 可以看成一个用于完成 Bean 装配的 Spring 配置文件，即 Spring 容器， 只不过该容器不是 XML文件，而是由程序员使用 Java 自己编写的 Java 类。\r\n\r\n*School.java*\r\n```\r\npublic class School {\r\n	private String name;\r\n\r\n	public School() {\r\n		super();\r\n		// TODO Auto-generated constructor stub\r\n	}\r\n\r\n	public School(String name) {\r\n		super();\r\n		this.name = name;\r\n	}\r\n\r\n	public void setName(String name) {\r\n		this.name = name;\r\n	}\r\n\r\n	@Override\r\n	public String toString() {\r\n		return \"School [name=\" + name + \"]\";\r\n	}\r\n}\r\n```\r\n*Student.java*\r\n```\r\npublic class Student {\r\n	private String name;\r\n	private int age;\r\n	private School school; // 对象属性，域属性\r\n\r\n	public Student() {\r\n		super();\r\n		// TODO Auto-generated constructor stub\r\n	}\r\n\r\n	public Student(String name, int age) {\r\n		super();\r\n		this.name = name;\r\n		this.age = age;\r\n	}\r\n\r\n	public void setName(String name) {\r\n		System.out.println(\"执行setName()\");\r\n		this.name = name;\r\n	}\r\n\r\n	public void setAge(int age) {\r\n		System.out.println(\"执行setAge()\");\r\n		this.age = age;\r\n	}\r\n\r\n	public void setSchool(School school) {\r\n		this.school = school;\r\n	}\r\n\r\n	@Override\r\n	public String toString() {\r\n		return \"Student [name=\" + name + \", age=\" + age + \", school=\" + school\r\n				+ \"]\";\r\n	}\r\n}\r\n```\r\n*MyJavaConfig.java*\r\n```\r\n@Configuration    // 表示当前类充当 Spring 容器，即所有的 Bean 将由这个类来创建\r\npublic class MyJavaConfig {\r\n	\r\n	@Bean(name=\"school\")\r\n	public School mySchoolCreator() {\r\n		return new School(\"北京大学\");\r\n	}\r\n	\r\n	// autowire=Autowire.BY_TYPE 指从当前类这个容器中查找与域属性的类型具有is-a关系的Bean\r\n	/*\r\n	@Bean(name=\"myStudent\", autowire=Autowire.BY_TYPE)\r\n	public Student myStudentCreator() {\r\n		return new Student(\"张三\", 23);\r\n	}\r\n	*/\r\n	\r\n	// autowire=Autowire.BY_NAME 指从当前类这个容器中查找与域属性同名的Bean\r\n	@Bean(name=\"myStudent\", autowire=Autowire.BY_NAME)\r\n	public Student myStudentCreator() {\r\n		return new Student(\"张三\", 23);\r\n	}\r\n}\r\n```\r\n*applicationContext.mxl*\r\n```\r\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<beans xmlns=\"http://www.springframework.org/schema/beans\"\r\n    xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\r\n    xmlns:context=\"http://www.springframework.org/schema/context\" xsi:schemaLocation=\"\r\n        http://www.springframework.org/schema/beans \r\n        http://www.springframework.org/schema/beans/spring-beans.xsd\r\n        http://www.springframework.org/schema/context \r\n        http://www.springframework.org/schema/context/spring-context.xsd\">\r\n\r\n	<!-- 扫描组件 -->\r\n	<context:component-scan base-package=\"top.qingrang.di05\"/>\r\n\r\n</beans>\r\n```\r\n*Test.java - 测试*\r\n```\r\n@Test\r\npublic void test01() {\r\n	String resource = \"top/qingrang/di05/applicationContext.xml\";\r\n	ApplicationContext ac = new ClassPathXmlApplicationContext(resource);\r\n	Student student = (Student) ac.getBean(\"myStudent\");\r\n	System.out.println(student);\r\n}\r\n```\r\n### 使用 Spring 的 JUnit4 测试 Spring\r\n使用 Spring 的 JUnit4 对 Spring 代码进行测试，将不再需要在程序的代码中直接写出创建 Spring 容器，及从 Spring 容器中通过 getBean() 获取对象了。这些工作将由 JUnit4 注解，配合着域属性的自动注入注解共同完成。\r\n*School.java*\r\n```\r\npublic class School {\r\n	private String name;\r\n\r\n	public void setName(String name) {\r\n		this.name = name;\r\n	}\r\n\r\n	@Override\r\n	public String toString() {\r\n		return \"School [name=\" + name + \"]\";\r\n	}\r\n}\r\n```\r\n*Student.java*\r\n```\r\npublic class Student {\r\n	private String name;\r\n	private School school;   // 对象属性，域属性\r\n	\r\n	public void setName(String name) {\r\n		this.name = name;\r\n	}\r\n\r\n	public void setSchool(School school) {\r\n		this.school = school;\r\n	}\r\n	@Override\r\n	public String toString() {\r\n		return \"Student [name=\" + name + \", school=\" + school + \"]\";\r\n	}\r\n}\r\n```\r\n*applicationContext.mxl*\r\n```\r\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<beans xmlns=\"http://www.springframework.org/schema/beans\"\r\n    xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\r\n    xsi:schemaLocation=\"\r\n        http://www.springframework.org/schema/beans \r\n        http://www.springframework.org/schema/beans/spring-beans.xsd\">\r\n\r\n    <!-- 注册 School -->\r\n    <bean id=\"mySchool\" class=\"top.qingrang.di06.School\">\r\n    	<property name=\"name\" value=\"清华大学\"/>\r\n    </bean>\r\n\r\n    <!-- 注册 Student -->\r\n    <bean id=\"myStudent\" class=\"top.qingrang.di06.Student\">\r\n    	<property name=\"name\" value=\"张三\"/>\r\n    	<property name=\"school\" ref=\"mySchool\"/>\r\n    </bean>\r\n\r\n</beans>\r\n```\r\n*Test.java - 测试*\r\n```\r\n@RunWith(SpringJUnit4ClassRunner.class)	// 指定运行环境\r\n@ContextConfiguration(locations=\"classpath:top/qingrang/di06/applicationContext.xml\") // 指定配置文件位置\r\npublic class MyTest {\r\n\r\n	//对于需要从容器中获取的 Bean 对象，使用 byType 或 byName 方式，将其自动注入.\r\n	@Autowired\r\n	private Student student;\r\n\r\n	@Autowired\r\n	private School school;\r\n\r\n	//然后就可以直接测试对象了.\r\n	@Test\r\n	public void test01() {\r\n		System.out.println(student);\r\n	}\r\n	\r\n	@Test\r\n	public void test02() {\r\n		System.out.println(school);\r\n	}\r\n}\r\n```\r\n\r\n### 注解与 XML 共同使用\r\n注解的好处是，配置方便，直观。但其弊端也显而易见：以硬编码的方式写入到了 Java 代码中，其修改是需要重新编译代码的。\r\nXML 配置方式的最大好处是，对其所做修改，无需编译代码，只需重启服务器即可将新的配置加载。\r\n若注解与 XML 同用， **XML 的优先级要高于注解**。这样做的好处是，需要对某个 Bean 做修改，只需修改配置文件即可。当然，此时， Bean 类要有 setter 或构造器。\r\n',`groups`='Java',`is_show`=1,`publish`=1,`summary`='',`gmt_modified`='2018-11-19'  WHERE  `id` = 247 [ RunTime:0.001492s ]
[ sql ] [ SQL ] SELECT COUNT(*) AS tp_count FROM `note` WHERE  `groups` = 'Java' LIMIT 1 [ RunTime:0.001403s ]
[ sql ] [ SQL ] UPDATE `groups`  SET `g_count`=21  WHERE  `groups` = 'Java' [ RunTime:0.000429s ]
[ sql ] [ SQL ] SELECT COUNT(*) AS tp_count FROM `note` WHERE  `groups` = 'Java' LIMIT 1 [ RunTime:0.001339s ]
[ sql ] [ SQL ] UPDATE `groups`  SET `g_count`=21  WHERE  `groups` = 'Java' [ RunTime:0.000324s ]
---------------------------------------------------------------
[ 2018-11-19T19:25:12+08:00 ] 74.120.168.12 74.120.168.12 GET /daily/admin/note/shownote/id/247.html
[ info ] qingrang.top/daily/admin/note/shownote/id/247.html [运行时间：0.052239s][吞吐率：19.14req/s] [内存消耗：2,057.40kb] [文件加载：55]
[ info ] [ LANG ] /var/www/html/daily/thinkphp/lang/zh-cn.php
[ info ] [ ROUTE ] array (
  'type' => 'module',
  'module' => 
  array (
    0 => 'admin',
    1 => 'note',
    2 => 'shownote',
  ),
)
[ info ] [ HEADER ] array (
  'host' => 'qingrang.top',
  'cache-control' => 'max-age=0',
  'upgrade-insecure-requests' => '1',
  'user-agent' => 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/70.0.3538.102 Safari/537.36',
  'accept' => 'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8',
  'referer' => 'http://qingrang.top/daily/admin/note/editNote/id/247',
  'accept-encoding' => 'gzip, deflate',
  'accept-language' => 'zh-CN,zh;q=0.9,la;q=0.8,en;q=0.7,lb;q=0.6',
  'cookie' => 'Hm_lvt_1769181352e9adc950166aada465644e=1541082864,1541122974,1541171416,1542098176; PHPSESSID=2itucolgeg6ju9b7e0uomjso34',
  'connection' => 'close',
)
[ info ] [ PARAM ] array (
  'id' => '247',
)
[ info ] [ SESSION ] INIT array (
  'id' => '',
  'var_session_id' => '',
  'prefix' => 'think',
  'type' => '',
  'auto_start' => true,
)
[ info ] [ RUN ] app\admin\controller\Note->showNote[ /var/www/html/daily/application/admin/controller/Note.php ]
[ info ] [ DB ] INIT mysql
[ info ] [ VIEW ] /var/www/html/daily/application/admin/view/note/shownote.html [ array (
  0 => 'note',
  1 => 'groups',
) ]
[ info ] [ LOG ] INIT File
[ sql ] [ DB ] CONNECT:[ UseTime:0.000441s ] mysql:host=74.120.168.12;dbname=diary;charset=utf8
[ sql ] [ SQL ] SHOW COLUMNS FROM `note` [ RunTime:0.001199s ]
[ sql ] [ SQL ] SELECT * FROM `note` WHERE  `id` = 247 LIMIT 1 [ RunTime:0.000613s ]
[ sql ] [ SQL ] SHOW COLUMNS FROM `groups` [ RunTime:0.001120s ]
[ sql ] [ SQL ] SELECT * FROM `groups` [ RunTime:0.000298s ]
---------------------------------------------------------------
[ 2018-11-19T19:41:28+08:00 ] 74.120.168.12 74.120.168.12 GET /daily/admin/note
[ info ] qingrang.top/daily/admin/note [运行时间：0.078670s][吞吐率：12.71req/s] [内存消耗：2,280.11kb] [文件加载：56]
[ info ] [ LANG ] /var/www/html/daily/thinkphp/lang/zh-cn.php
[ info ] [ ROUTE ] array (
  'type' => 'module',
  'module' => 
  array (
    0 => 'admin',
    1 => 'note',
    2 => NULL,
  ),
)
[ info ] [ HEADER ] array (
  'host' => 'qingrang.top',
  'pragma' => 'no-cache',
  'cache-control' => 'no-cache',
  'upgrade-insecure-requests' => '1',
  'user-agent' => 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/70.0.3538.102 Safari/537.36',
  'accept' => 'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8',
  'referer' => 'http://qingrang.top/daily/admin/login/index.html',
  'accept-encoding' => 'gzip, deflate',
  'accept-language' => 'zh-CN,zh;q=0.9,la;q=0.8,en;q=0.7,lb;q=0.6',
  'cookie' => 'Hm_lvt_1769181352e9adc950166aada465644e=1541082864,1541122974,1541171416,1542098176; PHPSESSID=2itucolgeg6ju9b7e0uomjso34',
  'connection' => 'close',
)
[ info ] [ PARAM ] array (
)
[ info ] [ SESSION ] INIT array (
  'id' => '',
  'var_session_id' => '',
  'prefix' => 'think',
  'type' => '',
  'auto_start' => true,
)
[ info ] [ RUN ] app\admin\controller\Note->notelst[ /var/www/html/daily/application/admin/controller/Note.php ]
[ info ] [ DB ] INIT mysql
[ info ] [ VIEW ] /var/www/html/daily/application/admin/view/note/notelst.html [ array (
  0 => 'stickList',
  1 => 'hide',
  2 => 'list',
  3 => 'list_new',
  4 => 'groups',
  5 => 'groups0',
  6 => 'groups1',
  7 => 'groups2',
  8 => 'count',
  9 => 'year',
  10 => 'default_num',
) ]
[ info ] [ LOG ] INIT File
[ sql ] [ DB ] CONNECT:[ UseTime:0.000494s ] mysql:host=74.120.168.12;dbname=diary;charset=utf8
[ sql ] [ SQL ] SHOW COLUMNS FROM `note` [ RunTime:0.001543s ]
[ sql ] [ SQL ] SELECT * FROM `note` WHERE  `groups` <> 'Personal'  AND `is_show` = 1 ORDER BY date desc,id desc [ RunTime:0.001756s ]
[ sql ] [ SQL ] SELECT * FROM `note` WHERE  `groups` <> 'Personal'  AND `is_show` <> 1 ORDER BY gmt_modified desc LIMIT 5 [ RunTime:0.002455s ]
[ sql ] [ SQL ] SHOW COLUMNS FROM `config` [ RunTime:0.000988s ]
[ sql ] [ SQL ] SELECT * FROM `config` WHERE  `name` = 'hide' LIMIT 1 [ RunTime:0.000336s ]
[ sql ] [ SQL ] SELECT * FROM `note` WHERE  `id` < 5 [ RunTime:0.000493s ]
[ sql ] [ SQL ] SHOW COLUMNS FROM `groups` [ RunTime:0.000913s ]
[ sql ] [ SQL ] SELECT * FROM `groups` [ RunTime:0.000354s ]
[ sql ] [ SQL ] SELECT * FROM `groups` WHERE  `parent_id` = 0  AND `id` <> 2 ORDER BY `groups` [ RunTime:0.000399s ]
[ sql ] [ SQL ] SELECT `groups` FROM `groups` WHERE  `parent_id` = 1 [ RunTime:0.000309s ]
[ sql ] [ SQL ] SELECT * FROM `groups` WHERE  `parent_id` = 2 ORDER BY `groups` [ RunTime:0.000414s ]
[ sql ] [ SQL ] SELECT COUNT(*) AS tp_count FROM `note` WHERE  `groups` = 'Default' LIMIT 1 [ RunTime:0.001374s ]
[ sql ] [ SQL ] SELECT COUNT(*) AS tp_count FROM `note` LIMIT 1 [ RunTime:0.000279s ]
[ sql ] [ SQL ] SHOW COLUMNS FROM `yearlist` [ RunTime:0.001103s ]
[ sql ] [ SQL ] SELECT DISTINCT  `year` FROM `yearlist` ORDER BY year desc [ RunTime:0.000604s ]
---------------------------------------------------------------
[ 2018-11-19T19:53:19+08:00 ] 74.120.168.12 74.120.168.12 GET /daily/admin/note
[ info ] qingrang.top/daily/admin/note [运行时间：0.081188s][吞吐率：12.32req/s] [内存消耗：2,280.11kb] [文件加载：56]
[ info ] [ LANG ] /var/www/html/daily/thinkphp/lang/zh-cn.php
[ info ] [ ROUTE ] array (
  'type' => 'module',
  'module' => 
  array (
    0 => 'admin',
    1 => 'note',
    2 => NULL,
  ),
)
[ info ] [ HEADER ] array (
  'host' => 'qingrang.top',
  'pragma' => 'no-cache',
  'cache-control' => 'no-cache',
  'upgrade-insecure-requests' => '1',
  'user-agent' => 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/70.0.3538.102 Safari/537.36',
  'accept' => 'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8',
  'referer' => 'http://qingrang.top/daily/admin/login/index.html',
  'accept-encoding' => 'gzip, deflate',
  'accept-language' => 'zh-CN,zh;q=0.9,la;q=0.8,en;q=0.7,lb;q=0.6',
  'cookie' => 'Hm_lvt_1769181352e9adc950166aada465644e=1541082864,1541122974,1541171416,1542098176; PHPSESSID=2itucolgeg6ju9b7e0uomjso34',
  'connection' => 'close',
)
[ info ] [ PARAM ] array (
)
[ info ] [ SESSION ] INIT array (
  'id' => '',
  'var_session_id' => '',
  'prefix' => 'think',
  'type' => '',
  'auto_start' => true,
)
[ info ] [ RUN ] app\admin\controller\Note->notelst[ /var/www/html/daily/application/admin/controller/Note.php ]
[ info ] [ DB ] INIT mysql
[ info ] [ VIEW ] /var/www/html/daily/application/admin/view/note/notelst.html [ array (
  0 => 'stickList',
  1 => 'hide',
  2 => 'list',
  3 => 'list_new',
  4 => 'groups',
  5 => 'groups0',
  6 => 'groups1',
  7 => 'groups2',
  8 => 'count',
  9 => 'year',
  10 => 'default_num',
) ]
[ info ] [ LOG ] INIT File
[ sql ] [ DB ] CONNECT:[ UseTime:0.000602s ] mysql:host=74.120.168.12;dbname=diary;charset=utf8
[ sql ] [ SQL ] SHOW COLUMNS FROM `note` [ RunTime:0.001770s ]
[ sql ] [ SQL ] SELECT * FROM `note` WHERE  `groups` <> 'Personal'  AND `is_show` = 1 ORDER BY date desc,id desc [ RunTime:0.001752s ]
[ sql ] [ SQL ] SELECT * FROM `note` WHERE  `groups` <> 'Personal'  AND `is_show` <> 1 ORDER BY gmt_modified desc LIMIT 5 [ RunTime:0.002357s ]
[ sql ] [ SQL ] SHOW COLUMNS FROM `config` [ RunTime:0.001068s ]
[ sql ] [ SQL ] SELECT * FROM `config` WHERE  `name` = 'hide' LIMIT 1 [ RunTime:0.000362s ]
[ sql ] [ SQL ] SELECT * FROM `note` WHERE  `id` < 5 [ RunTime:0.000444s ]
[ sql ] [ SQL ] SHOW COLUMNS FROM `groups` [ RunTime:0.000883s ]
[ sql ] [ SQL ] SELECT * FROM `groups` [ RunTime:0.000303s ]
[ sql ] [ SQL ] SELECT * FROM `groups` WHERE  `parent_id` = 0  AND `id` <> 2 ORDER BY `groups` [ RunTime:0.000438s ]
[ sql ] [ SQL ] SELECT `groups` FROM `groups` WHERE  `parent_id` = 1 [ RunTime:0.000327s ]
[ sql ] [ SQL ] SELECT * FROM `groups` WHERE  `parent_id` = 2 ORDER BY `groups` [ RunTime:0.000431s ]
[ sql ] [ SQL ] SELECT COUNT(*) AS tp_count FROM `note` WHERE  `groups` = 'Default' LIMIT 1 [ RunTime:0.001504s ]
[ sql ] [ SQL ] SELECT COUNT(*) AS tp_count FROM `note` LIMIT 1 [ RunTime:0.000311s ]
[ sql ] [ SQL ] SHOW COLUMNS FROM `yearlist` [ RunTime:0.001230s ]
[ sql ] [ SQL ] SELECT DISTINCT  `year` FROM `yearlist` ORDER BY year desc [ RunTime:0.000730s ]
---------------------------------------------------------------
[ 2018-11-19T20:26:29+08:00 ] 74.120.168.12 74.120.168.12 GET /daily/admin/note
[ info ] qingrang.top/daily/admin/note [运行时间：0.038164s][吞吐率：26.20req/s] [内存消耗：1,428.95kb] [文件加载：49]
[ info ] [ LANG ] /var/www/html/daily/thinkphp/lang/zh-cn.php
[ info ] [ ROUTE ] array (
  'type' => 'module',
  'module' => 
  array (
    0 => 'admin',
    1 => 'note',
    2 => NULL,
  ),
)
[ info ] [ HEADER ] array (
  'host' => 'qingrang.top',
  'upgrade-insecure-requests' => '1',
  'user-agent' => 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/70.0.3538.102 Safari/537.36',
  'accept' => 'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8',
  'accept-encoding' => 'gzip, deflate',
  'accept-language' => 'zh-CN,zh;q=0.9,la;q=0.8,en;q=0.7,lb;q=0.6',
  'cookie' => 'Hm_lvt_1769181352e9adc950166aada465644e=1541082864,1541122974,1541171416,1542098176',
  'connection' => 'close',
)
[ info ] [ PARAM ] array (
)
[ info ] [ SESSION ] INIT array (
  'id' => '',
  'var_session_id' => '',
  'prefix' => 'think',
  'type' => '',
  'auto_start' => true,
)
[ info ] [ VIEW ] /var/www/html/daily/thinkphp/tpl/dispatch_jump.tpl [ array (
  0 => 'code',
  1 => 'msg',
  2 => 'data',
  3 => 'url',
  4 => 'wait',
) ]
[ info ] [ LOG ] INIT File
---------------------------------------------------------------
[ 2018-11-19T20:26:33+08:00 ] 74.120.168.12 74.120.168.12 GET /daily/admin/login/index.html
[ info ] qingrang.top/daily/admin/login/index.html [运行时间：0.037179s][吞吐率：26.90req/s] [内存消耗：1,340.77kb] [文件加载：47]
[ info ] [ LANG ] /var/www/html/daily/thinkphp/lang/zh-cn.php
[ info ] [ ROUTE ] array (
  'type' => 'module',
  'module' => 
  array (
    0 => 'admin',
    1 => 'login',
    2 => 'index',
  ),
)
[ info ] [ HEADER ] array (
  'host' => 'qingrang.top',
  'upgrade-insecure-requests' => '1',
  'user-agent' => 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/70.0.3538.102 Safari/537.36',
  'accept' => 'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8',
  'referer' => 'http://qingrang.top/daily/admin/note',
  'accept-encoding' => 'gzip, deflate',
  'accept-language' => 'zh-CN,zh;q=0.9,la;q=0.8,en;q=0.7,lb;q=0.6',
  'cookie' => 'Hm_lvt_1769181352e9adc950166aada465644e=1541082864,1541122974,1541171416,1542098176; PHPSESSID=hg5qu5mntv21cu5j05evi6l7i2',
  'connection' => 'close',
)
[ info ] [ PARAM ] array (
)
[ info ] [ RUN ] app\admin\controller\Login->index[ /var/www/html/daily/application/admin/controller/Login.php ]
[ info ] [ VIEW ] /var/www/html/daily/application/admin/view/login/index.html [ array (
) ]
[ info ] [ LOG ] INIT File
---------------------------------------------------------------
[ 2018-11-19T20:26:37+08:00 ] 74.120.168.12 74.120.168.12 POST /daily/admin/login/index.html
[ info ] qingrang.top/daily/admin/login/index.html [运行时间：0.050285s][吞吐率：19.89req/s] [内存消耗：1,922.37kb] [文件加载：54]
[ info ] [ LANG ] /var/www/html/daily/thinkphp/lang/zh-cn.php
[ info ] [ ROUTE ] array (
  'type' => 'module',
  'module' => 
  array (
    0 => 'admin',
    1 => 'login',
    2 => 'index',
  ),
)
[ info ] [ HEADER ] array (
  'host' => 'qingrang.top',
  'content-length' => '8',
  'cache-control' => 'max-age=0',
  'origin' => 'http://qingrang.top',
  'upgrade-insecure-requests' => '1',
  'content-type' => 'application/x-www-form-urlencoded',
  'user-agent' => 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/70.0.3538.102 Safari/537.36',
  'accept' => 'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8',
  'referer' => 'http://qingrang.top/daily/admin/login/index.html',
  'accept-encoding' => 'gzip, deflate',
  'accept-language' => 'zh-CN,zh;q=0.9,la;q=0.8,en;q=0.7,lb;q=0.6',
  'cookie' => 'Hm_lvt_1769181352e9adc950166aada465644e=1541082864,1541122974,1541171416,1542098176; PHPSESSID=hg5qu5mntv21cu5j05evi6l7i2',
  'connection' => 'close',
)
[ info ] [ PARAM ] array (
  'pwd' => 'shao',
)
[ info ] [ RUN ] app\admin\controller\Login->index[ /var/www/html/daily/application/admin/controller/Login.php ]
[ info ] [ DB ] INIT mysql
[ info ] [ SESSION ] INIT array (
  'id' => '',
  'var_session_id' => '',
  'prefix' => 'think',
  'type' => '',
  'auto_start' => true,
)
[ info ] [ LOG ] INIT File
[ sql ] [ DB ] CONNECT:[ UseTime:0.000537s ] mysql:host=74.120.168.12;dbname=diary;charset=utf8
[ sql ] [ SQL ] SHOW COLUMNS FROM `admin` [ RunTime:0.001255s ]
[ sql ] [ SQL ] SELECT * FROM `admin` WHERE  `id` = 1 LIMIT 1 [ RunTime:0.000354s ]
---------------------------------------------------------------
[ 2018-11-19T20:26:37+08:00 ] 74.120.168.12 74.120.168.12 GET /daily/admin/note
[ info ] qingrang.top/daily/admin/note [运行时间：0.066911s][吞吐率：14.95req/s] [内存消耗：2,279.84kb] [文件加载：56]
[ info ] [ LANG ] /var/www/html/daily/thinkphp/lang/zh-cn.php
[ info ] [ ROUTE ] array (
  'type' => 'module',
  'module' => 
  array (
    0 => 'admin',
    1 => 'note',
    2 => NULL,
  ),
)
[ info ] [ HEADER ] array (
  'host' => 'qingrang.top',
  'cache-control' => 'max-age=0',
  'upgrade-insecure-requests' => '1',
  'user-agent' => 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/70.0.3538.102 Safari/537.36',
  'accept' => 'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8',
  'referer' => 'http://qingrang.top/daily/admin/login/index.html',
  'accept-encoding' => 'gzip, deflate',
  'accept-language' => 'zh-CN,zh;q=0.9,la;q=0.8,en;q=0.7,lb;q=0.6',
  'cookie' => 'Hm_lvt_1769181352e9adc950166aada465644e=1541082864,1541122974,1541171416,1542098176; PHPSESSID=hg5qu5mntv21cu5j05evi6l7i2',
  'connection' => 'close',
)
[ info ] [ PARAM ] array (
)
[ info ] [ SESSION ] INIT array (
  'id' => '',
  'var_session_id' => '',
  'prefix' => 'think',
  'type' => '',
  'auto_start' => true,
)
[ info ] [ RUN ] app\admin\controller\Note->notelst[ /var/www/html/daily/application/admin/controller/Note.php ]
[ info ] [ DB ] INIT mysql
[ info ] [ VIEW ] /var/www/html/daily/application/admin/view/note/notelst.html [ array (
  0 => 'stickList',
  1 => 'hide',
  2 => 'list',
  3 => 'list_new',
  4 => 'groups',
  5 => 'groups0',
  6 => 'groups1',
  7 => 'groups2',
  8 => 'count',
  9 => 'year',
  10 => 'default_num',
) ]
[ info ] [ LOG ] INIT File
[ sql ] [ DB ] CONNECT:[ UseTime:0.000515s ] mysql:host=74.120.168.12;dbname=diary;charset=utf8
[ sql ] [ SQL ] SHOW COLUMNS FROM `note` [ RunTime:0.001288s ]
[ sql ] [ SQL ] SELECT * FROM `note` WHERE  `groups` <> 'Personal'  AND `is_show` = 1 ORDER BY date desc,id desc [ RunTime:0.001758s ]
[ sql ] [ SQL ] SELECT * FROM `note` WHERE  `groups` <> 'Personal'  AND `is_show` <> 1 ORDER BY gmt_modified desc LIMIT 5 [ RunTime:0.002192s ]
[ sql ] [ SQL ] SHOW COLUMNS FROM `config` [ RunTime:0.000898s ]
[ sql ] [ SQL ] SELECT * FROM `config` WHERE  `name` = 'hide' LIMIT 1 [ RunTime:0.000321s ]
[ sql ] [ SQL ] SELECT * FROM `note` WHERE  `id` < 5 [ RunTime:0.000416s ]
[ sql ] [ SQL ] SHOW COLUMNS FROM `groups` [ RunTime:0.000942s ]
[ sql ] [ SQL ] SELECT * FROM `groups` [ RunTime:0.000294s ]
[ sql ] [ SQL ] SELECT * FROM `groups` WHERE  `parent_id` = 0  AND `id` <> 2 ORDER BY `groups` [ RunTime:0.000435s ]
[ sql ] [ SQL ] SELECT `groups` FROM `groups` WHERE  `parent_id` = 1 [ RunTime:0.000298s ]
[ sql ] [ SQL ] SELECT * FROM `groups` WHERE  `parent_id` = 2 ORDER BY `groups` [ RunTime:0.000362s ]
[ sql ] [ SQL ] SELECT COUNT(*) AS tp_count FROM `note` WHERE  `groups` = 'Default' LIMIT 1 [ RunTime:0.001206s ]
[ sql ] [ SQL ] SELECT COUNT(*) AS tp_count FROM `note` LIMIT 1 [ RunTime:0.000238s ]
[ sql ] [ SQL ] SHOW COLUMNS FROM `yearlist` [ RunTime:0.000950s ]
[ sql ] [ SQL ] SELECT DISTINCT  `year` FROM `yearlist` ORDER BY year desc [ RunTime:0.000611s ]
---------------------------------------------------------------
[ 2018-11-19T20:26:46+08:00 ] 74.120.168.12 74.120.168.12 GET /daily/admin/note/editnote/id/250.html
[ info ] qingrang.top/daily/admin/note/editnote/id/250.html [运行时间：0.071642s][吞吐率：13.96req/s] [内存消耗：2,062.09kb] [文件加载：56]
[ info ] [ LANG ] /var/www/html/daily/thinkphp/lang/zh-cn.php
[ info ] [ ROUTE ] array (
  'type' => 'module',
  'module' => 
  array (
    0 => 'admin',
    1 => 'note',
    2 => 'editnote',
  ),
)
[ info ] [ HEADER ] array (
  'host' => 'qingrang.top',
  'upgrade-insecure-requests' => '1',
  'user-agent' => 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/70.0.3538.102 Safari/537.36',
  'accept' => 'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8',
  'referer' => 'http://qingrang.top/daily/admin/note',
  'accept-encoding' => 'gzip, deflate',
  'accept-language' => 'zh-CN,zh;q=0.9,la;q=0.8,en;q=0.7,lb;q=0.6',
  'cookie' => 'Hm_lvt_1769181352e9adc950166aada465644e=1541082864,1541122974,1541171416,1542098176; PHPSESSID=hg5qu5mntv21cu5j05evi6l7i2',
  'connection' => 'close',
)
[ info ] [ PARAM ] array (
  'id' => '250',
)
[ info ] [ SESSION ] INIT array (
  'id' => '',
  'var_session_id' => '',
  'prefix' => 'think',
  'type' => '',
  'auto_start' => true,
)
[ info ] [ RUN ] app\admin\controller\Note->editNote[ /var/www/html/daily/application/admin/controller/Note.php ]
[ info ] [ DB ] INIT mysql
[ info ] [ VIEW ] /var/www/html/daily/application/admin/view/note/editnote.html [ array (
  0 => 'note',
  1 => 'groups',
) ]
[ info ] [ LOG ] INIT File
[ sql ] [ DB ] CONNECT:[ UseTime:0.000679s ] mysql:host=74.120.168.12;dbname=diary;charset=utf8
[ sql ] [ SQL ] SHOW COLUMNS FROM `note` [ RunTime:0.001950s ]
[ sql ] [ SQL ] SELECT * FROM `note` WHERE  `id` = 250 LIMIT 1 [ RunTime:0.000571s ]
[ sql ] [ SQL ] SHOW COLUMNS FROM `groups` [ RunTime:0.001076s ]
[ sql ] [ SQL ] SELECT * FROM `groups` [ RunTime:0.000331s ]
---------------------------------------------------------------
[ 2018-11-19T21:01:05+08:00 ] 74.120.168.12 74.120.168.12 POST /daily/admin/note/updatenote/id/250.html
[ info ] qingrang.top/daily/admin/note/updatenote/id/250.html [运行时间：0.069630s][吞吐率：14.36req/s] [内存消耗：2,215.92kb] [文件加载：58]
[ info ] [ LANG ] /var/www/html/daily/thinkphp/lang/zh-cn.php
[ info ] [ ROUTE ] array (
  'type' => 'module',
  'module' => 
  array (
    0 => 'admin',
    1 => 'note',
    2 => 'updatenote',
  ),
)
[ info ] [ HEADER ] array (
  'host' => 'qingrang.top',
  'content-length' => '49332',
  'cache-control' => 'max-age=0',
  'origin' => 'http://qingrang.top',
  'upgrade-insecure-requests' => '1',
  'content-type' => 'application/x-www-form-urlencoded',
  'user-agent' => 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/70.0.3538.102 Safari/537.36',
  'accept' => 'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8',
  'referer' => 'http://qingrang.top/daily/admin/note/editnote/id/250.html',
  'accept-encoding' => 'gzip, deflate',
  'accept-language' => 'zh-CN,zh;q=0.9,la;q=0.8,en;q=0.7,lb;q=0.6',
  'cookie' => 'Hm_lvt_1769181352e9adc950166aada465644e=1541082864,1541122974,1541171416,1542098176; PHPSESSID=hg5qu5mntv21cu5j05evi6l7i2',
  'connection' => 'close',
)
[ info ] [ PARAM ] array (
  'summary' => '',
  'content' => '# Spring(二) - AOP（面向切面）
[TOC]

Spring 是一个基于 **IOC** 和 **AOP** 的结构 J2EE 系统的框架。
## AOP 简介
### 概念
AOP（Aspect Orient Programming），面向切面编程，是面向对象编程 OOP 的一种补充。面向对象编程是从静态角度考虑程序的结构，而面向切面编程是从动态角度考虑程序运行过程。

AOP 底层，就是采用动态代理模式实现的。采用了两种代理： JDK 的动态代理，与 CGLIB 的动态代理。

面向切面编程，就是将交叉业务逻辑封装成切面，利用 AOP 容器的功能将切面织入到主业务逻辑中。所谓交叉业务逻辑是指，通用的、与主业务逻辑无关的代码，如安全检查、事务、日志等。

若不使用 AOP，则会出现代码纠缠，即交叉业务逻辑与主业务逻辑混合在一起。这样，会使主业务逻辑变的混杂不清。

例如，转账，在真正转账业务逻辑前后，需要权限控制、日志记录、加载事务、结束事务等交叉业务逻辑，而这些业务逻辑与主业务逻辑间并无直接关系。但，它们的代码量所占比重能达到总代码量的一半甚至还多。它们的存在，不仅产生了大量的“冗余”代码，还大大干扰了主业务逻辑---转账。

### 利用 JDK 动态代理实现 AOP 编程
*ISomeService.java - 主业务接口*
```
public interface ISomeService {
	// 目标方法
	void doFirst();
	// 目标方法
	void doSecond();
}
```
*SomeServiceImpl.java - 目标类*
```
public class SomeServiceImpl implements ISomeService {

	@Override
	public void doFirst() {
		System.out.println("执行doFirst()方法");
	}

	@Override
	public void doSecond() {
		System.out.println("执行doSecond()方法");
	}
}
```
*SystemService.java - 交叉业务逻辑*
```
public class SystemService {
	public static void doLog() {
		System.out.println("执行日志代码");
	}

	public static void doTx() {
		System.out.println("执行事务代码");
	}
}
```
*MyTest.java*
```
@Test
public void MyTest(){
	final ISomeService target = new SomeServiceImpl();
	// 自动生成一个动态代理对象
	ISomeService service = (ISomeService) Proxy.newProxyInstance(
			target.getClass().getClassLoader(), // 目标类的类加载器
			target.getClass().getInterfaces(),  // 目标类实现的接口数组
			new InvocationHandler() { //业务增强逻辑
				// 具体加强的代码逻辑
				@Override
				public Object invoke(Object proxy, Method method, Object[] args) throws Throwable {
					SystemService.doTx(); // 织入
					Object result = method.invoke(target, args); // 执行目标方法
					SystemService.doLog(); // 织入
					return result;
				}
			});
	service.doFirst();
	System.out.println("==============");
	service.doSecond();
}
```
*输出信息*
```
执行事务代码
执行doFirst()方法
执行日志代码
==============
执行事务代码
执行doSecond()方法
执行日志代码
```
## AOP 编程术语
### 切面（Aspect）
切面泛指交叉业务逻辑。上例中的事务处理、日志处理就可以理解为切面。常用的切面有通知与顾问。实际就是对主业务逻辑的一种增强。
### 织入（Weaving）
织入是指将切面代码插入到目标对象的过程。上例中 MyInvocationHandler 类中的 invoke() 方法完成的工作，就可以称为织入。
### 连接点（JoinPoint）
连接点指可以被切面织入的方法。通常业务接口中的方法均为连接点。
### 切入点（Pointcut）
切入点指切面具体织入的方法。在 StudentServiceImpl 类中，若 doSome()将被增强，而doOther()不被增强，则 doSome()为切入点，而 doOther()仅为连接点。被标记为 final 的方法是不能作为连接点与切入点的。因为最终的是不能被修改，不能被增强的。
### 目标对象（Target）
目标对象指将要被增强的对象。即包含主业务逻辑的类的对象。上例中的 StudentServiceImpl 的对象若被增强，则该类称为目标类，该类对象称为目标对象。当然，不被增强，也就无所谓目标不目标了。
### 通知（Advice）
通知是切面的一种实现，可以完成简单织入功能（织入功能就是在这里完成的）。换个角度来说，通知定义了增强码切入到目标代码的时间点，是目标方法执行之前执行，还是之后执行等。通知类型不同，切入时间不同。

**切入点定义切入的位置，通知定义切入的时间。**
### 顾问（Advisor）
顾问是切面的另一种实现，能够将通知以更为复杂的方式织入到目标对象中，是将通知包装为更复杂切面的装配器。






## 通知 Advice
通知（Advice），切面的一种实现，可以完成简单织入功能（织入功能就是在这里完成的）。

常用通知有：前置通知、后置通知、环绕通知、异常处理通知。
### 前置通知 MethodBeforeAdvice
定义前置通知，需要实现 MethodBeforeAdvice 接口。该接口中有一个方法 before()，会在目标方法执行之前执行。 前置通知的特点：
- 在目标方法执行之前先执行。
- 不改变目标方法的执行流程，前置通知代码不能阻止目标方法执行。
- 不改变目标方法执行的结果。

*ISomeService.java - 主业务接口*
```
public interface ISomeService {
	// 目标方法
	void doFirst();
	// 目标方法
	void doSecond();
}
```
*SomeServiceImpl.java - 目标类*
```
public class SomeServiceImpl implements ISomeService {

	@Override
	public void doFirst() {
		System.out.println("执行doFirst()方法");
	}

	@Override
	public void doSecond() {
		System.out.println("执行doSecond()方法");
	}
}
```
*MyMethodBeforeAdvice.java - 前置通知*
```
public class MyMethodBeforeAdvice implements MethodBeforeAdvice {

	// 当前方法在目标方法执行之前执行，method:目标方法，args:目标方法的参数列表，target:目标对象
	@Override
	public void before(Method method, Object[] args, Object target) throws Throwable {
		// 对于目标方法的增强代码就应该写在这里
		System.out.println("执行前置通知方法");
	}
}
```
*applicationContext.mxl*
```
<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xsi:schemaLocation="
        http://www.springframework.org/schema/beans 
        http://www.springframework.org/schema/beans/spring-beans.xsd">

    <!-- 注册目标对象 -->
    <bean id="someService" class="top.qingrang.aop01.SomeServiceImpl"/>

    <!-- 注册切面：通知 -->
    <bean id="myAdvice" class="top.qingrang.aop01.MyMethodBeforeAdvice"/>

    <!-- 生成代理对象 -->
    <bean id="serviceProxy" class="org.springframework.aop.framework.ProxyFactoryBean">
    	<!-- 指定目标对象，随便用哪个 -->
    	<!-- <property name="targetName" value="someService"/> -->
    	<property name="target" ref="someService"/>
		
    	<!-- 指定切面 -->
    	<property name="interceptorNames" value="myAdvice"/>
    </bean>
</beans>
```

### 后置通知 AfterReturningAdvice
定义后置通知，需要实现接口 AfterReturningAdvice。该接口中有一个方法 afterReturning()，会在目标方法执行之后执行。后置通知的特点：
- 在目标方法执行之后执行。
- 不改变目标方法的执行流程，后置通知代码不能阻止目标方法执行。
- 不改变目标方法执行的结果。

*SomeServiceImpl.java - 目标类*
```
public class SomeServiceImpl implements ISomeService {

	@Override
	public void doFirst() {
		System.out.println("执行doFirst()方法");
	}

	@Override
	public String doSecond() {
		System.out.println("执行doSecond()方法");
		return "abcde";
	}
}
```
*MyAfterReturningAdvice.java - 后置通知*
```
// 后置通知：可以获取到目标方法的返回结果，但无法改变目标方法的结果
public class MyAfterReturningAdvice implements AfterReturningAdvice {
	// 在目标方法执行之后执行，returnValue：目标方法的返回值
	@Override
	public void afterReturning(Object returnValue, Method method, Object[] args, Object target) throws Throwable {
		System.out.println("执行后置通知方法  returnValue = " + returnValue);
		if (returnValue != null) {
			returnValue = ((String) returnValue).toUpperCase();
			System.out.println("修改过的结果  returnValue = " + returnValue);
		}
	}
}
```
### 环绕通知 MethodInterceptor
定义环绕通知(在目标方法执行之前之后都会执行)，需要实现 MethodInterceptor 接口。环绕通知，也叫方法拦截器，可以在目标方法调用之前及之后做处理，可以改变目标方法的返回值，也可以改变程序执行流程。

*MyMethodInterceptor.java*
```
// 环绕通知：可以修改目标方法的返回结果
public class MyMethodInterceptor implements MethodInterceptor {
	@Override
	public Object invoke(MethodInvocation invocation) throws Throwable {
		System.out.println("执行环绕通知：目标方法执行之前");
		// 执行目标方法
		Object result = invocation.proceed();
		System.out.println("执行环绕通知：目标方法执行之后");
		if(result != null) {
			result = ((String)result).toUpperCase();
		}
		return result;
	}
}
```





### 异常通知 ThrowsAdvice
定义异常通知，需要实现 ThrowsAdvice 接口。该接口的主要作用是，在目标方法抛出异常后，根据异常的不同做出相应的处理。当该接口处理完异常后，会简单地将异常再次抛出给目标方法。

不过，这个接口较为特殊，从形式上看，该接口中没有必须要实现的方法。但，这个接口却确实有必须要实现的方法 `afterThrowing()`。这个方法重载了四种形式。由于使用时，一般只使用其中一种，若要都定义到接口中，则势必要使程序员在使用时必须要实现这四个方法。这是很麻烦的。所以就将该接口定义为了标识接口（没有方法的接口）。这四个方法在打开 `ThrowsAdvice` 源码后，上侧的注释部分可以看到：
![afterThrowing()](https://daily-1252869435.cos.ap-chengdu.myqcloud.com/2018-11-19-10-59-26.png)
不过，在这四种形式中，常用的形式如下： `public void afterThrowing(自定义的异常类 e)` 这里的参数 e 为，与具体业务相关的用户自定义的异常类对象。容器会根据异常类型的不同，自动选择不同的该方法执行。这些方法的执行是在目标方法执行结束后执行的。其它参数则与前面两个通知中方法的参数意义相同。
#### 普通异常
*SomeServiceImpl.java - 目标类*
```
@Override
public void doFirst() {
	System.out.println("执行doFirst()方法" + 3 / 0);
}
```
*MyThrowsAdvice.java - 异常通知*
```
public class MyThrowsAdvice implements ThrowsAdvice {
	// 当目标方法抛出与指定类型的异常具有 is-a 关系的异常时，执行当前方法
	public void afterThrowing(Exception ex) {
		System.out.println("执行异常通知方法");
	}
}
```
*输出信息*
```
执行异常通知方法
java.lang.ArithmeticException: / by zero
	...
```
#### 自定义异常
异常分两种：
- 运行时异常，不进行处理，也可以通过编译。
若一个类继承自 RunTimeException，则该异常就是运行时异常
- 编译时异常(受查异常,Checked Exception)，不进行处理，将无法通过编译。
若一个类继承自 Exception，则该异常就是受查异常

*UserException.java*
```
public class UserException extends Exception {
	public UserException() {
		super();
	}

	public UserException(String message) {
		super(message);
	}
}
```
*UsernameException.java*
```
public class UsernameException extends UserException {
	public UsernameException() {
		super();
	}

	public UsernameException(String message) {
		super(message);
	}
}
```
*PasswordException.java*
```
public class PasswordException extends UserException {
	public PasswordException() {
		super();
	}

	public PasswordException(String message) {
		super(message);
	}
}
```
*MyThrowsAdvice.java - 异常通知*
```
public class MyThrowsAdvice implements ThrowsAdvice {
	// 当目标方法抛出 UsernameException 异常时，执行当前方法
	public void afterThrowing(UsernameException ex) {
		System.out.println("发生用户名异常 ex = " + ex.getMessage());
	}
	
	// 当目标方法抛出 PasswordException 异常时，执行当前方法
	public void afterThrowing(PasswordException ex) {
		System.out.println("发生密码异常 ex = " + ex.getMessage());
	}
	
	// 当目标方法抛出其它异常时，执行当前方法
	public void afterThrowing(Exception ex) {
		System.out.println("发生异常 ex = " + ex.getMessage());
	}
}
```
*MyTest.java*
```
@Test
public void test01() throws UserException {
	String resource = "top/qingrang/aop05/applicationContext.xml";
	ApplicationContext ac = new ClassPathXmlApplicationContext(resource);
	ISomeService service = (ISomeService) ac.getBean("serviceProxy");
	service.login("beijing", "222");
}
```





### 同时使用多种通知
*applicationContext.mxl*
```
<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xsi:schemaLocation="
        http://www.springframework.org/schema/beans 
        http://www.springframework.org/schema/beans/spring-beans.xsd">

    <!-- 注册目标对象 -->
    <bean id="someService" class="top.qingrang.aop06.SomeServiceImpl"/>

    <!-- 注册切面：通知 -->
    <bean id="myBeforeAdvice" class="top.qingrang.aop06.MyMethodBeforeAdvice"/>
    <bean id="myAfterAdvice" class="top.qingrang.aop06.MyAfterReturningAdvice"/>

    <!-- 生成代理对象 -->
    <bean id="serviceProxy" class="org.springframework.aop.framework.ProxyFactoryBean">
    	<property name="target" ref="someService"/>
        <!-- 注入多种通知 -->
    	<property name="interceptorNames" value="myBeforeAdvice,myAfterAdvice"/>
    	<!-- <property name="interceptorNames">
    		<array>
    			<value>myBeforeAdvice</value>
    			<value>myAfterAdvice</value>
    		</array>
    	</property> -->
    </bean>

</beans>
```


### 无接口的 CGLIB 代理生成
若不存在接口，则 ProxyFactoryBean 会自动采用 CGLIB 方式生成动态代理。
*SomeService.java - 目标类*
```
public class SomeService {
	public void doFirst() {
		System.out.println("执行doFirst()方法");
	}

	public String doSecond() {
		System.out.println("执行doSecond()方法");
		return "abcde";
	}
}
```
*MyAfterReturningAdvice.java - 后置通知*
```
public class MyAfterReturningAdvice implements AfterReturningAdvice {
	// 在目标方法执行之后执行，returnValue：目标方法的返回值
	@Override
	public void afterReturning(Object returnValue, Method method, Object[] args, Object target) throws Throwable {
		System.out.println("执行后置通知方法  returnValue = " + returnValue);
		if (returnValue != null) {
			returnValue = ((String) returnValue).toUpperCase();
			System.out.println("修改过的结果  returnValue = " + returnValue);
		}
	}
}
```
*applicationContext.mxl*
```
<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xsi:schemaLocation="
        http://www.springframework.org/schema/beans 
        http://www.springframework.org/schema/beans/spring-beans.xsd">

    <!-- 注册目标对象 -->
    <bean id="someService" class="top.qingrang.aop07.SomeService"/>
    
    <!-- 注册切面：通知 -->
    <bean id="myAdvice" class="top.qingrang.aop07.MyAfterReturningAdvice"/>
    
    <!-- 生成代理对象 -->
    <bean id="serviceProxy" class="org.springframework.aop.framework.ProxyFactoryBean">
    	<property name="target" ref="someService"/>
    	<property name="interceptorNames" value="myAdvice"/>
    </bean>

</beans>
```
*MyTest.java*
```
@Test
public void test01() {
	String resource = "top/qingrang/aop07/applicationContext.xml";
	ApplicationContext ac = new ClassPathXmlApplicationContext(resource);
	SomeService service = (SomeService) ac.getBean("serviceProxy");
	service.doFirst();
	System.out.println("==================");
	String result = service.doSecond();
	System.out.println(result);
}
```
### 有接口的 CGLIB 代理生成 - proxyTargetClass 属性
若存在接口，但又需要使用 CGLIB 生成代理对象，此时，只需要在配置文件中增加一个 proxyTargetClass 属性设置，用于指定强制使用 CGLIB 代理机制。

![CGLIB 代理](https://daily-1252869435.cos.ap-chengdu.myqcloud.com/2018-11-19-12-44-48.png)
也可指定 optimize（优化）的值为 true，强制使用 CGLIB 代理机制。
![optimize（优化）](https://daily-1252869435.cos.ap-chengdu.myqcloud.com/2018-11-19-12-45-22.png)
查看后台运行情况，可以看到代理生成使用的是 CGLIB 代理机制。
![后台运行情况](https://daily-1252869435.cos.ap-chengdu.myqcloud.com/2018-11-19-12-45-57.png)


## 顾问 Advisor
通知（Advice）是 Spring 提供的一种切面（Aspect）。但其功能过于简单：只能将切面织入到目标类的所有目标方法中， 无法完成将切面织入到指定目标方法中。

顾问（Advisor）是 Spring 提供的另一种切面。其可以完成更为复杂的切面织入功能。`PointcutAdvisor(切入点顾问)` 是顾问的一种， 可以指定具体的切入点。 顾问将通知进行了包装，会根据不同的通知类型，在不同的时间点，将切面织入到不同的切入点。

PointcutAdvisor 接口有两个较为常用的实现类：
- NameMatchMethodPointcutAdvisor 名称匹配方法切入点顾问
- RegexpMethodPointcutAdvisor 正则表达式匹配方法切入点顾问

### 名称匹配方法切入点顾问
NameMatchMethodPointcutAdvisor，即名称匹配方法切入点顾问。容器可根据配置文件中指定的方法名来设置切入点。

`<property name="mappedNames"/>`

*ISomeService.java*
```
public interface ISomeService {
	// 目标方法
	void doFirst();
	// 目标方法
	String doSecond();
	// 目标方法
	void doThird();
}
```
*SomeServiceImpl.java*
```
public class SomeServiceImpl implements ISomeService {
	@Override
	public void doFirst() {
		System.out.println("执行doFirst()方法");
	}

	@Override
	public String doSecond() {
		System.out.println("执行doSecond()方法");
		return "abcde";
	}

	@Override
	public void doThird() {
		System.out.println("执行doThird()方法");
	}
}
```
*MyAfterReturningAdvice.java*
```
public class MyAfterReturningAdvice implements AfterReturningAdvice {
	// 在目标方法执行之后执行，returnValue：目标方法的返回值
	@Override
	public void afterReturning(Object returnValue, Method method, Object[] args, Object target) throws Throwable {
		System.out.println("执行后置通知方法  returnValue = " + returnValue);
	}
}
```
*applicationContext.mxl*
```
<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xsi:schemaLocation="
        http://www.springframework.org/schema/beans 
        http://www.springframework.org/schema/beans/spring-beans.xsd">

    <!-- 注册目标对象 -->
    <bean id="someService" class="top.qingrang.aop09.SomeServiceImpl"/>
    
    <!-- 注册切面：通知 -->
    <bean id="myAdvice" class="top.qingrang.aop09.MyAfterReturningAdvice"/>
    
    <!-- 注册切面：顾问 -->
    <bean id="myAdvisor" class="org.springframework.aop.support.NameMatchMethodPointcutAdvisor">
    	<property name="advice" ref="myAdvice"/>
    	<!-- 指定切入点：这里匹配的对象是简单方法名 -->
    	<!-- <property name="mappedName" value="doFirst"/> -->
    	 <property name="mappedNames" value="doFirst,doSecond"/>
        <!-- 使用通配符 -->
    	<!--<property name="mappedNames" value="*ir*"/>-->
    </bean>
    
    <!-- 生成代理对象 -->
    <bean id="serviceProxy" class="org.springframework.aop.framework.ProxyFactoryBean">
    	<property name="target" ref="someService"/>
    	<property name="interceptorNames" value="myAdvisor"/>
    </bean>

</beans>
```
*Test.java - 测试*
```
@Test
public void test01() {
	// 创建容器对象，加载Spring配置文件
	String resource = "top/qingrang/aop09/applicationContext.xml";
	ApplicationContext ac = new ClassPathXmlApplicationContext(resource);
	ISomeService service = (ISomeService) ac.getBean("serviceProxy");
	service.doFirst();
	System.out.println("==================");
	service.doSecond();
	System.out.println("==================");
	service.doThird();
}
```
*输出信息*
```
执行doFirst()方法
执行后置通知方法  returnValue = null
==================
执行doSecond()方法
执行后置通知方法  returnValue = abcde
==================
执行doThird()方法
```
### 正则表达式方法切入点顾问
RegexpMethodPointcutAdvisor，即正则表达式方法顾问。容器可根据正则表达式来设置切入点。注意，与正则表达式进行匹配的对象是接口中的方法名，而非目标类（接口的实现类）的方法名。

`<property name="pattern"/>`

这里的正则表达式常用的运算符有三个，如下表：

|运算符|意义|
|-|-|
|.|表示任意单个字符|
|+|表示前一个字符出现一次或多次|
|*|表示前一个字符出现零次或多次|

*applicationContext.mxl*
```
<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xsi:schemaLocation="
        http://www.springframework.org/schema/beans 
        http://www.springframework.org/schema/beans/spring-beans.xsd">

    <!-- 注册目标对象 -->
    <bean id="someService" class="top.qingrang.aop10.SomeServiceImpl"/>

    <!-- 注册切面：通知 -->
    <bean id="myAdvice" class="top.qingrang.aop10.MyAfterReturningAdvice"/>

    <!-- 注册切面：顾问 -->
    <bean id="myAdvisor" class="org.springframework.aop.support.RegexpMethodPointcutAdvisor">
    	<property name="advice" ref="myAdvice"/>
    	<!-- 这里的正则表达式匹配的对象是「全限定性方法名」 -->
        <!-- 全限定性方法名：com.bjpowernode.aop10.ISomeService.doFirst -->
    	<!-- <property name="pattern" value=".*doFirst"/> -->
    	<!-- <property name="patterns" value=".*doFirst,.*doSecond"/> -->
    	<!-- <property name="pattern" value=".*doFirst|.*doSecond"/> -->
    	<property name="pattern" value=".*S.*"/>
    </bean>

    <!-- 生成代理对象 -->
    <bean id="serviceProxy" class="org.springframework.aop.framework.ProxyFactoryBean">
    	<property name="target" ref="someService"/>
    	<property name="interceptorNames" value="myAdvisor"/>
    </bean>

</beans>
```











',
  'groups' => 'Java',
  'showsel' => '1',
  'showse2' => '1',
  'id' => '250',
)
[ info ] [ SESSION ] INIT array (
  'id' => '',
  'var_session_id' => '',
  'prefix' => 'think',
  'type' => '',
  'auto_start' => true,
)
[ info ] [ RUN ] app\admin\controller\Note->updateNote[ /var/www/html/daily/application/admin/controller/Note.php ]
[ info ] [ DB ] INIT mysql
[ info ] [ CACHE ] INIT File
[ info ] [ LOG ] INIT File
[ sql ] [ DB ] CONNECT:[ UseTime:0.000620s ] mysql:host=74.120.168.12;dbname=diary;charset=utf8
[ sql ] [ SQL ] SHOW COLUMNS FROM `note` [ RunTime:0.001480s ]
[ sql ] [ SQL ] SELECT * FROM `note` WHERE  `id` = 250 LIMIT 1 [ RunTime:0.000554s ]
[ sql ] [ SQL ] SELECT `groups` FROM `note` WHERE  `id` = 250 LIMIT 1 [ RunTime:0.000314s ]
[ sql ] [ SQL ] SHOW COLUMNS FROM `groups` [ RunTime:0.001276s ]
[ sql ] [ SQL ] SELECT `parent_id` FROM `groups` WHERE  `groups` = 'Java' LIMIT 1 [ RunTime:0.000377s ]
[ sql ] [ SQL ] SELECT `groups` FROM `groups` WHERE  `id` = 2 LIMIT 1 [ RunTime:0.000289s ]
[ sql ] [ SQL ] UPDATE `note`  SET `id`=250,`p_id`=2,`title`='Spring(二) - AOP（面向切面）\r',`content`='# Spring(二) - AOP（面向切面）\r\n[TOC]\r\n\r\nSpring 是一个基于 **IOC** 和 **AOP** 的结构 J2EE 系统的框架。\r\n## AOP 简介\r\n### 概念\r\nAOP（Aspect Orient Programming），面向切面编程，是面向对象编程 OOP 的一种补充。面向对象编程是从静态角度考虑程序的结构，而面向切面编程是从动态角度考虑程序运行过程。\r\n\r\nAOP 底层，就是采用动态代理模式实现的。采用了两种代理： JDK 的动态代理，与 CGLIB 的动态代理。\r\n\r\n面向切面编程，就是将交叉业务逻辑封装成切面，利用 AOP 容器的功能将切面织入到主业务逻辑中。所谓交叉业务逻辑是指，通用的、与主业务逻辑无关的代码，如安全检查、事务、日志等。\r\n\r\n若不使用 AOP，则会出现代码纠缠，即交叉业务逻辑与主业务逻辑混合在一起。这样，会使主业务逻辑变的混杂不清。\r\n\r\n例如，转账，在真正转账业务逻辑前后，需要权限控制、日志记录、加载事务、结束事务等交叉业务逻辑，而这些业务逻辑与主业务逻辑间并无直接关系。但，它们的代码量所占比重能达到总代码量的一半甚至还多。它们的存在，不仅产生了大量的“冗余”代码，还大大干扰了主业务逻辑---转账。\r\n\r\n### 利用 JDK 动态代理实现 AOP 编程\r\n*ISomeService.java - 主业务接口*\r\n```\r\npublic interface ISomeService {\r\n	// 目标方法\r\n	void doFirst();\r\n	// 目标方法\r\n	void doSecond();\r\n}\r\n```\r\n*SomeServiceImpl.java - 目标类*\r\n```\r\npublic class SomeServiceImpl implements ISomeService {\r\n\r\n	@Override\r\n	public void doFirst() {\r\n		System.out.println(\"执行doFirst()方法\");\r\n	}\r\n\r\n	@Override\r\n	public void doSecond() {\r\n		System.out.println(\"执行doSecond()方法\");\r\n	}\r\n}\r\n```\r\n*SystemService.java - 交叉业务逻辑*\r\n```\r\npublic class SystemService {\r\n	public static void doLog() {\r\n		System.out.println(\"执行日志代码\");\r\n	}\r\n\r\n	public static void doTx() {\r\n		System.out.println(\"执行事务代码\");\r\n	}\r\n}\r\n```\r\n*MyTest.java*\r\n```\r\n@Test\r\npublic void MyTest(){\r\n	final ISomeService target = new SomeServiceImpl();\r\n	// 自动生成一个动态代理对象\r\n	ISomeService service = (ISomeService) Proxy.newProxyInstance(\r\n			target.getClass().getClassLoader(), // 目标类的类加载器\r\n			target.getClass().getInterfaces(),  // 目标类实现的接口数组\r\n			new InvocationHandler() { //业务增强逻辑\r\n				// 具体加强的代码逻辑\r\n				@Override\r\n				public Object invoke(Object proxy, Method method, Object[] args) throws Throwable {\r\n					SystemService.doTx(); // 织入\r\n					Object result = method.invoke(target, args); // 执行目标方法\r\n					SystemService.doLog(); // 织入\r\n					return result;\r\n				}\r\n			});\r\n	service.doFirst();\r\n	System.out.println(\"==============\");\r\n	service.doSecond();\r\n}\r\n```\r\n*输出信息*\r\n```\r\n执行事务代码\r\n执行doFirst()方法\r\n执行日志代码\r\n==============\r\n执行事务代码\r\n执行doSecond()方法\r\n执行日志代码\r\n```\r\n## AOP 编程术语\r\n### 切面（Aspect）\r\n切面泛指交叉业务逻辑。上例中的事务处理、日志处理就可以理解为切面。常用的切面有通知与顾问。实际就是对主业务逻辑的一种增强。\r\n### 织入（Weaving）\r\n织入是指将切面代码插入到目标对象的过程。上例中 MyInvocationHandler 类中的 invoke() 方法完成的工作，就可以称为织入。\r\n### 连接点（JoinPoint）\r\n连接点指可以被切面织入的方法。通常业务接口中的方法均为连接点。\r\n### 切入点（Pointcut）\r\n切入点指切面具体织入的方法。在 StudentServiceImpl 类中，若 doSome()将被增强，而doOther()不被增强，则 doSome()为切入点，而 doOther()仅为连接点。被标记为 final 的方法是不能作为连接点与切入点的。因为最终的是不能被修改，不能被增强的。\r\n### 目标对象（Target）\r\n目标对象指将要被增强的对象。即包含主业务逻辑的类的对象。上例中的 StudentServiceImpl 的对象若被增强，则该类称为目标类，该类对象称为目标对象。当然，不被增强，也就无所谓目标不目标了。\r\n### 通知（Advice）\r\n通知是切面的一种实现，可以完成简单织入功能（织入功能就是在这里完成的）。换个角度来说，通知定义了增强码切入到目标代码的时间点，是目标方法执行之前执行，还是之后执行等。通知类型不同，切入时间不同。\r\n\r\n**切入点定义切入的位置，通知定义切入的时间。**\r\n### 顾问（Advisor）\r\n顾问是切面的另一种实现，能够将通知以更为复杂的方式织入到目标对象中，是将通知包装为更复杂切面的装配器。\r\n\r\n\r\n\r\n\r\n\r\n\r\n## 通知 Advice\r\n通知（Advice），切面的一种实现，可以完成简单织入功能（织入功能就是在这里完成的）。\r\n\r\n常用通知有：前置通知、后置通知、环绕通知、异常处理通知。\r\n### 前置通知 MethodBeforeAdvice\r\n定义前置通知，需要实现 MethodBeforeAdvice 接口。该接口中有一个方法 before()，会在目标方法执行之前执行。 前置通知的特点：\r\n- 在目标方法执行之前先执行。\r\n- 不改变目标方法的执行流程，前置通知代码不能阻止目标方法执行。\r\n- 不改变目标方法执行的结果。\r\n\r\n*ISomeService.java - 主业务接口*\r\n```\r\npublic interface ISomeService {\r\n	// 目标方法\r\n	void doFirst();\r\n	// 目标方法\r\n	void doSecond();\r\n}\r\n```\r\n*SomeServiceImpl.java - 目标类*\r\n```\r\npublic class SomeServiceImpl implements ISomeService {\r\n\r\n	@Override\r\n	public void doFirst() {\r\n		System.out.println(\"执行doFirst()方法\");\r\n	}\r\n\r\n	@Override\r\n	public void doSecond() {\r\n		System.out.println(\"执行doSecond()方法\");\r\n	}\r\n}\r\n```\r\n*MyMethodBeforeAdvice.java - 前置通知*\r\n```\r\npublic class MyMethodBeforeAdvice implements MethodBeforeAdvice {\r\n\r\n	// 当前方法在目标方法执行之前执行，method:目标方法，args:目标方法的参数列表，target:目标对象\r\n	@Override\r\n	public void before(Method method, Object[] args, Object target) throws Throwable {\r\n		// 对于目标方法的增强代码就应该写在这里\r\n		System.out.println(\"执行前置通知方法\");\r\n	}\r\n}\r\n```\r\n*applicationContext.mxl*\r\n```\r\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<beans xmlns=\"http://www.springframework.org/schema/beans\"\r\n    xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\r\n    xsi:schemaLocation=\"\r\n        http://www.springframework.org/schema/beans \r\n        http://www.springframework.org/schema/beans/spring-beans.xsd\">\r\n\r\n    <!-- 注册目标对象 -->\r\n    <bean id=\"someService\" class=\"top.qingrang.aop01.SomeServiceImpl\"/>\r\n\r\n    <!-- 注册切面：通知 -->\r\n    <bean id=\"myAdvice\" class=\"top.qingrang.aop01.MyMethodBeforeAdvice\"/>\r\n\r\n    <!-- 生成代理对象 -->\r\n    <bean id=\"serviceProxy\" class=\"org.springframework.aop.framework.ProxyFactoryBean\">\r\n    	<!-- 指定目标对象，随便用哪个 -->\r\n    	<!-- <property name=\"targetName\" value=\"someService\"/> -->\r\n    	<property name=\"target\" ref=\"someService\"/>\r\n		\r\n    	<!-- 指定切面 -->\r\n    	<property name=\"interceptorNames\" value=\"myAdvice\"/>\r\n    </bean>\r\n</beans>\r\n```\r\n\r\n### 后置通知 AfterReturningAdvice\r\n定义后置通知，需要实现接口 AfterReturningAdvice。该接口中有一个方法 afterReturning()，会在目标方法执行之后执行。后置通知的特点：\r\n- 在目标方法执行之后执行。\r\n- 不改变目标方法的执行流程，后置通知代码不能阻止目标方法执行。\r\n- 不改变目标方法执行的结果。\r\n\r\n*SomeServiceImpl.java - 目标类*\r\n```\r\npublic class SomeServiceImpl implements ISomeService {\r\n\r\n	@Override\r\n	public void doFirst() {\r\n		System.out.println(\"执行doFirst()方法\");\r\n	}\r\n\r\n	@Override\r\n	public String doSecond() {\r\n		System.out.println(\"执行doSecond()方法\");\r\n		return \"abcde\";\r\n	}\r\n}\r\n```\r\n*MyAfterReturningAdvice.java - 后置通知*\r\n```\r\n// 后置通知：可以获取到目标方法的返回结果，但无法改变目标方法的结果\r\npublic class MyAfterReturningAdvice implements AfterReturningAdvice {\r\n	// 在目标方法执行之后执行，returnValue：目标方法的返回值\r\n	@Override\r\n	public void afterReturning(Object returnValue, Method method, Object[] args, Object target) throws Throwable {\r\n		System.out.println(\"执行后置通知方法  returnValue = \" + returnValue);\r\n		if (returnValue != null) {\r\n			returnValue = ((String) returnValue).toUpperCase();\r\n			System.out.println(\"修改过的结果  returnValue = \" + returnValue);\r\n		}\r\n	}\r\n}\r\n```\r\n### 环绕通知 MethodInterceptor\r\n定义环绕通知(在目标方法执行之前之后都会执行)，需要实现 MethodInterceptor 接口。环绕通知，也叫方法拦截器，可以在目标方法调用之前及之后做处理，可以改变目标方法的返回值，也可以改变程序执行流程。\r\n\r\n*MyMethodInterceptor.java*\r\n```\r\n// 环绕通知：可以修改目标方法的返回结果\r\npublic class MyMethodInterceptor implements MethodInterceptor {\r\n	@Override\r\n	public Object invoke(MethodInvocation invocation) throws Throwable {\r\n		System.out.println(\"执行环绕通知：目标方法执行之前\");\r\n		// 执行目标方法\r\n		Object result = invocation.proceed();\r\n		System.out.println(\"执行环绕通知：目标方法执行之后\");\r\n		if(result != null) {\r\n			result = ((String)result).toUpperCase();\r\n		}\r\n		return result;\r\n	}\r\n}\r\n```\r\n\r\n\r\n\r\n\r\n\r\n### 异常通知 ThrowsAdvice\r\n定义异常通知，需要实现 ThrowsAdvice 接口。该接口的主要作用是，在目标方法抛出异常后，根据异常的不同做出相应的处理。当该接口处理完异常后，会简单地将异常再次抛出给目标方法。\r\n\r\n不过，这个接口较为特殊，从形式上看，该接口中没有必须要实现的方法。但，这个接口却确实有必须要实现的方法 `afterThrowing()`。这个方法重载了四种形式。由于使用时，一般只使用其中一种，若要都定义到接口中，则势必要使程序员在使用时必须要实现这四个方法。这是很麻烦的。所以就将该接口定义为了标识接口（没有方法的接口）。这四个方法在打开 `ThrowsAdvice` 源码后，上侧的注释部分可以看到：\r\n![afterThrowing()](https://daily-1252869435.cos.ap-chengdu.myqcloud.com/2018-11-19-10-59-26.png)\r\n不过，在这四种形式中，常用的形式如下： `public void afterThrowing(自定义的异常类 e)` 这里的参数 e 为，与具体业务相关的用户自定义的异常类对象。容器会根据异常类型的不同，自动选择不同的该方法执行。这些方法的执行是在目标方法执行结束后执行的。其它参数则与前面两个通知中方法的参数意义相同。\r\n#### 普通异常\r\n*SomeServiceImpl.java - 目标类*\r\n```\r\n@Override\r\npublic void doFirst() {\r\n	System.out.println(\"执行doFirst()方法\" + 3 / 0);\r\n}\r\n```\r\n*MyThrowsAdvice.java - 异常通知*\r\n```\r\npublic class MyThrowsAdvice implements ThrowsAdvice {\r\n	// 当目标方法抛出与指定类型的异常具有 is-a 关系的异常时，执行当前方法\r\n	public void afterThrowing(Exception ex) {\r\n		System.out.println(\"执行异常通知方法\");\r\n	}\r\n}\r\n```\r\n*输出信息*\r\n```\r\n执行异常通知方法\r\njava.lang.ArithmeticException: / by zero\r\n	...\r\n```\r\n#### 自定义异常\r\n异常分两种：\r\n- 运行时异常，不进行处理，也可以通过编译。\r\n若一个类继承自 RunTimeException，则该异常就是运行时异常\r\n- 编译时异常(受查异常,Checked Exception)，不进行处理，将无法通过编译。\r\n若一个类继承自 Exception，则该异常就是受查异常\r\n\r\n*UserException.java*\r\n```\r\npublic class UserException extends Exception {\r\n	public UserException() {\r\n		super();\r\n	}\r\n\r\n	public UserException(String message) {\r\n		super(message);\r\n	}\r\n}\r\n```\r\n*UsernameException.java*\r\n```\r\npublic class UsernameException extends UserException {\r\n	public UsernameException() {\r\n		super();\r\n	}\r\n\r\n	public UsernameException(String message) {\r\n		super(message);\r\n	}\r\n}\r\n```\r\n*PasswordException.java*\r\n```\r\npublic class PasswordException extends UserException {\r\n	public PasswordException() {\r\n		super();\r\n	}\r\n\r\n	public PasswordException(String message) {\r\n		super(message);\r\n	}\r\n}\r\n```\r\n*MyThrowsAdvice.java - 异常通知*\r\n```\r\npublic class MyThrowsAdvice implements ThrowsAdvice {\r\n	// 当目标方法抛出 UsernameException 异常时，执行当前方法\r\n	public void afterThrowing(UsernameException ex) {\r\n		System.out.println(\"发生用户名异常 ex = \" + ex.getMessage());\r\n	}\r\n	\r\n	// 当目标方法抛出 PasswordException 异常时，执行当前方法\r\n	public void afterThrowing(PasswordException ex) {\r\n		System.out.println(\"发生密码异常 ex = \" + ex.getMessage());\r\n	}\r\n	\r\n	// 当目标方法抛出其它异常时，执行当前方法\r\n	public void afterThrowing(Exception ex) {\r\n		System.out.println(\"发生异常 ex = \" + ex.getMessage());\r\n	}\r\n}\r\n```\r\n*MyTest.java*\r\n```\r\n@Test\r\npublic void test01() throws UserException {\r\n	String resource = \"top/qingrang/aop05/applicationContext.xml\";\r\n	ApplicationContext ac = new ClassPathXmlApplicationContext(resource);\r\n	ISomeService service = (ISomeService) ac.getBean(\"serviceProxy\");\r\n	service.login(\"beijing\", \"222\");\r\n}\r\n```\r\n\r\n\r\n\r\n\r\n\r\n### 同时使用多种通知\r\n*applicationContext.mxl*\r\n```\r\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<beans xmlns=\"http://www.springframework.org/schema/beans\"\r\n    xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\r\n    xsi:schemaLocation=\"\r\n        http://www.springframework.org/schema/beans \r\n        http://www.springframework.org/schema/beans/spring-beans.xsd\">\r\n\r\n    <!-- 注册目标对象 -->\r\n    <bean id=\"someService\" class=\"top.qingrang.aop06.SomeServiceImpl\"/>\r\n\r\n    <!-- 注册切面：通知 -->\r\n    <bean id=\"myBeforeAdvice\" class=\"top.qingrang.aop06.MyMethodBeforeAdvice\"/>\r\n    <bean id=\"myAfterAdvice\" class=\"top.qingrang.aop06.MyAfterReturningAdvice\"/>\r\n\r\n    <!-- 生成代理对象 -->\r\n    <bean id=\"serviceProxy\" class=\"org.springframework.aop.framework.ProxyFactoryBean\">\r\n    	<property name=\"target\" ref=\"someService\"/>\r\n        <!-- 注入多种通知 -->\r\n    	<property name=\"interceptorNames\" value=\"myBeforeAdvice,myAfterAdvice\"/>\r\n    	<!-- <property name=\"interceptorNames\">\r\n    		<array>\r\n    			<value>myBeforeAdvice</value>\r\n    			<value>myAfterAdvice</value>\r\n    		</array>\r\n    	</property> -->\r\n    </bean>\r\n\r\n</beans>\r\n```\r\n\r\n\r\n### 无接口的 CGLIB 代理生成\r\n若不存在接口，则 ProxyFactoryBean 会自动采用 CGLIB 方式生成动态代理。\r\n*SomeService.java - 目标类*\r\n```\r\npublic class SomeService {\r\n	public void doFirst() {\r\n		System.out.println(\"执行doFirst()方法\");\r\n	}\r\n\r\n	public String doSecond() {\r\n		System.out.println(\"执行doSecond()方法\");\r\n		return \"abcde\";\r\n	}\r\n}\r\n```\r\n*MyAfterReturningAdvice.java - 后置通知*\r\n```\r\npublic class MyAfterReturningAdvice implements AfterReturningAdvice {\r\n	// 在目标方法执行之后执行，returnValue：目标方法的返回值\r\n	@Override\r\n	public void afterReturning(Object returnValue, Method method, Object[] args, Object target) throws Throwable {\r\n		System.out.println(\"执行后置通知方法  returnValue = \" + returnValue);\r\n		if (returnValue != null) {\r\n			returnValue = ((String) returnValue).toUpperCase();\r\n			System.out.println(\"修改过的结果  returnValue = \" + returnValue);\r\n		}\r\n	}\r\n}\r\n```\r\n*applicationContext.mxl*\r\n```\r\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<beans xmlns=\"http://www.springframework.org/schema/beans\"\r\n    xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\r\n    xsi:schemaLocation=\"\r\n        http://www.springframework.org/schema/beans \r\n        http://www.springframework.org/schema/beans/spring-beans.xsd\">\r\n\r\n    <!-- 注册目标对象 -->\r\n    <bean id=\"someService\" class=\"top.qingrang.aop07.SomeService\"/>\r\n    \r\n    <!-- 注册切面：通知 -->\r\n    <bean id=\"myAdvice\" class=\"top.qingrang.aop07.MyAfterReturningAdvice\"/>\r\n    \r\n    <!-- 生成代理对象 -->\r\n    <bean id=\"serviceProxy\" class=\"org.springframework.aop.framework.ProxyFactoryBean\">\r\n    	<property name=\"target\" ref=\"someService\"/>\r\n    	<property name=\"interceptorNames\" value=\"myAdvice\"/>\r\n    </bean>\r\n\r\n</beans>\r\n```\r\n*MyTest.java*\r\n```\r\n@Test\r\npublic void test01() {\r\n	String resource = \"top/qingrang/aop07/applicationContext.xml\";\r\n	ApplicationContext ac = new ClassPathXmlApplicationContext(resource);\r\n	SomeService service = (SomeService) ac.getBean(\"serviceProxy\");\r\n	service.doFirst();\r\n	System.out.println(\"==================\");\r\n	String result = service.doSecond();\r\n	System.out.println(result);\r\n}\r\n```\r\n### 有接口的 CGLIB 代理生成 - proxyTargetClass 属性\r\n若存在接口，但又需要使用 CGLIB 生成代理对象，此时，只需要在配置文件中增加一个 proxyTargetClass 属性设置，用于指定强制使用 CGLIB 代理机制。\r\n\r\n![CGLIB 代理](https://daily-1252869435.cos.ap-chengdu.myqcloud.com/2018-11-19-12-44-48.png)\r\n也可指定 optimize（优化）的值为 true，强制使用 CGLIB 代理机制。\r\n![optimize（优化）](https://daily-1252869435.cos.ap-chengdu.myqcloud.com/2018-11-19-12-45-22.png)\r\n查看后台运行情况，可以看到代理生成使用的是 CGLIB 代理机制。\r\n![后台运行情况](https://daily-1252869435.cos.ap-chengdu.myqcloud.com/2018-11-19-12-45-57.png)\r\n\r\n\r\n## 顾问 Advisor\r\n通知（Advice）是 Spring 提供的一种切面（Aspect）。但其功能过于简单：只能将切面织入到目标类的所有目标方法中， 无法完成将切面织入到指定目标方法中。\r\n\r\n顾问（Advisor）是 Spring 提供的另一种切面。其可以完成更为复杂的切面织入功能。`PointcutAdvisor(切入点顾问)` 是顾问的一种， 可以指定具体的切入点。 顾问将通知进行了包装，会根据不同的通知类型，在不同的时间点，将切面织入到不同的切入点。\r\n\r\nPointcutAdvisor 接口有两个较为常用的实现类：\r\n- NameMatchMethodPointcutAdvisor 名称匹配方法切入点顾问\r\n- RegexpMethodPointcutAdvisor 正则表达式匹配方法切入点顾问\r\n\r\n### 名称匹配方法切入点顾问\r\nNameMatchMethodPointcutAdvisor，即名称匹配方法切入点顾问。容器可根据配置文件中指定的方法名来设置切入点。\r\n\r\n`<property name=\"mappedNames\"/>`\r\n\r\n*ISomeService.java*\r\n```\r\npublic interface ISomeService {\r\n	// 目标方法\r\n	void doFirst();\r\n	// 目标方法\r\n	String doSecond();\r\n	// 目标方法\r\n	void doThird();\r\n}\r\n```\r\n*SomeServiceImpl.java*\r\n```\r\npublic class SomeServiceImpl implements ISomeService {\r\n	@Override\r\n	public void doFirst() {\r\n		System.out.println(\"执行doFirst()方法\");\r\n	}\r\n\r\n	@Override\r\n	public String doSecond() {\r\n		System.out.println(\"执行doSecond()方法\");\r\n		return \"abcde\";\r\n	}\r\n\r\n	@Override\r\n	public void doThird() {\r\n		System.out.println(\"执行doThird()方法\");\r\n	}\r\n}\r\n```\r\n*MyAfterReturningAdvice.java*\r\n```\r\npublic class MyAfterReturningAdvice implements AfterReturningAdvice {\r\n	// 在目标方法执行之后执行，returnValue：目标方法的返回值\r\n	@Override\r\n	public void afterReturning(Object returnValue, Method method, Object[] args, Object target) throws Throwable {\r\n		System.out.println(\"执行后置通知方法  returnValue = \" + returnValue);\r\n	}\r\n}\r\n```\r\n*applicationContext.mxl*\r\n```\r\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<beans xmlns=\"http://www.springframework.org/schema/beans\"\r\n    xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\r\n    xsi:schemaLocation=\"\r\n        http://www.springframework.org/schema/beans \r\n        http://www.springframework.org/schema/beans/spring-beans.xsd\">\r\n\r\n    <!-- 注册目标对象 -->\r\n    <bean id=\"someService\" class=\"top.qingrang.aop09.SomeServiceImpl\"/>\r\n    \r\n    <!-- 注册切面：通知 -->\r\n    <bean id=\"myAdvice\" class=\"top.qingrang.aop09.MyAfterReturningAdvice\"/>\r\n    \r\n    <!-- 注册切面：顾问 -->\r\n    <bean id=\"myAdvisor\" class=\"org.springframework.aop.support.NameMatchMethodPointcutAdvisor\">\r\n    	<property name=\"advice\" ref=\"myAdvice\"/>\r\n    	<!-- 指定切入点：这里匹配的对象是简单方法名 -->\r\n    	<!-- <property name=\"mappedName\" value=\"doFirst\"/> -->\r\n    	 <property name=\"mappedNames\" value=\"doFirst,doSecond\"/>\r\n        <!-- 使用通配符 -->\r\n    	<!--<property name=\"mappedNames\" value=\"*ir*\"/>-->\r\n    </bean>\r\n    \r\n    <!-- 生成代理对象 -->\r\n    <bean id=\"serviceProxy\" class=\"org.springframework.aop.framework.ProxyFactoryBean\">\r\n    	<property name=\"target\" ref=\"someService\"/>\r\n    	<property name=\"interceptorNames\" value=\"myAdvisor\"/>\r\n    </bean>\r\n\r\n</beans>\r\n```\r\n*Test.java - 测试*\r\n```\r\n@Test\r\npublic void test01() {\r\n	// 创建容器对象，加载Spring配置文件\r\n	String resource = \"top/qingrang/aop09/applicationContext.xml\";\r\n	ApplicationContext ac = new ClassPathXmlApplicationContext(resource);\r\n	ISomeService service = (ISomeService) ac.getBean(\"serviceProxy\");\r\n	service.doFirst();\r\n	System.out.println(\"==================\");\r\n	service.doSecond();\r\n	System.out.println(\"==================\");\r\n	service.doThird();\r\n}\r\n```\r\n*输出信息*\r\n```\r\n执行doFirst()方法\r\n执行后置通知方法  returnValue = null\r\n==================\r\n执行doSecond()方法\r\n执行后置通知方法  returnValue = abcde\r\n==================\r\n执行doThird()方法\r\n```\r\n### 正则表达式方法切入点顾问\r\nRegexpMethodPointcutAdvisor，即正则表达式方法顾问。容器可根据正则表达式来设置切入点。注意，与正则表达式进行匹配的对象是接口中的方法名，而非目标类（接口的实现类）的方法名。\r\n\r\n`<property name=\"pattern\"/>`\r\n\r\n这里的正则表达式常用的运算符有三个，如下表：\r\n\r\n|运算符|意义|\r\n|-|-|\r\n|.|表示任意单个字符|\r\n|+|表示前一个字符出现一次或多次|\r\n|*|表示前一个字符出现零次或多次|\r\n\r\n*applicationContext.mxl*\r\n```\r\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<beans xmlns=\"http://www.springframework.org/schema/beans\"\r\n    xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\r\n    xsi:schemaLocation=\"\r\n        http://www.springframework.org/schema/beans \r\n        http://www.springframework.org/schema/beans/spring-beans.xsd\">\r\n\r\n    <!-- 注册目标对象 -->\r\n    <bean id=\"someService\" class=\"top.qingrang.aop10.SomeServiceImpl\"/>\r\n\r\n    <!-- 注册切面：通知 -->\r\n    <bean id=\"myAdvice\" class=\"top.qingrang.aop10.MyAfterReturningAdvice\"/>\r\n\r\n    <!-- 注册切面：顾问 -->\r\n    <bean id=\"myAdvisor\" class=\"org.springframework.aop.support.RegexpMethodPointcutAdvisor\">\r\n    	<property name=\"advice\" ref=\"myAdvice\"/>\r\n    	<!-- 这里的正则表达式匹配的对象是「全限定性方法名」 -->\r\n        <!-- 全限定性方法名：com.bjpowernode.aop10.ISomeService.doFirst -->\r\n    	<!-- <property name=\"pattern\" value=\".*doFirst\"/> -->\r\n    	<!-- <property name=\"patterns\" value=\".*doFirst,.*doSecond\"/> -->\r\n    	<!-- <property name=\"pattern\" value=\".*doFirst|.*doSecond\"/> -->\r\n    	<property name=\"pattern\" value=\".*S.*\"/>\r\n    </bean>\r\n\r\n    <!-- 生成代理对象 -->\r\n    <bean id=\"serviceProxy\" class=\"org.springframework.aop.framework.ProxyFactoryBean\">\r\n    	<property name=\"target\" ref=\"someService\"/>\r\n    	<property name=\"interceptorNames\" value=\"myAdvisor\"/>\r\n    </bean>\r\n\r\n</beans>\r\n```\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n',`groups`='Java',`is_show`=1,`publish`=1,`summary`='',`gmt_modified`='2018-11-19'  WHERE  `id` = 250 [ RunTime:0.001114s ]
[ sql ] [ SQL ] SELECT COUNT(*) AS tp_count FROM `note` WHERE  `groups` = 'Java' LIMIT 1 [ RunTime:0.001357s ]
[ sql ] [ SQL ] UPDATE `groups`  SET `g_count`=21  WHERE  `groups` = 'Java' [ RunTime:0.000416s ]
[ sql ] [ SQL ] SELECT COUNT(*) AS tp_count FROM `note` WHERE  `groups` = 'Java' LIMIT 1 [ RunTime:0.001269s ]
[ sql ] [ SQL ] UPDATE `groups`  SET `g_count`=21  WHERE  `groups` = 'Java' [ RunTime:0.000419s ]
---------------------------------------------------------------
[ 2018-11-19T21:01:08+08:00 ] 74.120.168.12 74.120.168.12 GET /daily/admin/note/shownote/id/250.html
[ info ] qingrang.top/daily/admin/note/shownote/id/250.html [运行时间：0.051850s][吞吐率：19.29req/s] [内存消耗：2,019.72kb] [文件加载：55]
[ info ] [ LANG ] /var/www/html/daily/thinkphp/lang/zh-cn.php
[ info ] [ ROUTE ] array (
  'type' => 'module',
  'module' => 
  array (
    0 => 'admin',
    1 => 'note',
    2 => 'shownote',
  ),
)
[ info ] [ HEADER ] array (
  'host' => 'qingrang.top',
  'cache-control' => 'max-age=0',
  'upgrade-insecure-requests' => '1',
  'user-agent' => 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/70.0.3538.102 Safari/537.36',
  'accept' => 'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8',
  'referer' => 'http://qingrang.top/daily/admin/note/editnote/id/250.html',
  'accept-encoding' => 'gzip, deflate',
  'accept-language' => 'zh-CN,zh;q=0.9,la;q=0.8,en;q=0.7,lb;q=0.6',
  'cookie' => 'Hm_lvt_1769181352e9adc950166aada465644e=1541082864,1541122974,1541171416,1542098176; PHPSESSID=hg5qu5mntv21cu5j05evi6l7i2',
  'connection' => 'close',
)
[ info ] [ PARAM ] array (
  'id' => '250',
)
[ info ] [ SESSION ] INIT array (
  'id' => '',
  'var_session_id' => '',
  'prefix' => 'think',
  'type' => '',
  'auto_start' => true,
)
[ info ] [ RUN ] app\admin\controller\Note->showNote[ /var/www/html/daily/application/admin/controller/Note.php ]
[ info ] [ DB ] INIT mysql
[ info ] [ VIEW ] /var/www/html/daily/application/admin/view/note/shownote.html [ array (
  0 => 'note',
  1 => 'groups',
) ]
[ info ] [ LOG ] INIT File
[ sql ] [ DB ] CONNECT:[ UseTime:0.000449s ] mysql:host=74.120.168.12;dbname=diary;charset=utf8
[ sql ] [ SQL ] SHOW COLUMNS FROM `note` [ RunTime:0.001368s ]
[ sql ] [ SQL ] SELECT * FROM `note` WHERE  `id` = 250 LIMIT 1 [ RunTime:0.000525s ]
[ sql ] [ SQL ] SHOW COLUMNS FROM `groups` [ RunTime:0.000997s ]
[ sql ] [ SQL ] SELECT * FROM `groups` [ RunTime:0.000277s ]
---------------------------------------------------------------
[ 2018-11-19T21:03:30+08:00 ] 74.120.168.12 74.120.168.12 GET /daily/admin/note/newedit.html
[ info ] qingrang.top/daily/admin/note/newedit.html [运行时间：0.049613s][吞吐率：20.16req/s] [内存消耗：2,021.45kb] [文件加载：56]
[ info ] [ LANG ] /var/www/html/daily/thinkphp/lang/zh-cn.php
[ info ] [ ROUTE ] array (
  'type' => 'module',
  'module' => 
  array (
    0 => 'admin',
    1 => 'note',
    2 => 'newedit',
  ),
)
[ info ] [ HEADER ] array (
  'host' => 'qingrang.top',
  'upgrade-insecure-requests' => '1',
  'user-agent' => 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/70.0.3538.102 Safari/537.36',
  'accept' => 'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8',
  'referer' => 'http://qingrang.top/daily/admin/note',
  'accept-encoding' => 'gzip, deflate',
  'accept-language' => 'zh-CN,zh;q=0.9,la;q=0.8,en;q=0.7,lb;q=0.6',
  'cookie' => 'Hm_lvt_1769181352e9adc950166aada465644e=1541082864,1541122974,1541171416,1542098176; PHPSESSID=hg5qu5mntv21cu5j05evi6l7i2',
  'connection' => 'close',
)
[ info ] [ PARAM ] array (
)
[ info ] [ SESSION ] INIT array (
  'id' => '',
  'var_session_id' => '',
  'prefix' => 'think',
  'type' => '',
  'auto_start' => true,
)
[ info ] [ RUN ] app\admin\controller\Note->newEdit[ /var/www/html/daily/application/admin/controller/Note.php ]
[ info ] [ DB ] INIT mysql
[ info ] [ VIEW ] /var/www/html/daily/application/admin/view/note/newedit.html [ array (
  0 => 'groups',
) ]
[ info ] [ LOG ] INIT File
[ sql ] [ DB ] CONNECT:[ UseTime:0.000559s ] mysql:host=74.120.168.12;dbname=diary;charset=utf8
[ sql ] [ SQL ] SHOW COLUMNS FROM `groups` [ RunTime:0.001269s ]
[ sql ] [ SQL ] SELECT * FROM `groups` [ RunTime:0.000320s ]
---------------------------------------------------------------
[ 2018-11-19T21:09:44+08:00 ] 74.120.168.12 74.120.168.12 POST /daily/admin/note/addnote.html
[ info ] qingrang.top/daily/admin/note/addnote.html [运行时间：0.058103s][吞吐率：17.21req/s] [内存消耗：2,064.17kb] [文件加载：55]
[ info ] [ LANG ] /var/www/html/daily/thinkphp/lang/zh-cn.php
[ info ] [ ROUTE ] array (
  'type' => 'module',
  'module' => 
  array (
    0 => 'admin',
    1 => 'note',
    2 => 'addnote',
  ),
)
[ info ] [ HEADER ] array (
  'host' => 'qingrang.top',
  'content-length' => '40755',
  'cache-control' => 'max-age=0',
  'origin' => 'http://qingrang.top',
  'upgrade-insecure-requests' => '1',
  'content-type' => 'application/x-www-form-urlencoded',
  'user-agent' => 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/70.0.3538.102 Safari/537.36',
  'accept' => 'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8',
  'referer' => 'http://qingrang.top/daily/admin/note/newedit.html',
  'accept-encoding' => 'gzip, deflate',
  'accept-language' => 'zh-CN,zh;q=0.9,la;q=0.8,en;q=0.7,lb;q=0.6',
  'cookie' => 'Hm_lvt_1769181352e9adc950166aada465644e=1541082864,1541122974,1541171416,1542098176; PHPSESSID=hg5qu5mntv21cu5j05evi6l7i2',
  'connection' => 'close',
)
[ info ] [ PARAM ] array (
  'groups' => 'BookReview',
  'content' => '# 外婆的道歉信
*弗雷德里克·巴克曼*
> 添加于 2018 年 11 月 4 日

## 书摘
- “我不傻，外婆，”她小声说，“我知道你今晚做的一切，都是为了让我忘记白天在学校发生的事。” 外婆踢着路面上的碎石，清了清喉咙。“我不希望你因为围巾的事记住今天，所以，我想与其那样，倒不如因为外婆闯进一家动物园而记住今天这个日子……”
- 改写记忆是一种很不错的超能力。
- “如果你摆脱不了坏事，就必须用更多‘好料’去盖过它。”
- 外婆就是这么形容谎言的——真相的另一种版本。
- “别大惊小怪的！老早之前人们就开始抽烟了，到现在为止，还是有许多健康得不得了的孩子出生。你这一代人忘记了，在没有过敏测试和其他什么狗屁玩意儿之前，人类已经活了上千年，直到你们出现，开始觉得自己如此重要。人类还住在洞穴里时，你以为他们洗猛犸皮的时候，会用到什么三十二度温水机洗模式吗？”
- 每当妈妈和外婆开始争吵，爱莎就调大音量，假装她们都是无声电影里的演员。爱莎很小就学会，如果自己选择音轨，生活就会变得好过些。
- 外婆总说，她的裙子熨得过分平整了。“如果你是那女人身上的衣服，你会紧张兮兮生怕被弄皱。”
- 布里特-玛丽和肯特最不喜欢的便是民主流程中的“民主”部分。
- 拥有一位外婆就像拥有一整支军队。外孙或外孙女因此获得一项特权：不管在什么情况下，都有人站在你这边，即使是你的错。事实上，特别是你错的时候。
- 脑子迟钝的人总是说脑子灵敏的人有注意力问题。“蠢货们不明白，在他们想清楚一件事之前，聪明人早就想明白并开始想下一件事了。所以蠢货总是感到害怕，有攻击性。没有什么比一个聪明姑娘更让他们害怕的了。”
- 爱莎痛恨星期一，星期一早上的学校是最糟糕的，因为那些喜欢追赶你的人憋了整个周末无人可追。星期一，爱莎储物柜里的字条也是最刻薄的。这或许是隐身能力不管用的另一个原因。
- “如果可以，你应该自己选择战斗与否，但如果战斗找上了门，那就狠狠地对着他们的下面来一脚吧！”外婆曾这样说。爱莎照做了。虽然她讨厌暴力，但她很擅长打架，因为她进行过大量练习。这也是为什么对方需要这么多人来追她。
- 没被追捕过的人总觉得一定会有一个原因：“他们不会无缘无故追着你跑，不是吗？你一定干了什么事惹到他们。”这话说得好像“压迫”这件事天生就是这么个原理。 试图向这种人解释是毫无意义的，就像跟佩戴兔脚（据说能带来好运）的人解释——如果兔脚真的那么灵验，那它们应该还长在兔子的身上——一样徒劳。
- “只有与众不同的人才能改变世界，”外婆曾经这么说，“平庸的人什么屁事都改变不了。”
- “我是个医生好吗？自从干了这行，我可不会允许自己有这种奢侈——选择我要救的对象。”
- 那是你能梦见的最可怕的事，被你能想象到的最邪恶的东西操控，以你想都不敢想的数量一次次重演。”
- “因为当你非常爱某个人时，很难学会和别人分享她。”
- 爱莎的妈妈从没拥有过自己的妈妈，因为外婆总是在别处帮助他人。
- 最好的故事从来不是完全真实的，也不是完全虚构的。
- “永远别惹比你闲的人。”
- 如果你不喜欢别人，那他们就伤害不到你。
- “死亡最强大的力量不在于它能让人死去，而在于让留下来的人不想再活着。”
- 恐惧就像是香烟，外婆说，困难的不是戒掉，而是不要开始。
- 有时候很难跟不认识的人分担悲痛。
- 人必须有信仰，外婆总是那么说。“相信什么并不重要，但你得愿意去相信，才能明白那些故事。” 也许到了最后，这就是一切的意义。
- 如果你成为一名警官，就不能选择自己保护的对象。你必须努力保护所有人。”
- “因为小时候，我什么都怕。她告诉我，应该去做我最害怕的事情。我应该嘲笑恐惧。”
- “这是个游戏。他假装偷了你的鼻子。”
- “这个国家愿意花数十亿在武器和战斗机上，但当这些经历过战争的男孩回家后，却没有人哪怕花五分钟聆听他们。”
- 又下雪了，爱莎决定，即使她喜欢的人以前是个混蛋，她还是得学会继续喜欢他们。如果你一定要取消所有那些曾经是混蛋的人的资格，那你很快就没人可喜欢了。
- “事实上，我的想象力很丰富。特别丰富。肯特总说他要跟德国人吃饭，或者飞机因为下雪延误了，或者他要顺路去办公室一趟。而我假装我相信了。我装得太好，连自己都相信了。”
- 《灰姑娘》里的邪恶继母出场时，布里特-玛丽悄悄站起身，拉直裙子上的一道皱褶，走去玄关，开始哭泣，爱莎跟着她。 然后她们一起坐在箱子上，吃着巧克力圣诞老人。 因为，吃着巧克力圣诞老人时，虽然你还是会伤心，但会困难得多得多。
- “我是说，你相不相信……天堂……什么的。”爱莎小声说。 阿尔夫喝了口咖啡，想了想。 “这事太复杂了。我是说，从逻辑上来说，天堂一定在没那么多人的地方。”他最后说。 爱莎想了想，意识到这件事的逻辑问题。对爱莎来说，天堂说到底就是外婆所在的地方，但对布里特-玛丽来说，也许天堂取决于外婆不在那里。
- 当可怕的事情发生后，人们总会想：“如果我当时没有……”不久之后，坐上奥迪的那一刻，就将成为这样的时刻。
- 她感觉爸爸轻柔地将她从地上抱起，她大声地喊，让呜嘶在去不眠大陆的路上也能听见她的声音：“你不能死！你听见了吗？！所有圣诞故事都有圆满的结局，所以你不能死！”
- 生命真正的陷阱在于几乎没有人是彻头彻尾的混蛋，也几乎没有人从未做过混蛋事。生命的难处就在于尽可能多地待在“不是混蛋”这一侧。
- “有时候当一个成年人是件很复杂的事情。”
- “很老的呜嘶。已经很累了，爱莎。”
- 一个王国是由住在里面的人所组成的。
- 他们努力地学习如何自处，如何生活，而不仅仅是生存。
',
  'test-editormd-html-code' => '<h1 id="h1-u5916u5A46u7684u9053u6B49u4FE1"><a name="外婆的道歉信" class="reference-link"></a><span class="header-link octicon octicon-link"></span>外婆的道歉信</h1><p><em>弗雷德里克·巴克曼</em></p>
<blockquote>
<p>添加于 2018 年 11 月 4 日</p>
</blockquote>
<h2 id="h2-u4E66u6458"><a name="书摘" class="reference-link"></a><span class="header-link octicon octicon-link"></span>书摘</h2><ul>
<li>“我不傻，外婆，”她小声说，“我知道你今晚做的一切，都是为了让我忘记白天在学校发生的事。” 外婆踢着路面上的碎石，清了清喉咙。“我不希望你因为围巾的事记住今天，所以，我想与其那样，倒不如因为外婆闯进一家动物园而记住今天这个日子……”</li><li>改写记忆是一种很不错的超能力。</li><li>“如果你摆脱不了坏事，就必须用更多‘好料’去盖过它。”</li><li>外婆就是这么形容谎言的——真相的另一种版本。</li><li>“别大惊小怪的！老早之前人们就开始抽烟了，到现在为止，还是有许多健康得不得了的孩子出生。你这一代人忘记了，在没有过敏测试和其他什么狗屁玩意儿之前，人类已经活了上千年，直到你们出现，开始觉得自己如此重要。人类还住在洞穴里时，你以为他们洗猛犸皮的时候，会用到什么三十二度温水机洗模式吗？”</li><li>每当妈妈和外婆开始争吵，爱莎就调大音量，假装她们都是无声电影里的演员。爱莎很小就学会，如果自己选择音轨，生活就会变得好过些。</li><li>外婆总说，她的裙子熨得过分平整了。“如果你是那女人身上的衣服，你会紧张兮兮生怕被弄皱。”</li><li>布里特-玛丽和肯特最不喜欢的便是民主流程中的“民主”部分。</li><li>拥有一位外婆就像拥有一整支军队。外孙或外孙女因此获得一项特权：不管在什么情况下，都有人站在你这边，即使是你的错。事实上，特别是你错的时候。</li><li>脑子迟钝的人总是说脑子灵敏的人有注意力问题。“蠢货们不明白，在他们想清楚一件事之前，聪明人早就想明白并开始想下一件事了。所以蠢货总是感到害怕，有攻击性。没有什么比一个聪明姑娘更让他们害怕的了。”</li><li>爱莎痛恨星期一，星期一早上的学校是最糟糕的，因为那些喜欢追赶你的人憋了整个周末无人可追。星期一，爱莎储物柜里的字条也是最刻薄的。这或许是隐身能力不管用的另一个原因。</li><li>“如果可以，你应该自己选择战斗与否，但如果战斗找上了门，那就狠狠地对着他们的下面来一脚吧！”外婆曾这样说。爱莎照做了。虽然她讨厌暴力，但她很擅长打架，因为她进行过大量练习。这也是为什么对方需要这么多人来追她。</li><li>没被追捕过的人总觉得一定会有一个原因：“他们不会无缘无故追着你跑，不是吗？你一定干了什么事惹到他们。”这话说得好像“压迫”这件事天生就是这么个原理。 试图向这种人解释是毫无意义的，就像跟佩戴兔脚（据说能带来好运）的人解释——如果兔脚真的那么灵验，那它们应该还长在兔子的身上——一样徒劳。</li><li>“只有与众不同的人才能改变世界，”外婆曾经这么说，“平庸的人什么屁事都改变不了。”</li><li>“我是个医生好吗？自从干了这行，我可不会允许自己有这种奢侈——选择我要救的对象。”</li><li>那是你能梦见的最可怕的事，被你能想象到的最邪恶的东西操控，以你想都不敢想的数量一次次重演。”</li><li>“因为当你非常爱某个人时，很难学会和别人分享她。”</li><li>爱莎的妈妈从没拥有过自己的妈妈，因为外婆总是在别处帮助他人。</li><li>最好的故事从来不是完全真实的，也不是完全虚构的。</li><li>“永远别惹比你闲的人。”</li><li>如果你不喜欢别人，那他们就伤害不到你。</li><li>“死亡最强大的力量不在于它能让人死去，而在于让留下来的人不想再活着。”</li><li>恐惧就像是香烟，外婆说，困难的不是戒掉，而是不要开始。</li><li>有时候很难跟不认识的人分担悲痛。</li><li>人必须有信仰，外婆总是那么说。“相信什么并不重要，但你得愿意去相信，才能明白那些故事。” 也许到了最后，这就是一切的意义。</li><li>如果你成为一名警官，就不能选择自己保护的对象。你必须努力保护所有人。”</li><li>“因为小时候，我什么都怕。她告诉我，应该去做我最害怕的事情。我应该嘲笑恐惧。”</li><li>“这是个游戏。他假装偷了你的鼻子。”</li><li>“这个国家愿意花数十亿在武器和战斗机上，但当这些经历过战争的男孩回家后，却没有人哪怕花五分钟聆听他们。”</li><li>又下雪了，爱莎决定，即使她喜欢的人以前是个混蛋，她还是得学会继续喜欢他们。如果你一定要取消所有那些曾经是混蛋的人的资格，那你很快就没人可喜欢了。</li><li>“事实上，我的想象力很丰富。特别丰富。肯特总说他要跟德国人吃饭，或者飞机因为下雪延误了，或者他要顺路去办公室一趟。而我假装我相信了。我装得太好，连自己都相信了。”</li><li>《灰姑娘》里的邪恶继母出场时，布里特-玛丽悄悄站起身，拉直裙子上的一道皱褶，走去玄关，开始哭泣，爱莎跟着她。 然后她们一起坐在箱子上，吃着巧克力圣诞老人。 因为，吃着巧克力圣诞老人时，虽然你还是会伤心，但会困难得多得多。</li><li>“我是说，你相不相信……天堂……什么的。”爱莎小声说。 阿尔夫喝了口咖啡，想了想。 “这事太复杂了。我是说，从逻辑上来说，天堂一定在没那么多人的地方。”他最后说。 爱莎想了想，意识到这件事的逻辑问题。对爱莎来说，天堂说到底就是外婆所在的地方，但对布里特-玛丽来说，也许天堂取决于外婆不在那里。</li><li>当可怕的事情发生后，人们总会想：“如果我当时没有……”不久之后，坐上奥迪的那一刻，就将成为这样的时刻。</li><li>她感觉爸爸轻柔地将她从地上抱起，她大声地喊，让呜嘶在去不眠大陆的路上也能听见她的声音：“你不能死！你听见了吗？！所有圣诞故事都有圆满的结局，所以你不能死！”</li><li>生命真正的陷阱在于几乎没有人是彻头彻尾的混蛋，也几乎没有人从未做过混蛋事。生命的难处就在于尽可能多地待在“不是混蛋”这一侧。</li><li>“有时候当一个成年人是件很复杂的事情。”</li><li>“很老的呜嘶。已经很累了，爱莎。”</li><li>一个王国是由住在里面的人所组成的。</li><li>他们努力地学习如何自处，如何生活，而不仅仅是生存。</li></ul>
',
)
[ info ] [ SESSION ] INIT array (
  'id' => '',
  'var_session_id' => '',
  'prefix' => 'think',
  'type' => '',
  'auto_start' => true,
)
[ info ] [ RUN ] app\admin\controller\Note->addNote[ /var/www/html/daily/application/admin/controller/Note.php ]
[ info ] [ DB ] INIT mysql
[ info ] [ LOG ] INIT File
[ sql ] [ DB ] CONNECT:[ UseTime:0.000763s ] mysql:host=74.120.168.12;dbname=diary;charset=utf8
[ sql ] [ SQL ] SHOW COLUMNS FROM `groups` [ RunTime:0.001574s ]
[ sql ] [ SQL ] SELECT `parent_id` FROM `groups` WHERE  `groups` = 'BookReview' LIMIT 1 [ RunTime:0.000358s ]
[ sql ] [ SQL ] SELECT `groups` FROM `groups` WHERE  `id` = 0 LIMIT 1 [ RunTime:0.000323s ]
[ sql ] [ SQL ] SELECT `id` FROM `groups` WHERE  `groups` = 'BookReview' LIMIT 1 [ RunTime:0.000284s ]
[ sql ] [ SQL ] SHOW COLUMNS FROM `note` [ RunTime:0.001182s ]
[ sql ] [ SQL ] INSERT INTO `note` (`title` , `content` , `groups` , `p_id` , `date`) VALUES ('外婆的道歉信\r' , '# 外婆的道歉信\r\n*弗雷德里克·巴克曼*\r\n> 添加于 2018 年 11 月 4 日\r\n\r\n## 书摘\r\n- “我不傻，外婆，”她小声说，“我知道你今晚做的一切，都是为了让我忘记白天在学校发生的事。” 外婆踢着路面上的碎石，清了清喉咙。“我不希望你因为围巾的事记住今天，所以，我想与其那样，倒不如因为外婆闯进一家动物园而记住今天这个日子……”\r\n- 改写记忆是一种很不错的超能力。\r\n- “如果你摆脱不了坏事，就必须用更多‘好料’去盖过它。”\r\n- 外婆就是这么形容谎言的——真相的另一种版本。\r\n- “别大惊小怪的！老早之前人们就开始抽烟了，到现在为止，还是有许多健康得不得了的孩子出生。你这一代人忘记了，在没有过敏测试和其他什么狗屁玩意儿之前，人类已经活了上千年，直到你们出现，开始觉得自己如此重要。人类还住在洞穴里时，你以为他们洗猛犸皮的时候，会用到什么三十二度温水机洗模式吗？”\r\n- 每当妈妈和外婆开始争吵，爱莎就调大音量，假装她们都是无声电影里的演员。爱莎很小就学会，如果自己选择音轨，生活就会变得好过些。\r\n- 外婆总说，她的裙子熨得过分平整了。“如果你是那女人身上的衣服，你会紧张兮兮生怕被弄皱。”\r\n- 布里特-玛丽和肯特最不喜欢的便是民主流程中的“民主”部分。\r\n- 拥有一位外婆就像拥有一整支军队。外孙或外孙女因此获得一项特权：不管在什么情况下，都有人站在你这边，即使是你的错。事实上，特别是你错的时候。\r\n- 脑子迟钝的人总是说脑子灵敏的人有注意力问题。“蠢货们不明白，在他们想清楚一件事之前，聪明人早就想明白并开始想下一件事了。所以蠢货总是感到害怕，有攻击性。没有什么比一个聪明姑娘更让他们害怕的了。”\r\n- 爱莎痛恨星期一，星期一早上的学校是最糟糕的，因为那些喜欢追赶你的人憋了整个周末无人可追。星期一，爱莎储物柜里的字条也是最刻薄的。这或许是隐身能力不管用的另一个原因。\r\n- “如果可以，你应该自己选择战斗与否，但如果战斗找上了门，那就狠狠地对着他们的下面来一脚吧！”外婆曾这样说。爱莎照做了。虽然她讨厌暴力，但她很擅长打架，因为她进行过大量练习。这也是为什么对方需要这么多人来追她。\r\n- 没被追捕过的人总觉得一定会有一个原因：“他们不会无缘无故追着你跑，不是吗？你一定干了什么事惹到他们。”这话说得好像“压迫”这件事天生就是这么个原理。 试图向这种人解释是毫无意义的，就像跟佩戴兔脚（据说能带来好运）的人解释——如果兔脚真的那么灵验，那它们应该还长在兔子的身上——一样徒劳。\r\n- “只有与众不同的人才能改变世界，”外婆曾经这么说，“平庸的人什么屁事都改变不了。”\r\n- “我是个医生好吗？自从干了这行，我可不会允许自己有这种奢侈——选择我要救的对象。”\r\n- 那是你能梦见的最可怕的事，被你能想象到的最邪恶的东西操控，以你想都不敢想的数量一次次重演。”\r\n- “因为当你非常爱某个人时，很难学会和别人分享她。”\r\n- 爱莎的妈妈从没拥有过自己的妈妈，因为外婆总是在别处帮助他人。\r\n- 最好的故事从来不是完全真实的，也不是完全虚构的。\r\n- “永远别惹比你闲的人。”\r\n- 如果你不喜欢别人，那他们就伤害不到你。\r\n- “死亡最强大的力量不在于它能让人死去，而在于让留下来的人不想再活着。”\r\n- 恐惧就像是香烟，外婆说，困难的不是戒掉，而是不要开始。\r\n- 有时候很难跟不认识的人分担悲痛。\r\n- 人必须有信仰，外婆总是那么说。“相信什么并不重要，但你得愿意去相信，才能明白那些故事。” 也许到了最后，这就是一切的意义。\r\n- 如果你成为一名警官，就不能选择自己保护的对象。你必须努力保护所有人。”\r\n- “因为小时候，我什么都怕。她告诉我，应该去做我最害怕的事情。我应该嘲笑恐惧。”\r\n- “这是个游戏。他假装偷了你的鼻子。”\r\n- “这个国家愿意花数十亿在武器和战斗机上，但当这些经历过战争的男孩回家后，却没有人哪怕花五分钟聆听他们。”\r\n- 又下雪了，爱莎决定，即使她喜欢的人以前是个混蛋，她还是得学会继续喜欢他们。如果你一定要取消所有那些曾经是混蛋的人的资格，那你很快就没人可喜欢了。\r\n- “事实上，我的想象力很丰富。特别丰富。肯特总说他要跟德国人吃饭，或者飞机因为下雪延误了，或者他要顺路去办公室一趟。而我假装我相信了。我装得太好，连自己都相信了。”\r\n- 《灰姑娘》里的邪恶继母出场时，布里特-玛丽悄悄站起身，拉直裙子上的一道皱褶，走去玄关，开始哭泣，爱莎跟着她。 然后她们一起坐在箱子上，吃着巧克力圣诞老人。 因为，吃着巧克力圣诞老人时，虽然你还是会伤心，但会困难得多得多。\r\n- “我是说，你相不相信……天堂……什么的。”爱莎小声说。 阿尔夫喝了口咖啡，想了想。 “这事太复杂了。我是说，从逻辑上来说，天堂一定在没那么多人的地方。”他最后说。 爱莎想了想，意识到这件事的逻辑问题。对爱莎来说，天堂说到底就是外婆所在的地方，但对布里特-玛丽来说，也许天堂取决于外婆不在那里。\r\n- 当可怕的事情发生后，人们总会想：“如果我当时没有……”不久之后，坐上奥迪的那一刻，就将成为这样的时刻。\r\n- 她感觉爸爸轻柔地将她从地上抱起，她大声地喊，让呜嘶在去不眠大陆的路上也能听见她的声音：“你不能死！你听见了吗？！所有圣诞故事都有圆满的结局，所以你不能死！”\r\n- 生命真正的陷阱在于几乎没有人是彻头彻尾的混蛋，也几乎没有人从未做过混蛋事。生命的难处就在于尽可能多地待在“不是混蛋”这一侧。\r\n- “有时候当一个成年人是件很复杂的事情。”\r\n- “很老的呜嘶。已经很累了，爱莎。”\r\n- 一个王国是由住在里面的人所组成的。\r\n- 他们努力地学习如何自处，如何生活，而不仅仅是生存。\r\n' , 'BookReview' , 21 , '2018-11-19') [ RunTime:0.000629s ]
[ sql ] [ SQL ] SELECT COUNT(*) AS tp_count FROM `note` WHERE  `groups` = 'BookReview' LIMIT 1 [ RunTime:0.001483s ]
[ sql ] [ SQL ] UPDATE `groups`  SET `g_count`=32  WHERE  `groups` = 'BookReview' [ RunTime:0.000398s ]
---------------------------------------------------------------
[ 2018-11-19T21:09:48+08:00 ] 74.120.168.12 74.120.168.12 GET /daily/admin/note
[ info ] qingrang.top/daily/admin/note [运行时间：0.077126s][吞吐率：12.97req/s] [内存消耗：2,285.71kb] [文件加载：56]
[ info ] [ LANG ] /var/www/html/daily/thinkphp/lang/zh-cn.php
[ info ] [ ROUTE ] array (
  'type' => 'module',
  'module' => 
  array (
    0 => 'admin',
    1 => 'note',
    2 => NULL,
  ),
)
[ info ] [ HEADER ] array (
  'host' => 'qingrang.top',
  'cache-control' => 'max-age=0',
  'upgrade-insecure-requests' => '1',
  'user-agent' => 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/70.0.3538.102 Safari/537.36',
  'accept' => 'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8',
  'referer' => 'http://qingrang.top/daily/admin/note/newedit.html',
  'accept-encoding' => 'gzip, deflate',
  'accept-language' => 'zh-CN,zh;q=0.9,la;q=0.8,en;q=0.7,lb;q=0.6',
  'cookie' => 'Hm_lvt_1769181352e9adc950166aada465644e=1541082864,1541122974,1541171416,1542098176; PHPSESSID=hg5qu5mntv21cu5j05evi6l7i2',
  'connection' => 'close',
)
[ info ] [ PARAM ] array (
)
[ info ] [ SESSION ] INIT array (
  'id' => '',
  'var_session_id' => '',
  'prefix' => 'think',
  'type' => '',
  'auto_start' => true,
)
[ info ] [ RUN ] app\admin\controller\Note->notelst[ /var/www/html/daily/application/admin/controller/Note.php ]
[ info ] [ DB ] INIT mysql
[ info ] [ VIEW ] /var/www/html/daily/application/admin/view/note/notelst.html [ array (
  0 => 'stickList',
  1 => 'hide',
  2 => 'list',
  3 => 'list_new',
  4 => 'groups',
  5 => 'groups0',
  6 => 'groups1',
  7 => 'groups2',
  8 => 'count',
  9 => 'year',
  10 => 'default_num',
) ]
[ info ] [ LOG ] INIT File
[ sql ] [ DB ] CONNECT:[ UseTime:0.000591s ] mysql:host=74.120.168.12;dbname=diary;charset=utf8
[ sql ] [ SQL ] SHOW COLUMNS FROM `note` [ RunTime:0.001417s ]
[ sql ] [ SQL ] SELECT * FROM `note` WHERE  `groups` <> 'Personal'  AND `is_show` = 1 ORDER BY date desc,id desc [ RunTime:0.001913s ]
[ sql ] [ SQL ] SELECT * FROM `note` WHERE  `groups` <> 'Personal'  AND `is_show` <> 1 ORDER BY gmt_modified desc LIMIT 5 [ RunTime:0.002807s ]
[ sql ] [ SQL ] SHOW COLUMNS FROM `config` [ RunTime:0.001141s ]
[ sql ] [ SQL ] SELECT * FROM `config` WHERE  `name` = 'hide' LIMIT 1 [ RunTime:0.000380s ]
[ sql ] [ SQL ] SELECT * FROM `note` WHERE  `id` < 5 [ RunTime:0.000428s ]
[ sql ] [ SQL ] SHOW COLUMNS FROM `groups` [ RunTime:0.000961s ]
[ sql ] [ SQL ] SELECT * FROM `groups` [ RunTime:0.000303s ]
[ sql ] [ SQL ] SELECT * FROM `groups` WHERE  `parent_id` = 0  AND `id` <> 2 ORDER BY `groups` [ RunTime:0.000417s ]
[ sql ] [ SQL ] SELECT `groups` FROM `groups` WHERE  `parent_id` = 1 [ RunTime:0.000353s ]
[ sql ] [ SQL ] SELECT * FROM `groups` WHERE  `parent_id` = 2 ORDER BY `groups` [ RunTime:0.000512s ]
[ sql ] [ SQL ] SELECT COUNT(*) AS tp_count FROM `note` WHERE  `groups` = 'Default' LIMIT 1 [ RunTime:0.001339s ]
[ sql ] [ SQL ] SELECT COUNT(*) AS tp_count FROM `note` LIMIT 1 [ RunTime:0.000247s ]
[ sql ] [ SQL ] SHOW COLUMNS FROM `yearlist` [ RunTime:0.001150s ]
[ sql ] [ SQL ] SELECT DISTINCT  `year` FROM `yearlist` ORDER BY year desc [ RunTime:0.000773s ]
---------------------------------------------------------------
[ 2018-11-19T21:10:22+08:00 ] 74.120.168.12 74.120.168.12 POST /daily/admin/note/ashownote1.html
[ info ] qingrang.top/daily/admin/note/ashownote1.html [运行时间：0.065866s][吞吐率：15.18req/s] [内存消耗：2,445.75kb] [文件加载：53]
[ info ] [ LANG ] /var/www/html/daily/thinkphp/lang/zh-cn.php
[ info ] [ ROUTE ] array (
  'type' => 'module',
  'module' => 
  array (
    0 => 'admin',
    1 => 'note',
    2 => 'ashownote1',
  ),
)
[ info ] [ HEADER ] array (
  'host' => 'qingrang.top',
  'content-length' => '11',
  'accept' => 'application/json, text/javascript, */*; q=0.01',
  'origin' => 'http://qingrang.top',
  'x-requested-with' => 'XMLHttpRequest',
  'user-agent' => 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/70.0.3538.102 Safari/537.36',
  'content-type' => 'application/x-www-form-urlencoded',
  'referer' => 'http://qingrang.top/daily/admin/note',
  'accept-encoding' => 'gzip, deflate',
  'accept-language' => 'zh-CN,zh;q=0.9,la;q=0.8,en;q=0.7,lb;q=0.6',
  'cookie' => 'Hm_lvt_1769181352e9adc950166aada465644e=1541082864,1541122974,1541171416,1542098176; PHPSESSID=hg5qu5mntv21cu5j05evi6l7i2',
  'connection' => 'close',
)
[ info ] [ PARAM ] array (
  'groupsID' => '21',
)
[ info ] [ SESSION ] INIT array (
  'id' => '',
  'var_session_id' => '',
  'prefix' => 'think',
  'type' => '',
  'auto_start' => true,
)
[ info ] [ RUN ] app\admin\controller\Note->aShowNote1[ /var/www/html/daily/application/admin/controller/Note.php ]
[ info ] [ DB ] INIT mysql
[ info ] [ LOG ] INIT File
[ sql ] [ DB ] CONNECT:[ UseTime:0.000566s ] mysql:host=74.120.168.12;dbname=diary;charset=utf8
[ sql ] [ SQL ] SHOW COLUMNS FROM `note` [ RunTime:0.001529s ]
[ sql ] [ SQL ] SELECT * FROM `note` WHERE  `p_id` = 21  AND `id` > 2 ORDER BY date desc [ RunTime:0.003131s ]
---------------------------------------------------------------
[ 2018-11-19T21:13:03+08:00 ] 74.120.168.12 74.120.168.12 GET /daily/admin/note/editNote/id/251
[ info ] qingrang.top/daily/admin/note/editNote/id/251 [运行时间：0.062346s][吞吐率：16.04req/s] [内存消耗：2,035.27kb] [文件加载：56]
[ info ] [ LANG ] /var/www/html/daily/thinkphp/lang/zh-cn.php
[ info ] [ ROUTE ] array (
  'type' => 'module',
  'module' => 
  array (
    0 => 'admin',
    1 => 'note',
    2 => 'editNote',
  ),
)
[ info ] [ HEADER ] array (
  'host' => 'qingrang.top',
  'upgrade-insecure-requests' => '1',
  'user-agent' => 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/70.0.3538.102 Safari/537.36',
  'accept' => 'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8',
  'referer' => 'http://qingrang.top/daily/admin/note',
  'accept-encoding' => 'gzip, deflate',
  'accept-language' => 'zh-CN,zh;q=0.9,la;q=0.8,en;q=0.7,lb;q=0.6',
  'cookie' => 'Hm_lvt_1769181352e9adc950166aada465644e=1541082864,1541122974,1541171416,1542098176; PHPSESSID=hg5qu5mntv21cu5j05evi6l7i2',
  'connection' => 'close',
)
[ info ] [ PARAM ] array (
  'id' => '251',
)
[ info ] [ SESSION ] INIT array (
  'id' => '',
  'var_session_id' => '',
  'prefix' => 'think',
  'type' => '',
  'auto_start' => true,
)
[ info ] [ RUN ] app\admin\controller\Note->editNote[ /var/www/html/daily/application/admin/controller/Note.php ]
[ info ] [ DB ] INIT mysql
[ info ] [ VIEW ] /var/www/html/daily/application/admin/view/note/editnote.html [ array (
  0 => 'note',
  1 => 'groups',
) ]
[ info ] [ LOG ] INIT File
[ sql ] [ DB ] CONNECT:[ UseTime:0.000618s ] mysql:host=74.120.168.12;dbname=diary;charset=utf8
[ sql ] [ SQL ] SHOW COLUMNS FROM `note` [ RunTime:0.001462s ]
[ sql ] [ SQL ] SELECT * FROM `note` WHERE  `id` = 251 LIMIT 1 [ RunTime:0.000660s ]
[ sql ] [ SQL ] SHOW COLUMNS FROM `groups` [ RunTime:0.001128s ]
[ sql ] [ SQL ] SELECT * FROM `groups` [ RunTime:0.000455s ]
---------------------------------------------------------------
[ 2018-11-19T21:14:25+08:00 ] 74.120.168.12 74.120.168.12 POST /daily/admin/note/updatenote/id/251.html
[ info ] qingrang.top/daily/admin/note/updatenote/id/251.html [运行时间：0.068576s][吞吐率：14.58req/s] [内存消耗：2,101.48kb] [文件加载：58]
[ info ] [ LANG ] /var/www/html/daily/thinkphp/lang/zh-cn.php
[ info ] [ ROUTE ] array (
  'type' => 'module',
  'module' => 
  array (
    0 => 'admin',
    1 => 'note',
    2 => 'updatenote',
  ),
)
[ info ] [ HEADER ] array (
  'host' => 'qingrang.top',
  'content-length' => '19919',
  'cache-control' => 'max-age=0',
  'origin' => 'http://qingrang.top',
  'upgrade-insecure-requests' => '1',
  'content-type' => 'application/x-www-form-urlencoded',
  'user-agent' => 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/70.0.3538.102 Safari/537.36',
  'accept' => 'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8',
  'referer' => 'http://qingrang.top/daily/admin/note/editNote/id/251',
  'accept-encoding' => 'gzip, deflate',
  'accept-language' => 'zh-CN,zh;q=0.9,la;q=0.8,en;q=0.7,lb;q=0.6',
  'cookie' => 'Hm_lvt_1769181352e9adc950166aada465644e=1541082864,1541122974,1541171416,1542098176; PHPSESSID=hg5qu5mntv21cu5j05evi6l7i2',
  'connection' => 'close',
)
[ info ] [ PARAM ] array (
  'summary' => '',
  'content' => '# 外婆的道歉信
*弗雷德里克·巴克曼*
> 添加于 2018 年 11 月 4 日

## 书摘
- “我不傻，外婆，”她小声说，“我知道你今晚做的一切，都是为了让我忘记白天在学校发生的事。” 外婆踢着路面上的碎石，清了清喉咙。“我不希望你因为围巾的事记住今天，所以，我想与其那样，倒不如因为外婆闯进一家动物园而记住今天这个日子……”
- 改写记忆是一种很不错的超能力。
- “如果你摆脱不了坏事，就必须用更多‘好料’去盖过它。”
- 外婆就是这么形容谎言的——真相的另一种版本。
- “别大惊小怪的！老早之前人们就开始抽烟了，到现在为止，还是有许多健康得不得了的孩子出生。你这一代人忘记了，在没有过敏测试和其他什么狗屁玩意儿之前，人类已经活了上千年，直到你们出现，开始觉得自己如此重要。人类还住在洞穴里时，你以为他们洗猛犸皮的时候，会用到什么三十二度温水机洗模式吗？”
- 每当妈妈和外婆开始争吵，爱莎就调大音量，假装她们都是无声电影里的演员。爱莎很小就学会，如果自己选择音轨，生活就会变得好过些。
- 外婆总说，她的裙子熨得过分平整了。“如果你是那女人身上的衣服，你会紧张兮兮生怕被弄皱。”
- 布里特-玛丽和肯特最不喜欢的便是民主流程中的“民主”部分。
- 拥有一位外婆就像拥有一整支军队。外孙或外孙女因此获得一项特权：不管在什么情况下，都有人站在你这边，即使是你的错。事实上，特别是你错的时候。
- 脑子迟钝的人总是说脑子灵敏的人有注意力问题。“蠢货们不明白，在他们想清楚一件事之前，聪明人早就想明白并开始想下一件事了。所以蠢货总是感到害怕，有攻击性。没有什么比一个聪明姑娘更让他们害怕的了。”
- 爱莎痛恨星期一，星期一早上的学校是最糟糕的，因为那些喜欢追赶你的人憋了整个周末无人可追。星期一，爱莎储物柜里的字条也是最刻薄的。这或许是隐身能力不管用的另一个原因。
- “如果可以，你应该自己选择战斗与否，但如果战斗找上了门，那就狠狠地对着他们的下面来一脚吧！”外婆曾这样说。爱莎照做了。虽然她讨厌暴力，但她很擅长打架，因为她进行过大量练习。这也是为什么对方需要这么多人来追她。
- 没被追捕过的人总觉得一定会有一个原因：“他们不会无缘无故追着你跑，不是吗？你一定干了什么事惹到他们。”这话说得好像“压迫”这件事天生就是这么个原理。 试图向这种人解释是毫无意义的，就像跟佩戴兔脚（据说能带来好运）的人解释——如果兔脚真的那么灵验，那它们应该还长在兔子的身上——一样徒劳。
- “只有与众不同的人才能改变世界，”外婆曾经这么说，“平庸的人什么屁事都改变不了。”
- “我是个医生好吗？自从干了这行，我可不会允许自己有这种奢侈——选择我要救的对象。”
- 那是你能梦见的最可怕的事，被你能想象到的最邪恶的东西操控，以你想都不敢想的数量一次次重演。”
- “因为当你非常爱某个人时，很难学会和别人分享她。”
- 爱莎的妈妈从没拥有过自己的妈妈，因为外婆总是在别处帮助他人。
- 最好的故事从来不是完全真实的，也不是完全虚构的。
- “永远别惹比你闲的人。”
- 如果你不喜欢别人，那他们就伤害不到你。
- “死亡最强大的力量不在于它能让人死去，而在于让留下来的人不想再活着。”
- 恐惧就像是香烟，外婆说，困难的不是戒掉，而是不要开始。
- 有时候很难跟不认识的人分担悲痛。
- 人必须有信仰，外婆总是那么说。“相信什么并不重要，但你得愿意去相信，才能明白那些故事。” 也许到了最后，这就是一切的意义。
- 如果你成为一名警官，就不能选择自己保护的对象。你必须努力保护所有人。”
- “因为小时候，我什么都怕。她告诉我，应该去做我最害怕的事情。我应该嘲笑恐惧。”
- “这是个游戏。他假装偷了你的鼻子。”
- “这个国家愿意花数十亿在武器和战斗机上，但当这些经历过战争的男孩回家后，却没有人哪怕花五分钟聆听他们。”
- 又下雪了，爱莎决定，即使她喜欢的人以前是个混蛋，她还是得学会继续喜欢他们。如果你一定要取消所有那些曾经是混蛋的人的资格，那你很快就没人可喜欢了。
- “事实上，我的想象力很丰富。特别丰富。肯特总说他要跟德国人吃饭，或者飞机因为下雪延误了，或者他要顺路去办公室一趟。而我假装我相信了。我装得太好，连自己都相信了。”
- 《灰姑娘》里的邪恶继母出场时，布里特-玛丽悄悄站起身，拉直裙子上的一道皱褶，走去玄关，开始哭泣，爱莎跟着她。 然后她们一起坐在箱子上，吃着巧克力圣诞老人。 因为，吃着巧克力圣诞老人时，虽然你还是会伤心，但会困难得多得多。
- “我是说，你相不相信……天堂……什么的。”爱莎小声说。 阿尔夫喝了口咖啡，想了想。 “这事太复杂了。我是说，从逻辑上来说，天堂一定在没那么多人的地方。”他最后说。 爱莎想了想，意识到这件事的逻辑问题。对爱莎来说，天堂说到底就是外婆所在的地方，但对布里特-玛丽来说，也许天堂取决于外婆不在那里。
- 当可怕的事情发生后，人们总会想：“如果我当时没有……”不久之后，坐上奥迪的那一刻，就将成为这样的时刻。
- 她感觉爸爸轻柔地将她从地上抱起，她大声地喊，让呜嘶在去不眠大陆的路上也能听见她的声音：“你不能死！你听见了吗？！所有圣诞故事都有圆满的结局，所以你不能死！”
- 生命真正的陷阱在于几乎没有人是彻头彻尾的混蛋，也几乎没有人从未做过混蛋事。生命的难处就在于尽可能多地待在“不是混蛋”这一侧。
- “有时候当一个成年人是件很复杂的事情。”
- “很老的呜嘶。已经很累了，爱莎。”
- 一个王国是由住在里面的人所组成的。
- 他们努力地学习如何自处，如何生活，而不仅仅是生存。
',
  'groups' => 'BookReview',
  'showsel' => '0',
  'showse2' => '1',
  'id' => '251',
)
[ info ] [ SESSION ] INIT array (
  'id' => '',
  'var_session_id' => '',
  'prefix' => 'think',
  'type' => '',
  'auto_start' => true,
)
[ info ] [ RUN ] app\admin\controller\Note->updateNote[ /var/www/html/daily/application/admin/controller/Note.php ]
[ info ] [ DB ] INIT mysql
[ info ] [ CACHE ] INIT File
[ info ] [ LOG ] INIT File
[ sql ] [ DB ] CONNECT:[ UseTime:0.000517s ] mysql:host=74.120.168.12;dbname=diary;charset=utf8
[ sql ] [ SQL ] SHOW COLUMNS FROM `note` [ RunTime:0.001226s ]
[ sql ] [ SQL ] SELECT * FROM `note` WHERE  `id` = 251 LIMIT 1 [ RunTime:0.000423s ]
[ sql ] [ SQL ] SELECT `groups` FROM `note` WHERE  `id` = 251 LIMIT 1 [ RunTime:0.000335s ]
[ sql ] [ SQL ] SHOW COLUMNS FROM `groups` [ RunTime:0.001220s ]
[ sql ] [ SQL ] SELECT `parent_id` FROM `groups` WHERE  `groups` = 'BookReview' LIMIT 1 [ RunTime:0.000491s ]
[ sql ] [ SQL ] SELECT `groups` FROM `groups` WHERE  `id` = 0 LIMIT 1 [ RunTime:0.000272s ]
[ sql ] [ SQL ] SELECT `id` FROM `groups` WHERE  `groups` = 'BookReview' LIMIT 1 [ RunTime:0.000316s ]
[ sql ] [ SQL ] UPDATE `note`  SET `id`=251,`p_id`=21,`title`='外婆的道歉信\r',`content`='# 外婆的道歉信\r\n*弗雷德里克·巴克曼*\r\n> 添加于 2018 年 11 月 4 日\r\n\r\n## 书摘\r\n- “我不傻，外婆，”她小声说，“我知道你今晚做的一切，都是为了让我忘记白天在学校发生的事。” 外婆踢着路面上的碎石，清了清喉咙。“我不希望你因为围巾的事记住今天，所以，我想与其那样，倒不如因为外婆闯进一家动物园而记住今天这个日子……”\r\n- 改写记忆是一种很不错的超能力。\r\n- “如果你摆脱不了坏事，就必须用更多‘好料’去盖过它。”\r\n- 外婆就是这么形容谎言的——真相的另一种版本。\r\n- “别大惊小怪的！老早之前人们就开始抽烟了，到现在为止，还是有许多健康得不得了的孩子出生。你这一代人忘记了，在没有过敏测试和其他什么狗屁玩意儿之前，人类已经活了上千年，直到你们出现，开始觉得自己如此重要。人类还住在洞穴里时，你以为他们洗猛犸皮的时候，会用到什么三十二度温水机洗模式吗？”\r\n- 每当妈妈和外婆开始争吵，爱莎就调大音量，假装她们都是无声电影里的演员。爱莎很小就学会，如果自己选择音轨，生活就会变得好过些。\r\n- 外婆总说，她的裙子熨得过分平整了。“如果你是那女人身上的衣服，你会紧张兮兮生怕被弄皱。”\r\n- 布里特-玛丽和肯特最不喜欢的便是民主流程中的“民主”部分。\r\n- 拥有一位外婆就像拥有一整支军队。外孙或外孙女因此获得一项特权：不管在什么情况下，都有人站在你这边，即使是你的错。事实上，特别是你错的时候。\r\n- 脑子迟钝的人总是说脑子灵敏的人有注意力问题。“蠢货们不明白，在他们想清楚一件事之前，聪明人早就想明白并开始想下一件事了。所以蠢货总是感到害怕，有攻击性。没有什么比一个聪明姑娘更让他们害怕的了。”\r\n- 爱莎痛恨星期一，星期一早上的学校是最糟糕的，因为那些喜欢追赶你的人憋了整个周末无人可追。星期一，爱莎储物柜里的字条也是最刻薄的。这或许是隐身能力不管用的另一个原因。\r\n- “如果可以，你应该自己选择战斗与否，但如果战斗找上了门，那就狠狠地对着他们的下面来一脚吧！”外婆曾这样说。爱莎照做了。虽然她讨厌暴力，但她很擅长打架，因为她进行过大量练习。这也是为什么对方需要这么多人来追她。\r\n- 没被追捕过的人总觉得一定会有一个原因：“他们不会无缘无故追着你跑，不是吗？你一定干了什么事惹到他们。”这话说得好像“压迫”这件事天生就是这么个原理。 试图向这种人解释是毫无意义的，就像跟佩戴兔脚（据说能带来好运）的人解释——如果兔脚真的那么灵验，那它们应该还长在兔子的身上——一样徒劳。\r\n- “只有与众不同的人才能改变世界，”外婆曾经这么说，“平庸的人什么屁事都改变不了。”\r\n- “我是个医生好吗？自从干了这行，我可不会允许自己有这种奢侈——选择我要救的对象。”\r\n- 那是你能梦见的最可怕的事，被你能想象到的最邪恶的东西操控，以你想都不敢想的数量一次次重演。”\r\n- “因为当你非常爱某个人时，很难学会和别人分享她。”\r\n- 爱莎的妈妈从没拥有过自己的妈妈，因为外婆总是在别处帮助他人。\r\n- 最好的故事从来不是完全真实的，也不是完全虚构的。\r\n- “永远别惹比你闲的人。”\r\n- 如果你不喜欢别人，那他们就伤害不到你。\r\n- “死亡最强大的力量不在于它能让人死去，而在于让留下来的人不想再活着。”\r\n- 恐惧就像是香烟，外婆说，困难的不是戒掉，而是不要开始。\r\n- 有时候很难跟不认识的人分担悲痛。\r\n- 人必须有信仰，外婆总是那么说。“相信什么并不重要，但你得愿意去相信，才能明白那些故事。” 也许到了最后，这就是一切的意义。\r\n- 如果你成为一名警官，就不能选择自己保护的对象。你必须努力保护所有人。”\r\n- “因为小时候，我什么都怕。她告诉我，应该去做我最害怕的事情。我应该嘲笑恐惧。”\r\n- “这是个游戏。他假装偷了你的鼻子。”\r\n- “这个国家愿意花数十亿在武器和战斗机上，但当这些经历过战争的男孩回家后，却没有人哪怕花五分钟聆听他们。”\r\n- 又下雪了，爱莎决定，即使她喜欢的人以前是个混蛋，她还是得学会继续喜欢他们。如果你一定要取消所有那些曾经是混蛋的人的资格，那你很快就没人可喜欢了。\r\n- “事实上，我的想象力很丰富。特别丰富。肯特总说他要跟德国人吃饭，或者飞机因为下雪延误了，或者他要顺路去办公室一趟。而我假装我相信了。我装得太好，连自己都相信了。”\r\n- 《灰姑娘》里的邪恶继母出场时，布里特-玛丽悄悄站起身，拉直裙子上的一道皱褶，走去玄关，开始哭泣，爱莎跟着她。 然后她们一起坐在箱子上，吃着巧克力圣诞老人。 因为，吃着巧克力圣诞老人时，虽然你还是会伤心，但会困难得多得多。\r\n- “我是说，你相不相信……天堂……什么的。”爱莎小声说。 阿尔夫喝了口咖啡，想了想。 “这事太复杂了。我是说，从逻辑上来说，天堂一定在没那么多人的地方。”他最后说。 爱莎想了想，意识到这件事的逻辑问题。对爱莎来说，天堂说到底就是外婆所在的地方，但对布里特-玛丽来说，也许天堂取决于外婆不在那里。\r\n- 当可怕的事情发生后，人们总会想：“如果我当时没有……”不久之后，坐上奥迪的那一刻，就将成为这样的时刻。\r\n- 她感觉爸爸轻柔地将她从地上抱起，她大声地喊，让呜嘶在去不眠大陆的路上也能听见她的声音：“你不能死！你听见了吗？！所有圣诞故事都有圆满的结局，所以你不能死！”\r\n- 生命真正的陷阱在于几乎没有人是彻头彻尾的混蛋，也几乎没有人从未做过混蛋事。生命的难处就在于尽可能多地待在“不是混蛋”这一侧。\r\n- “有时候当一个成年人是件很复杂的事情。”\r\n- “很老的呜嘶。已经很累了，爱莎。”\r\n- 一个王国是由住在里面的人所组成的。\r\n- 他们努力地学习如何自处，如何生活，而不仅仅是生存。\r\n',`groups`='BookReview',`is_show`=0,`publish`=1,`summary`='',`gmt_modified`='2018-11-19'  WHERE  `id` = 251 [ RunTime:0.000636s ]
[ sql ] [ SQL ] SELECT COUNT(*) AS tp_count FROM `note` WHERE  `groups` = 'BookReview' LIMIT 1 [ RunTime:0.001520s ]
[ sql ] [ SQL ] UPDATE `groups`  SET `g_count`=32  WHERE  `groups` = 'BookReview' [ RunTime:0.000404s ]
[ sql ] [ SQL ] SELECT COUNT(*) AS tp_count FROM `note` WHERE  `groups` = 'BookReview' LIMIT 1 [ RunTime:0.001646s ]
[ sql ] [ SQL ] UPDATE `groups`  SET `g_count`=32  WHERE  `groups` = 'BookReview' [ RunTime:0.000410s ]
---------------------------------------------------------------
[ 2018-11-19T21:14:34+08:00 ] 74.120.168.12 74.120.168.12 GET /daily/admin/note/shownote/id/251.html
[ info ] qingrang.top/daily/admin/note/shownote/id/251.html [运行时间：0.053316s][吞吐率：18.76req/s] [内存消耗：1,987.60kb] [文件加载：55]
[ info ] [ LANG ] /var/www/html/daily/thinkphp/lang/zh-cn.php
[ info ] [ ROUTE ] array (
  'type' => 'module',
  'module' => 
  array (
    0 => 'admin',
    1 => 'note',
    2 => 'shownote',
  ),
)
[ info ] [ HEADER ] array (
  'host' => 'qingrang.top',
  'cache-control' => 'max-age=0',
  'upgrade-insecure-requests' => '1',
  'user-agent' => 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/70.0.3538.102 Safari/537.36',
  'accept' => 'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8',
  'referer' => 'http://qingrang.top/daily/admin/note/editNote/id/251',
  'accept-encoding' => 'gzip, deflate',
  'accept-language' => 'zh-CN,zh;q=0.9,la;q=0.8,en;q=0.7,lb;q=0.6',
  'cookie' => 'Hm_lvt_1769181352e9adc950166aada465644e=1541082864,1541122974,1541171416,1542098176; PHPSESSID=hg5qu5mntv21cu5j05evi6l7i2',
  'connection' => 'close',
)
[ info ] [ PARAM ] array (
  'id' => '251',
)
[ info ] [ SESSION ] INIT array (
  'id' => '',
  'var_session_id' => '',
  'prefix' => 'think',
  'type' => '',
  'auto_start' => true,
)
[ info ] [ RUN ] app\admin\controller\Note->showNote[ /var/www/html/daily/application/admin/controller/Note.php ]
[ info ] [ DB ] INIT mysql
[ info ] [ VIEW ] /var/www/html/daily/application/admin/view/note/shownote.html [ array (
  0 => 'note',
  1 => 'groups',
) ]
[ info ] [ LOG ] INIT File
[ sql ] [ DB ] CONNECT:[ UseTime:0.000608s ] mysql:host=74.120.168.12;dbname=diary;charset=utf8
[ sql ] [ SQL ] SHOW COLUMNS FROM `note` [ RunTime:0.001573s ]
[ sql ] [ SQL ] SELECT * FROM `note` WHERE  `id` = 251 LIMIT 1 [ RunTime:0.000482s ]
[ sql ] [ SQL ] SHOW COLUMNS FROM `groups` [ RunTime:0.000927s ]
[ sql ] [ SQL ] SELECT * FROM `groups` [ RunTime:0.000316s ]
---------------------------------------------------------------
[ 2018-11-19T21:14:46+08:00 ] 74.120.168.12 74.120.168.12 GET /daily/admin/note
[ info ] qingrang.top/daily/admin/note [运行时间：0.131762s][吞吐率：7.59req/s] [内存消耗：2,290.43kb] [文件加载：56]
[ info ] [ LANG ] /var/www/html/daily/thinkphp/lang/zh-cn.php
[ info ] [ ROUTE ] array (
  'type' => 'module',
  'module' => 
  array (
    0 => 'admin',
    1 => 'note',
    2 => NULL,
  ),
)
[ info ] [ HEADER ] array (
  'host' => 'qingrang.top',
  'upgrade-insecure-requests' => '1',
  'user-agent' => 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/70.0.3538.102 Safari/537.36',
  'accept' => 'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8',
  'accept-encoding' => 'gzip, deflate',
  'accept-language' => 'zh-CN,zh;q=0.9,la;q=0.8,en;q=0.7,lb;q=0.6',
  'cookie' => 'Hm_lvt_1769181352e9adc950166aada465644e=1541082864,1541122974,1541171416,1542098176; PHPSESSID=hg5qu5mntv21cu5j05evi6l7i2',
  'connection' => 'close',
)
[ info ] [ PARAM ] array (
)
[ info ] [ SESSION ] INIT array (
  'id' => '',
  'var_session_id' => '',
  'prefix' => 'think',
  'type' => '',
  'auto_start' => true,
)
[ info ] [ RUN ] app\admin\controller\Note->notelst[ /var/www/html/daily/application/admin/controller/Note.php ]
[ info ] [ DB ] INIT mysql
[ info ] [ VIEW ] /var/www/html/daily/application/admin/view/note/notelst.html [ array (
  0 => 'stickList',
  1 => 'hide',
  2 => 'list',
  3 => 'list_new',
  4 => 'groups',
  5 => 'groups0',
  6 => 'groups1',
  7 => 'groups2',
  8 => 'count',
  9 => 'year',
  10 => 'default_num',
) ]
[ info ] [ LOG ] INIT File
[ sql ] [ DB ] CONNECT:[ UseTime:0.000902s ] mysql:host=74.120.168.12;dbname=diary;charset=utf8
[ sql ] [ SQL ] SHOW COLUMNS FROM `note` [ RunTime:0.001922s ]
[ sql ] [ SQL ] SELECT * FROM `note` WHERE  `groups` <> 'Personal'  AND `is_show` = 1 ORDER BY date desc,id desc [ RunTime:0.002938s ]
[ sql ] [ SQL ] SELECT * FROM `note` WHERE  `groups` <> 'Personal'  AND `is_show` <> 1 ORDER BY gmt_modified desc LIMIT 5 [ RunTime:0.004366s ]
[ sql ] [ SQL ] SHOW COLUMNS FROM `config` [ RunTime:0.001485s ]
[ sql ] [ SQL ] SELECT * FROM `config` WHERE  `name` = 'hide' LIMIT 1 [ RunTime:0.000476s ]
[ sql ] [ SQL ] SELECT * FROM `note` WHERE  `id` < 5 [ RunTime:0.000598s ]
[ sql ] [ SQL ] SHOW COLUMNS FROM `groups` [ RunTime:0.001330s ]
[ sql ] [ SQL ] SELECT * FROM `groups` [ RunTime:0.000380s ]
[ sql ] [ SQL ] SELECT * FROM `groups` WHERE  `parent_id` = 0  AND `id` <> 2 ORDER BY `groups` [ RunTime:0.000554s ]
[ sql ] [ SQL ] SELECT `groups` FROM `groups` WHERE  `parent_id` = 1 [ RunTime:0.000598s ]
[ sql ] [ SQL ] SELECT * FROM `groups` WHERE  `parent_id` = 2 ORDER BY `groups` [ RunTime:0.000526s ]
[ sql ] [ SQL ] SELECT COUNT(*) AS tp_count FROM `note` WHERE  `groups` = 'Default' LIMIT 1 [ RunTime:0.002189s ]
[ sql ] [ SQL ] SELECT COUNT(*) AS tp_count FROM `note` LIMIT 1 [ RunTime:0.000313s ]
[ sql ] [ SQL ] SHOW COLUMNS FROM `yearlist` [ RunTime:0.001537s ]
[ sql ] [ SQL ] SELECT DISTINCT  `year` FROM `yearlist` ORDER BY year desc [ RunTime:0.000911s ]
---------------------------------------------------------------
[ 2018-11-19T21:14:52+08:00 ] 74.120.168.12 74.120.168.12 GET /daily/admin/note
[ info ] qingrang.top/daily/admin/note [运行时间：0.074245s][吞吐率：13.47req/s] [内存消耗：2,290.78kb] [文件加载：56]
[ info ] [ LANG ] /var/www/html/daily/thinkphp/lang/zh-cn.php
[ info ] [ ROUTE ] array (
  'type' => 'module',
  'module' => 
  array (
    0 => 'admin',
    1 => 'note',
    2 => NULL,
  ),
)
[ info ] [ HEADER ] array (
  'host' => 'qingrang.top',
  'cache-control' => 'max-age=0',
  'upgrade-insecure-requests' => '1',
  'user-agent' => 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/70.0.3538.102 Safari/537.36',
  'accept' => 'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8',
  'accept-encoding' => 'gzip, deflate',
  'accept-language' => 'zh-CN,zh;q=0.9,la;q=0.8,en;q=0.7,lb;q=0.6',
  'cookie' => 'Hm_lvt_1769181352e9adc950166aada465644e=1541082864,1541122974,1541171416,1542098176; PHPSESSID=hg5qu5mntv21cu5j05evi6l7i2',
  'connection' => 'close',
)
[ info ] [ PARAM ] array (
)
[ info ] [ SESSION ] INIT array (
  'id' => '',
  'var_session_id' => '',
  'prefix' => 'think',
  'type' => '',
  'auto_start' => true,
)
[ info ] [ RUN ] app\admin\controller\Note->notelst[ /var/www/html/daily/application/admin/controller/Note.php ]
[ info ] [ DB ] INIT mysql
[ info ] [ VIEW ] /var/www/html/daily/application/admin/view/note/notelst.html [ array (
  0 => 'stickList',
  1 => 'hide',
  2 => 'list',
  3 => 'list_new',
  4 => 'groups',
  5 => 'groups0',
  6 => 'groups1',
  7 => 'groups2',
  8 => 'count',
  9 => 'year',
  10 => 'default_num',
) ]
[ info ] [ LOG ] INIT File
[ sql ] [ DB ] CONNECT:[ UseTime:0.000562s ] mysql:host=74.120.168.12;dbname=diary;charset=utf8
[ sql ] [ SQL ] SHOW COLUMNS FROM `note` [ RunTime:0.001550s ]
[ sql ] [ SQL ] SELECT * FROM `note` WHERE  `groups` <> 'Personal'  AND `is_show` = 1 ORDER BY date desc,id desc [ RunTime:0.002031s ]
[ sql ] [ SQL ] SELECT * FROM `note` WHERE  `groups` <> 'Personal'  AND `is_show` <> 1 ORDER BY gmt_modified desc LIMIT 5 [ RunTime:0.002546s ]
[ sql ] [ SQL ] SHOW COLUMNS FROM `config` [ RunTime:0.000969s ]
[ sql ] [ SQL ] SELECT * FROM `config` WHERE  `name` = 'hide' LIMIT 1 [ RunTime:0.000335s ]
[ sql ] [ SQL ] SELECT * FROM `note` WHERE  `id` < 5 [ RunTime:0.000435s ]
[ sql ] [ SQL ] SHOW COLUMNS FROM `groups` [ RunTime:0.000845s ]
[ sql ] [ SQL ] SELECT * FROM `groups` [ RunTime:0.000288s ]
[ sql ] [ SQL ] SELECT * FROM `groups` WHERE  `parent_id` = 0  AND `id` <> 2 ORDER BY `groups` [ RunTime:0.000410s ]
[ sql ] [ SQL ] SELECT `groups` FROM `groups` WHERE  `parent_id` = 1 [ RunTime:0.000307s ]
[ sql ] [ SQL ] SELECT * FROM `groups` WHERE  `parent_id` = 2 ORDER BY `groups` [ RunTime:0.000401s ]
[ sql ] [ SQL ] SELECT COUNT(*) AS tp_count FROM `note` WHERE  `groups` = 'Default' LIMIT 1 [ RunTime:0.001226s ]
[ sql ] [ SQL ] SELECT COUNT(*) AS tp_count FROM `note` LIMIT 1 [ RunTime:0.000236s ]
[ sql ] [ SQL ] SHOW COLUMNS FROM `yearlist` [ RunTime:0.001033s ]
[ sql ] [ SQL ] SELECT DISTINCT  `year` FROM `yearlist` ORDER BY year desc [ RunTime:0.000662s ]
---------------------------------------------------------------
[ 2018-11-19T21:15:00+08:00 ] 74.120.168.12 74.120.168.12 POST /daily/admin/note/ashownote1.html
[ info ] qingrang.top/daily/admin/note/ashownote1.html [运行时间：0.053377s][吞吐率：18.73req/s] [内存消耗：2,445.97kb] [文件加载：53]
[ info ] [ LANG ] /var/www/html/daily/thinkphp/lang/zh-cn.php
[ info ] [ ROUTE ] array (
  'type' => 'module',
  'module' => 
  array (
    0 => 'admin',
    1 => 'note',
    2 => 'ashownote1',
  ),
)
[ info ] [ HEADER ] array (
  'host' => 'qingrang.top',
  'content-length' => '11',
  'accept' => 'application/json, text/javascript, */*; q=0.01',
  'origin' => 'http://qingrang.top',
  'x-requested-with' => 'XMLHttpRequest',
  'user-agent' => 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/70.0.3538.102 Safari/537.36',
  'content-type' => 'application/x-www-form-urlencoded',
  'referer' => 'http://qingrang.top/daily/admin/note',
  'accept-encoding' => 'gzip, deflate',
  'accept-language' => 'zh-CN,zh;q=0.9,la;q=0.8,en;q=0.7,lb;q=0.6',
  'cookie' => 'Hm_lvt_1769181352e9adc950166aada465644e=1541082864,1541122974,1541171416,1542098176; PHPSESSID=hg5qu5mntv21cu5j05evi6l7i2',
  'connection' => 'close',
)
[ info ] [ PARAM ] array (
  'groupsID' => '21',
)
[ info ] [ SESSION ] INIT array (
  'id' => '',
  'var_session_id' => '',
  'prefix' => 'think',
  'type' => '',
  'auto_start' => true,
)
[ info ] [ RUN ] app\admin\controller\Note->aShowNote1[ /var/www/html/daily/application/admin/controller/Note.php ]
[ info ] [ DB ] INIT mysql
[ info ] [ LOG ] INIT File
[ sql ] [ DB ] CONNECT:[ UseTime:0.000556s ] mysql:host=74.120.168.12;dbname=diary;charset=utf8
[ sql ] [ SQL ] SHOW COLUMNS FROM `note` [ RunTime:0.001383s ]
[ sql ] [ SQL ] SELECT * FROM `note` WHERE  `p_id` = 21  AND `id` > 2 ORDER BY date desc [ RunTime:0.002481s ]
---------------------------------------------------------------
[ 2018-11-19T21:15:07+08:00 ] 74.120.168.12 74.120.168.12 POST /daily/admin/note/ashownote1.html
[ info ] qingrang.top/daily/admin/note/ashownote1.html [运行时间：0.051609s][吞吐率：19.38req/s] [内存消耗：2,445.97kb] [文件加载：53]
[ info ] [ LANG ] /var/www/html/daily/thinkphp/lang/zh-cn.php
[ info ] [ ROUTE ] array (
  'type' => 'module',
  'module' => 
  array (
    0 => 'admin',
    1 => 'note',
    2 => 'ashownote1',
  ),
)
[ info ] [ HEADER ] array (
  'host' => 'qingrang.top',
  'content-length' => '11',
  'accept' => 'application/json, text/javascript, */*; q=0.01',
  'origin' => 'http://qingrang.top',
  'x-requested-with' => 'XMLHttpRequest',
  'user-agent' => 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/70.0.3538.102 Safari/537.36',
  'content-type' => 'application/x-www-form-urlencoded',
  'referer' => 'http://qingrang.top/daily/admin/note',
  'accept-encoding' => 'gzip, deflate',
  'accept-language' => 'zh-CN,zh;q=0.9,la;q=0.8,en;q=0.7,lb;q=0.6',
  'cookie' => 'Hm_lvt_1769181352e9adc950166aada465644e=1541082864,1541122974,1541171416,1542098176; PHPSESSID=hg5qu5mntv21cu5j05evi6l7i2',
  'connection' => 'close',
)
[ info ] [ PARAM ] array (
  'groupsID' => '21',
)
[ info ] [ SESSION ] INIT array (
  'id' => '',
  'var_session_id' => '',
  'prefix' => 'think',
  'type' => '',
  'auto_start' => true,
)
[ info ] [ RUN ] app\admin\controller\Note->aShowNote1[ /var/www/html/daily/application/admin/controller/Note.php ]
[ info ] [ DB ] INIT mysql
[ info ] [ LOG ] INIT File
[ sql ] [ DB ] CONNECT:[ UseTime:0.000475s ] mysql:host=74.120.168.12;dbname=diary;charset=utf8
[ sql ] [ SQL ] SHOW COLUMNS FROM `note` [ RunTime:0.001252s ]
[ sql ] [ SQL ] SELECT * FROM `note` WHERE  `p_id` = 21  AND `id` > 2 ORDER BY date desc [ RunTime:0.002605s ]
---------------------------------------------------------------
[ 2018-11-19T21:15:11+08:00 ] 74.120.168.12 74.120.168.12 GET /daily/admin/note
[ info ] qingrang.top/daily/admin/note [运行时间：0.075260s][吞吐率：13.29req/s] [内存消耗：2,290.43kb] [文件加载：56]
[ info ] [ LANG ] /var/www/html/daily/thinkphp/lang/zh-cn.php
[ info ] [ ROUTE ] array (
  'type' => 'module',
  'module' => 
  array (
    0 => 'admin',
    1 => 'note',
    2 => NULL,
  ),
)
[ info ] [ HEADER ] array (
  'host' => 'qingrang.top',
  'upgrade-insecure-requests' => '1',
  'user-agent' => 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/70.0.3538.102 Safari/537.36',
  'accept' => 'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8',
  'accept-encoding' => 'gzip, deflate',
  'accept-language' => 'zh-CN,zh;q=0.9,la;q=0.8,en;q=0.7,lb;q=0.6',
  'cookie' => 'Hm_lvt_1769181352e9adc950166aada465644e=1541082864,1541122974,1541171416,1542098176; PHPSESSID=hg5qu5mntv21cu5j05evi6l7i2',
  'connection' => 'close',
)
[ info ] [ PARAM ] array (
)
[ info ] [ SESSION ] INIT array (
  'id' => '',
  'var_session_id' => '',
  'prefix' => 'think',
  'type' => '',
  'auto_start' => true,
)
[ info ] [ RUN ] app\admin\controller\Note->notelst[ /var/www/html/daily/application/admin/controller/Note.php ]
[ info ] [ DB ] INIT mysql
[ info ] [ VIEW ] /var/www/html/daily/application/admin/view/note/notelst.html [ array (
  0 => 'stickList',
  1 => 'hide',
  2 => 'list',
  3 => 'list_new',
  4 => 'groups',
  5 => 'groups0',
  6 => 'groups1',
  7 => 'groups2',
  8 => 'count',
  9 => 'year',
  10 => 'default_num',
) ]
[ info ] [ LOG ] INIT File
[ sql ] [ DB ] CONNECT:[ UseTime:0.000592s ] mysql:host=74.120.168.12;dbname=diary;charset=utf8
[ sql ] [ SQL ] SHOW COLUMNS FROM `note` [ RunTime:0.001327s ]
[ sql ] [ SQL ] SELECT * FROM `note` WHERE  `groups` <> 'Personal'  AND `is_show` = 1 ORDER BY date desc,id desc [ RunTime:0.001776s ]
[ sql ] [ SQL ] SELECT * FROM `note` WHERE  `groups` <> 'Personal'  AND `is_show` <> 1 ORDER BY gmt_modified desc LIMIT 5 [ RunTime:0.002847s ]
[ sql ] [ SQL ] SHOW COLUMNS FROM `config` [ RunTime:0.001122s ]
[ sql ] [ SQL ] SELECT * FROM `config` WHERE  `name` = 'hide' LIMIT 1 [ RunTime:0.000352s ]
[ sql ] [ SQL ] SELECT * FROM `note` WHERE  `id` < 5 [ RunTime:0.000508s ]
[ sql ] [ SQL ] SHOW COLUMNS FROM `groups` [ RunTime:0.000878s ]
[ sql ] [ SQL ] SELECT * FROM `groups` [ RunTime:0.000295s ]
[ sql ] [ SQL ] SELECT * FROM `groups` WHERE  `parent_id` = 0  AND `id` <> 2 ORDER BY `groups` [ RunTime:0.000443s ]
[ sql ] [ SQL ] SELECT `groups` FROM `groups` WHERE  `parent_id` = 1 [ RunTime:0.000329s ]
[ sql ] [ SQL ] SELECT * FROM `groups` WHERE  `parent_id` = 2 ORDER BY `groups` [ RunTime:0.000360s ]
[ sql ] [ SQL ] SELECT COUNT(*) AS tp_count FROM `note` WHERE  `groups` = 'Default' LIMIT 1 [ RunTime:0.001287s ]
[ sql ] [ SQL ] SELECT COUNT(*) AS tp_count FROM `note` LIMIT 1 [ RunTime:0.000346s ]
[ sql ] [ SQL ] SHOW COLUMNS FROM `yearlist` [ RunTime:0.001027s ]
[ sql ] [ SQL ] SELECT DISTINCT  `year` FROM `yearlist` ORDER BY year desc [ RunTime:0.000800s ]
---------------------------------------------------------------
[ 2018-11-19T21:15:46+08:00 ] 74.120.168.12 74.120.168.12 GET /daily/admin/note/editnote/id/251.html
[ info ] qingrang.top/daily/admin/note/editnote/id/251.html [运行时间：0.050862s][吞吐率：19.66req/s] [内存消耗：2,035.51kb] [文件加载：56]
[ info ] [ LANG ] /var/www/html/daily/thinkphp/lang/zh-cn.php
[ info ] [ ROUTE ] array (
  'type' => 'module',
  'module' => 
  array (
    0 => 'admin',
    1 => 'note',
    2 => 'editnote',
  ),
)
[ info ] [ HEADER ] array (
  'host' => 'qingrang.top',
  'upgrade-insecure-requests' => '1',
  'user-agent' => 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/70.0.3538.102 Safari/537.36',
  'accept' => 'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8',
  'referer' => 'http://qingrang.top/daily/admin/note',
  'accept-encoding' => 'gzip, deflate',
  'accept-language' => 'zh-CN,zh;q=0.9,la;q=0.8,en;q=0.7,lb;q=0.6',
  'cookie' => 'Hm_lvt_1769181352e9adc950166aada465644e=1541082864,1541122974,1541171416,1542098176; PHPSESSID=hg5qu5mntv21cu5j05evi6l7i2',
  'connection' => 'close',
)
[ info ] [ PARAM ] array (
  'id' => '251',
)
[ info ] [ SESSION ] INIT array (
  'id' => '',
  'var_session_id' => '',
  'prefix' => 'think',
  'type' => '',
  'auto_start' => true,
)
[ info ] [ RUN ] app\admin\controller\Note->editNote[ /var/www/html/daily/application/admin/controller/Note.php ]
[ info ] [ DB ] INIT mysql
[ info ] [ VIEW ] /var/www/html/daily/application/admin/view/note/editnote.html [ array (
  0 => 'note',
  1 => 'groups',
) ]
[ info ] [ LOG ] INIT File
[ sql ] [ DB ] CONNECT:[ UseTime:0.000517s ] mysql:host=74.120.168.12;dbname=diary;charset=utf8
[ sql ] [ SQL ] SHOW COLUMNS FROM `note` [ RunTime:0.001313s ]
[ sql ] [ SQL ] SELECT * FROM `note` WHERE  `id` = 251 LIMIT 1 [ RunTime:0.000406s ]
[ sql ] [ SQL ] SHOW COLUMNS FROM `groups` [ RunTime:0.000897s ]
[ sql ] [ SQL ] SELECT * FROM `groups` [ RunTime:0.000280s ]
---------------------------------------------------------------
[ 2018-11-19T21:18:53+08:00 ] 74.120.168.12 74.120.168.12 POST /daily/admin/note/savenote.html
[ info ] qingrang.top/daily/admin/note/savenote.html [运行时间：0.056791s][吞吐率：17.61req/s] [内存消耗：2,081.52kb] [文件加载：56]
[ info ] [ LANG ] /var/www/html/daily/thinkphp/lang/zh-cn.php
[ info ] [ ROUTE ] array (
  'type' => 'module',
  'module' => 
  array (
    0 => 'admin',
    1 => 'note',
    2 => 'savenote',
  ),
)
[ info ] [ HEADER ] array (
  'host' => 'qingrang.top',
  'content-length' => '19998',
  'accept' => 'text/plain, */*; q=0.01',
  'origin' => 'http://qingrang.top',
  'x-requested-with' => 'XMLHttpRequest',
  'user-agent' => 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/70.0.3538.102 Safari/537.36',
  'content-type' => 'application/x-www-form-urlencoded; charset=UTF-8',
  'referer' => 'http://qingrang.top/daily/admin/note/editnote/id/251.html',
  'accept-encoding' => 'gzip, deflate',
  'accept-language' => 'zh-CN,zh;q=0.9,la;q=0.8,en;q=0.7,lb;q=0.6',
  'cookie' => 'Hm_lvt_1769181352e9adc950166aada465644e=1541082864,1541122974,1541171416,1542098176; PHPSESSID=hg5qu5mntv21cu5j05evi6l7i2',
  'connection' => 'close',
)
[ info ] [ PARAM ] array (
  'ogroup' => 'Default',
  'context' => '# 外婆的道歉信
*弗雷德里克·巴克曼*
> 添加于 2018 年 11 月 4 日

## 书摘
- “我不傻，外婆，”她小声说，“我知道你今晚做的一切，都是为了让我忘记白天在学校发生的事。” 外婆踢着路面上的碎石，清了清喉咙。“我不希望你因为围巾的事记住今天，所以，我想与其那样，倒不如因为外婆闯进一家动物园而记住今天这个日子……”
//“如果你摆脱不了坏事，就必须用更多‘好料’去盖过它。”改写记忆是一种很不错的超能力。
- 外婆就是这么形容谎言的——真相的另一种版本。
- “别大惊小怪的！老早之前人们就开始抽烟了，到现在为止，还是有许多健康得不得了的孩子出生。你这一代人忘记了，在没有过敏测试和其他什么狗屁玩意儿之前，人类已经活了上千年，直到你们出现，开始觉得自己如此重要。人类还住在洞穴里时，你以为他们洗猛犸皮的时候，会用到什么三十二度温水机洗模式吗？”
- 每当妈妈和外婆开始争吵，爱莎就调大音量，假装她们都是无声电影里的演员。爱莎很小就学会，**如果自己选择音轨，生活就会变得好过些。**
//尽管这并不是最好的方式，但这会是让自己最好过的方式。
- 外婆总说，她的裙子熨得过分平整了。“如果你是那女人身上的衣服，你会紧张兮兮生怕被弄皱。”
- 布里特-玛丽和肯特最不喜欢的便是民主流程中的“民主”部分。
- 拥有一位外婆就像拥有一整支军队。外孙或外孙女因此获得一项特权：不管在什么情况下，都有人站在你这边，即使是你的错。事实上，特别是你错的时候。
- 脑子迟钝的人总是说脑子灵敏的人有注意力问题。“蠢货们不明白，在他们想清楚一件事之前，聪明人早就想明白并开始想下一件事了。所以蠢货总是感到害怕，有攻击性。没有什么比一个聪明姑娘更让他们害怕的了。”
- 爱莎痛恨星期一，星期一早上的学校是最糟糕的，因为那些喜欢追赶你的人憋了整个周末无人可追。星期一，爱莎储物柜里的字条也是最刻薄的。这或许是隐身能力不管用的另一个原因。
- “如果可以，你应该自己选择战斗与否，但如果战斗找上了门，那就狠狠地对着他们的下面来一脚吧！”外婆曾这样说。爱莎照做了。虽然她讨厌暴力，但她很擅长打架，因为她进行过大量练习。这也是为什么对方需要这么多人来追她。
- 没被追捕过的人总觉得一定会有一个原因：“他们不会无缘无故追着你跑，不是吗？你一定干了什么事惹到他们。”这话说得好像“压迫”这件事天生就是这么个原理。 试图向这种人解释是毫无意义的，就像跟佩戴兔脚（据说能带来好运）的人解释——如果兔脚真的那么灵验，那它们应该还长在兔子的身上——一样徒劳。
- “只有与众不同的人才能改变世界，”外婆曾经这么说，“平庸的人什么屁事都改变不了。”
- “我是个医生好吗？自从干了这行，我可不会允许自己有这种奢侈——选择我要救的对象。”
- 那是你能梦见的最可怕的事，被你能想象到的最邪恶的东西操控，以你想都不敢想的数量一次次重演。”
- “因为当你非常爱某个人时，很难学会和别人分享她。”
- 爱莎的妈妈从没拥有过自己的妈妈，因为外婆总是在别处帮助他人。
- 最好的故事从来不是完全真实的，也不是完全虚构的。
- “永远别惹比你闲的人。”
- 如果你不喜欢别人，那他们就伤害不到你。
- “死亡最强大的力量不在于它能让人死去，而在于让留下来的人不想再活着。”
- 恐惧就像是香烟，外婆说，困难的不是戒掉，而是不要开始。
- 有时候很难跟不认识的人分担悲痛。
- 人必须有信仰，外婆总是那么说。“相信什么并不重要，但你得愿意去相信，才能明白那些故事。” 也许到了最后，这就是一切的意义。
- 如果你成为一名警官，就不能选择自己保护的对象。你必须努力保护所有人。”
- “因为小时候，我什么都怕。她告诉我，应该去做我最害怕的事情。我应该嘲笑恐惧。”
- “这是个游戏。他假装偷了你的鼻子。”
- “这个国家愿意花数十亿在武器和战斗机上，但当这些经历过战争的男孩回家后，却没有人哪怕花五分钟聆听他们。”
- 又下雪了，爱莎决定，即使她喜欢的人以前是个混蛋，她还是得学会继续喜欢他们。如果你一定要取消所有那些曾经是混蛋的人的资格，那你很快就没人可喜欢了。
- “事实上，我的想象力很丰富。特别丰富。肯特总说他要跟德国人吃饭，或者飞机因为下雪延误了，或者他要顺路去办公室一趟。而我假装我相信了。我装得太好，连自己都相信了。”
- 《灰姑娘》里的邪恶继母出场时，布里特-玛丽悄悄站起身，拉直裙子上的一道皱褶，走去玄关，开始哭泣，爱莎跟着她。 然后她们一起坐在箱子上，吃着巧克力圣诞老人。 因为，吃着巧克力圣诞老人时，虽然你还是会伤心，但会困难得多得多。
- “我是说，你相不相信……天堂……什么的。”爱莎小声说。 阿尔夫喝了口咖啡，想了想。 “这事太复杂了。我是说，从逻辑上来说，天堂一定在没那么多人的地方。”他最后说。 爱莎想了想，意识到这件事的逻辑问题。对爱莎来说，天堂说到底就是外婆所在的地方，但对布里特-玛丽来说，也许天堂取决于外婆不在那里。
- 当可怕的事情发生后，人们总会想：“如果我当时没有……”不久之后，坐上奥迪的那一刻，就将成为这样的时刻。
- 她感觉爸爸轻柔地将她从地上抱起，她大声地喊，让呜嘶在去不眠大陆的路上也能听见她的声音：“你不能死！你听见了吗？！所有圣诞故事都有圆满的结局，所以你不能死！”
- 生命真正的陷阱在于几乎没有人是彻头彻尾的混蛋，也几乎没有人从未做过混蛋事。生命的难处就在于尽可能多地待在“不是混蛋”这一侧。
- “有时候当一个成年人是件很复杂的事情。”
- “很老的呜嘶。已经很累了，爱莎。”
- 一个王国是由住在里面的人所组成的。
- 他们努力地学习如何自处，如何生活，而不仅仅是生存。
',
)
[ info ] [ SESSION ] INIT array (
  'id' => '',
  'var_session_id' => '',
  'prefix' => 'think',
  'type' => '',
  'auto_start' => true,
)
[ info ] [ RUN ] app\admin\controller\Note->saveNote[ /var/www/html/daily/application/admin/controller/Note.php ]
[ info ] [ DB ] INIT mysql
[ info ] [ CACHE ] INIT File
[ info ] [ LOG ] INIT File
[ sql ] [ DB ] CONNECT:[ UseTime:0.000678s ] mysql:host=74.120.168.12;dbname=diary;charset=utf8
[ sql ] [ SQL ] SHOW COLUMNS FROM `note` [ RunTime:0.001355s ]
[ sql ] [ SQL ] UPDATE `note`  SET `title`='外婆的道歉信',`content`='# 外婆的道歉信\n*弗雷德里克·巴克曼*\n> 添加于 2018 年 11 月 4 日\n\n## 书摘\n- “我不傻，外婆，”她小声说，“我知道你今晚做的一切，都是为了让我忘记白天在学校发生的事。” 外婆踢着路面上的碎石，清了清喉咙。“我不希望你因为围巾的事记住今天，所以，我想与其那样，倒不如因为外婆闯进一家动物园而记住今天这个日子……”\n//“如果你摆脱不了坏事，就必须用更多‘好料’去盖过它。”改写记忆是一种很不错的超能力。\n- 外婆就是这么形容谎言的——真相的另一种版本。\n- “别大惊小怪的！老早之前人们就开始抽烟了，到现在为止，还是有许多健康得不得了的孩子出生。你这一代人忘记了，在没有过敏测试和其他什么狗屁玩意儿之前，人类已经活了上千年，直到你们出现，开始觉得自己如此重要。人类还住在洞穴里时，你以为他们洗猛犸皮的时候，会用到什么三十二度温水机洗模式吗？”\n- 每当妈妈和外婆开始争吵，爱莎就调大音量，假装她们都是无声电影里的演员。爱莎很小就学会，**如果自己选择音轨，生活就会变得好过些。**\n//尽管这并不是最好的方式，但这会是让自己最好过的方式。\n- 外婆总说，她的裙子熨得过分平整了。“如果你是那女人身上的衣服，你会紧张兮兮生怕被弄皱。”\n- 布里特-玛丽和肯特最不喜欢的便是民主流程中的“民主”部分。\n- 拥有一位外婆就像拥有一整支军队。外孙或外孙女因此获得一项特权：不管在什么情况下，都有人站在你这边，即使是你的错。事实上，特别是你错的时候。\n- 脑子迟钝的人总是说脑子灵敏的人有注意力问题。“蠢货们不明白，在他们想清楚一件事之前，聪明人早就想明白并开始想下一件事了。所以蠢货总是感到害怕，有攻击性。没有什么比一个聪明姑娘更让他们害怕的了。”\n- 爱莎痛恨星期一，星期一早上的学校是最糟糕的，因为那些喜欢追赶你的人憋了整个周末无人可追。星期一，爱莎储物柜里的字条也是最刻薄的。这或许是隐身能力不管用的另一个原因。\n- “如果可以，你应该自己选择战斗与否，但如果战斗找上了门，那就狠狠地对着他们的下面来一脚吧！”外婆曾这样说。爱莎照做了。虽然她讨厌暴力，但她很擅长打架，因为她进行过大量练习。这也是为什么对方需要这么多人来追她。\n- 没被追捕过的人总觉得一定会有一个原因：“他们不会无缘无故追着你跑，不是吗？你一定干了什么事惹到他们。”这话说得好像“压迫”这件事天生就是这么个原理。 试图向这种人解释是毫无意义的，就像跟佩戴兔脚（据说能带来好运）的人解释——如果兔脚真的那么灵验，那它们应该还长在兔子的身上——一样徒劳。\n- “只有与众不同的人才能改变世界，”外婆曾经这么说，“平庸的人什么屁事都改变不了。”\n- “我是个医生好吗？自从干了这行，我可不会允许自己有这种奢侈——选择我要救的对象。”\n- 那是你能梦见的最可怕的事，被你能想象到的最邪恶的东西操控，以你想都不敢想的数量一次次重演。”\n- “因为当你非常爱某个人时，很难学会和别人分享她。”\n- 爱莎的妈妈从没拥有过自己的妈妈，因为外婆总是在别处帮助他人。\n- 最好的故事从来不是完全真实的，也不是完全虚构的。\n- “永远别惹比你闲的人。”\n- 如果你不喜欢别人，那他们就伤害不到你。\n- “死亡最强大的力量不在于它能让人死去，而在于让留下来的人不想再活着。”\n- 恐惧就像是香烟，外婆说，困难的不是戒掉，而是不要开始。\n- 有时候很难跟不认识的人分担悲痛。\n- 人必须有信仰，外婆总是那么说。“相信什么并不重要，但你得愿意去相信，才能明白那些故事。” 也许到了最后，这就是一切的意义。\n- 如果你成为一名警官，就不能选择自己保护的对象。你必须努力保护所有人。”\n- “因为小时候，我什么都怕。她告诉我，应该去做我最害怕的事情。我应该嘲笑恐惧。”\n- “这是个游戏。他假装偷了你的鼻子。”\n- “这个国家愿意花数十亿在武器和战斗机上，但当这些经历过战争的男孩回家后，却没有人哪怕花五分钟聆听他们。”\n- 又下雪了，爱莎决定，即使她喜欢的人以前是个混蛋，她还是得学会继续喜欢他们。如果你一定要取消所有那些曾经是混蛋的人的资格，那你很快就没人可喜欢了。\n- “事实上，我的想象力很丰富。特别丰富。肯特总说他要跟德国人吃饭，或者飞机因为下雪延误了，或者他要顺路去办公室一趟。而我假装我相信了。我装得太好，连自己都相信了。”\n- 《灰姑娘》里的邪恶继母出场时，布里特-玛丽悄悄站起身，拉直裙子上的一道皱褶，走去玄关，开始哭泣，爱莎跟着她。 然后她们一起坐在箱子上，吃着巧克力圣诞老人。 因为，吃着巧克力圣诞老人时，虽然你还是会伤心，但会困难得多得多。\n- “我是说，你相不相信……天堂……什么的。”爱莎小声说。 阿尔夫喝了口咖啡，想了想。 “这事太复杂了。我是说，从逻辑上来说，天堂一定在没那么多人的地方。”他最后说。 爱莎想了想，意识到这件事的逻辑问题。对爱莎来说，天堂说到底就是外婆所在的地方，但对布里特-玛丽来说，也许天堂取决于外婆不在那里。\n- 当可怕的事情发生后，人们总会想：“如果我当时没有……”不久之后，坐上奥迪的那一刻，就将成为这样的时刻。\n- 她感觉爸爸轻柔地将她从地上抱起，她大声地喊，让呜嘶在去不眠大陆的路上也能听见她的声音：“你不能死！你听见了吗？！所有圣诞故事都有圆满的结局，所以你不能死！”\n- 生命真正的陷阱在于几乎没有人是彻头彻尾的混蛋，也几乎没有人从未做过混蛋事。生命的难处就在于尽可能多地待在“不是混蛋”这一侧。\n- “有时候当一个成年人是件很复杂的事情。”\n- “很老的呜嘶。已经很累了，爱莎。”\n- 一个王国是由住在里面的人所组成的。\n- 他们努力地学习如何自处，如何生活，而不仅仅是生存。\n',`groups`='Default',`p_id`=1  WHERE  `id` = 1 [ RunTime:0.000623s ]
---------------------------------------------------------------
[ 2018-11-19T21:47:44+08:00 ] 74.120.168.12 74.120.168.12 POST /daily/admin/note/updatenote/id/251.html
[ info ] qingrang.top/daily/admin/note/updatenote/id/251.html [运行时间：0.064462s][吞吐率：15.51req/s] [内存消耗：2,115.23kb] [文件加载：58]
[ info ] [ LANG ] /var/www/html/daily/thinkphp/lang/zh-cn.php
[ info ] [ ROUTE ] array (
  'type' => 'module',
  'module' => 
  array (
    0 => 'admin',
    1 => 'note',
    2 => 'updatenote',
  ),
)
[ info ] [ HEADER ] array (
  'host' => 'qingrang.top',
  'content-length' => '25128',
  'cache-control' => 'max-age=0',
  'origin' => 'http://qingrang.top',
  'upgrade-insecure-requests' => '1',
  'content-type' => 'application/x-www-form-urlencoded',
  'user-agent' => 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/70.0.3538.102 Safari/537.36',
  'accept' => 'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8',
  'referer' => 'http://qingrang.top/daily/admin/note/editnote/id/251.html',
  'accept-encoding' => 'gzip, deflate',
  'accept-language' => 'zh-CN,zh;q=0.9,la;q=0.8,en;q=0.7,lb;q=0.6',
  'cookie' => 'Hm_lvt_1769181352e9adc950166aada465644e=1541082864,1541122974,1541171416,1542098176; PHPSESSID=hg5qu5mntv21cu5j05evi6l7i2',
  'connection' => 'close',
)
[ info ] [ PARAM ] array (
  'summary' => '',
  'content' => '# 外婆的道歉信
*弗雷德里克·巴克曼*
> 添加于 2018 年 11 月 4 日

好好长大，做个与众不同的人，不要让任何人告诉你不应该不同。好好生活，好好大笑，好好做梦。生活是一场伟大的冒险。

“这是个游戏。他假装偷了你的鼻子。”

## 书摘
- “我不傻，外婆，”她小声说，“我知道你今晚做的一切，都是为了让我忘记白天在学校发生的事。” 外婆踢着路面上的碎石，清了清喉咙。“我不希望你因为围巾的事记住今天，所以，我想与其那样，倒不如因为外婆闯进一家动物园而记住今天这个日子……”
- “如果你摆脱不了坏事，就必须用更多‘好料’去盖过它。”
- 改写记忆是一种很不错的超能力。
//**如果你经历了一个很糟糕的日子，那么就用最最美好的事去覆写他吧。**
- 外婆就是这么形容谎言的——真相的另一种版本。
- “别大惊小怪的！老早之前人们就开始抽烟了，到现在为止，还是有许多健康得不得了的孩子出生。你这一代人忘记了，在没有过敏测试和其他什么狗屁玩意儿之前，人类已经活了上千年，直到你们出现，开始觉得自己如此重要。人类还住在洞穴里时，你以为他们洗猛犸皮的时候，会用到什么三十二度温水机洗模式吗？”
- 每当妈妈和外婆开始争吵，爱莎就调大音量，假装她们都是无声电影里的演员。爱莎很小就学会，**如果自己选择音轨，生活就会变得好过些。**
//尽管这并不是最好的方式，但这会是让自己最好过的方式。
- 外婆总说，她的裙子熨得过分平整了。“如果你是那女人身上的衣服，你会紧张兮兮生怕被弄皱。”
//若你买的东西是超出你负担的，就会变得小心翼翼，他不再是为了你的便利存在，而你要把他像个皇帝一样供着。
- 布里特-玛丽和肯特最不喜欢的便是民主流程中的“民主”部分。
- 拥有一位外婆就像拥有一整支军队。外孙或外孙女因此获得一项特权：不管在什么情况下，都有人站在你这边，即使是你的错。事实上，特别是你错的时候。
//在你错(不涉及大是大非)的时候有个人站在你这边确实是件很爽的事。
- 脑子迟钝的人总是说脑子灵敏的人有注意力问题。“蠢货们不明白，在他们想清楚一件事之前，聪明人早就想明白并开始想下一件事了。所以蠢货总是感到害怕，有攻击性。没有什么比一个聪明姑娘更让他们害怕的了。”
- 爱莎痛恨星期一，星期一早上的学校是最糟糕的，因为那些喜欢追赶你的人憋了整个周末无人可追。星期一，爱莎储物柜里的字条也是最刻薄的。这或许是隐身能力不管用的另一个原因。
//幼时「单纯」的暴力，真是傻逼。
- “如果可以，**你应该自己选择战斗与否，但如果战斗找上了门，那就狠狠地对着他们的下面来一脚吧！**”外婆曾这样说。爱莎照做了。虽然她讨厌暴力，但她很擅长打架，因为她进行过大量练习。这也是为什么对方需要这么多人来追她。
//希望拥有的是自主选择的权利，而不是被动接受。
- 没被追捕过的人总觉得一定会有一个原因：“他们不会无缘无故追着你跑，不是吗？你一定干了什么事惹到他们。”这话说得好像“压迫”这件事天生就是这么个原理。 试图向这种人解释是毫无意义的，就像跟佩戴兔脚（据说能带来好运）的人解释——如果兔脚真的那么灵验，那它们应该还长在兔子的身上——一样徒劳。
//这件事要你来做确实徒劳，但真正应该做这件事的人并没有在对的时间做这件事。
- “只有与众不同的人才能改变世界，”外婆曾经这么说，“平庸的人什么屁事都改变不了。”
//平庸，也没有什么不好，不用你去改变什么事，代价是你不得不接受一些事。
- “我是个医生好吗？自从干了这行，我可不会允许自己有这种奢侈——选择我要救的对象。”
//医者无疆，确实不能理解，若这个对象不值得救，那为什么要救。
- 那是你能梦见的最可怕的事，被你能想象到的最邪恶的东西操控，以你想都不敢想的数量一次次重演。”
- “因为当你非常爱某个人时，很难学会和别人分享她。”
- 爱莎的妈妈从没拥有过自己的妈妈，因为外婆总是在别处帮助他人。
//别人眼中的英雄，孩子眼中不称职的妈妈，世事总难两全。
- 最好的故事从来不是完全真实的，也不是完全虚构的。
//有现实的残酷，有虚幻的理想，虚实参半让你不至于绝望，能对未来抱有幻想，给人带来了希望。
- “永远别惹比你闲的人。”
//光脚的不怕穿鞋的，浑身铠甲，而毫无弱点的人才是最恐怖的。
- 如果你不喜欢别人，那他们就伤害不到你。
- “死亡最强大的力量不在于它能让人死去，而在于让留下来的人不想再活着。”
- 恐惧就像是香烟，外婆说，困难的不是戒掉，而是不要开始。
- 有时候很难跟不认识的人分担悲痛。
//但有时候跟不认识的人分担悲痛又是最容易的。
- 人必须有信仰，外婆总是那么说。“相信什么并不重要，但你得愿意去相信，才能明白那些故事。” 也许到了最后，这就是一切的意义。
- 如果你成为一名警官，就不能选择自己保护的对象。你必须努力保护所有人。
//咯，和前面的医生一样，不是医生，也不是警官，那就这样吧。
- “因为小时候，我什么都怕。她告诉我，应该去做我最害怕的事情。我应该嘲笑恐惧。”
- “这个国家愿意花数十亿在武器和战斗机上，但当这些经历过战争的男孩回家后，却没有人哪怕花五分钟聆听他们。”
//国家，着眼于大数据，那会考虑个体，尽管是很多很多的个体。
- 又下雪了，爱莎决定，即使她喜欢的人以前是个混蛋，她还是得学会继续喜欢他们。如果你一定要取消所有那些曾经是混蛋的人的资格，那你很快就没人可喜欢了。
- “事实上，我的想象力很丰富。特别丰富。肯特总说他要跟德国人吃饭，或者飞机因为下雪延误了，或者他要顺路去办公室一趟。而我假装我相信了。我装得太好，连自己都相信了。”
- 《灰姑娘》里的邪恶继母出场时，布里特-玛丽悄悄站起身，拉直裙子上的一道皱褶，走去玄关，开始哭泣，爱莎跟着她。 然后她们一起坐在箱子上，吃着巧克力圣诞老人。 因为，吃着巧克力圣诞老人时，虽然你还是会伤心，但会困难得多得多。
- “我是说，你相不相信……天堂……什么的。”爱莎小声说。 阿尔夫喝了口咖啡，想了想。 “这事太复杂了。我是说，从逻辑上来说，天堂一定在没那么多人的地方。”他最后说。 爱莎想了想，意识到这件事的逻辑问题。对爱莎来说，天堂说到底就是外婆所在的地方，但对布里特-玛丽来说，也许天堂取决于外婆不在那里。
- 当可怕的事情发生后，人们总会想：“如果我当时没有……”不久之后，坐上奥迪的那一刻，就将成为这样的时刻。
- 她感觉爸爸轻柔地将她从地上抱起，她大声地喊，让呜嘶在去不眠大陆的路上也能听见她的声音：“你不能死！你听见了吗？！所有圣诞故事都有圆满的结局，所以你不能死！”
//童话总是有着完美的结局，他们总是在人生的一个瞬间截然而止，将美好定格。
- 生命真正的陷阱在于几乎没有人是彻头彻尾的混蛋，也几乎没有人从未做过混蛋事。生命的难处就在于尽可能多地待在“不是混蛋”这一侧。
//尽可能多地待在“不是混蛋”这一侧。
- “有时候当一个成年人是件很复杂的事情。”
- “很老的呜嘶。已经很累了，爱莎。”
- 一个王国是由住在里面的人所组成的。
- 他们努力地学习如何自处，如何生活，而不仅仅是生存。',
  'groups' => 'BookReview',
  'showsel' => '0',
  'showse2' => '1',
  'id' => '251',
)
[ info ] [ SESSION ] INIT array (
  'id' => '',
  'var_session_id' => '',
  'prefix' => 'think',
  'type' => '',
  'auto_start' => true,
)
[ info ] [ RUN ] app\admin\controller\Note->updateNote[ /var/www/html/daily/application/admin/controller/Note.php ]
[ info ] [ DB ] INIT mysql
[ info ] [ CACHE ] INIT File
[ info ] [ LOG ] INIT File
[ sql ] [ DB ] CONNECT:[ UseTime:0.000548s ] mysql:host=74.120.168.12;dbname=diary;charset=utf8
[ sql ] [ SQL ] SHOW COLUMNS FROM `note` [ RunTime:0.001367s ]
[ sql ] [ SQL ] SELECT * FROM `note` WHERE  `id` = 251 LIMIT 1 [ RunTime:0.000473s ]
[ sql ] [ SQL ] SELECT `groups` FROM `note` WHERE  `id` = 251 LIMIT 1 [ RunTime:0.000379s ]
[ sql ] [ SQL ] SHOW COLUMNS FROM `groups` [ RunTime:0.000960s ]
[ sql ] [ SQL ] SELECT `parent_id` FROM `groups` WHERE  `groups` = 'BookReview' LIMIT 1 [ RunTime:0.000314s ]
[ sql ] [ SQL ] SELECT `groups` FROM `groups` WHERE  `id` = 0 LIMIT 1 [ RunTime:0.000349s ]
[ sql ] [ SQL ] SELECT `id` FROM `groups` WHERE  `groups` = 'BookReview' LIMIT 1 [ RunTime:0.000296s ]
[ sql ] [ SQL ] UPDATE `note`  SET `id`=251,`p_id`=21,`title`='外婆的道歉信\r',`content`='# 外婆的道歉信\r\n*弗雷德里克·巴克曼*\r\n> 添加于 2018 年 11 月 4 日\r\n\r\n好好长大，做个与众不同的人，不要让任何人告诉你不应该不同。好好生活，好好大笑，好好做梦。生活是一场伟大的冒险。\r\n\r\n“这是个游戏。他假装偷了你的鼻子。”\r\n\r\n## 书摘\r\n- “我不傻，外婆，”她小声说，“我知道你今晚做的一切，都是为了让我忘记白天在学校发生的事。” 外婆踢着路面上的碎石，清了清喉咙。“我不希望你因为围巾的事记住今天，所以，我想与其那样，倒不如因为外婆闯进一家动物园而记住今天这个日子……”\r\n- “如果你摆脱不了坏事，就必须用更多‘好料’去盖过它。”\r\n- 改写记忆是一种很不错的超能力。\r\n//**如果你经历了一个很糟糕的日子，那么就用最最美好的事去覆写他吧。**\r\n- 外婆就是这么形容谎言的——真相的另一种版本。\r\n- “别大惊小怪的！老早之前人们就开始抽烟了，到现在为止，还是有许多健康得不得了的孩子出生。你这一代人忘记了，在没有过敏测试和其他什么狗屁玩意儿之前，人类已经活了上千年，直到你们出现，开始觉得自己如此重要。人类还住在洞穴里时，你以为他们洗猛犸皮的时候，会用到什么三十二度温水机洗模式吗？”\r\n- 每当妈妈和外婆开始争吵，爱莎就调大音量，假装她们都是无声电影里的演员。爱莎很小就学会，**如果自己选择音轨，生活就会变得好过些。**\r\n//尽管这并不是最好的方式，但这会是让自己最好过的方式。\r\n- 外婆总说，她的裙子熨得过分平整了。“如果你是那女人身上的衣服，你会紧张兮兮生怕被弄皱。”\r\n//若你买的东西是超出你负担的，就会变得小心翼翼，他不再是为了你的便利存在，而你要把他像个皇帝一样供着。\r\n- 布里特-玛丽和肯特最不喜欢的便是民主流程中的“民主”部分。\r\n- 拥有一位外婆就像拥有一整支军队。外孙或外孙女因此获得一项特权：不管在什么情况下，都有人站在你这边，即使是你的错。事实上，特别是你错的时候。\r\n//在你错(不涉及大是大非)的时候有个人站在你这边确实是件很爽的事。\r\n- 脑子迟钝的人总是说脑子灵敏的人有注意力问题。“蠢货们不明白，在他们想清楚一件事之前，聪明人早就想明白并开始想下一件事了。所以蠢货总是感到害怕，有攻击性。没有什么比一个聪明姑娘更让他们害怕的了。”\r\n- 爱莎痛恨星期一，星期一早上的学校是最糟糕的，因为那些喜欢追赶你的人憋了整个周末无人可追。星期一，爱莎储物柜里的字条也是最刻薄的。这或许是隐身能力不管用的另一个原因。\r\n//幼时「单纯」的暴力，真是傻逼。\r\n- “如果可以，**你应该自己选择战斗与否，但如果战斗找上了门，那就狠狠地对着他们的下面来一脚吧！**”外婆曾这样说。爱莎照做了。虽然她讨厌暴力，但她很擅长打架，因为她进行过大量练习。这也是为什么对方需要这么多人来追她。\r\n//希望拥有的是自主选择的权利，而不是被动接受。\r\n- 没被追捕过的人总觉得一定会有一个原因：“他们不会无缘无故追着你跑，不是吗？你一定干了什么事惹到他们。”这话说得好像“压迫”这件事天生就是这么个原理。 试图向这种人解释是毫无意义的，就像跟佩戴兔脚（据说能带来好运）的人解释——如果兔脚真的那么灵验，那它们应该还长在兔子的身上——一样徒劳。\r\n//这件事要你来做确实徒劳，但真正应该做这件事的人并没有在对的时间做这件事。\r\n- “只有与众不同的人才能改变世界，”外婆曾经这么说，“平庸的人什么屁事都改变不了。”\r\n//平庸，也没有什么不好，不用你去改变什么事，代价是你不得不接受一些事。\r\n- “我是个医生好吗？自从干了这行，我可不会允许自己有这种奢侈——选择我要救的对象。”\r\n//医者无疆，确实不能理解，若这个对象不值得救，那为什么要救。\r\n- 那是你能梦见的最可怕的事，被你能想象到的最邪恶的东西操控，以你想都不敢想的数量一次次重演。”\r\n- “因为当你非常爱某个人时，很难学会和别人分享她。”\r\n- 爱莎的妈妈从没拥有过自己的妈妈，因为外婆总是在别处帮助他人。\r\n//别人眼中的英雄，孩子眼中不称职的妈妈，世事总难两全。\r\n- 最好的故事从来不是完全真实的，也不是完全虚构的。\r\n//有现实的残酷，有虚幻的理想，虚实参半让你不至于绝望，能对未来抱有幻想，给人带来了希望。\r\n- “永远别惹比你闲的人。”\r\n//光脚的不怕穿鞋的，浑身铠甲，而毫无弱点的人才是最恐怖的。\r\n- 如果你不喜欢别人，那他们就伤害不到你。\r\n- “死亡最强大的力量不在于它能让人死去，而在于让留下来的人不想再活着。”\r\n- 恐惧就像是香烟，外婆说，困难的不是戒掉，而是不要开始。\r\n- 有时候很难跟不认识的人分担悲痛。\r\n//但有时候跟不认识的人分担悲痛又是最容易的。\r\n- 人必须有信仰，外婆总是那么说。“相信什么并不重要，但你得愿意去相信，才能明白那些故事。” 也许到了最后，这就是一切的意义。\r\n- 如果你成为一名警官，就不能选择自己保护的对象。你必须努力保护所有人。\r\n//咯，和前面的医生一样，不是医生，也不是警官，那就这样吧。\r\n- “因为小时候，我什么都怕。她告诉我，应该去做我最害怕的事情。我应该嘲笑恐惧。”\r\n- “这个国家愿意花数十亿在武器和战斗机上，但当这些经历过战争的男孩回家后，却没有人哪怕花五分钟聆听他们。”\r\n//国家，着眼于大数据，那会考虑个体，尽管是很多很多的个体。\r\n- 又下雪了，爱莎决定，即使她喜欢的人以前是个混蛋，她还是得学会继续喜欢他们。如果你一定要取消所有那些曾经是混蛋的人的资格，那你很快就没人可喜欢了。\r\n- “事实上，我的想象力很丰富。特别丰富。肯特总说他要跟德国人吃饭，或者飞机因为下雪延误了，或者他要顺路去办公室一趟。而我假装我相信了。我装得太好，连自己都相信了。”\r\n- 《灰姑娘》里的邪恶继母出场时，布里特-玛丽悄悄站起身，拉直裙子上的一道皱褶，走去玄关，开始哭泣，爱莎跟着她。 然后她们一起坐在箱子上，吃着巧克力圣诞老人。 因为，吃着巧克力圣诞老人时，虽然你还是会伤心，但会困难得多得多。\r\n- “我是说，你相不相信……天堂……什么的。”爱莎小声说。 阿尔夫喝了口咖啡，想了想。 “这事太复杂了。我是说，从逻辑上来说，天堂一定在没那么多人的地方。”他最后说。 爱莎想了想，意识到这件事的逻辑问题。对爱莎来说，天堂说到底就是外婆所在的地方，但对布里特-玛丽来说，也许天堂取决于外婆不在那里。\r\n- 当可怕的事情发生后，人们总会想：“如果我当时没有……”不久之后，坐上奥迪的那一刻，就将成为这样的时刻。\r\n- 她感觉爸爸轻柔地将她从地上抱起，她大声地喊，让呜嘶在去不眠大陆的路上也能听见她的声音：“你不能死！你听见了吗？！所有圣诞故事都有圆满的结局，所以你不能死！”\r\n//童话总是有着完美的结局，他们总是在人生的一个瞬间截然而止，将美好定格。\r\n- 生命真正的陷阱在于几乎没有人是彻头彻尾的混蛋，也几乎没有人从未做过混蛋事。生命的难处就在于尽可能多地待在“不是混蛋”这一侧。\r\n//尽可能多地待在“不是混蛋”这一侧。\r\n- “有时候当一个成年人是件很复杂的事情。”\r\n- “很老的呜嘶。已经很累了，爱莎。”\r\n- 一个王国是由住在里面的人所组成的。\r\n- 他们努力地学习如何自处，如何生活，而不仅仅是生存。',`groups`='BookReview',`is_show`=0,`publish`=1,`summary`='',`gmt_modified`='2018-11-19'  WHERE  `id` = 251 [ RunTime:0.000621s ]
[ sql ] [ SQL ] SELECT COUNT(*) AS tp_count FROM `note` WHERE  `groups` = 'BookReview' LIMIT 1 [ RunTime:0.001339s ]
[ sql ] [ SQL ] UPDATE `groups`  SET `g_count`=32  WHERE  `groups` = 'BookReview' [ RunTime:0.000491s ]
[ sql ] [ SQL ] SELECT COUNT(*) AS tp_count FROM `note` WHERE  `groups` = 'BookReview' LIMIT 1 [ RunTime:0.001231s ]
[ sql ] [ SQL ] UPDATE `groups`  SET `g_count`=32  WHERE  `groups` = 'BookReview' [ RunTime:0.000311s ]
---------------------------------------------------------------
[ 2018-11-19T21:47:44+08:00 ] 74.120.168.12 74.120.168.12 GET /daily/admin/note/shownote/id/251.html
[ info ] qingrang.top/daily/admin/note/shownote/id/251.html [运行时间：0.054327s][吞吐率：18.41req/s] [内存消耗：1,989.16kb] [文件加载：55]
[ info ] [ LANG ] /var/www/html/daily/thinkphp/lang/zh-cn.php
[ info ] [ ROUTE ] array (
  'type' => 'module',
  'module' => 
  array (
    0 => 'admin',
    1 => 'note',
    2 => 'shownote',
  ),
)
[ info ] [ HEADER ] array (
  'host' => 'qingrang.top',
  'cache-control' => 'max-age=0',
  'upgrade-insecure-requests' => '1',
  'user-agent' => 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/70.0.3538.102 Safari/537.36',
  'accept' => 'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8',
  'referer' => 'http://qingrang.top/daily/admin/note/editnote/id/251.html',
  'accept-encoding' => 'gzip, deflate',
  'accept-language' => 'zh-CN,zh;q=0.9,la;q=0.8,en;q=0.7,lb;q=0.6',
  'cookie' => 'Hm_lvt_1769181352e9adc950166aada465644e=1541082864,1541122974,1541171416,1542098176; PHPSESSID=hg5qu5mntv21cu5j05evi6l7i2',
  'connection' => 'close',
)
[ info ] [ PARAM ] array (
  'id' => '251',
)
[ info ] [ SESSION ] INIT array (
  'id' => '',
  'var_session_id' => '',
  'prefix' => 'think',
  'type' => '',
  'auto_start' => true,
)
[ info ] [ RUN ] app\admin\controller\Note->showNote[ /var/www/html/daily/application/admin/controller/Note.php ]
[ info ] [ DB ] INIT mysql
[ info ] [ VIEW ] /var/www/html/daily/application/admin/view/note/shownote.html [ array (
  0 => 'note',
  1 => 'groups',
) ]
[ info ] [ LOG ] INIT File
[ sql ] [ DB ] CONNECT:[ UseTime:0.000446s ] mysql:host=74.120.168.12;dbname=diary;charset=utf8
[ sql ] [ SQL ] SHOW COLUMNS FROM `note` [ RunTime:0.001213s ]
[ sql ] [ SQL ] SELECT * FROM `note` WHERE  `id` = 251 LIMIT 1 [ RunTime:0.000425s ]
[ sql ] [ SQL ] SHOW COLUMNS FROM `groups` [ RunTime:0.000818s ]
[ sql ] [ SQL ] SELECT * FROM `groups` [ RunTime:0.000297s ]
